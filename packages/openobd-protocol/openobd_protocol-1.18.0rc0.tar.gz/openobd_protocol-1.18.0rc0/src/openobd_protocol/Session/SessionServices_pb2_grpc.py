# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2
from openobd_protocol.Session.Messages import ServiceResult_pb2 as openobd__protocol_dot_Session_dot_Messages_dot_ServiceResult__pb2
from openobd_protocol.Session.Messages import Session_pb2 as openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2


class sessionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.authenticate = channel.unary_unary(
                '/openOBD.v1.session/authenticate',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.FromString,
                )
        self.isAvailable = channel.unary_unary(
                '/openOBD.v1.session/isAvailable',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.openSessionTokenStream = channel.unary_stream(
                '/openOBD.v1.session/openSessionTokenStream',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.FromString,
                )
        self.startContext = channel.unary_unary(
                '/openOBD.v1.session/startContext',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.FromString,
                )
        self.registerFunctionId = channel.unary_unary(
                '/openOBD.v1.session/registerFunctionId',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.FunctionId.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getFunctionId = channel.unary_unary(
                '/openOBD.v1.session/getFunctionId',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.FunctionId.FromString,
                )
        self.monitorContext = channel.unary_stream(
                '/openOBD.v1.session/monitorContext',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.FromString,
                )
        self.setFunctionArgument = channel.unary_unary(
                '/openOBD.v1.session/setFunctionArgument',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.setFunctionResult = channel.unary_unary(
                '/openOBD.v1.session/setFunctionResult',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getVariableList = channel.unary_unary(
                '/openOBD.v1.session/getVariableList',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.VariableList.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.VariableList.FromString,
                )
        self.setVariable = channel.unary_unary(
                '/openOBD.v1.session/setVariable',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getVariable = channel.unary_unary(
                '/openOBD.v1.session/getVariable',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.FromString,
                )
        self.deleteVariable = channel.unary_unary(
                '/openOBD.v1.session/deleteVariable',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getConfigurationList = channel.unary_unary(
                '/openOBD.v1.session/getConfigurationList',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.ConfigurationList.FromString,
                )
        self.finish = channel.unary_unary(
                '/openOBD.v1.session/finish',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_ServiceResult__pb2.ServiceResult.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )


class sessionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def authenticate(self, request, context):
        """
        The `authenticate()` rpc call is used to "claim" an openOBD session. Once an openOBD session is created and attached to
        a running connection on the Jifeline network it is in an 'available' state. The only allowed and also required call to continue with
        this session is this `authenticate()` call. It needs an initial bearer token (authentication token) that is present in the `SessionInfo` message.
        <br/>
        Once this call has been made, any subsequent calls need to be made using a new bearer token that is contained in the `SessionToken` response.
        It is advised to first set up a SessionToken stream using the `openSessionTokenStream()` rpc call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isAvailable(self, request, context):
        """
        The `isAvailable()` method can be called just like the `authenticate()` method. Only, it does not authenticate. It can be used to check whether the
        session is in the 'available' state. If it is not, this call will result in an exception. It needs, like the `authenticate()` call an initial bearer token (authentication token)
        that is present in the `SessionInfo` message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openSessionTokenStream(self, request, context):
        """
        The `openSessionTokenStream()` rpc call is used to open a continuous stream of `SessionToken` messages. When a new `SessionToken` is received on this stream
        the subsequent calls that are being made on an openOBD session need to incorporate the freshly received token as their bearer token in the header of their gRPC calls.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startContext(self, request, context):
        """
        The `startContext()` rpc call can be used to prepare the handover of an openOBD session to another service that may perform
        a diagnostic function.

        This function is executed within its own function context. The `FunctionCall` message contains the definition of the function id that
        will be executed. It will also get its own function instance id that is unique identifier that can be used to address this specific function execution.

        This rpc call can *only* be made within an openOBD session that is in the 'available' state. It is not possible to create a context on an openOBD session when it is in the 'active' state.
        The 'active' state needs to be released first using the `release()` rpc call.

        This rpc call can only be made *once* every time the openOBD session transitions to 'available' state. Any subsequent call
        to `startContext()` while still being within the 'available' state will be rejected.
        This allows a intermediary party like a function broker to administer which function is being executed.

        The `startContext()` call:
        - is not required, i.e. it is possible to run operations that are not in the context of a an external function
        - when it is used, the call should be made when the openOBD session is in the 'available' state
        - when running within the context of a function the `finish()` call will no longer end the openOBD session, but it will end the function context. Another additional `finish()` call is needed to end the openOBD session.

        When there is already a function context, this function will raise an exception

        Multiple calls can be made to this function, as long as every FunctionCall is terminated with a 'release()' or 'finish()' call.

        A successful call to this `startContext()` rpc will yield a fresh SessionToken of a specific type. This SessionToken will only allow any further calls to be made to the `monitorContext()` rpc.
        This allows the main process to monitor a created context for a session that is running by another process or host.

        Here are some example procedures:

        Serial external function call (y called after x)
        - startContext(function x)
        - authenticate()
        - finish() // Finish the function context of x
        - startContext(function y)
        - authenticate()
        - finish() // Finish the function context of y
        - finish() // Finish the default context and openOBD session

        Nested external function call (y called by x)
        - startContext(function x)
        - startContext(function y)
        - authenticate()
        - finish() // Finish the function context of y
        - finish() // Finish the function context of x
        - finish() // Finish the default context and openOBD session

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerFunctionId(self, request, context):
        """
        This `registerFunction()` call links a function id to the current running context. The function broker will use it for correct administration of which functions are being called.
        If this call is repeated within the same session context it will:
        - succeed when it uses the same function id
        - fail when it uses a different function id
        The function broker uses this to make sure that the function that is requested by a client matches the function that is registered in the context that is passed in the function call.
        If the function broker fails to successfully call the `registerFunction()` method it will result in a failing function call.

        In the case that the function broker is the first to call `registerFunction()` on a session context, it registers the function id and continues successfully.

        When the `authenticate()` call is made without first calling the `registerFunction()` method, then the registered function id will be set to match the uniquely created session context id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFunctionId(self, request, context):
        """
        The `getFunctionId()` call retrieves the registered function id of the current context. Value might be an empty string when no function id has been registered yet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def monitorContext(self, request, context):
        """
        This function can be used to monitor the execution of a procedure in a contextualized openOBD session. This procedure might be running on another host.
        So, it is being called before handing over the SessionInfo to another process to execute a specific function.

        A special SessionToken must be sent in the header with every request. This SessionToken is retrieved by the `startContext()` rpc call.
        The incoming stream will provide the caller with regular updates on the state of the openOBD session context.openOBD session state.
        A context can be closed by calling the `finish()` rpc. When this is done by the process that is running a procedure in the context.

        A specific update will contain (just like in the `openSessionTokenStream()` rpc) a regular update of the SessionToken. The caller needs to
        update its SessionToken for the `monitorContext()` function call.

        When the FunctionBroker service is used, the FunctionBroker will make the monitorContext() method on behalf of the
        requester of the runFunction() method

        The FunctionBroker will typically open this stream to an openOBD session to monitor the state of a function call
        When the function is finished it will yield a final SessionToken (as part of the SessionContext message) that gives back control over the openOBD session in 'available' state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFunctionArgument(self, request, context):
        """
        Set Function arguments for the newly created context
        The header bearer token identifies which session context the argument should be place into
        This function can only be called as long as the target context did not authenticate() yet (is not in 'active' state)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFunctionResult(self, request, context):
        """
        Set Function results and store them in the calling context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVariableList(self, request, context):
        """
        Obtain the variables that were set by a particular session context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setVariable(self, request, context):
        """
        The `setVariable()` sets a Variable in the function context, session context.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVariable(self, request, context):
        """
        The `getVariable()` call retrieves a Variable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteVariable(self, request, context):
        """
        The `deleteVariable()` call can only be made on the current context or the global context.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getConfigurationList(self, request, context):
        """
        The `getConfigurationList()` call will send all configured busses and channels and then close the stream.
        The client can use these messages to match the local configuration with the remote openOBD session configuration.
        This is, for example, useful when one specialized function sets up the communication with a specific module, unlocks it, and then hands over the communication control to another function.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finish(self, request, context):
        """
        The `finish(ServiceResult)` rpc call is used to gracefully finish an openOBD session. The `ServiceResult` argument message indicates whether the service was executed successfully.
        A new `authenticate()` rpc call can be made on the session using a fresh 'SessionInfo' message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_sessionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticate,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.SerializeToString,
            ),
            'isAvailable': grpc.unary_unary_rpc_method_handler(
                    servicer.isAvailable,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'openSessionTokenStream': grpc.unary_stream_rpc_method_handler(
                    servicer.openSessionTokenStream,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.SerializeToString,
            ),
            'startContext': grpc.unary_unary_rpc_method_handler(
                    servicer.startContext,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.SerializeToString,
            ),
            'registerFunctionId': grpc.unary_unary_rpc_method_handler(
                    servicer.registerFunctionId,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.FunctionId.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getFunctionId': grpc.unary_unary_rpc_method_handler(
                    servicer.getFunctionId,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.FunctionId.SerializeToString,
            ),
            'monitorContext': grpc.unary_stream_rpc_method_handler(
                    servicer.monitorContext,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.SerializeToString,
            ),
            'setFunctionArgument': grpc.unary_unary_rpc_method_handler(
                    servicer.setFunctionArgument,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'setFunctionResult': grpc.unary_unary_rpc_method_handler(
                    servicer.setFunctionResult,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getVariableList': grpc.unary_unary_rpc_method_handler(
                    servicer.getVariableList,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.VariableList.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.VariableList.SerializeToString,
            ),
            'setVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.setVariable,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.getVariable,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
            ),
            'deleteVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteVariable,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getConfigurationList': grpc.unary_unary_rpc_method_handler(
                    servicer.getConfigurationList,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.ConfigurationList.SerializeToString,
            ),
            'finish': grpc.unary_unary_rpc_method_handler(
                    servicer.finish,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_ServiceResult__pb2.ServiceResult.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.session', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class session(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/authenticate',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isAvailable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/isAvailable',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openSessionTokenStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openOBD.v1.session/openSessionTokenStream',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/startContext',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerFunctionId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/registerFunctionId',
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.FunctionId.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFunctionId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/getFunctionId',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.FunctionId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def monitorContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openOBD.v1.session/monitorContext',
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionContext.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setFunctionArgument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/setFunctionArgument',
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setFunctionResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/setFunctionResult',
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getVariableList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/getVariableList',
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.VariableList.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.VariableList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/setVariable',
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/getVariable',
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/deleteVariable',
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getConfigurationList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/getConfigurationList',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.ConfigurationList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/finish',
            openobd__protocol_dot_Session_dot_Messages_dot_ServiceResult__pb2.ServiceResult.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
