# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from typing import Any
from ephor_server_ti_client.models.code_execution_request import CodeExecutionRequest
from ephor_server_ti_client.models.code_execution_response import CodeExecutionResponse
from ephor_server_ti_client.models.interact_request import InteractRequest
from ephor_server_ti_client.models.sandbox_request import SandboxRequest
from ephor_server_ti_client.models.sandbox_response import SandboxResponse

from ephor_server_ti_client.api_client import ApiClient, RequestSerialized
from ephor_server_ti_client.api_response import ApiResponse
from ephor_server_ti_client.rest import RESTResponseType


class ArtifactsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_or_connect_sandbox_api_v1_interact_tasks_artifacts_sandbox_post_1(
        self,
        sandbox_request: SandboxRequest,
    ) -> SandboxResponse:
        """Create Or Connect Sandbox

        Create or connect to a sandbox environment and return the sandbox ID.

        :param sandbox_request: (required)
        :type sandbox_request: SandboxRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_or_connect_sandbox_api_v1_interact_tasks_artifacts_sandbox_post_1_serialize(
            sandbox_request=sandbox_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SandboxResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_or_connect_sandbox_api_v1_interact_tasks_artifacts_sandbox_post_1_with_http_info(
        self,
        sandbox_request: SandboxRequest,
    ) -> ApiResponse[SandboxResponse]:
        """Create Or Connect Sandbox

        Create or connect to a sandbox environment and return the sandbox ID.

        :param sandbox_request: (required)
        :type sandbox_request: SandboxRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_or_connect_sandbox_api_v1_interact_tasks_artifacts_sandbox_post_1_serialize(
            sandbox_request=sandbox_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SandboxResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_or_connect_sandbox_api_v1_interact_tasks_artifacts_sandbox_post_1_without_preload_content(
        self,
        sandbox_request: SandboxRequest,
    ) -> RESTResponseType:
        """Create Or Connect Sandbox

        Create or connect to a sandbox environment and return the sandbox ID.

        :param sandbox_request: (required)
        :type sandbox_request: SandboxRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_or_connect_sandbox_api_v1_interact_tasks_artifacts_sandbox_post_1_serialize(
            sandbox_request=sandbox_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SandboxResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _create_or_connect_sandbox_api_v1_interact_tasks_artifacts_sandbox_post_1_serialize(
        self,
        sandbox_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if sandbox_request is not None:
            _body_params = sandbox_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/interact/tasks/artifacts/sandbox',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def execute_code_api_v1_interact_tasks_artifacts_execute_post_1(
        self,
        code_execution_request: CodeExecutionRequest,
    ) -> CodeExecutionResponse:
        """Execute Code

        Execute code in a sandbox environment and return the URL for viewing the result.

        :param code_execution_request: (required)
        :type code_execution_request: CodeExecutionRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._execute_code_api_v1_interact_tasks_artifacts_execute_post_1_serialize(
            code_execution_request=code_execution_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CodeExecutionResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def execute_code_api_v1_interact_tasks_artifacts_execute_post_1_with_http_info(
        self,
        code_execution_request: CodeExecutionRequest,
    ) -> ApiResponse[CodeExecutionResponse]:
        """Execute Code

        Execute code in a sandbox environment and return the URL for viewing the result.

        :param code_execution_request: (required)
        :type code_execution_request: CodeExecutionRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._execute_code_api_v1_interact_tasks_artifacts_execute_post_1_serialize(
            code_execution_request=code_execution_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CodeExecutionResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def execute_code_api_v1_interact_tasks_artifacts_execute_post_1_without_preload_content(
        self,
        code_execution_request: CodeExecutionRequest,
    ) -> RESTResponseType:
        """Execute Code

        Execute code in a sandbox environment and return the URL for viewing the result.

        :param code_execution_request: (required)
        :type code_execution_request: CodeExecutionRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._execute_code_api_v1_interact_tasks_artifacts_execute_post_1_serialize(
            code_execution_request=code_execution_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CodeExecutionResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _execute_code_api_v1_interact_tasks_artifacts_execute_post_1_serialize(
        self,
        code_execution_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if code_execution_request is not None:
            _body_params = code_execution_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/interact/tasks/artifacts/execute',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def generate_react_api_v1_interact_tasks_artifacts_generate_react_post_1(
        self,
        interact_request: InteractRequest,
    ) -> object:
        """Generate React

        Generate React JS code based on the given request.

        :param interact_request: (required)
        :type interact_request: InteractRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_react_api_v1_interact_tasks_artifacts_generate_react_post_1_serialize(
            interact_request=interact_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def generate_react_api_v1_interact_tasks_artifacts_generate_react_post_1_with_http_info(
        self,
        interact_request: InteractRequest,
    ) -> ApiResponse[object]:
        """Generate React

        Generate React JS code based on the given request.

        :param interact_request: (required)
        :type interact_request: InteractRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_react_api_v1_interact_tasks_artifacts_generate_react_post_1_serialize(
            interact_request=interact_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def generate_react_api_v1_interact_tasks_artifacts_generate_react_post_1_without_preload_content(
        self,
        interact_request: InteractRequest,
    ) -> RESTResponseType:
        """Generate React

        Generate React JS code based on the given request.

        :param interact_request: (required)
        :type interact_request: InteractRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_react_api_v1_interact_tasks_artifacts_generate_react_post_1_serialize(
            interact_request=interact_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _generate_react_api_v1_interact_tasks_artifacts_generate_react_post_1_serialize(
        self,
        interact_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if interact_request is not None:
            _body_params = interact_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/interact/tasks/artifacts/generate/react',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def generate_streamlit_api_v1_interact_tasks_artifacts_generate_streamlit_post_1(
        self,
        interact_request: InteractRequest,
    ) -> object:
        """Generate Streamlit

        Generate Streamlit code based on the given request.

        :param interact_request: (required)
        :type interact_request: InteractRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_streamlit_api_v1_interact_tasks_artifacts_generate_streamlit_post_1_serialize(
            interact_request=interact_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def generate_streamlit_api_v1_interact_tasks_artifacts_generate_streamlit_post_1_with_http_info(
        self,
        interact_request: InteractRequest,
    ) -> ApiResponse[object]:
        """Generate Streamlit

        Generate Streamlit code based on the given request.

        :param interact_request: (required)
        :type interact_request: InteractRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_streamlit_api_v1_interact_tasks_artifacts_generate_streamlit_post_1_serialize(
            interact_request=interact_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def generate_streamlit_api_v1_interact_tasks_artifacts_generate_streamlit_post_1_without_preload_content(
        self,
        interact_request: InteractRequest,
    ) -> RESTResponseType:
        """Generate Streamlit

        Generate Streamlit code based on the given request.

        :param interact_request: (required)
        :type interact_request: InteractRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_streamlit_api_v1_interact_tasks_artifacts_generate_streamlit_post_1_serialize(
            interact_request=interact_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _generate_streamlit_api_v1_interact_tasks_artifacts_generate_streamlit_post_1_serialize(
        self,
        interact_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if interact_request is not None:
            _body_params = interact_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/interact/tasks/artifacts/generate/streamlit',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


