# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TranscriptMessage(BaseModel):
    """
    TranscriptMessage
    """ # noqa: E501
    id: StrictStr
    created_at: StrictStr
    participant_id: StrictStr
    participant_name: StrictStr
    content: StrictStr
    transcript_id: Optional[StrictStr] = None
    account_id: Optional[StrictStr] = None
    mapped_question_id: Optional[StrictStr] = None
    seconds_elapsed_on_question: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "participant_id", "participant_name", "content", "transcript_id", "account_id", "mapped_question_id", "seconds_elapsed_on_question"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranscriptMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if transcript_id (nullable) is None
        # and model_fields_set contains the field
        if self.transcript_id is None and "transcript_id" in self.model_fields_set:
            _dict['transcript_id'] = None

        # set to None if account_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_id is None and "account_id" in self.model_fields_set:
            _dict['account_id'] = None

        # set to None if mapped_question_id (nullable) is None
        # and model_fields_set contains the field
        if self.mapped_question_id is None and "mapped_question_id" in self.model_fields_set:
            _dict['mapped_question_id'] = None

        # set to None if seconds_elapsed_on_question (nullable) is None
        # and model_fields_set contains the field
        if self.seconds_elapsed_on_question is None and "seconds_elapsed_on_question" in self.model_fields_set:
            _dict['seconds_elapsed_on_question'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranscriptMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "participant_id": obj.get("participant_id"),
            "participant_name": obj.get("participant_name"),
            "content": obj.get("content"),
            "transcript_id": obj.get("transcript_id"),
            "account_id": obj.get("account_id"),
            "mapped_question_id": obj.get("mapped_question_id"),
            "seconds_elapsed_on_question": obj.get("seconds_elapsed_on_question")
        })
        return _obj


