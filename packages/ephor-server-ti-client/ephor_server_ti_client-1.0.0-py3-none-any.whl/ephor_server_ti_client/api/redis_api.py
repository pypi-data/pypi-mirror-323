# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from typing import Any
from ephor_server_ti_client.models.breadcrumb_request import BreadcrumbRequest
from ephor_server_ti_client.models.redis_data import RedisData

from ephor_server_ti_client.api_client import ApiClient, RequestSerialized
from ephor_server_ti_client.api_response import ApiResponse
from ephor_server_ti_client.rest import RESTResponseType


class RedisApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_bot_dispatch_session_api_v1_redis_botdispatch_session_get(
        self,
    ) -> object:
        """Get Bot Dispatch Session

        Get a bot dispatch session ID for the authenticated user.

        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bot_dispatch_session_api_v1_redis_botdispatch_session_get_serialize(
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_bot_dispatch_session_api_v1_redis_botdispatch_session_get_with_http_info(
        self,
    ) -> ApiResponse[object]:
        """Get Bot Dispatch Session

        Get a bot dispatch session ID for the authenticated user.

        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bot_dispatch_session_api_v1_redis_botdispatch_session_get_serialize(
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_bot_dispatch_session_api_v1_redis_botdispatch_session_get_without_preload_content(
        self,
    ) -> RESTResponseType:
        """Get Bot Dispatch Session

        Get a bot dispatch session ID for the authenticated user.

        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bot_dispatch_session_api_v1_redis_botdispatch_session_get_serialize(
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _get_bot_dispatch_session_api_v1_redis_botdispatch_session_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/redis/botdispatch/session',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_breadcrumbs_api_v1_redis_breadcrumbs_types_post(
        self,
        breadcrumb_request: BreadcrumbRequest,
    ) -> object:
        """Get Breadcrumbs


        :param breadcrumb_request: (required)
        :type breadcrumb_request: BreadcrumbRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_breadcrumbs_api_v1_redis_breadcrumbs_types_post_serialize(
            breadcrumb_request=breadcrumb_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_breadcrumbs_api_v1_redis_breadcrumbs_types_post_with_http_info(
        self,
        breadcrumb_request: BreadcrumbRequest,
    ) -> ApiResponse[object]:
        """Get Breadcrumbs


        :param breadcrumb_request: (required)
        :type breadcrumb_request: BreadcrumbRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_breadcrumbs_api_v1_redis_breadcrumbs_types_post_serialize(
            breadcrumb_request=breadcrumb_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_breadcrumbs_api_v1_redis_breadcrumbs_types_post_without_preload_content(
        self,
        breadcrumb_request: BreadcrumbRequest,
    ) -> RESTResponseType:
        """Get Breadcrumbs


        :param breadcrumb_request: (required)
        :type breadcrumb_request: BreadcrumbRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_breadcrumbs_api_v1_redis_breadcrumbs_types_post_serialize(
            breadcrumb_request=breadcrumb_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _get_breadcrumbs_api_v1_redis_breadcrumbs_types_post_serialize(
        self,
        breadcrumb_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if breadcrumb_request is not None:
            _body_params = breadcrumb_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/redis/breadcrumbs/types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def set_bot_dispatch_session_api_v1_redis_botdispatch_session_post(
        self,
        redis_data: RedisData,
    ) -> object:
        """Set Bot Dispatch Session

        Store a bot dispatch session ID for the authenticated user.

        :param redis_data: (required)
        :type redis_data: RedisData
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_bot_dispatch_session_api_v1_redis_botdispatch_session_post_serialize(
            redis_data=redis_data,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def set_bot_dispatch_session_api_v1_redis_botdispatch_session_post_with_http_info(
        self,
        redis_data: RedisData,
    ) -> ApiResponse[object]:
        """Set Bot Dispatch Session

        Store a bot dispatch session ID for the authenticated user.

        :param redis_data: (required)
        :type redis_data: RedisData
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_bot_dispatch_session_api_v1_redis_botdispatch_session_post_serialize(
            redis_data=redis_data,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def set_bot_dispatch_session_api_v1_redis_botdispatch_session_post_without_preload_content(
        self,
        redis_data: RedisData,
    ) -> RESTResponseType:
        """Set Bot Dispatch Session

        Store a bot dispatch session ID for the authenticated user.

        :param redis_data: (required)
        :type redis_data: RedisData
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_bot_dispatch_session_api_v1_redis_botdispatch_session_post_serialize(
            redis_data=redis_data,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _set_bot_dispatch_session_api_v1_redis_botdispatch_session_post_serialize(
        self,
        redis_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if redis_data is not None:
            _body_params = redis_data


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/redis/botdispatch/session',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_api_v1_redis_store_post(
        self,
        redis_data: RedisData,
    ) -> None:
        """Store

        Store data in Redis queue using the store_library_data method

        :param redis_data: (required)
        :type redis_data: RedisData
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_api_v1_redis_store_post_serialize(
            redis_data=redis_data,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_api_v1_redis_store_post_with_http_info(
        self,
        redis_data: RedisData,
    ) -> ApiResponse[None]:
        """Store

        Store data in Redis queue using the store_library_data method

        :param redis_data: (required)
        :type redis_data: RedisData
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_api_v1_redis_store_post_serialize(
            redis_data=redis_data,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_api_v1_redis_store_post_without_preload_content(
        self,
        redis_data: RedisData,
    ) -> RESTResponseType:
        """Store

        Store data in Redis queue using the store_library_data method

        :param redis_data: (required)
        :type redis_data: RedisData
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_api_v1_redis_store_post_serialize(
            redis_data=redis_data,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _store_api_v1_redis_store_post_serialize(
        self,
        redis_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if redis_data is not None:
            _body_params = redis_data


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/redis/store',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


