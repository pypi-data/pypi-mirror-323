# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr
from typing import Any, Dict, List
from ephor_server_ti_client.models.project_with_feed import ProjectWithFeed

from ephor_server_ti_client.api_client import ApiClient, RequestSerialized
from ephor_server_ti_client.api_response import ApiResponse
from ephor_server_ti_client.rest import RESTResponseType


class RecommendationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_influencers_profiles_api_v1_recommendation_influencers_profiles_post(
        self,
        request_body: Dict[str, List[StrictStr]],
    ) -> object:
        """Get Influencers Profiles


        :param request_body: (required)
        :type request_body: Dict[str, List[str]]
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_influencers_profiles_api_v1_recommendation_influencers_profiles_post_serialize(
            request_body=request_body,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_influencers_profiles_api_v1_recommendation_influencers_profiles_post_with_http_info(
        self,
        request_body: Dict[str, List[StrictStr]],
    ) -> ApiResponse[object]:
        """Get Influencers Profiles


        :param request_body: (required)
        :type request_body: Dict[str, List[str]]
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_influencers_profiles_api_v1_recommendation_influencers_profiles_post_serialize(
            request_body=request_body,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_influencers_profiles_api_v1_recommendation_influencers_profiles_post_without_preload_content(
        self,
        request_body: Dict[str, List[StrictStr]],
    ) -> RESTResponseType:
        """Get Influencers Profiles


        :param request_body: (required)
        :type request_body: Dict[str, List[str]]
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_influencers_profiles_api_v1_recommendation_influencers_profiles_post_serialize(
            request_body=request_body,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _get_influencers_profiles_api_v1_recommendation_influencers_profiles_post_serialize(
        self,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/recommendation/influencers-profiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_projects_with_feeds_api_v1_recommendation_projects_with_feeds_get(
        self,
    ) -> List[ProjectWithFeed]:
        """Get Projects With Feeds

        Returns a list of projects that have both a BrainLift and Feed content, sorted by most recent feed updates.

        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_projects_with_feeds_api_v1_recommendation_projects_with_feeds_get_serialize(
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectWithFeed]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_projects_with_feeds_api_v1_recommendation_projects_with_feeds_get_with_http_info(
        self,
    ) -> ApiResponse[List[ProjectWithFeed]]:
        """Get Projects With Feeds

        Returns a list of projects that have both a BrainLift and Feed content, sorted by most recent feed updates.

        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_projects_with_feeds_api_v1_recommendation_projects_with_feeds_get_serialize(
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectWithFeed]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_projects_with_feeds_api_v1_recommendation_projects_with_feeds_get_without_preload_content(
        self,
    ) -> RESTResponseType:
        """Get Projects With Feeds

        Returns a list of projects that have both a BrainLift and Feed content, sorted by most recent feed updates.

        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_projects_with_feeds_api_v1_recommendation_projects_with_feeds_get_serialize(
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectWithFeed]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _get_projects_with_feeds_api_v1_recommendation_projects_with_feeds_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/recommendation/projects-with-feeds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recommendation_api_v1_recommendation_feed_get(
        self,
        project_id: StrictStr,
    ) -> object:
        """Get Recommendation


        :param project_id: (required)
        :type project_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommendation_api_v1_recommendation_feed_get_serialize(
            project_id=project_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recommendation_api_v1_recommendation_feed_get_with_http_info(
        self,
        project_id: StrictStr,
    ) -> ApiResponse[object]:
        """Get Recommendation


        :param project_id: (required)
        :type project_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommendation_api_v1_recommendation_feed_get_serialize(
            project_id=project_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recommendation_api_v1_recommendation_feed_get_without_preload_content(
        self,
        project_id: StrictStr,
    ) -> RESTResponseType:
        """Get Recommendation


        :param project_id: (required)
        :type project_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommendation_api_v1_recommendation_feed_get_serialize(
            project_id=project_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _get_recommendation_api_v1_recommendation_feed_get_serialize(
        self,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/recommendation/feed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recommendation_api_v1_recommendation_feed_post(
        self,
        project_id: StrictStr,
    ) -> object:
        """Get Recommendation


        :param project_id: (required)
        :type project_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommendation_api_v1_recommendation_feed_post_serialize(
            project_id=project_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recommendation_api_v1_recommendation_feed_post_with_http_info(
        self,
        project_id: StrictStr,
    ) -> ApiResponse[object]:
        """Get Recommendation


        :param project_id: (required)
        :type project_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommendation_api_v1_recommendation_feed_post_serialize(
            project_id=project_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recommendation_api_v1_recommendation_feed_post_without_preload_content(
        self,
        project_id: StrictStr,
    ) -> RESTResponseType:
        """Get Recommendation


        :param project_id: (required)
        :type project_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommendation_api_v1_recommendation_feed_post_serialize(
            project_id=project_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _get_recommendation_api_v1_recommendation_feed_post_serialize(
        self,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/recommendation/feed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def trigger_recommendation_workflow_api_v1_recommendation_cron_trigger_post(
        self,
        trigger_id: StrictStr,
    ) -> object:
        """Trigger Recommendation Workflow


        :param trigger_id: (required)
        :type trigger_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._trigger_recommendation_workflow_api_v1_recommendation_cron_trigger_post_serialize(
            trigger_id=trigger_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def trigger_recommendation_workflow_api_v1_recommendation_cron_trigger_post_with_http_info(
        self,
        trigger_id: StrictStr,
    ) -> ApiResponse[object]:
        """Trigger Recommendation Workflow


        :param trigger_id: (required)
        :type trigger_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._trigger_recommendation_workflow_api_v1_recommendation_cron_trigger_post_serialize(
            trigger_id=trigger_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def trigger_recommendation_workflow_api_v1_recommendation_cron_trigger_post_without_preload_content(
        self,
        trigger_id: StrictStr,
    ) -> RESTResponseType:
        """Trigger Recommendation Workflow


        :param trigger_id: (required)
        :type trigger_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._trigger_recommendation_workflow_api_v1_recommendation_cron_trigger_post_serialize(
            trigger_id=trigger_id,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        return response_data.response


    def _trigger_recommendation_workflow_api_v1_recommendation_cron_trigger_post_serialize(
        self,
        trigger_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if trigger_id is not None:
            
            _query_params.append(('triggerId', trigger_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/recommendation/cron-trigger',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


