# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateDocumentRequest(BaseModel):
    """
    UpdateDocumentRequest
    """ # noqa: E501
    starred: Optional[StrictBool] = None
    priority: Optional[StrictInt] = None
    updated_at: Optional[StrictStr] = None
    ingested: Optional[StrictBool] = None
    ingestion_status: Optional[StrictStr] = None
    ingestion_error: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    content_hash: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["starred", "priority", "updated_at", "ingested", "ingestion_status", "ingestion_error", "name", "content_hash"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if starred (nullable) is None
        # and model_fields_set contains the field
        if self.starred is None and "starred" in self.model_fields_set:
            _dict['starred'] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict['priority'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if ingested (nullable) is None
        # and model_fields_set contains the field
        if self.ingested is None and "ingested" in self.model_fields_set:
            _dict['ingested'] = None

        # set to None if ingestion_status (nullable) is None
        # and model_fields_set contains the field
        if self.ingestion_status is None and "ingestion_status" in self.model_fields_set:
            _dict['ingestion_status'] = None

        # set to None if ingestion_error (nullable) is None
        # and model_fields_set contains the field
        if self.ingestion_error is None and "ingestion_error" in self.model_fields_set:
            _dict['ingestion_error'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if content_hash (nullable) is None
        # and model_fields_set contains the field
        if self.content_hash is None and "content_hash" in self.model_fields_set:
            _dict['content_hash'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "starred": obj.get("starred"),
            "priority": obj.get("priority"),
            "updated_at": obj.get("updated_at"),
            "ingested": obj.get("ingested"),
            "ingestion_status": obj.get("ingestion_status"),
            "ingestion_error": obj.get("ingestion_error"),
            "name": obj.get("name"),
            "content_hash": obj.get("content_hash")
        })
        return _obj


