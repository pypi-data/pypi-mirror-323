# generated by datamodel-codegen:
#   filename:  type/entityHierarchy.json
#   timestamp: 2025-01-24T18:24:21+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from . import basic


class EntityHierarchy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Annotated[
        basic.Uuid,
        Field(description='Unique identifier of an entity hierarchy instance.'),
    ]
    name: Annotated[
        basic.EntityName, Field(description='Preferred name for the entity hierarchy.')
    ]
    displayName: Annotated[
        Optional[str],
        Field(None, description='Display name that identifies this hierarchy.'),
    ]
    description: Annotated[
        basic.Markdown, Field(description='Description of the entity hierarchy.')
    ]
    fullyQualifiedName: Annotated[
        Optional[basic.FullyQualifiedEntityName],
        Field(
            None,
            description='A unique name that identifies an entity within the hierarchy. It captures name hierarchy in the form of `rootEntity.childEntity`.',
        ),
    ]
    children: Annotated[
        Optional[List[EntityHierarchy]],
        Field(None, description='Other entities that are children of this entity.'),
    ]


EntityHierarchy.model_rebuild()
