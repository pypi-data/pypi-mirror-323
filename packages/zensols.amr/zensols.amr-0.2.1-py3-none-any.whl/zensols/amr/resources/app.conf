#@meta {desc: 'command line configuration', date: '2024-02-05'}


[amr_default]
report_dir = amr-graph

[cli]
apps = list: ${cli_config_default:apps}, show_config_cli, app, sapp, tapp
cleanups = list: ${cli_config_default:cleanups}, tapp

[log_cli]
format = %%(asctime)s[%%(levelname)s]:%%(name)s: %%(message)s
level = info

[config_cli]
expect = False

[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf

[config_import]
references = list: default, package
sections = list: app_literal_imp_conf, app_imp_conf

# allow model configurations to populate `amr_default`
[app_literal_imp_conf]
config_files = list:
  resource(zensols.amr): resources/default.conf,
  ^{override}, ^{config_path}

[app_imp_conf]
type = import
config_files = list:
    ^{config_path}, ^{override},
    resource(zensols.amr): resources/default.conf,
    ^{config_path}, ^{override},
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.nlp): resources/component.conf,
    resource(zensols.nlp): resources/mapper.conf,
    resource(zensols.nlp): resources/score.yml,
    resource(zensols.amr): resources/obj.conf,
    resource(zensols.amr): resources/annotate.conf,
    resource(zensols.amr): resources/align.yml,
    resource(zensols.amr): resources/coref.conf,
    resource(zensols.amr): resources/score.yml,
    resource(zensols.amr): resources/train.yml,
    ^{config_path}, ^{override}

[app]
class_name = zensols.amr.Application
log_config = instance: log_cli
doc_parser = alias: amr_default:doc_parser
anon_doc_stash = instance: amr_anon_feature_doc_stash
dumper = instance: amr_dumper

[app_decorator]
option_excludes = set: config_factory, doc_parser, anon_doc_stash, dumper
option_overrides = dict: {
  'input_file': {'long_name': 'input', 'metavar': '<FILE|DIR>'},
  'output_dir': {'long_name': 'output', 'short_name': 'o', 'metavar': 'DIR'},
  'meta_keys': {'long_name': 'keep', 'short_name': 'k'}}
mnemonic_overrides = dict: {
  'write_metadata': 'meta',
  'clear': 'purge'}


[sapp]
class_name = zensols.amr.ScorerApplication
log_config = instance: log_cli
doc_factory = instance: amr_feature_doc_factory

[sapp_decorator]
option_excludes = set: config_factory
option_overrides = dict: {
  'input_gold': {'long_name': 'gold'},
  'input_parsed': {'long_name': 'parsed', 'short_name': None},
  'input_file': {'long_name': 'input', 'metavar': '<FILE|DIR>'},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'output_dir': {'long_name': 'output', 'short_name': 'o', 'metavar': 'DIR'},
  'meta_keys': {'long_name': 'keys', 'short_name': 'k'}}
mnemonic_overrides = dict: {
  'parse_penman': 'penman',
  'remove_wiki': 'rmwiki'}


[tapp]
class_name = zensols.amr.TrainerApplication
log_config = instance: log_cli

[tapp_decorator]
option_excludes = set: config_factory
mnemonic_overrides = dict: {
  'restore_splits': 'restore',
  'write_corpus': 'corpus',
  'prep_corpus': 'prep'}
option_overrides = dict: {
  'output_dir': {'long_name': 'output', 'short_name': 'o', 'metavar': 'DIR'},
  'dry_run': {'short_name': 'd'},
  'id_pattern': {'long_name': 'regex', 'short_name': 'r'},
  'out_file': {'long_name': 'outfile', 'short_name': None},
  'text_or_file': {'long_name': 'text'}}
