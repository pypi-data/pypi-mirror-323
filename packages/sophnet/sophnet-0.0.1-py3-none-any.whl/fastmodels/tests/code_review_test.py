from sophnet import Client

# 初始化客户端
client = Client(
    api_key="",
    project_id=""
)

stream = True
meeting_minutes_response = client.easyllm.code_review.create(
    easyllm_id="1ouVPow3m48OWZyzpAVWKe",
    prompt="diff --git a/src/git/getDiff.ts b/src/git/getDiff.ts\nnew file mode 100644\nindex 0000000..6016fdb\n--- /dev/null\n+++ b/src/git/getDiff.ts\n@@ -0,0 +1,100 @@\n+ 1\t: import { exec } from \"child_process\";\n+ 2\t: import { join } from \"path\";\n+ 3\t: \n+ 4\t: import { getGitLabEnvVariables } from \"../gitlab/getEnv\";\n+ 5\t: import { convertUnifiedDiffToHumanReadableDiff } from \"./processor\";\n+ 6\t: import { ChangedFilePatch } from \"./types\";\n+ 7\t: \n+ 8\t: export const getDiffPatch = async (): Promise<ChangedFilePatch[]> => {\n+ 9\t:   const { commitSha, mergeRequestBaseSha } = getGitLabEnvVariables();\n+ 10\t: \n+ 11\t:   const changedFileNames = await getChangedFilesNames(\n+ 12\t:     commitSha,\n+ 13\t:     mergeRequestBaseSha\n+ 14\t:   );\n+ 15\t: \n+ 16\t:   const patchPromises = changedFileNames.map(async fileName => {\n+ 17\t:     const changedLinesPatch = await getChangedFileLines(\n+ 18\t:       commitSha,\n+ 19\t:       mergeRequestBaseSha,\n+ 20\t:       fileName\n+ 21\t:     );\n+ 22\t:     if (changedLinesPatch.length < 10e3) {\n+ 23\t:       // 10k characters\n+ 24\t:       return {\n+ 25\t:         fileName,\n+ 26\t:         patchText: changedLinesPatch\n+ 27\t:       };\n+ 28\t:     } else {\n+ 29\t:       console.log(`Skipped file with large changes: ${fileName}`);\n+ 30\t:     }\n+ 31\t:   });\n+ 32\t: \n+ 33\t:   // Wait for all promises to complete\n+ 34\t:   const patches = await Promise.all(patchPromises);\n+ 35\t:   return patches.filter(patch => patch !== undefined);\n+ 36\t: };\n+ 37\t: \n+ 38\t: export const getChangedFilesNames = async (\n+ 39\t:   commitSha: string,\n+ 40\t:   mergeRequestBaseSha: string\n+ 41\t: ): Promise<string[]> => {\n+ 42\t:   const gitRoot = await getGitRoot();\n+ 43\t:   const commandString = `git diff --name-only '${mergeRequestBaseSha}' '${commitSha}'`; //  --diff-filter=AMRTD\n+ 44\t: \n+ 45\t:   return new Promise((resolve, reject) => {\n+ 46\t:     exec(commandString, { cwd: gitRoot }, (error, stdout, stderr) => {\n+ 47\t:       if (error) {\n+ 48\t:         reject(new Error(`Failed to execute command. Error: ${error.message}`));\n+ 49\t:       } else if (stderr) {\n+ 50\t:         reject(new Error(`Command execution error: ${stderr}`));\n+ 51\t:       } else {\n+ 52\t:         const files = stdout\n+ 53\t:           .split(\"\\n\")\n+ 54\t:           .filter(fileName => fileName.trim() !== \"\")\n+ 55\t:           .map(fileName => join(gitRoot, fileName.trim()));\n+ 56\t:         resolve(files);\n+ 57\t:       }\n+ 58\t:     });\n+ 59\t:   });\n+ 60\t: };\n+ 61\t: \n+ 62\t: const getGitRoot = (): Promise<string> => {\n+ 63\t:   return new Promise((resolve, reject) => {\n+ 64\t:     exec(\"git rev-parse --show-toplevel\", (error, stdout) => {\n+ 65\t:       if (error) {\n+ 66\t:         reject(new Error(`Failed to find git root. Error: ${error.message}`));\n+ 67\t:       } else {\n+ 68\t:         resolve(stdout.trim());\n+ 69\t:       }\n+ 70\t:     });\n+ 71\t:   });\n+ 72\t: };\n+ 73\t: \n+ 74\t: const getChangedFileLines = async (\n+ 75\t:   commitSha: string,\n+ 76\t:   mergeRequestBaseSha: string,\n+ 77\t:   fileName: string,\n+ 78\t:   diffFilter: string = \"AMRTD\"\n+ 79\t: ): Promise<string> => {\n+ 80\t:   const commandString = `git diff -U12 '${mergeRequestBaseSha}' '${commitSha}' -- '${fileName}'`;\n+ 81\t: \n+ 82\t:   return new Promise((resolve, reject) => {\n+ 83\t:     exec(commandString, (error, stdout, stderr) => {\n+ 84\t:       if (error) {\n+ 85\t:         reject(new Error(`Failed to execute command. Error: ${error.message}`));\n+ 86\t:       } else if (stderr) {\n+ 87\t:         reject(new Error(`Command execution error: ${stderr}`));\n+ 88\t:       } else {\n+ 89\t:         const changedLines = stdout;\n+ 90\t:         // .split(\"\\n\")\n+ 91\t:         // .filter(line => line.startsWith(\"+\") || line.startsWith(\"-\"))\n+ 92\t:         // .filter(line => !line.startsWith(\"---\") && !line.startsWith(\"+++\"))\n+ 93\t:         // .join(\"\\n\");\n+ 94\t:         const formattedDiff =\n+ 95\t:           convertUnifiedDiffToHumanReadableDiff(changedLines);\n+ 96\t:         resolve(formattedDiff);\n+ 97\t:       }\n+ 98\t:     });\n+ 99\t:   });\n+ 100\t: };\n\ndiff --git a/src/git/processor.ts b/src/git/processor.ts\nnew file mode 100644\nindex 0000000..2c2547b\n--- /dev/null\n+++ b/src/git/processor.ts\n@@ -0,0 +1,92 @@\n+ 1\t: /**\n+ 2\t:  * Converts a Unified Diff format string to a human-readable diff with line numbers.\n+ 3\t:  *\n+ 4\t:  * @param diff - The Unified Diff string (e.g., output from `git diff`).\n+ 5\t:  * @returns A formatted diff string with added line numbers.\n+ 6\t:  */\n+ 7\t: export function convertUnifiedDiffToHumanReadableDiff(diff: string): string {\n+ 8\t:   const lines = diff.split(\"\\n\");\n+ 9\t:   const result: string[] = [];\n+ 10\t:   let oldLine = 0;\n+ 11\t:   let newLine = 0;\n+ 12\t:   let inHunk = false;\n+ 13\t: \n+ 14\t:   // Regular expression to match hunk headers, e.g., @@ -1,8 +1,26 @@\n+ 15\t:   const hunkHeaderRegex = /^@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/;\n+ 16\t: \n+ 17\t:   lines.forEach(line => {\n+ 18\t:     const hunkMatch = line.match(hunkHeaderRegex);\n+ 19\t:     if (hunkMatch) {\n+ 20\t:       // Parse hunk header to initialize line counters\n+ 21\t:       inHunk = true;\n+ 22\t:       oldLine = parseInt(hunkMatch[1], 10);\n+ 23\t:       newLine = parseInt(hunkMatch[3], 10);\n+ 24\t:       result.push(line); // Optionally include hunk headers in the output\n+ 25\t:       return;\n+ 26\t:     }\n+ 27\t: \n+ 28\t:     if (!inHunk) {\n+ 29\t:       // Lines outside hunks are added as-is\n+ 30\t:       result.push(line);\n+ 31\t:       return;\n+ 32\t:     }\n+ 33\t: \n+ 34\t:     if (line.startsWith(\" \")) {\n+ 35\t:       // Unchanged line\n+ 36\t:       const formattedLine = formatLine(oldLine, newLine, \" \", line.slice(1));\n+ 37\t:       result.push(formattedLine);\n+ 38\t:       oldLine++;\n+ 39\t:       newLine++;\n+ 40\t:     } else if (line.startsWith(\"-\")) {\n+ 41\t:       // Removed line\n+ 42\t:       const formattedLine = formatLine(oldLine, null, \"-\", line.slice(1));\n+ 43\t:       result.push(formattedLine);\n+ 44\t:       oldLine++;\n+ 45\t:     } else if (line.startsWith(\"+\")) {\n+ 46\t:       // Added line\n+ 47\t:       const formattedLine = formatLine(null, newLine, \"+\", line.slice(1));\n+ 48\t:       result.push(formattedLine);\n+ 49\t:       newLine++;\n+ 50\t:     } else {\n+ 51\t:       // Context or other lines within hunk\n+ 52\t:       result.push(line);\n+ 53\t:     }\n+ 54\t:   });\n+ 55\t: \n+ 56\t:   return result.join(\"\\n\");\n+ 57\t: }\n+ 58\t: \n+ 59\t: /**\n+ 60\t:  * Formats a single line with line numbers and status.\n+ 61\t:  *\n+ 62\t:  * @param oldNum - The original file's line number (null if not applicable).\n+ 63\t:  * @param newNum - The new file's line number (null if not applicable).\n+ 64\t:  * @param status - The status of the line: ' ' (unchanged), '-' (removed), '+' (added).\n+ 65\t:  * @param content - The content of the line.\n+ 66\t:  * @returns A formatted string with line numbers and content.\n+ 67\t:  */\n+ 68\t: function formatLine(\n+ 69\t:   oldNum: number | null,\n+ 70\t:   newNum: number | null,\n+ 71\t:   status: \" \" | \"-\" | \"+\",\n+ 72\t:   content: string\n+ 73\t: ): string {\n+ 74\t:   const oldStr = oldNum !== null ? String(oldNum) : \"\";\n+ 75\t:   const newStr = newNum !== null ? String(newNum) : \"\";\n+ 76\t: \n+ 77\t:   // Format line numbers with tabs\n+ 78\t:   const oldFormatted = oldStr ? oldStr : \"\";\n+ 79\t:   const newFormatted = newStr ? newStr : \"\";\n+ 80\t: \n+ 81\t:   // Determine the prefix based on status\n+ 82\t:   let prefix = \"\";\n+ 83\t:   if (status === \" \") {\n+ 84\t:     prefix = `  ${oldFormatted}\\t${newFormatted}`;\n+ 85\t:   } else if (status === \"-\") {\n+ 86\t:     prefix = `- \\t${oldFormatted}`;\n+ 87\t:   } else if (status === \"+\") {\n+ 88\t:     prefix = `+ ${newFormatted}\\t`;\n+ 89\t:   }\n+ 90\t: \n+ 91\t:   return `${prefix}: ${content}`;\n+ 92\t: }\n\ndiff --git a/src/git/types.ts b/src/git/types.ts\nnew file mode 100644\nindex 0000000..56e109d\n--- /dev/null\n+++ b/src/git/types.ts\n@@ -0,0 +1,4 @@\n+ 1\t: export interface ChangedFilePatch {\n+ 2\t:     fileName: string;\n+ 3\t:     patchText: string;\n+ 4\t: }\n\\ No newline at end of file\n\ndiff --git a/src/gitlab/getEnv.ts b/src/gitlab/getEnv.ts\nnew file mode 100644\nindex 0000000..8413cea\n--- /dev/null\n+++ b/src/gitlab/getEnv.ts\n@@ -0,0 +1,38 @@\n+ 1\t: export interface GitlabEnvVariables {\n+ 2\t:     apiV4Url: string;\n+ 3\t:     gitlabToken: string;\n+ 4\t:     mergeRequestBaseSha: string;\n+ 5\t:     commitSha: string;\n+ 6\t:     projectId: string;\n+ 7\t:     mergeRequestIIdString: string;\n+ 8\t:     gitlabHost: string;\n+ 9\t: }\n+ 10\t: \n+ 11\t: export const getGitLabEnvVariables = (): GitlabEnvVariables => {\n+ 12\t:     const missingVars = [\n+ 13\t:         \"CI_MERGE_REQUEST_DIFF_BASE_SHA\",\n+ 14\t:         \"CI_PROJECT_ID\",\n+ 15\t:         \"CI_MERGE_REQUEST_IID\",\n+ 16\t:         \"CI_COMMIT_SHA\",\n+ 17\t:         \"GITLAB_TOKEN\",\n+ 18\t:         \"GITLAB_HOST\",\n+ 19\t:         \"CI_API_V4_URL\",\n+ 20\t:     ].filter((varName) => !process.env[varName]);\n+ 21\t:     if (missingVars.length > 0) {\n+ 22\t:         console.error(`Missing environment variables: ${missingVars.join(\", \")}`);\n+ 23\t:         throw new Error(\n+ 24\t:             \"One or more GitLab environment variables are not set. Did you set up your Gitlab access token?\"\n+ 25\t:         );\n+ 26\t:     }\n+ 27\t: \n+ 28\t:     return {\n+ 29\t:         apiV4Url: process.env.CI_API_V4_URL ?? \"\",\n+ 30\t:         gitlabToken: process.env.GITLAB_TOKEN ?? \"\",\n+ 31\t:         mergeRequestBaseSha: process.env.CI_MERGE_REQUEST_DIFF_BASE_SHA ?? \"\",\n+ 32\t:         commitSha: process.env.CI_COMMIT_SHA ?? \"\",\n+ 33\t:         projectId: process.env.CI_PROJECT_ID ?? \"\",\n+ 34\t:         mergeRequestIIdString: process.env.CI_MERGE_REQUEST_IID ?? \"\",\n+ 35\t:         gitlabHost: process.env.GITLAB_HOST ?? \"https://gitlab.com\",\n+ 36\t:     };\n+ 37\t: };\n+ 38\t: \n\ndiff --git a/src/gitlab/mergeRequest.ts b/src/gitlab/mergeRequest.ts\nnew file mode 100644\nindex 0000000..4ba6731\n--- /dev/null\n+++ b/src/gitlab/mergeRequest.ts\n@@ -0,0 +1,69 @@\n+ 1\t: import { MergeRequestVersion } from \"./types\";\n+ 2\t: import { getGitLabEnvVariables } from \"./getEnv\";\n+ 3\t: import { Feedback } from \"../review/types\";\n+ 4\t: \n+ 5\t: export const postMergeRequestComment = async (\n+ 6\t:   mrVersion: MergeRequestVersion,\n+ 7\t:   feedback: Feedback\n+ 8\t: ): Promise<any> => {\n+ 9\t:   const { apiV4Url, gitlabToken, projectId, mergeRequestIIdString } =\n+ 10\t:     getGitLabEnvVariables();\n+ 11\t: \n+ 12\t:   const position = {\n+ 13\t:     position_type: \"text\",\n+ 14\t:     base_sha: mrVersion.base_commit_sha,\n+ 15\t:     head_sha: mrVersion.head_commit_sha,\n+ 16\t:     start_sha: mrVersion.start_commit_sha,\n+ 17\t:     new_path: feedback.new_path,\n+ 18\t:     old_path: feedback.old_path,\n+ 19\t:     new_line: feedback.new_line,\n+ 20\t:     old_line: feedback.old_line\n+ 21\t:   };\n+ 22\t: \n+ 23\t:   const response = await fetch(\n+ 24\t:     `${apiV4Url}/projects/${projectId}/merge_requests/${mergeRequestIIdString}/discussions`,\n+ 25\t:     {\n+ 26\t:       method: \"POST\",\n+ 27\t:       headers: {\n+ 28\t:         \"Content-Type\": \"application/json\",\n+ 29\t:         \"PRIVATE-TOKEN\": gitlabToken\n+ 30\t:       },\n+ 31\t:       body: JSON.stringify({\n+ 32\t:         position: position,\n+ 33\t:         body: feedback.feedback\n+ 34\t:       })\n+ 35\t:     }\n+ 36\t:   );\n+ 37\t:   if (!response.ok) {\n+ 38\t:     throw new Error(\n+ 39\t:       `Error posting merge request comment: ${\n+ 40\t:         response.status\n+ 41\t:       }, ${await response.text()}`\n+ 42\t:     );\n+ 43\t:   }\n+ 44\t:   return response.json();\n+ 45\t: };\n+ 46\t: \n+ 47\t: export const getMergeRequestVersion = async (): Promise<\n+ 48\t:   MergeRequestVersion[]\n+ 49\t: > => {\n+ 50\t:   const { apiV4Url, gitlabToken, projectId, mergeRequestIIdString } =\n+ 51\t:     getGitLabEnvVariables();\n+ 52\t: \n+ 53\t:   const response = await fetch(\n+ 54\t:     `${apiV4Url}/projects/${projectId}/merge_requests/${mergeRequestIIdString}/versions`,\n+ 55\t:     {\n+ 56\t:       headers: {\n+ 57\t:         \"PRIVATE-TOKEN\": gitlabToken\n+ 58\t:       }\n+ 59\t:     }\n+ 60\t:   );\n+ 61\t:   if (!response.ok) {\n+ 62\t:     throw new Error(\n+ 63\t:       `Error getting merge request version: ${\n+ 64\t:         response.status\n+ 65\t:       }, ${await response.text()}`\n+ 66\t:     );\n+ 67\t:   }\n+ 68\t:   return response.json();\n+ 69\t: };\n\ndiff --git a/src/gitlab/types.ts b/src/gitlab/types.ts\nnew file mode 100644\nindex 0000000..dc31f44\n--- /dev/null\n+++ b/src/gitlab/types.ts\n@@ -0,0 +1,16 @@\n+ 1\t: export interface GitlabClientOptions {\n+ 2\t:   baseUrl: string;\n+ 3\t:   token: string;\n+ 4\t: }\n+ 5\t: \n+ 6\t: export interface MergeRequestVersion {\n+ 7\t:   id: number;\n+ 8\t:   state: string;\n+ 9\t:   created_at: string;\n+ 10\t:   real_size: string;\n+ 11\t:   merge_request_id: number;\n+ 12\t:   patch_id_sha: string;\n+ 13\t:   head_commit_sha: string;\n+ 14\t:   base_commit_sha: string;\n+ 15\t:   start_commit_sha: string;\n+ 16\t: }\n\ndiff --git a/src/index.ts b/src/index.ts\nnew file mode 100644\nindex 0000000..93396e1\n--- /dev/null\n+++ b/src/index.ts\n@@ -0,0 +1,14 @@\n+ 1\t: import dotenv from \"dotenv\";\n+ 2\t: dotenv.config();\n+ 3\t: \n+ 4\t: import { doReview } from \"./review/review\";\n+ 5\t: \n+ 6\t: const userInstructions = `\\\n+ 7\t: You are expert in identifying potential bugs, improving readability, making code cleaner, and maximizing performance of the programming language.\n+ 8\t: Also, you are good at suggesting improvements based on SOLID principles.\n+ 9\t: `;\n+ 10\t: async function main() {\n+ 11\t:   await doReview(userInstructions);\n+ 12\t: }\n+ 13\t: \n+ 14\t: main();\n\ndiff --git a/src/llm/azure.ts b/src/llm/azure.ts\nnew file mode 100644\nindex 0000000..24bd768\n--- /dev/null\n+++ b/src/llm/azure.ts\n@@ -0,0 +1,52 @@\n+ 1\t: export const azureChatCompletion = async (\n+ 2\t:   systemMessage: string,\n+ 3\t:   userMsg: string\n+ 4\t: ): Promise<string> => {\n+ 5\t:   const { azureApiKey, azureEndpoint, azureDeployment } = getAzureEnv();\n+ 6\t: \n+ 7\t:   const data = {\n+ 8\t:     messages: [\n+ 9\t:       { role: \"system\", content: systemMessage },\n+ 10\t:       { role: \"user\", content: userMsg },\n+ 11\t:     ],\n+ 12\t:     temperature: 0.3,\n+ 13\t:   };\n+ 14\t: \n+ 15\t:   const response = await fetch(\n+ 16\t:     `${azureEndpoint}/openai/deployments/${azureDeployment}/chat/completions?api-version=2024-02-15-preview`,\n+ 17\t:     {\n+ 18\t:       method: \"POST\",\n+ 19\t:       headers: {\n+ 20\t:         \"Content-Type\": \"application/json\",\n+ 21\t:         \"api-key\": azureApiKey,\n+ 22\t:       },\n+ 23\t:       body: JSON.stringify(data),\n+ 24\t:     }\n+ 25\t:   );\n+ 26\t: \n+ 27\t:   if (!response.ok) {\n+ 28\t:     throw new Error(`Error sending message to Azure OpenAI: ${response.status}, ${await response.text()}`);\n+ 29\t:   }\n+ 30\t: \n+ 31\t:   return await response.text();\n+ 32\t: };\n+ 33\t: \n+ 34\t: const getAzureEnv = () => {\n+ 35\t:   const missingVars = [\n+ 36\t:     \"AZURE_API_KEY\",\n+ 37\t:     \"AZURE_ENDPOINT\",\n+ 38\t:     \"AZURE_DEPLOYMENT\",\n+ 39\t:   ].filter((varName) => !process.env[varName]);\n+ 40\t:   if (missingVars.length > 0) {\n+ 41\t:     console.error(`Missing environment variables: ${missingVars.join(\", \")}`);\n+ 42\t:     throw new Error(\n+ 43\t:       \"One or more Azure environment variables are not set. Did you set up your Azure access token?\"\n+ 44\t:     );\n+ 45\t:   }\n+ 46\t: \n+ 47\t:   return {\n+ 48\t:     azureApiKey: process.env.AZURE_API_KEY ?? \"\",\n+ 49\t:     azureEndpoint: process.env.AZURE_ENDPOINT ?? \"\",\n+ 50\t:     azureDeployment: process.env.AZURE_DEPLOYMENT ?? \"\",\n+ 51\t:   };\n+ 52\t: };\n\ndiff --git a/src/llm/easyllm.ts b/src/llm/easyllm.ts\nnew file mode 100644\nindex 0000000..e69de29\n\ndiff --git a/src/llm/llmop.ts b/src/llm/llmop.ts\nnew file mode 100644\nindex 0000000..875d8a6\n--- /dev/null\n+++ b/src/llm/llmop.ts\n@@ -0,0 +1,78 @@\n+ 1\t: export const llmOpChatCompletion = async (\n+ 2\t:   systemMessage: string,\n+ 3\t:   userMsg: string\n+ 4\t: ): Promise<ChatCompletionResponse> => {\n+ 5\t:   const { llmopApiKey, llmopProjectId, llmopModelId } = getLlmopEnv();\n+ 6\t: \n+ 7\t:   const data = {\n+ 8\t:     model_id: llmopModelId,\n+ 9\t:     temperature: 0.3,\n+ 10\t:     stream: false,\n+ 11\t:     messages: [\n+ 12\t:       { role: \"system\", content: systemMessage },\n+ 13\t:       { role: \"user\", content: userMsg }\n+ 14\t:     ]\n+ 15\t:   };\n+ 16\t: \n+ 17\t:   const response = await fetch(\n+ 18\t:     `https://platform.fastmodels.cn/api/open-apis/projects/${llmopProjectId}/chat/completions`,\n+ 19\t:     {\n+ 20\t:       method: \"POST\",\n+ 21\t:       headers: {\n+ 22\t:         \"Content-Type\": \"application/json\",\n+ 23\t:         Authorization: `Bearer ${llmopApiKey}`\n+ 24\t:       },\n+ 25\t:       body: JSON.stringify(data)\n+ 26\t:     }\n+ 27\t:   );\n+ 28\t: \n+ 29\t:   if (!response.ok) {\n+ 30\t:     throw new Error(\n+ 31\t:       `Error sending message to Llmop chat completion: ${\n+ 32\t:         response.status\n+ 33\t:       }, ${await response.text()}`\n+ 34\t:     );\n+ 35\t:   }\n+ 36\t: \n+ 37\t:   return (await response.json()) as ChatCompletionResponse;\n+ 38\t: };\n+ 39\t: \n+ 40\t: const getLlmopEnv = () => {\n+ 41\t:   const missingVars = [\n+ 42\t:     \"LLMOP_API_KEY\",\n+ 43\t:     \"LLMOP_PROJECT_ID\",\n+ 44\t:     \"LLMOP_MODEL_ID\"\n+ 45\t:   ].filter(varName => !process.env[varName]);\n+ 46\t:   if (missingVars.length > 0) {\n+ 47\t:     console.error(\n+ 48\t:       `Missing LLMOP environment variables: ${missingVars.join(\", \")}`\n+ 49\t:     );\n+ 50\t:     throw new Error(\n+ 51\t:       \"One or more LLMOP environment variables are not set. Did you set up your LLMOP access token?\"\n+ 52\t:     );\n+ 53\t:   }\n+ 54\t: \n+ 55\t:   return {\n+ 56\t:     llmopApiKey: process.env.LLMOP_API_KEY ?? \"\",\n+ 57\t:     llmopProjectId: process.env.LLMOP_PROJECT_ID ?? \"\",\n+ 58\t:     llmopModelId: process.env.LLMOP_MODEL_ID ?? \"\"\n+ 59\t:   };\n+ 60\t: };\n+ 61\t: \n+ 62\t: export interface ChatCompletionResponse {\n+ 63\t:   object: string;\n+ 64\t:   created: number;\n+ 65\t:   model: string;\n+ 66\t:   choices: Choice[];\n+ 67\t: }\n+ 68\t: \n+ 69\t: export interface Choice {\n+ 70\t:   index: number;\n+ 71\t:   message: Message;\n+ 72\t:   finish_reason: string;\n+ 73\t: }\n+ 74\t: \n+ 75\t: export interface Message {\n+ 76\t:   content: string;\n+ 77\t:   role: string;\n+ 78\t: }\n\ndiff --git a/src/review/config.ts b/src/review/config.ts\nnew file mode 100644\nindex 0000000..e69de29\n\ndiff --git a/src/review/prompt.ts b/src/review/prompt.ts\nnew file mode 100644\nindex 0000000..779be11\n--- /dev/null\n+++ b/src/review/prompt.ts\n@@ -0,0 +1,58 @@\n+ 1\t: export const defaultSystemMessage: string = `You are an expert python developer, your task is to review a set of pull requests.\n+ 2\t: You are given a list of filenames and their partial contents, but note that you might not have the full context of the code.\n+ 3\t: \n+ 4\t: Only review lines of code which have been changed (added or removed) in the pull request. The code looks similar to the output of a git diff command. Lines which have been removed are prefixed with a minus (-) and lines which have been added are prefixed with a plus (+). Other lines are added to provide context but should be ignored in the review.\n+ 5\t: \n+ 6\t: Begin your review by evaluating the changed code using a risk score similar to a LOGAF score but measured from 1 to 5, where 1 is the lowest risk to the code base if the code is merged and 5 is the highest risk which would likely break something or be unsafe.\n+ 7\t: \n+ 8\t: In your feedback, focus on highlighting potential bugs, improving readability if it is a problem, making code cleaner, and maximising the performance of the programming language. Flag any API keys or secrets present in the code in plain text immediately as highest risk. Rate the changes based on SOLID principles if applicable.\n+ 9\t: \n+ 10\t: Do not comment on breaking functions down into smaller, more manageable functions unless it is a huge problem. Also be aware that there will be libraries and techniques used which you are not familiar with, so do not comment on those unless you are confident that there is a problem.\n+ 11\t: \n+ 12\t: Use markdown formatting for the feedback details. Also do not include the filename or risk level in the feedback details.\n+ 13\t: \n+ 14\t: Ensure the feedback details are brief, concise, accurate. If there are multiple similar issues, only comment on the most critical.\n+ 15\t: \n+ 16\t: Include brief example code snippets in the feedback details for your suggested changes when you're confident your suggestions are improvements. Use the same programming language as the file under review.\n+ 17\t: If there are multiple improvements you suggest in the feedback details, use an ordered list to indicate the priority of the changes.\n+ 18\t: \n+ 19\t: Reply as feedbacks where should include filename, risk score and the feedback. \n+ 20\t: \n+ 21\t: The code to review is provided below.\n+ 22\t: \n+ 23\t: 请使用简体中文回复。\n+ 24\t: `;\n+ 25\t: \n+ 26\t: export const inlineCommentSystemMessage: string = `You are an expert python developer, your task is to review a set of pull requests.\n+ 27\t: You are given a list of filenames and their partial contents, but note that you might not have the full context of the code.\n+ 28\t: \n+ 29\t: \n+ 44\t: \n+ 45\t: Your feedback should be in the following JSON format (Do not use markdown block, output JSON directly):\n+ 46\t: [\n+ 47\t:   {\"old_path\": \"package.json\", \"old_line\": 3, \"feedback\": \"## Risk Score: 3 \\n<Your response, may use markdown>\"},\n+ 48\t:   {\"new_path\": \"src/git/getDiff.ts\", \"new_line\": 5, \"feedback\": \"## Risk Score: 5 \\n<Your response, may use markdown>\"},\n+ 49\t:   ...\n+ 50\t: ]\n+ 51\t: \n+ 52\t: Reply in zh-cn, unless userInstructions ask you not to.\n+ 53\t: \n+ 54\t: Additional user review instructions:\n+ 55\t: {{ userInstructions }}\n+ 56\t: \n+ 57\t: The code to review is provided below.\n+ 58\t: `;\n\ndiff --git a/src/review/review.ts b/src/review/review.ts\nnew file mode 100644\nindex 0000000..57f3f49\n--- /dev/null\n+++ b/src/review/review.ts\n@@ -0,0 +1,38 @@\n+ 1\t: import { llmOpChatCompletion } from \"../llm/llmop\";\n+ 2\t: import { getDiffPatch } from \"../git/getDiff\";\n+ 3\t: import { inlineCommentSystemMessage as systemMessage } from \"./prompt\";\n+ 4\t: import { Feedback } from \"./types\";\n+ 5\t: import {\n+ 6\t:   getMergeRequestVersion,\n+ 7\t:   postMergeRequestComment\n+ 8\t: } from \"../gitlab/mergeRequest\";\n+ 9\t: \n+ 10\t: const LENGTH_LIMIT = 200 * 1e3;\n+ 11\t: \n+ 12\t: export const doReview = async (userInstructions: string) => {\n+ 13\t:   // Get the diff patches\n+ 14\t:   console.log(\"Getting diff patches...\");\n+ 15\t:   const patches = await getDiffPatch();\n+ 16\t:   let inputMessage = patches.map(patch => patch.patchText).join(\"\\n\");\n+ 17\t:   if (inputMessage.length > LENGTH_LIMIT) {\n+ 18\t:     console.log(\"Message too long, truncating...\");\n+ 19\t:     inputMessage = inputMessage.slice(0, LENGTH_LIMIT);\n+ 20\t:   }\n+ 21\t: \n+ 22\t:   // Start the review\n+ 23\t:   console.log(\"LLM review started...\");\n+ 24\t:   inputMessage.replace(\"{{ userInstructions }}\", userInstructions);\n+ 25\t:   const response = await llmOpChatCompletion(systemMessage, inputMessage);\n+ 26\t:   const feedbacks = JSON.parse(\n+ 27\t:     response.choices[0].message.content\n+ 28\t:   ) as Feedback[];\n+ 29\t: \n+ 30\t:   // Post the feedbacks as comments\n+ 31\t:   console.log(`Received ${feedbacks.length} feedbacks, posting comments...`);\n+ 32\t:   const mergeRequestVersion = await getMergeRequestVersion();\n+ 33\t:   for (const feedback of feedbacks) {\n+ 34\t:     await postMergeRequestComment(mergeRequestVersion[0], feedback);\n+ 35\t:   }\n+ 36\t: \n+ 37\t:   console.log(\"Review completed!\");\n+ 38\t: };\n\ndiff --git a/src/review/types.ts b/src/review/types.ts\nnew file mode 100644\nindex 0000000..4837057\n--- /dev/null\n+++ b/src/review/types.ts\n@@ -0,0 +1,7 @@\n+ 1\t: export interface Feedback {\n+ 2\t:   new_path: string;\n+ 3\t:   old_path: string;\n+ 4\t:   new_line?: number;\n+ 5\t:   old_line?: number;\n+ 6\t:   feedback: string;\n+ 7\t: }\n",
    stream=stream,

)

# 打印输出
if stream:
    for chunk in meeting_minutes_response:
        for choice in chunk.choices:
            print(f"Index: {choice.index}, Content: {choice.delta.content}, Finish Reason: {choice.finish_reason}")
else:
    print(meeting_minutes_response.choices[0].message.content)