# coding: utf-8

"""
    Screening AI API Docs

    API Documentation for Screening AI

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from screening_ai.models.api_response_wrapper_data import ApiResponseWrapperData

class TestApiResponseWrapperData(unittest.TestCase):
    """ApiResponseWrapperData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiResponseWrapperData:
        """Test ApiResponseWrapperData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiResponseWrapperData`
        """
        model = ApiResponseWrapperData()
        if include_optional:
            return ApiResponseWrapperData(
                access_token = '',
                url = '',
                data = '',
                answer_location = '',
                screening_submission_id = '',
                org_id = '',
                org_alias = '',
                email = '',
                first_name = '',
                last_name = '',
                phone_number = '',
                screening_job_id = '',
                chat = [
                    screening_ai.models.screening_form_submission_question_dto.ScreeningFormSubmissionQuestionDto(
                        index = 1.337, 
                        agent = '', 
                        human = '', 
                        human_audio_url = '', 
                        answer_type = '', 
                        answers_given = [
                            ''
                            ], )
                    ],
                created_at = '',
                status = '',
                upvotes = [
                    ''
                    ],
                is_viewed = True,
                is_private = True,
                screening_submissions = [
                    screening_ai.models.platform_screening_submission_response_dto.PlatformScreeningSubmissionResponseDto(
                        screening_submission_id = '', 
                        org_id = '', 
                        org_alias = '', 
                        email = '', 
                        first_name = '', 
                        last_name = '', 
                        phone_number = '', 
                        screening_job_id = '', 
                        chat = [
                            screening_ai.models.screening_form_submission_question_dto.ScreeningFormSubmissionQuestionDto(
                                index = 1.337, 
                                agent = '', 
                                human = '', 
                                human_audio_url = '', 
                                answer_type = '', 
                                answers_given = [
                                    ''
                                    ], )
                            ], 
                        created_at = '', 
                        status = '', 
                        upvotes = [
                            ''
                            ], 
                        is_viewed = True, 
                        is_private = True, )
                    ],
                screening_templates = [
                    screening_ai.models.create_screening_template_dto.CreateScreeningTemplateDto(
                        title = '', 
                        description = '', 
                        prompt = '', 
                        is_streaming = True, 
                        questions = [
                            ''
                            ], 
                        created_at = '', )
                    ],
                screening_template_id = '',
                title = '',
                job_active = True,
                jd = '',
                screening_jobs = [
                    screening_ai.models.platform_screening_job_response_dto.PlatformScreeningJobResponseDto(
                        screening_job_id = '', 
                        org_id = '', 
                        org_alias = '', 
                        screening_template_id = '', 
                        title = '', 
                        job_active = True, 
                        jd = '', 
                        upvotes = [
                            ''
                            ], 
                        created_at = '', )
                    ],
                platform_user_id = '',
                dp_url = '',
                jwt = '',
                org_name = '',
                org_dp_url = '',
                org_super_admin = '',
                org_admins = [
                    ''
                    ],
                org_joined_at = '',
                org_country = '',
                org_city = '',
                org_state = '',
                org_active = True,
                updated_at = '',
                organisations = [
                    ''
                    ],
                api_key = '',
                organisation_alias = '',
                organisation_id = '',
                org_super_admin_id = '',
                balance = 1.337,
                currency = '',
                usage = [
                    ''
                    ],
                transactions = [
                    ''
                    ],
                last_updated = '',
                message = '',
                stripe_payment_session_id = '',
                accepted_members = [
                    ''
                    ],
                sent_members = [
                    ''
                    ],
                super_admin = screening_ai.models.super_admin.superAdmin()
            )
        else:
            return ApiResponseWrapperData(
                access_token = '',
                url = '',
                data = '',
                answer_location = '',
                screening_submission_id = '',
                org_id = '',
                org_alias = '',
                email = '',
                first_name = '',
                last_name = '',
                phone_number = '',
                screening_job_id = '',
                chat = [
                    screening_ai.models.screening_form_submission_question_dto.ScreeningFormSubmissionQuestionDto(
                        index = 1.337, 
                        agent = '', 
                        human = '', 
                        human_audio_url = '', 
                        answer_type = '', 
                        answers_given = [
                            ''
                            ], )
                    ],
                created_at = '',
                status = '',
                upvotes = [
                    ''
                    ],
                is_viewed = True,
                is_private = True,
                screening_submissions = [
                    screening_ai.models.platform_screening_submission_response_dto.PlatformScreeningSubmissionResponseDto(
                        screening_submission_id = '', 
                        org_id = '', 
                        org_alias = '', 
                        email = '', 
                        first_name = '', 
                        last_name = '', 
                        phone_number = '', 
                        screening_job_id = '', 
                        chat = [
                            screening_ai.models.screening_form_submission_question_dto.ScreeningFormSubmissionQuestionDto(
                                index = 1.337, 
                                agent = '', 
                                human = '', 
                                human_audio_url = '', 
                                answer_type = '', 
                                answers_given = [
                                    ''
                                    ], )
                            ], 
                        created_at = '', 
                        status = '', 
                        upvotes = [
                            ''
                            ], 
                        is_viewed = True, 
                        is_private = True, )
                    ],
                screening_templates = [
                    screening_ai.models.create_screening_template_dto.CreateScreeningTemplateDto(
                        title = '', 
                        description = '', 
                        prompt = '', 
                        is_streaming = True, 
                        questions = [
                            ''
                            ], 
                        created_at = '', )
                    ],
                screening_template_id = '',
                title = '',
                job_active = True,
                jd = '',
                screening_jobs = [
                    screening_ai.models.platform_screening_job_response_dto.PlatformScreeningJobResponseDto(
                        screening_job_id = '', 
                        org_id = '', 
                        org_alias = '', 
                        screening_template_id = '', 
                        title = '', 
                        job_active = True, 
                        jd = '', 
                        upvotes = [
                            ''
                            ], 
                        created_at = '', )
                    ],
                platform_user_id = '',
                dp_url = '',
                jwt = '',
                org_name = '',
                org_dp_url = '',
                org_super_admin = '',
                org_admins = [
                    ''
                    ],
                org_joined_at = '',
                org_country = '',
                org_city = '',
                org_state = '',
                org_active = True,
                updated_at = '',
                organisations = [
                    ''
                    ],
                api_key = '',
                organisation_alias = '',
                organisation_id = '',
                org_super_admin_id = '',
                balance = 1.337,
                currency = '',
                usage = [
                    ''
                    ],
                transactions = [
                    ''
                    ],
                last_updated = '',
                message = '',
                stripe_payment_session_id = '',
                accepted_members = [
                    ''
                    ],
                sent_members = [
                    ''
                    ],
                super_admin = screening_ai.models.super_admin.superAdmin(),
        )
        """

    def testApiResponseWrapperData(self):
        """Test ApiResponseWrapperData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
