# coding: utf-8

"""
    Screening AI API Docs

    API Documentation for Screening AI

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from screening_ai.models.screening_form_submission_question_dto import ScreeningFormSubmissionQuestionDto
from typing import Optional, Set
from typing_extensions import Self

class PlatformScreeningSubmissionResponseDto(BaseModel):
    """
    PlatformScreeningSubmissionResponseDto
    """ # noqa: E501
    screening_submission_id: StrictStr = Field(description="Screening Submission ID", alias="screeningSubmissionId")
    org_id: StrictStr = Field(description="Organisation ID", alias="orgId")
    org_alias: StrictStr = Field(description="Organisation Alias", alias="orgAlias")
    email: StrictStr = Field(description="Email")
    first_name: StrictStr = Field(description="First Name", alias="firstName")
    last_name: StrictStr = Field(description="Last Name", alias="lastName")
    phone_number: StrictStr = Field(description="Phone Number", alias="phoneNumber")
    screening_job_id: StrictStr = Field(description="Screening Job ID", alias="screeningJobId")
    chat: List[ScreeningFormSubmissionQuestionDto] = Field(description="Chat")
    created_at: StrictStr = Field(description="Created At", alias="createdAt")
    status: StrictStr = Field(description="Status")
    upvotes: List[StrictStr] = Field(description="Upvotes")
    is_viewed: StrictBool = Field(description="Is Viewed", alias="isViewed")
    is_private: StrictBool = Field(description="Is Private", alias="isPrivate")
    __properties: ClassVar[List[str]] = ["screeningSubmissionId", "orgId", "orgAlias", "email", "firstName", "lastName", "phoneNumber", "screeningJobId", "chat", "createdAt", "status", "upvotes", "isViewed", "isPrivate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlatformScreeningSubmissionResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in chat (list)
        _items = []
        if self.chat:
            for _item_chat in self.chat:
                if _item_chat:
                    _items.append(_item_chat.to_dict())
            _dict['chat'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlatformScreeningSubmissionResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "screeningSubmissionId": obj.get("screeningSubmissionId"),
            "orgId": obj.get("orgId"),
            "orgAlias": obj.get("orgAlias"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "phoneNumber": obj.get("phoneNumber"),
            "screeningJobId": obj.get("screeningJobId"),
            "chat": [ScreeningFormSubmissionQuestionDto.from_dict(_item) for _item in obj["chat"]] if obj.get("chat") is not None else None,
            "createdAt": obj.get("createdAt"),
            "status": obj.get("status"),
            "upvotes": obj.get("upvotes"),
            "isViewed": obj.get("isViewed"),
            "isPrivate": obj.get("isPrivate")
        })
        return _obj


