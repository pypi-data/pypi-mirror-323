# coding: utf-8

"""
    Screening AI API Docs

    API Documentation for Screening AI

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class GetOrganisationBillingViaOrgIdResponseDto(BaseModel):
    """
    GetOrganisationBillingViaOrgIdResponseDto
    """ # noqa: E501
    org_id: StrictStr = Field(description="Organisation ID", alias="orgId")
    org_alias: StrictStr = Field(description="Organisation Alias", alias="orgAlias")
    org_super_admin_id: StrictStr = Field(description="Organisation Super Admin ID", alias="orgSuperAdminId")
    balance: Union[StrictFloat, StrictInt] = Field(description="Balance")
    currency: StrictStr = Field(description="Currency")
    usage: List[StrictStr] = Field(description="Usage")
    transactions: List[StrictStr] = Field(description="Transactions")
    last_updated: StrictStr = Field(description="Last Updated", alias="lastUpdated")
    __properties: ClassVar[List[str]] = ["orgId", "orgAlias", "orgSuperAdminId", "balance", "currency", "usage", "transactions", "lastUpdated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganisationBillingViaOrgIdResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganisationBillingViaOrgIdResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orgId": obj.get("orgId"),
            "orgAlias": obj.get("orgAlias"),
            "orgSuperAdminId": obj.get("orgSuperAdminId"),
            "balance": obj.get("balance"),
            "currency": obj.get("currency"),
            "usage": obj.get("usage"),
            "transactions": obj.get("transactions"),
            "lastUpdated": obj.get("lastUpdated")
        })
        return _obj


