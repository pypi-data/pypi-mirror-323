# coding: utf-8

"""
    Screening AI API Docs

    API Documentation for Screening AI

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class PlatformOrganisationResponseDto(BaseModel):
    """
    PlatformOrganisationResponseDto
    """ # noqa: E501
    org_id: StrictStr = Field(description="Organisation ID", alias="orgId")
    org_name: StrictStr = Field(description="Organisation name", alias="orgName")
    org_alias: StrictStr = Field(description="Organisation alias", alias="orgAlias")
    org_dp_url: StrictStr = Field(description="Organisation Dp Url", alias="orgDpUrl")
    org_super_admin: StrictStr = Field(description="Organisation Super Admin Id", alias="orgSuperAdmin")
    org_admins: List[StrictStr] = Field(description="Organisation Admins", alias="orgAdmins")
    org_joined_at: StrictStr = Field(description="Organisation Joining Date", alias="orgJoinedAt")
    org_country: StrictStr = Field(description="Organisation Country", alias="orgCountry")
    org_city: StrictStr = Field(description="Organisation City", alias="orgCity")
    org_state: StrictStr = Field(description="Organisation State", alias="orgState")
    org_active: StrictBool = Field(description="Organisation Active Status", alias="orgActive")
    created_at: StrictStr = Field(description="Creation date in ISO Date Time String", alias="createdAt")
    updated_at: StrictStr = Field(description="Last Updated date in ISO Date Time String", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["orgId", "orgName", "orgAlias", "orgDpUrl", "orgSuperAdmin", "orgAdmins", "orgJoinedAt", "orgCountry", "orgCity", "orgState", "orgActive", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlatformOrganisationResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlatformOrganisationResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orgId": obj.get("orgId"),
            "orgName": obj.get("orgName"),
            "orgAlias": obj.get("orgAlias"),
            "orgDpUrl": obj.get("orgDpUrl"),
            "orgSuperAdmin": obj.get("orgSuperAdmin"),
            "orgAdmins": obj.get("orgAdmins"),
            "orgJoinedAt": obj.get("orgJoinedAt"),
            "orgCountry": obj.get("orgCountry"),
            "orgCity": obj.get("orgCity"),
            "orgState": obj.get("orgState"),
            "orgActive": obj.get("orgActive"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


