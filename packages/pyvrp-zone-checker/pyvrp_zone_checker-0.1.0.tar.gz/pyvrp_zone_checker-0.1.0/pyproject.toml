[tool.poetry]
name = "pyvrp-zone-checker"
version = "0.1.0"
description = "`pyvrp-zone-checker` is a package wrapper for zone-checker in PyVRP"
authors = [
    "Phuripat Kongsakban <phuripat2519.work@gmail.com>",
    "Chayatorn Prukrattananapa <chayatorn.pruk@gmail.com>",
    "Teeraphat Siritham <teeraphat10221@gmail.com>",
    "Kittithara Sutthaphirom <kittitara0303@gmail.com>",
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/ZGA2519/PyVRP_zone_checker"
keywords = [
    "vehicle routing problem",
    "hybrid genetic search",
    "metaheuristic",
    "zone checker",
]
include = [
    { path = "docs/", format = "sdist" },
    { path = "tests/", format = "sdist" },

    { path = "meson.build", format = "sdist" },
    { path = "meson_options.txt", format = "sdist" },
    { path = "build_extensions.py", format = "sdist" },
    { path = "extract_docstrings.py", format = "sdist" },
    { path = "subprojects/*.wrap", format = "sdist" },

    { path = "pyvrp/**/*.so", format = "wheel" },
    { path = "pyvrp/**/*.pyd", format = "wheel" },
]
exclude = [
    "docs/build",
]
packages = [
    { include = "pyvrp" },
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Development Status :: 5 - Production/Stable",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
]


[tool.poetry.dependencies]
python = "^3.9,<4.0"
numpy = [
    # Numpy 1.26 is the first version of numpy that supports Python 3.12.
    { version = ">=1.15.2", python = "<3.12" },
    { version = ">=1.26.0", python = ">=3.12" }
]
matplotlib = ">=2.2.0"
vrplib = "^1.4.0"
tqdm = "^4.64.1"
tomli = "^2.0.1"


[tool.poetry.group.docs]
optional = true


[tool.poetry.group.docs.dependencies]
sphinx = ">=7.3.0"
nbsphinx = ">=0.8.9"
ipython = ">=8.6.0"
numpydoc = ">=1.5.0"
sphinx-immaterial = ">=0.11.12"


[tool.poetry.group.examples]
optional = true


[tool.poetry.group.examples.dependencies]
jupyter = ">=1.0.0"
tabulate = "^0.9.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^2.20.0"
pytest = ">=6.0.0"
pytest-cov = ">=2.6.1"
codecov = "*"

# These are used in the build script: for compiling the library (meson, ninja)
# and generating docs (docblock) and coverage reports (gcovr).
meson = "^1.0.0"
ninja = "^1.11.1"
gcovr = "^7.2"
docblock = "^0.1.5"


[tool.poetry.scripts]
pyvrp = "pyvrp.cli:main"


[tool.black]
line-length = 79


[tool.ruff]
ignore-init-module-imports = true
line-length = 79
select = [
    "E", "F", "I", "NPY", "PYI", "Q", "RET", "RSE", "RUF", "SLF", "SIM", "TCH"
]


[tool.ruff.isort]
case-sensitive = true
known-first-party = ["pyvrp", "tests"]


[tool.mypy]
ignore_missing_imports = true


[tool.pytest.ini_options]
addopts = "--cov --cov-report=xml --cov-report=term"
testpaths = "tests"


[tool.coverage.run]
omit = [
    "build_extensions.py",  # build entrypoint
    "extract_docstrings.py",  # build script
    "pyvrp/show_versions.py",  # only prints debug information
    "pyvrp/cli.py",  # tested in other ways than unit tests
    "*/tests/*",
    "venv/*",
    "docs/*",
]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstract",
    "if TYPE_CHECKING:",
]


[tool.cibuildwheel]
# We do not support old Python versions (<3.9) and somewhat uncommon platforms.
# For musllinux-based builds we assume users can compile the thing themselves.
skip = "cp36-* cp37-* cp38-* pp* *_ppc64le *_i686 *_s390x *-win32 *-musllinux*"
build-frontend = "build"
test-requires = "pytest>=6.0.0 pytest-cov>=2.6.1"
test-command = "pytest {package}/tests"


[tool.poetry.build]
generate-setup-file = false
script = "build_extensions.py"


[build-system]
# We need meson and ninja to build the C++ extensions, and docblock to extract
# documentation for the extensions.
requires = ["poetry", "meson", "ninja", "docblock"]
build-backend = "poetry.core.masonry.api"
