Metadata-Version: 2.2
Name: Gpt4Zero
Version: 0.0.9
Summary: Gpt4Zero - python библиотека для бесплатного взаимодействия с передовыми нейросетями.
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: requests
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

![banner](https://i.ibb.co/zrpfMXh/3-20250125121647.png)

# Документация для библиотеки `Gpt4Zero`

Библиотека `Gpt4Zero` представляет собой Python инструмент для взаимодействия с новейшими моделями AI. Она обеспечивает простой интерфейс для доступа к моделям Claude Sonnet, GPT-4o и Gemini, поддерживая как стандартный запрос-ответ, так и потоковую передачу данных. Документация ниже описывает установку и использование библиотеки.

## Оглавление

1. [Установка](#1-установка)

2. [Использование](#2-использование)
    * [Быстрый старт](#быстрый-старт)
        * [Инициализация клиента](#инициализация-клиента)
        * [Получение списка доступных моделей](#получение-списка-доступных-моделей)
    * [Метод `chat()`](#метод-chat-подробное-описание)
        * [Параметры](#параметры)
        * [Возвращаемое значение](#возвращаемое-значение)
        * [Исключения](#исключения)
    * [Примеры использования](#примеры-использования)
        * [Простой запрос и полный ответ](#простой-запрос-и-полный-ответ)
        * [Выбор модели GPT-4o](#выбор-модели-gpt-4o)
        * [Потоковая передача ответа](#потоковая-передача-ответа)
        * [Диалог с моделью](#диалог-с-моделью)
        * [Обработка ошибок](#обработка-ошибок)

3. [Советы и лучшие практики](#4-советы-и-лучшие-практики)

4. [Заключение](#5-заключение)

5. [Автор и Поддержка](#6-автор-и-поддержка)

---

## 1. Установка

Установка библиотеки производится с помощью `pip`:

```bash
pip install Gpt4Zero
```

---

## 2. Использование

### Быстрый старт

#### Инициализация клиента

Импортируйте класс `AI_Client` и создайте экземпляр клиента:

```python
from gpt4zero import AI_Client

client = AI_Client()
```

#### Получение списка доступных моделей

Используйте метод `list_models()` для получения списка доступных моделей:

```python
models = client.list_models()
print(f"Доступные модели: {models}")
# Пример вывода: Доступные модели: ['claude-sonnet-3.5', 'gpt-4o', 'gemini-1.5']
```

### Метод `chat()`: подробное описание

Метод `chat(messages, model='claude-sonnet-3.5', stream=False)` используется для взаимодействия с чат API.

#### Параметры:

*   `messages` (list): Список сообщений. Каждое сообщение - словарь с ключами `'role'` и `'content'`.
    *   `'role'`: Роль отправителя ('user').
    *   `'content'`: Текст сообщения.
    *   Пример: `[{'role': 'user', 'content': 'Привет, как дела?'}]`

*   `model` (str, optional): Идентификатор модели. По умолчанию `'claude-sonnet-3.5'`.
    *   Доступные значения: `'claude-sonnet-3.5'`, `'gpt-4o'`, `'gemini-1.5'`.

*   `stream` (bool, optional): Режим потоковой передачи ответа. По умолчанию `False`.
    *   `False`: Возвращает полную строку ответа.
    *   `True`: Возвращает генератор, выдающий части ответа.

#### Возвращаемое значение:

*   Если `stream=False`: `str` - полный текст ответа.
*   Если `stream=True`: `generator` - генератор частей ответа.

#### Исключения:

*   `ValueError`: Неверная модель или `messages` не является списком.
*   `requests.exceptions.RequestException`: Проблемы с HTTP запросом к API.
*   `Exception`: Другие непредвиденные ошибки.

### Примеры использования

#### Простой запрос и полный ответ

```python
from gpt4zero import AI_Client
client = AI_Client()

messages = [{'role': 'user', 'content': 'Расскажи мне о Python.'}]
response = client.chat(messages)
print(f"Ответ модели: {response}")
# Пример вывода:
# Ответ модели: Python - это высокоуровневый, интерпретируемый язык программирования общего назначения. ... (дальнейшее описание Python)
```

#### Выбор модели GPT-4o

```python
from gpt4zero import AI_Client
client = AI_Client()

messages = [{'role': 'user', 'content': 'Напиши короткое стихотворение о лете.'}]
response = client.chat(messages, model='gpt-4o')
print(f"Ответ модели (GPT-4o): {response}")
# Пример вывода:
# Ответ модели (GPT-4o): Солнце светит ярко в небесах,
# Птицы поют, цветы цветут в полях.
# Лето – время радости и тепла,
# Прекраснее сезона не найти никогда.
```

#### Потоковая передача ответа

```python
from gpt4zero import AI_Client
client = AI_Client()

messages = [{'role': 'user', 'content': 'Напиши подробное описание черной дыры.'}]
response_stream = client.chat(messages, stream=True)

print("Потоковый ответ:")
for chunk in response_stream:
    print(chunk, end='', flush=True)
print()
# Пример вывода (потоковый):
# Потоковый ответ:
# Черные дыры - это области пространства-времени, где гравитация настолько сильна, что ничто, даже свет, не может вырваться...
# ...Горизонт событий отмечает границу черной дыры, за которой ничто не может вернуться...
# ...Изучение черных дыр помогает нам понять фундаментальные аспекты гравитации, пространства-времени и Вселенной в целом.
```

#### Диалог с моделью

```python
from gpt4zero import AI_Client
client = AI_Client()

messages = [
    {'role': 'user', 'content': 'Привет!'},
    {'role': 'assistant', 'content': 'Здравствуйте! Чем могу помочь?'},
    {'role': 'user', 'content': 'Расскажи мне о погоде в Москве.'}
]
response = client.chat(messages)
print(f"Ответ модели (диалог): {response}")
# Пример вывода:
# Ответ модели (диалог): В Москве сегодня... (информация о погоде)
```

#### Обработка ошибок

```python
from gpt4zero import AI_Client
client = AI_Client()

try:
    messages = [{'role': 'user', 'content': 'Какой-то запрос'}]
    response = client.chat(messages, model='invalid-model')
    print(f"Ответ модели: {response}")
except ValueError as ve:
    print(f"Ошибка валидации: {ve}")
except requests.exceptions.RequestException as re:
    print(f"Ошибка API запроса: {re}")
except Exception as e:
    print(f"Непредвиденная ошибка: {e}")
# Пример вывода:
# Ошибка валидации: Invalid model: invalid-model. Available models are: ['claude-sonnet-3.5', 'gpt-4o', 'gemini-1.5']
```

---

## 3. Советы и лучшие практики

*   **Выбор модели:**
    *   `claude-sonnet-3.5`: Сбалансированная модель для большинства задач.
    *   `gpt-4o`: Наиболее мощная модель, обеспечивает высокое качество ответов.
    *   `gemini-1.5`: Подходит для задач, где важна скорость и экономичность.

*   **Составление запросов:**
    *   Формулируйте четкие и конкретные запросы.
    *   Экспериментируйте с разными формулировками.
    *   Разбивайте сложные задачи на более простые шаги.

*   **Использование потоковой передачи (`stream=True`):**
    *   Рекомендуется для длинных ответов, улучшает пользовательский опыт.

*   **Обработка ошибок:**
    *   Обрабатывайте исключения для обеспечения стабильности приложения.
    *   Логируйте ошибки для отладки и мониторинга.

---

## 4. Заключение

`Gpt4Zero` предоставляет инструмент для интеграции AI чат-моделей в Python проекты. Библиотека стремится упростить процесс разработки и обеспечить доступ к передовым технологиям AI.

---

## 5. Автор и Поддержка

Библиотека `Gpt4Zero` разработана qwez.

Для связи и получения поддержки:

*   [Telegram](https://t.me/termiss_it)
