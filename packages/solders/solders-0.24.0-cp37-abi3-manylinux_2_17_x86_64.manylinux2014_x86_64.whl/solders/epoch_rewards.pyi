from solders.hash import Hash

class EpochRewards:
    def __init__(
        self,
        distribution_starting_block_height: int,
        num_partitions: int,
        parent_blockhash: Hash,
        total_points: int,
        total_rewards: int,
        distributed_rewards: int,
        active: bool,
    ) -> None: ...
    @property
    def distribution_starting_block_height(self) -> int: ...
    @distribution_starting_block_height.setter
    def distribution_starting_block_height(self, val: int) -> None: ...
    @property
    def num_partitions(self) -> int: ...
    @num_partitions.setter
    def num_partitions(self, val: int) -> None: ...
    @property
    def parent_blockhash(self) -> Hash: ...
    @parent_blockhash.setter
    def parent_blockhash(self, val: Hash) -> None: ...
    @property
    def total_points(self) -> int: ...
    @total_points.setter
    def total_points(self, val: int) -> None: ...
    @property
    def total_rewards(self) -> int: ...
    @total_rewards.setter
    def total_rewards(self, val: int) -> None: ...
    @property
    def distributed_rewards(self) -> int: ...
    @distributed_rewards.setter
    def distributed_rewards(self, val: int) -> None: ...
    @property
    def active(self) -> bool: ...
    @active.setter
    def active(self, val: bool) -> None: ...
    @staticmethod
    def from_bytes(raw_bytes: bytes) -> "EpochRewards": ...
    @staticmethod
    def from_json(raw: str) -> "EpochRewards": ...
    def to_json(self) -> str: ...
    def __bytes__(self) -> bytes: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self, other: "EpochRewards", op: int) -> bool: ...
