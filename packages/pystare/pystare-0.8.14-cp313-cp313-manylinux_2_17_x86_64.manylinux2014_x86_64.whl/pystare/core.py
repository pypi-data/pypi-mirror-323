# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _core
else:
    import _core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator

    def value(self):
        return _core.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _core.SwigPyIterator_equal(self, x)

    def copy(self):
        return _core.SwigPyIterator_copy(self)

    def next(self):
        return _core.SwigPyIterator_next(self)

    def __next__(self):
        return _core.SwigPyIterator___next__(self)

    def previous(self):
        return _core.SwigPyIterator_previous(self)

    def advance(self, n):
        return _core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _core:
_core.SwigPyIterator_swigregister(SwigPyIterator)
class VectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.VectorString___nonzero__(self)

    def __bool__(self):
        return _core.VectorString___bool__(self)

    def __len__(self):
        return _core.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _core.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.VectorString___setitem__(self, *args)

    def pop(self):
        return _core.VectorString_pop(self)

    def append(self, x):
        return _core.VectorString_append(self, x)

    def empty(self):
        return _core.VectorString_empty(self)

    def size(self):
        return _core.VectorString_size(self)

    def swap(self, v):
        return _core.VectorString_swap(self, v)

    def begin(self):
        return _core.VectorString_begin(self)

    def end(self):
        return _core.VectorString_end(self)

    def rbegin(self):
        return _core.VectorString_rbegin(self)

    def rend(self):
        return _core.VectorString_rend(self)

    def clear(self):
        return _core.VectorString_clear(self)

    def get_allocator(self):
        return _core.VectorString_get_allocator(self)

    def pop_back(self):
        return _core.VectorString_pop_back(self)

    def erase(self, *args):
        return _core.VectorString_erase(self, *args)

    def __init__(self, *args):
        _core.VectorString_swiginit(self, _core.new_VectorString(*args))

    def push_back(self, x):
        return _core.VectorString_push_back(self, x)

    def front(self):
        return _core.VectorString_front(self)

    def back(self):
        return _core.VectorString_back(self)

    def assign(self, n, x):
        return _core.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _core.VectorString_resize(self, *args)

    def insert(self, *args):
        return _core.VectorString_insert(self, *args)

    def reserve(self, n):
        return _core.VectorString_reserve(self, n)

    def capacity(self):
        return _core.VectorString_capacity(self)
    __swig_destroy__ = _core.delete_VectorString

# Register VectorString in _core:
_core.VectorString_swigregister(VectorString)

def print_args(argv):
    return _core.print_args(argv)


def stare_version():
    return _core.stare_version()

def _from_latlon(lat, lon, level):
    return _core._from_latlon(lat, lon, level)

def _from_latlon2D(lat, lon, indices, level, adapt_resolution, fill_value_enabled, fill_value_in, fill_value_out):
    return _core._from_latlon2D(lat, lon, indices, level, adapt_resolution, fill_value_enabled, fill_value_in, fill_value_out)

def _to_latlon(indices):
    return _core._to_latlon(indices)

def _to_latlonlevel(indices):
    return _core._to_latlonlevel(indices)

def _to_level(indices):
    return _core._to_level(indices)

def _to_area(indices):
    return _core._to_area(indices)

def _from_intervals(intervals):
    return _core._from_intervals(intervals)

def _to_vertices_latlon(indices):
    return _core._to_vertices_latlon(indices)

def _to_compressed_range(indices, range_indices):
    return _core._to_compressed_range(indices, range_indices)

def _intersect(indices1, indices2, intersection):
    return _core._intersect(indices1, indices2, intersection)

def _intersect_multiresolution(indices1, indices2, intersection):
    return _core._intersect_multiresolution(indices1, indices2, intersection)

def _cmp_spatial(indices1, indices2, cmp):
    return _core._cmp_spatial(indices1, indices2, cmp)

def _intersects(indices1, indices2, method=0):
    return _core._intersects(indices1, indices2, method)

def _from_utc(datetime, forward_resolution, reverse_resolution):
    return _core._from_utc(datetime, forward_resolution, reverse_resolution)

def _from_utc_variable(datetime, forward_resolution, reverse_resolution):
    return _core._from_utc_variable(datetime, forward_resolution, reverse_resolution)

def _to_utc_approximate(indices):
    return _core._to_utc_approximate(indices)

def _cmp_temporal(indices1, indices2, cmp):
    return _core._cmp_temporal(indices1, indices2, cmp)

def _coarsest_resolution_finer_or_equal_milliseconds(milliseconds):
    return _core._coarsest_resolution_finer_or_equal_milliseconds(milliseconds)

def _milliseconds_at_resolution(resolutions):
    return _core._milliseconds_at_resolution(resolutions)

def _from_tai_iso_strings(taiStrings, out_array):
    return _core._from_tai_iso_strings(taiStrings, out_array)

def _to_tai_iso_strings(indices):
    return _core._to_tai_iso_strings(indices)

def _scidbTemporalValueIntersectionIfOverlap(indices1, indices2, cmp):
    return _core._scidbTemporalValueIntersectionIfOverlap(indices1, indices2, cmp)

def _scidbTemporalValueUnionIfOverlap(indices1, indices2, cmp):
    return _core._scidbTemporalValueUnionIfOverlap(indices1, indices2, cmp)

def _scidbOverlapTAI(indices1, indices2, cmp):
    return _core._scidbOverlapTAI(indices1, indices2, cmp)

def _scidbOverlap(indices1, indices2, cmp):
    return _core._scidbOverlap(indices1, indices2, cmp)

def _scidbContainsInstant(indices1, indices2, cmp):
    return _core._scidbContainsInstant(indices1, indices2, cmp)

def _set_reverse_resolution(indices, reverse_resolution, out_array):
    return _core._set_reverse_resolution(indices, reverse_resolution, out_array)

def _set_forward_resolution(indices, forward_resolution, out_array):
    return _core._set_forward_resolution(indices, forward_resolution, out_array)

def _forward_resolution(indices, out_array):
    return _core._forward_resolution(indices, out_array)

def _reverse_resolution(indices, out_array):
    return _core._reverse_resolution(indices, out_array)

def _coarsen(indices, reverse_increment, forward_increment, out_array):
    return _core._coarsen(indices, reverse_increment, forward_increment, out_array)

def _scidbUpperBoundTAI(indices, out_array):
    return _core._scidbUpperBoundTAI(indices, out_array)

def _scidbLowerBoundTAI(indices, out_array):
    return _core._scidbLowerBoundTAI(indices, out_array)

def _scidbUpperBoundMS(indices, out_array):
    return _core._scidbUpperBoundMS(indices, out_array)

def _scidbLowerBoundMS(indices, out_array):
    return _core._scidbLowerBoundMS(indices, out_array)

def _scidbNewTemporalValue(indices, include_bounds):
    return _core._scidbNewTemporalValue(indices, include_bounds)

def _from_JulianTAI(d1, d2, f_res, r_res):
    return _core._from_JulianTAI(d1, d2, f_res, r_res)

def _to_JulianTAI(indices):
    return _core._to_JulianTAI(indices)

def _from_JulianUTC(d1, d2, f_res, r_res):
    return _core._from_JulianUTC(d1, d2, f_res, r_res)

def _to_JulianUTC(indices):
    return _core._to_JulianUTC(indices)

def _set_temporal_resolutions_from_sorted_inplace(indices_inplace, include_bounds):
    return _core._set_temporal_resolutions_from_sorted_inplace(indices_inplace, include_bounds)
SpatialIntervals = _core.SpatialIntervals
ArrayIndexSpatialValues = _core.ArrayIndexSpatialValues
class StareResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _core.StareResult_swiginit(self, _core.new_StareResult())

    def add_intervals(self, sis):
        return _core.StareResult_add_intervals(self, sis)

    def add_indexValues(self, sisvs):
        return _core.StareResult_add_indexValues(self, sisvs)
    __swig_destroy__ = _core.delete_StareResult

    def get_size(self):
        return _core.StareResult_get_size(self)
    values_multi_resolution = property(_core.StareResult_values_multi_resolution_get, _core.StareResult_values_multi_resolution_set)

    def set_values_multi_resolution(self, multi_resolution):
        return _core.StareResult_set_values_multi_resolution(self, multi_resolution)

    def get_size_as_values(self):
        return _core.StareResult_get_size_as_values(self)

    def get_size_as_intervals(self):
        return _core.StareResult_get_size_as_intervals(self)

    def copy(self, indices):
        return _core.StareResult_copy(self, indices)

    def copy_as_values(self, indices):
        return _core.StareResult_copy_as_values(self, indices)

    def copy_as_intervals(self, indices):
        return _core.StareResult_copy_as_intervals(self, indices)

    def convert(self):
        return _core.StareResult_convert(self)
    converted = property(_core.StareResult_converted_get, _core.StareResult_converted_set)
    sis = property(_core.StareResult_sis_get, _core.StareResult_sis_set)
    sisvs = property(_core.StareResult_sisvs_get, _core.StareResult_sisvs_set)
    sCase = property(_core.StareResult_sCase_get, _core.StareResult_sCase_set)

# Register StareResult in _core:
_core.StareResult_swigregister(StareResult)
cvar = _core.cvar


def _to_neighbors(indices):
    return _core._to_neighbors(indices)

def _to_circular_cover(lat, lon, radius, resolution):
    return _core._to_circular_cover(lat, lon, radius, resolution)

def _to_nonconvex_hull_range_from_latlon(lat, lon, resolution):
    return _core._to_nonconvex_hull_range_from_latlon(lat, lon, resolution)

def _expand_intervals(indices, resolution, multi_resolution):
    return _core._expand_intervals(indices, resolution, multi_resolution)

def _to_box_cover_from_latlon(lat, lon, resolution):
    return _core._to_box_cover_from_latlon(lat, lon, resolution)

def _to_hull_range(indices, resolution):
    return _core._to_hull_range(indices, resolution)

def _to_hull_range_from_latlon(lat, lon, resolution):
    return _core._to_hull_range_from_latlon(lat, lon, resolution)

def _adapt_resolution_to_proximity(indices, range_indices):
    return _core._adapt_resolution_to_proximity(indices, range_indices)
class srange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _core.srange_swiginit(self, _core.new_srange(*args))
    __swig_destroy__ = _core.delete_srange

    def add_intervals(self, indices):
        return _core.srange_add_intervals(self, indices)

    def add_range(self, r):
        return _core.srange_add_range(self, r)

    def contains(self, siv):
        return _core.srange_contains(self, siv)

    def acontains(self, indices1, indices2, fill_value=-1):
        return _core.srange_acontains(self, indices1, indices2, fill_value)
    intervals_extracted = property(_core.srange_intervals_extracted_get, _core.srange_intervals_extracted_set)

    def extract_intervals(self):
        return _core.srange_extract_intervals(self)

    def get_size_as_intervals(self):
        return _core.srange_get_size_as_intervals(self)

    def copy_intervals(self, indices):
        return _core.srange_copy_intervals(self, indices)
    values_extracted = property(_core.srange_values_extracted_get, _core.srange_values_extracted_set)
    values_multi_resolution = property(_core.srange_values_multi_resolution_get, _core.srange_values_multi_resolution_set)

    def set_values_multi_resolution(self, multi_resolution):
        return _core.srange_set_values_multi_resolution(self, multi_resolution)

    def extract_values(self):
        return _core.srange_extract_values(self)

    def get_size_as_values(self):
        return _core.srange_get_size_as_values(self)

    def copy_values(self, indices):
        return _core.srange_copy_values(self, indices)

    def reset_extraction(self):
        return _core.srange_reset_extraction(self)

    def reset(self):
        return _core.srange_reset(self)

    def purge(self):
        return _core.srange_purge(self)

    def compress(self):
        return _core.srange_compress(self)
    range = property(_core.srange_range_get, _core.srange_range_set)
    sis = property(_core.srange_sis_get, _core.srange_sis_set)
    sivs = property(_core.srange_sivs_get, _core.srange_sivs_set)

    def add_intersect(self, one, other, compress):
        return _core.srange_add_intersect(self, one, other, compress)

# Register srange in _core:
_core.srange_swigregister(srange)

