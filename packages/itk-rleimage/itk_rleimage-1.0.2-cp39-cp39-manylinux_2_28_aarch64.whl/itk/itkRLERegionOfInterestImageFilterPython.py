# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RLEImagePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRLERegionOfInterestImageFilterPython
else:
    import _itkRLERegionOfInterestImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkRLEImagePython
class itkImageSourceRLEImageD2US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageD2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageD2US
        GetOutput(self) -> itkRLEImageD2US
        GetOutput(self, idx) -> itkRLEImageD2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD2US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD2US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD2US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD2US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageD2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageD2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD2US_cast(obj)

# Register itkImageSourceRLEImageD2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD2US_swigregister(itkImageSourceRLEImageD2US)
class itkImageSourceRLEImageD3US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageD3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageD3US
        GetOutput(self) -> itkRLEImageD3US
        GetOutput(self, idx) -> itkRLEImageD3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD3US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD3US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD3US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD3US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageD3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageD3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD3US_cast(obj)

# Register itkImageSourceRLEImageD3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD3US_swigregister(itkImageSourceRLEImageD3US)
class itkImageSourceRLEImageD4US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageD4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageD4US
        GetOutput(self) -> itkRLEImageD4US
        GetOutput(self, idx) -> itkRLEImageD4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD4US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD4US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD4US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD4US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageD4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageD4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD4US_cast(obj)

# Register itkImageSourceRLEImageD4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageD4US_swigregister(itkImageSourceRLEImageD4US)
class itkImageSourceRLEImageF2US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageF2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageF2US
        GetOutput(self) -> itkRLEImageF2US
        GetOutput(self, idx) -> itkRLEImageF2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF2US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF2US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF2US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF2US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageF2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageF2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF2US_cast(obj)

# Register itkImageSourceRLEImageF2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF2US_swigregister(itkImageSourceRLEImageF2US)
class itkImageSourceRLEImageF3US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageF3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageF3US
        GetOutput(self) -> itkRLEImageF3US
        GetOutput(self, idx) -> itkRLEImageF3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF3US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF3US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF3US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF3US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageF3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageF3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF3US_cast(obj)

# Register itkImageSourceRLEImageF3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF3US_swigregister(itkImageSourceRLEImageF3US)
class itkImageSourceRLEImageF4US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageF4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageF4US
        GetOutput(self) -> itkRLEImageF4US
        GetOutput(self, idx) -> itkRLEImageF4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF4US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF4US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF4US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF4US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageF4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageF4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF4US_cast(obj)

# Register itkImageSourceRLEImageF4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageF4US_swigregister(itkImageSourceRLEImageF4US)
class itkImageSourceRLEImageSS2US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageSS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageSS2US
        GetOutput(self) -> itkRLEImageSS2US
        GetOutput(self, idx) -> itkRLEImageSS2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS2US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS2US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS2US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS2US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageSS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageSS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS2US_cast(obj)

# Register itkImageSourceRLEImageSS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS2US_swigregister(itkImageSourceRLEImageSS2US)
class itkImageSourceRLEImageSS3US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageSS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageSS3US
        GetOutput(self) -> itkRLEImageSS3US
        GetOutput(self, idx) -> itkRLEImageSS3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS3US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS3US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS3US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS3US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageSS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageSS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS3US_cast(obj)

# Register itkImageSourceRLEImageSS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS3US_swigregister(itkImageSourceRLEImageSS3US)
class itkImageSourceRLEImageSS4US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageSS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageSS4US
        GetOutput(self) -> itkRLEImageSS4US
        GetOutput(self, idx) -> itkRLEImageSS4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS4US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS4US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS4US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS4US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageSS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageSS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS4US_cast(obj)

# Register itkImageSourceRLEImageSS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageSS4US_swigregister(itkImageSourceRLEImageSS4US)
class itkImageSourceRLEImageUC2US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageUC2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageUC2US
        GetOutput(self) -> itkRLEImageUC2US
        GetOutput(self, idx) -> itkRLEImageUC2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC2US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC2US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC2US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC2US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageUC2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageUC2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC2US_cast(obj)

# Register itkImageSourceRLEImageUC2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC2US_swigregister(itkImageSourceRLEImageUC2US)
class itkImageSourceRLEImageUC3US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageUC3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageUC3US
        GetOutput(self) -> itkRLEImageUC3US
        GetOutput(self, idx) -> itkRLEImageUC3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC3US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC3US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC3US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC3US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageUC3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageUC3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC3US_cast(obj)

# Register itkImageSourceRLEImageUC3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC3US_swigregister(itkImageSourceRLEImageUC3US)
class itkImageSourceRLEImageUC4US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageUC4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageUC4US
        GetOutput(self) -> itkRLEImageUC4US
        GetOutput(self, idx) -> itkRLEImageUC4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC4US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC4US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC4US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC4US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageUC4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageUC4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC4US_cast(obj)

# Register itkImageSourceRLEImageUC4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUC4US_swigregister(itkImageSourceRLEImageUC4US)
class itkImageSourceRLEImageUS2US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageUS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageUS2US
        GetOutput(self) -> itkRLEImageUS2US
        GetOutput(self, idx) -> itkRLEImageUS2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS2US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS2US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS2US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS2US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageUS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageUS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS2US_cast(obj)

# Register itkImageSourceRLEImageUS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS2US_swigregister(itkImageSourceRLEImageUS2US)
class itkImageSourceRLEImageUS3US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageUS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageUS3US
        GetOutput(self) -> itkRLEImageUS3US
        GetOutput(self, idx) -> itkRLEImageUS3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS3US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS3US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS3US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS3US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageUS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageUS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS3US_cast(obj)

# Register itkImageSourceRLEImageUS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS3US_swigregister(itkImageSourceRLEImageUS3US)
class itkImageSourceRLEImageUS4US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceRLEImageUS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkRLEImageUS4US
        GetOutput(self) -> itkRLEImageUS4US
        GetOutput(self, idx) -> itkRLEImageUS4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS4US_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS4US_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS4US_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS4US_MakeOutput(self, *args)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageSourceRLEImageUS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceRLEImageUS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS4US_cast(obj)

# Register itkImageSourceRLEImageUS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageSourceRLEImageUS4US_swigregister(itkImageSourceRLEImageUS4US)
class itkImageToImageFilterID2RLEImageD2US(itkImageSourceRLEImageD2US):
    r"""Proxy of C++ itkImageToImageFilterID2RLEImageD2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterID2RLEImageD2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2RLEImageD2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_cast(obj)

# Register itkImageToImageFilterID2RLEImageD2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID2RLEImageD2US_swigregister(itkImageToImageFilterID2RLEImageD2US)
class itkImageToImageFilterID3RLEImageD3US(itkImageSourceRLEImageD3US):
    r"""Proxy of C++ itkImageToImageFilterID3RLEImageD3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterID3RLEImageD3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3RLEImageD3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_cast(obj)

# Register itkImageToImageFilterID3RLEImageD3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID3RLEImageD3US_swigregister(itkImageToImageFilterID3RLEImageD3US)
class itkImageToImageFilterID4RLEImageD4US(itkImageSourceRLEImageD4US):
    r"""Proxy of C++ itkImageToImageFilterID4RLEImageD4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterID4RLEImageD4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4RLEImageD4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_cast(obj)

# Register itkImageToImageFilterID4RLEImageD4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterID4RLEImageD4US_swigregister(itkImageToImageFilterID4RLEImageD4US)
class itkImageToImageFilterIF2RLEImageF2US(itkImageSourceRLEImageF2US):
    r"""Proxy of C++ itkImageToImageFilterIF2RLEImageF2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIF2RLEImageF2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2RLEImageF2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_cast(obj)

# Register itkImageToImageFilterIF2RLEImageF2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF2RLEImageF2US_swigregister(itkImageToImageFilterIF2RLEImageF2US)
class itkImageToImageFilterIF3RLEImageF3US(itkImageSourceRLEImageF3US):
    r"""Proxy of C++ itkImageToImageFilterIF3RLEImageF3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIF3RLEImageF3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3RLEImageF3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_cast(obj)

# Register itkImageToImageFilterIF3RLEImageF3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF3RLEImageF3US_swigregister(itkImageToImageFilterIF3RLEImageF3US)
class itkImageToImageFilterIF4RLEImageF4US(itkImageSourceRLEImageF4US):
    r"""Proxy of C++ itkImageToImageFilterIF4RLEImageF4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIF4RLEImageF4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4RLEImageF4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_cast(obj)

# Register itkImageToImageFilterIF4RLEImageF4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIF4RLEImageF4US_swigregister(itkImageToImageFilterIF4RLEImageF4US)
class itkImageToImageFilterISS2RLEImageSS2US(itkImageSourceRLEImageSS2US):
    r"""Proxy of C++ itkImageToImageFilterISS2RLEImageSS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterISS2RLEImageSS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2RLEImageSS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_cast(obj)

# Register itkImageToImageFilterISS2RLEImageSS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS2RLEImageSS2US_swigregister(itkImageToImageFilterISS2RLEImageSS2US)
class itkImageToImageFilterISS3RLEImageSS3US(itkImageSourceRLEImageSS3US):
    r"""Proxy of C++ itkImageToImageFilterISS3RLEImageSS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterISS3RLEImageSS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3RLEImageSS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_cast(obj)

# Register itkImageToImageFilterISS3RLEImageSS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS3RLEImageSS3US_swigregister(itkImageToImageFilterISS3RLEImageSS3US)
class itkImageToImageFilterISS4RLEImageSS4US(itkImageSourceRLEImageSS4US):
    r"""Proxy of C++ itkImageToImageFilterISS4RLEImageSS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterISS4RLEImageSS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4RLEImageSS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_cast(obj)

# Register itkImageToImageFilterISS4RLEImageSS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterISS4RLEImageSS4US_swigregister(itkImageToImageFilterISS4RLEImageSS4US)
class itkImageToImageFilterIUC2RLEImageUC2US(itkImageSourceRLEImageUC2US):
    r"""Proxy of C++ itkImageToImageFilterIUC2RLEImageUC2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIUC2RLEImageUC2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2RLEImageUC2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_cast(obj)

# Register itkImageToImageFilterIUC2RLEImageUC2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC2RLEImageUC2US_swigregister(itkImageToImageFilterIUC2RLEImageUC2US)
class itkImageToImageFilterIUC3RLEImageUC3US(itkImageSourceRLEImageUC3US):
    r"""Proxy of C++ itkImageToImageFilterIUC3RLEImageUC3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIUC3RLEImageUC3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3RLEImageUC3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_cast(obj)

# Register itkImageToImageFilterIUC3RLEImageUC3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC3RLEImageUC3US_swigregister(itkImageToImageFilterIUC3RLEImageUC3US)
class itkImageToImageFilterIUC4RLEImageUC4US(itkImageSourceRLEImageUC4US):
    r"""Proxy of C++ itkImageToImageFilterIUC4RLEImageUC4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIUC4RLEImageUC4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4RLEImageUC4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_cast(obj)

# Register itkImageToImageFilterIUC4RLEImageUC4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUC4RLEImageUC4US_swigregister(itkImageToImageFilterIUC4RLEImageUC4US)
class itkImageToImageFilterIUS2RLEImageUS2US(itkImageSourceRLEImageUS2US):
    r"""Proxy of C++ itkImageToImageFilterIUS2RLEImageUS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIUS2RLEImageUS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2RLEImageUS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_cast(obj)

# Register itkImageToImageFilterIUS2RLEImageUS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS2RLEImageUS2US_swigregister(itkImageToImageFilterIUS2RLEImageUS2US)
class itkImageToImageFilterIUS3RLEImageUS3US(itkImageSourceRLEImageUS3US):
    r"""Proxy of C++ itkImageToImageFilterIUS3RLEImageUS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIUS3RLEImageUS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3RLEImageUS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_cast(obj)

# Register itkImageToImageFilterIUS3RLEImageUS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS3RLEImageUS3US_swigregister(itkImageToImageFilterIUS3RLEImageUS3US)
class itkImageToImageFilterIUS4RLEImageUS4US(itkImageSourceRLEImageUS4US):
    r"""Proxy of C++ itkImageToImageFilterIUS4RLEImageUS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterIUS4RLEImageUS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4RLEImageUS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_cast(obj)

# Register itkImageToImageFilterIUS4RLEImageUS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterIUS4RLEImageUS4US_swigregister(itkImageToImageFilterIUS4RLEImageUS4US)
class itkImageToImageFilterRLEImageD2USID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterRLEImageD2USID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageD2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageD2US
        GetInput(self, idx) -> itkRLEImageD2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageD2USID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageD2USID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_cast(obj)

# Register itkImageToImageFilterRLEImageD2USID2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USID2_swigregister(itkImageToImageFilterRLEImageD2USID2)
class itkImageToImageFilterRLEImageD2USRLEImageD2US(itkImageSourceRLEImageD2US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageD2USRLEImageD2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageD2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageD2US
        GetInput(self, idx) -> itkRLEImageD2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageD2USRLEImageD2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageD2USRLEImageD2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_cast(obj)

# Register itkImageToImageFilterRLEImageD2USRLEImageD2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD2USRLEImageD2US_swigregister(itkImageToImageFilterRLEImageD2USRLEImageD2US)
class itkImageToImageFilterRLEImageD3USID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterRLEImageD3USID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageD3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageD3US
        GetInput(self, idx) -> itkRLEImageD3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageD3USID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageD3USID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_cast(obj)

# Register itkImageToImageFilterRLEImageD3USID3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USID3_swigregister(itkImageToImageFilterRLEImageD3USID3)
class itkImageToImageFilterRLEImageD3USRLEImageD3US(itkImageSourceRLEImageD3US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageD3USRLEImageD3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageD3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageD3US
        GetInput(self, idx) -> itkRLEImageD3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageD3USRLEImageD3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageD3USRLEImageD3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_cast(obj)

# Register itkImageToImageFilterRLEImageD3USRLEImageD3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD3USRLEImageD3US_swigregister(itkImageToImageFilterRLEImageD3USRLEImageD3US)
class itkImageToImageFilterRLEImageD4USID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterRLEImageD4USID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageD4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageD4US
        GetInput(self, idx) -> itkRLEImageD4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageD4USID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageD4USID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_cast(obj)

# Register itkImageToImageFilterRLEImageD4USID4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USID4_swigregister(itkImageToImageFilterRLEImageD4USID4)
class itkImageToImageFilterRLEImageD4USRLEImageD4US(itkImageSourceRLEImageD4US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageD4USRLEImageD4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageD4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageD4US
        GetInput(self, idx) -> itkRLEImageD4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageD4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageD4USRLEImageD4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageD4USRLEImageD4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_cast(obj)

# Register itkImageToImageFilterRLEImageD4USRLEImageD4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageD4USRLEImageD4US_swigregister(itkImageToImageFilterRLEImageD4USRLEImageD4US)
class itkImageToImageFilterRLEImageF2USIF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterRLEImageF2USIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageF2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageF2US
        GetInput(self, idx) -> itkRLEImageF2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageF2USIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageF2USIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_cast(obj)

# Register itkImageToImageFilterRLEImageF2USIF2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USIF2_swigregister(itkImageToImageFilterRLEImageF2USIF2)
class itkImageToImageFilterRLEImageF2USRLEImageF2US(itkImageSourceRLEImageF2US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageF2USRLEImageF2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageF2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageF2US
        GetInput(self, idx) -> itkRLEImageF2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageF2USRLEImageF2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageF2USRLEImageF2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_cast(obj)

# Register itkImageToImageFilterRLEImageF2USRLEImageF2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF2USRLEImageF2US_swigregister(itkImageToImageFilterRLEImageF2USRLEImageF2US)
class itkImageToImageFilterRLEImageF3USIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterRLEImageF3USIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageF3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageF3US
        GetInput(self, idx) -> itkRLEImageF3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageF3USIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageF3USIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_cast(obj)

# Register itkImageToImageFilterRLEImageF3USIF3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USIF3_swigregister(itkImageToImageFilterRLEImageF3USIF3)
class itkImageToImageFilterRLEImageF3USRLEImageF3US(itkImageSourceRLEImageF3US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageF3USRLEImageF3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageF3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageF3US
        GetInput(self, idx) -> itkRLEImageF3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageF3USRLEImageF3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageF3USRLEImageF3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_cast(obj)

# Register itkImageToImageFilterRLEImageF3USRLEImageF3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF3USRLEImageF3US_swigregister(itkImageToImageFilterRLEImageF3USRLEImageF3US)
class itkImageToImageFilterRLEImageF4USIF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterRLEImageF4USIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageF4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageF4US
        GetInput(self, idx) -> itkRLEImageF4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageF4USIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageF4USIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_cast(obj)

# Register itkImageToImageFilterRLEImageF4USIF4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USIF4_swigregister(itkImageToImageFilterRLEImageF4USIF4)
class itkImageToImageFilterRLEImageF4USRLEImageF4US(itkImageSourceRLEImageF4US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageF4USRLEImageF4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageF4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageF4US
        GetInput(self, idx) -> itkRLEImageF4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageF4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageF4USRLEImageF4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageF4USRLEImageF4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_cast(obj)

# Register itkImageToImageFilterRLEImageF4USRLEImageF4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageF4USRLEImageF4US_swigregister(itkImageToImageFilterRLEImageF4USRLEImageF4US)
class itkImageToImageFilterRLEImageSS2USISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterRLEImageSS2USISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageSS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageSS2US
        GetInput(self, idx) -> itkRLEImageSS2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageSS2USISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageSS2USISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_cast(obj)

# Register itkImageToImageFilterRLEImageSS2USISS2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USISS2_swigregister(itkImageToImageFilterRLEImageSS2USISS2)
class itkImageToImageFilterRLEImageSS2USRLEImageSS2US(itkImageSourceRLEImageSS2US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageSS2USRLEImageSS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageSS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageSS2US
        GetInput(self, idx) -> itkRLEImageSS2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageSS2USRLEImageSS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageSS2USRLEImageSS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_cast(obj)

# Register itkImageToImageFilterRLEImageSS2USRLEImageSS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS2USRLEImageSS2US_swigregister(itkImageToImageFilterRLEImageSS2USRLEImageSS2US)
class itkImageToImageFilterRLEImageSS3USISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterRLEImageSS3USISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageSS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageSS3US
        GetInput(self, idx) -> itkRLEImageSS3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageSS3USISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageSS3USISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_cast(obj)

# Register itkImageToImageFilterRLEImageSS3USISS3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USISS3_swigregister(itkImageToImageFilterRLEImageSS3USISS3)
class itkImageToImageFilterRLEImageSS3USRLEImageSS3US(itkImageSourceRLEImageSS3US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageSS3USRLEImageSS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageSS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageSS3US
        GetInput(self, idx) -> itkRLEImageSS3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageSS3USRLEImageSS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageSS3USRLEImageSS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_cast(obj)

# Register itkImageToImageFilterRLEImageSS3USRLEImageSS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS3USRLEImageSS3US_swigregister(itkImageToImageFilterRLEImageSS3USRLEImageSS3US)
class itkImageToImageFilterRLEImageSS4USISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterRLEImageSS4USISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageSS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageSS4US
        GetInput(self, idx) -> itkRLEImageSS4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageSS4USISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageSS4USISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_cast(obj)

# Register itkImageToImageFilterRLEImageSS4USISS4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USISS4_swigregister(itkImageToImageFilterRLEImageSS4USISS4)
class itkImageToImageFilterRLEImageSS4USRLEImageSS4US(itkImageSourceRLEImageSS4US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageSS4USRLEImageSS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageSS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageSS4US
        GetInput(self, idx) -> itkRLEImageSS4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageSS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageSS4USRLEImageSS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageSS4USRLEImageSS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_cast(obj)

# Register itkImageToImageFilterRLEImageSS4USRLEImageSS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageSS4USRLEImageSS4US_swigregister(itkImageToImageFilterRLEImageSS4USRLEImageSS4US)
class itkImageToImageFilterRLEImageUC2USIUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUC2USIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUC2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUC2US
        GetInput(self, idx) -> itkRLEImageUC2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUC2USIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUC2USIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_cast(obj)

# Register itkImageToImageFilterRLEImageUC2USIUC2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USIUC2_swigregister(itkImageToImageFilterRLEImageUC2USIUC2)
class itkImageToImageFilterRLEImageUC2USRLEImageUC2US(itkImageSourceRLEImageUC2US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUC2USRLEImageUC2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUC2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUC2US
        GetInput(self, idx) -> itkRLEImageUC2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUC2USRLEImageUC2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUC2USRLEImageUC2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_cast(obj)

# Register itkImageToImageFilterRLEImageUC2USRLEImageUC2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC2USRLEImageUC2US_swigregister(itkImageToImageFilterRLEImageUC2USRLEImageUC2US)
class itkImageToImageFilterRLEImageUC3USIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUC3USIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUC3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUC3US
        GetInput(self, idx) -> itkRLEImageUC3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUC3USIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUC3USIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_cast(obj)

# Register itkImageToImageFilterRLEImageUC3USIUC3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USIUC3_swigregister(itkImageToImageFilterRLEImageUC3USIUC3)
class itkImageToImageFilterRLEImageUC3USRLEImageUC3US(itkImageSourceRLEImageUC3US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUC3USRLEImageUC3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUC3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUC3US
        GetInput(self, idx) -> itkRLEImageUC3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUC3USRLEImageUC3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUC3USRLEImageUC3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_cast(obj)

# Register itkImageToImageFilterRLEImageUC3USRLEImageUC3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC3USRLEImageUC3US_swigregister(itkImageToImageFilterRLEImageUC3USRLEImageUC3US)
class itkImageToImageFilterRLEImageUC4USIUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUC4USIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUC4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUC4US
        GetInput(self, idx) -> itkRLEImageUC4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUC4USIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUC4USIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_cast(obj)

# Register itkImageToImageFilterRLEImageUC4USIUC4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USIUC4_swigregister(itkImageToImageFilterRLEImageUC4USIUC4)
class itkImageToImageFilterRLEImageUC4USRLEImageUC4US(itkImageSourceRLEImageUC4US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUC4USRLEImageUC4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUC4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUC4US
        GetInput(self, idx) -> itkRLEImageUC4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUC4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUC4USRLEImageUC4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUC4USRLEImageUC4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_cast(obj)

# Register itkImageToImageFilterRLEImageUC4USRLEImageUC4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUC4USRLEImageUC4US_swigregister(itkImageToImageFilterRLEImageUC4USRLEImageUC4US)
class itkImageToImageFilterRLEImageUS2USIUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUS2USIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUS2US
        GetInput(self, idx) -> itkRLEImageUS2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUS2USIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUS2USIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_cast(obj)

# Register itkImageToImageFilterRLEImageUS2USIUS2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USIUS2_swigregister(itkImageToImageFilterRLEImageUS2USIUS2)
class itkImageToImageFilterRLEImageUS2USRLEImageUS2US(itkImageSourceRLEImageUS2US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUS2USRLEImageUS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS2US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUS2US
        GetInput(self, idx) -> itkRLEImageUS2US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS2US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUS2USRLEImageUS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUS2USRLEImageUS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_cast(obj)

# Register itkImageToImageFilterRLEImageUS2USRLEImageUS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS2USRLEImageUS2US_swigregister(itkImageToImageFilterRLEImageUS2USRLEImageUS2US)
class itkImageToImageFilterRLEImageUS3USIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUS3USIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUS3US
        GetInput(self, idx) -> itkRLEImageUS3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUS3USIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUS3USIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_cast(obj)

# Register itkImageToImageFilterRLEImageUS3USIUS3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USIUS3_swigregister(itkImageToImageFilterRLEImageUS3USIUS3)
class itkImageToImageFilterRLEImageUS3USRLEImageUS3US(itkImageSourceRLEImageUS3US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUS3USRLEImageUS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS3US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUS3US
        GetInput(self, idx) -> itkRLEImageUS3US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS3US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUS3USRLEImageUS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUS3USRLEImageUS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_cast(obj)

# Register itkImageToImageFilterRLEImageUS3USRLEImageUS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS3USRLEImageUS3US_swigregister(itkImageToImageFilterRLEImageUS3USRLEImageUS3US)
class itkImageToImageFilterRLEImageUS4USIUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUS4USIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUS4US
        GetInput(self, idx) -> itkRLEImageUS4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUS4USIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUS4USIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_cast(obj)

# Register itkImageToImageFilterRLEImageUS4USIUS4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USIUS4_swigregister(itkImageToImageFilterRLEImageUS4USIUS4)
class itkImageToImageFilterRLEImageUS4USRLEImageUS4US(itkImageSourceRLEImageUS4US):
    r"""Proxy of C++ itkImageToImageFilterRLEImageUS4USRLEImageUS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS4US const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkRLEImageUS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkRLEImageUS4US
        GetInput(self, idx) -> itkRLEImageUS4US

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkRLEImageUS4US const *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_GetDirectionTolerance(self)
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkImageToImageFilterRLEImageUS4USRLEImageUS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterRLEImageUS4USRLEImageUS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_cast(obj)

# Register itkImageToImageFilterRLEImageUS4USRLEImageUS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkImageToImageFilterRLEImageUS4USRLEImageUS4US_swigregister(itkImageToImageFilterRLEImageUS4USRLEImageUS4US)

def itkRegionOfInterestImageFilterID2RLEImageD2US_New():
    return itkRegionOfInterestImageFilterID2RLEImageD2US.New()

class itkRegionOfInterestImageFilterID2RLEImageD2US(itkImageToImageFilterID2RLEImageD2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterID2RLEImageD2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterID2RLEImageD2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2RLEImageD2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterID2RLEImageD2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2RLEImageD2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2RLEImageD2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2RLEImageD2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2RLEImageD2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2RLEImageD2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterID2RLEImageD2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterID2RLEImageD2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2RLEImageD2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterID2RLEImageD2US

        Create a new object of the class itkRegionOfInterestImageFilterID2RLEImageD2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterID2RLEImageD2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterID2RLEImageD2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterID2RLEImageD2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterID2RLEImageD2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2RLEImageD2US_swigregister(itkRegionOfInterestImageFilterID2RLEImageD2US)

def itkRegionOfInterestImageFilterID3RLEImageD3US_New():
    return itkRegionOfInterestImageFilterID3RLEImageD3US.New()

class itkRegionOfInterestImageFilterID3RLEImageD3US(itkImageToImageFilterID3RLEImageD3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterID3RLEImageD3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterID3RLEImageD3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3RLEImageD3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterID3RLEImageD3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3RLEImageD3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3RLEImageD3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3RLEImageD3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3RLEImageD3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3RLEImageD3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterID3RLEImageD3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterID3RLEImageD3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3RLEImageD3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterID3RLEImageD3US

        Create a new object of the class itkRegionOfInterestImageFilterID3RLEImageD3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterID3RLEImageD3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterID3RLEImageD3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterID3RLEImageD3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterID3RLEImageD3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3RLEImageD3US_swigregister(itkRegionOfInterestImageFilterID3RLEImageD3US)

def itkRegionOfInterestImageFilterID4RLEImageD4US_New():
    return itkRegionOfInterestImageFilterID4RLEImageD4US.New()

class itkRegionOfInterestImageFilterID4RLEImageD4US(itkImageToImageFilterID4RLEImageD4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterID4RLEImageD4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterID4RLEImageD4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID4RLEImageD4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterID4RLEImageD4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID4RLEImageD4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID4RLEImageD4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID4RLEImageD4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID4RLEImageD4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID4RLEImageD4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterID4RLEImageD4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterID4RLEImageD4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID4RLEImageD4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterID4RLEImageD4US

        Create a new object of the class itkRegionOfInterestImageFilterID4RLEImageD4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterID4RLEImageD4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterID4RLEImageD4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterID4RLEImageD4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterID4RLEImageD4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID4RLEImageD4US_swigregister(itkRegionOfInterestImageFilterID4RLEImageD4US)

def itkRegionOfInterestImageFilterIF2RLEImageF2US_New():
    return itkRegionOfInterestImageFilterIF2RLEImageF2US.New()

class itkRegionOfInterestImageFilterIF2RLEImageF2US(itkImageToImageFilterIF2RLEImageF2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIF2RLEImageF2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIF2RLEImageF2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2RLEImageF2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIF2RLEImageF2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2RLEImageF2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2RLEImageF2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2RLEImageF2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2RLEImageF2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2RLEImageF2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIF2RLEImageF2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIF2RLEImageF2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2RLEImageF2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIF2RLEImageF2US

        Create a new object of the class itkRegionOfInterestImageFilterIF2RLEImageF2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIF2RLEImageF2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIF2RLEImageF2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIF2RLEImageF2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIF2RLEImageF2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2RLEImageF2US_swigregister(itkRegionOfInterestImageFilterIF2RLEImageF2US)

def itkRegionOfInterestImageFilterIF3RLEImageF3US_New():
    return itkRegionOfInterestImageFilterIF3RLEImageF3US.New()

class itkRegionOfInterestImageFilterIF3RLEImageF3US(itkImageToImageFilterIF3RLEImageF3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIF3RLEImageF3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIF3RLEImageF3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3RLEImageF3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIF3RLEImageF3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3RLEImageF3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3RLEImageF3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3RLEImageF3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3RLEImageF3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3RLEImageF3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIF3RLEImageF3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIF3RLEImageF3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3RLEImageF3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIF3RLEImageF3US

        Create a new object of the class itkRegionOfInterestImageFilterIF3RLEImageF3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIF3RLEImageF3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIF3RLEImageF3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIF3RLEImageF3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIF3RLEImageF3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3RLEImageF3US_swigregister(itkRegionOfInterestImageFilterIF3RLEImageF3US)

def itkRegionOfInterestImageFilterIF4RLEImageF4US_New():
    return itkRegionOfInterestImageFilterIF4RLEImageF4US.New()

class itkRegionOfInterestImageFilterIF4RLEImageF4US(itkImageToImageFilterIF4RLEImageF4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIF4RLEImageF4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIF4RLEImageF4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF4RLEImageF4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIF4RLEImageF4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF4RLEImageF4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF4RLEImageF4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF4RLEImageF4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF4RLEImageF4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF4RLEImageF4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIF4RLEImageF4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIF4RLEImageF4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF4RLEImageF4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIF4RLEImageF4US

        Create a new object of the class itkRegionOfInterestImageFilterIF4RLEImageF4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIF4RLEImageF4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIF4RLEImageF4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIF4RLEImageF4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIF4RLEImageF4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF4RLEImageF4US_swigregister(itkRegionOfInterestImageFilterIF4RLEImageF4US)

def itkRegionOfInterestImageFilterISS2RLEImageSS2US_New():
    return itkRegionOfInterestImageFilterISS2RLEImageSS2US.New()

class itkRegionOfInterestImageFilterISS2RLEImageSS2US(itkImageToImageFilterISS2RLEImageSS2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterISS2RLEImageSS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterISS2RLEImageSS2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2RLEImageSS2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterISS2RLEImageSS2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2RLEImageSS2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2RLEImageSS2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2RLEImageSS2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2RLEImageSS2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2RLEImageSS2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterISS2RLEImageSS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterISS2RLEImageSS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2RLEImageSS2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterISS2RLEImageSS2US

        Create a new object of the class itkRegionOfInterestImageFilterISS2RLEImageSS2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterISS2RLEImageSS2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterISS2RLEImageSS2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterISS2RLEImageSS2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterISS2RLEImageSS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2RLEImageSS2US_swigregister(itkRegionOfInterestImageFilterISS2RLEImageSS2US)

def itkRegionOfInterestImageFilterISS3RLEImageSS3US_New():
    return itkRegionOfInterestImageFilterISS3RLEImageSS3US.New()

class itkRegionOfInterestImageFilterISS3RLEImageSS3US(itkImageToImageFilterISS3RLEImageSS3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterISS3RLEImageSS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterISS3RLEImageSS3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3RLEImageSS3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterISS3RLEImageSS3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3RLEImageSS3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3RLEImageSS3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3RLEImageSS3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3RLEImageSS3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3RLEImageSS3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterISS3RLEImageSS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterISS3RLEImageSS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3RLEImageSS3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterISS3RLEImageSS3US

        Create a new object of the class itkRegionOfInterestImageFilterISS3RLEImageSS3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterISS3RLEImageSS3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterISS3RLEImageSS3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterISS3RLEImageSS3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterISS3RLEImageSS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3RLEImageSS3US_swigregister(itkRegionOfInterestImageFilterISS3RLEImageSS3US)

def itkRegionOfInterestImageFilterISS4RLEImageSS4US_New():
    return itkRegionOfInterestImageFilterISS4RLEImageSS4US.New()

class itkRegionOfInterestImageFilterISS4RLEImageSS4US(itkImageToImageFilterISS4RLEImageSS4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterISS4RLEImageSS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterISS4RLEImageSS4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS4RLEImageSS4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterISS4RLEImageSS4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS4RLEImageSS4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS4RLEImageSS4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS4RLEImageSS4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS4RLEImageSS4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS4RLEImageSS4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterISS4RLEImageSS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterISS4RLEImageSS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS4RLEImageSS4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterISS4RLEImageSS4US

        Create a new object of the class itkRegionOfInterestImageFilterISS4RLEImageSS4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterISS4RLEImageSS4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterISS4RLEImageSS4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterISS4RLEImageSS4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterISS4RLEImageSS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS4RLEImageSS4US_swigregister(itkRegionOfInterestImageFilterISS4RLEImageSS4US)

def itkRegionOfInterestImageFilterIUC2RLEImageUC2US_New():
    return itkRegionOfInterestImageFilterIUC2RLEImageUC2US.New()

class itkRegionOfInterestImageFilterIUC2RLEImageUC2US(itkImageToImageFilterIUC2RLEImageUC2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIUC2RLEImageUC2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIUC2RLEImageUC2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2RLEImageUC2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIUC2RLEImageUC2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2RLEImageUC2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2RLEImageUC2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2RLEImageUC2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2RLEImageUC2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2RLEImageUC2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUC2RLEImageUC2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIUC2RLEImageUC2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2RLEImageUC2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUC2RLEImageUC2US

        Create a new object of the class itkRegionOfInterestImageFilterIUC2RLEImageUC2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUC2RLEImageUC2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUC2RLEImageUC2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIUC2RLEImageUC2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIUC2RLEImageUC2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2RLEImageUC2US_swigregister(itkRegionOfInterestImageFilterIUC2RLEImageUC2US)

def itkRegionOfInterestImageFilterIUC3RLEImageUC3US_New():
    return itkRegionOfInterestImageFilterIUC3RLEImageUC3US.New()

class itkRegionOfInterestImageFilterIUC3RLEImageUC3US(itkImageToImageFilterIUC3RLEImageUC3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIUC3RLEImageUC3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIUC3RLEImageUC3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3RLEImageUC3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIUC3RLEImageUC3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3RLEImageUC3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3RLEImageUC3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3RLEImageUC3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3RLEImageUC3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3RLEImageUC3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUC3RLEImageUC3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIUC3RLEImageUC3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3RLEImageUC3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUC3RLEImageUC3US

        Create a new object of the class itkRegionOfInterestImageFilterIUC3RLEImageUC3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUC3RLEImageUC3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUC3RLEImageUC3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIUC3RLEImageUC3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIUC3RLEImageUC3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3RLEImageUC3US_swigregister(itkRegionOfInterestImageFilterIUC3RLEImageUC3US)

def itkRegionOfInterestImageFilterIUC4RLEImageUC4US_New():
    return itkRegionOfInterestImageFilterIUC4RLEImageUC4US.New()

class itkRegionOfInterestImageFilterIUC4RLEImageUC4US(itkImageToImageFilterIUC4RLEImageUC4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIUC4RLEImageUC4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIUC4RLEImageUC4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC4RLEImageUC4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIUC4RLEImageUC4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC4RLEImageUC4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC4RLEImageUC4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC4RLEImageUC4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC4RLEImageUC4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC4RLEImageUC4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUC4RLEImageUC4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIUC4RLEImageUC4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC4RLEImageUC4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUC4RLEImageUC4US

        Create a new object of the class itkRegionOfInterestImageFilterIUC4RLEImageUC4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUC4RLEImageUC4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUC4RLEImageUC4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIUC4RLEImageUC4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIUC4RLEImageUC4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC4RLEImageUC4US_swigregister(itkRegionOfInterestImageFilterIUC4RLEImageUC4US)

def itkRegionOfInterestImageFilterIUS2RLEImageUS2US_New():
    return itkRegionOfInterestImageFilterIUS2RLEImageUS2US.New()

class itkRegionOfInterestImageFilterIUS2RLEImageUS2US(itkImageToImageFilterIUS2RLEImageUS2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIUS2RLEImageUS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIUS2RLEImageUS2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2RLEImageUS2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIUS2RLEImageUS2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2RLEImageUS2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2RLEImageUS2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2RLEImageUS2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2RLEImageUS2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2RLEImageUS2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUS2RLEImageUS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIUS2RLEImageUS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2RLEImageUS2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUS2RLEImageUS2US

        Create a new object of the class itkRegionOfInterestImageFilterIUS2RLEImageUS2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUS2RLEImageUS2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUS2RLEImageUS2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIUS2RLEImageUS2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIUS2RLEImageUS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2RLEImageUS2US_swigregister(itkRegionOfInterestImageFilterIUS2RLEImageUS2US)

def itkRegionOfInterestImageFilterIUS3RLEImageUS3US_New():
    return itkRegionOfInterestImageFilterIUS3RLEImageUS3US.New()

class itkRegionOfInterestImageFilterIUS3RLEImageUS3US(itkImageToImageFilterIUS3RLEImageUS3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIUS3RLEImageUS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIUS3RLEImageUS3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3RLEImageUS3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIUS3RLEImageUS3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3RLEImageUS3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3RLEImageUS3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3RLEImageUS3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3RLEImageUS3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3RLEImageUS3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUS3RLEImageUS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIUS3RLEImageUS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3RLEImageUS3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUS3RLEImageUS3US

        Create a new object of the class itkRegionOfInterestImageFilterIUS3RLEImageUS3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUS3RLEImageUS3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUS3RLEImageUS3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIUS3RLEImageUS3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIUS3RLEImageUS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3RLEImageUS3US_swigregister(itkRegionOfInterestImageFilterIUS3RLEImageUS3US)

def itkRegionOfInterestImageFilterIUS4RLEImageUS4US_New():
    return itkRegionOfInterestImageFilterIUS4RLEImageUS4US.New()

class itkRegionOfInterestImageFilterIUS4RLEImageUS4US(itkImageToImageFilterIUS4RLEImageUS4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterIUS4RLEImageUS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterIUS4RLEImageUS4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS4RLEImageUS4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterIUS4RLEImageUS4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS4RLEImageUS4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS4RLEImageUS4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS4RLEImageUS4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS4RLEImageUS4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS4RLEImageUS4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUS4RLEImageUS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterIUS4RLEImageUS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS4RLEImageUS4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUS4RLEImageUS4US

        Create a new object of the class itkRegionOfInterestImageFilterIUS4RLEImageUS4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUS4RLEImageUS4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUS4RLEImageUS4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterIUS4RLEImageUS4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterIUS4RLEImageUS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS4RLEImageUS4US_swigregister(itkRegionOfInterestImageFilterIUS4RLEImageUS4US)

def itkRegionOfInterestImageFilterRLEImageD2USID2_New():
    return itkRegionOfInterestImageFilterRLEImageD2USID2.New()

class itkRegionOfInterestImageFilterRLEImageD2USID2(itkImageToImageFilterRLEImageD2USID2):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageD2USID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageD2USID2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageD2USID2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USID2_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USID2_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USID2_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USID2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageD2USID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageD2USID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageD2USID2

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageD2USID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageD2USID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageD2USID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageD2USID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageD2USID2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USID2_swigregister(itkRegionOfInterestImageFilterRLEImageD2USID2)

def itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_New():
    return itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US.New()

class itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US(itkImageToImageFilterRLEImageD2USRLEImageD2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US_swigregister(itkRegionOfInterestImageFilterRLEImageD2USRLEImageD2US)

def itkRegionOfInterestImageFilterRLEImageD3USID3_New():
    return itkRegionOfInterestImageFilterRLEImageD3USID3.New()

class itkRegionOfInterestImageFilterRLEImageD3USID3(itkImageToImageFilterRLEImageD3USID3):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageD3USID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageD3USID3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageD3USID3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USID3_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USID3_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USID3_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USID3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageD3USID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageD3USID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageD3USID3

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageD3USID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageD3USID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageD3USID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageD3USID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageD3USID3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USID3_swigregister(itkRegionOfInterestImageFilterRLEImageD3USID3)

def itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_New():
    return itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US.New()

class itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US(itkImageToImageFilterRLEImageD3USRLEImageD3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US_swigregister(itkRegionOfInterestImageFilterRLEImageD3USRLEImageD3US)

def itkRegionOfInterestImageFilterRLEImageD4USID4_New():
    return itkRegionOfInterestImageFilterRLEImageD4USID4.New()

class itkRegionOfInterestImageFilterRLEImageD4USID4(itkImageToImageFilterRLEImageD4USID4):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageD4USID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageD4USID4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageD4USID4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USID4_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USID4_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USID4_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USID4_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageD4USID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageD4USID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageD4USID4

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageD4USID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageD4USID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageD4USID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageD4USID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageD4USID4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USID4_swigregister(itkRegionOfInterestImageFilterRLEImageD4USID4)

def itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_New():
    return itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US.New()

class itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US(itkImageToImageFilterRLEImageD4USRLEImageD4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US_swigregister(itkRegionOfInterestImageFilterRLEImageD4USRLEImageD4US)

def itkRegionOfInterestImageFilterRLEImageF2USIF2_New():
    return itkRegionOfInterestImageFilterRLEImageF2USIF2.New()

class itkRegionOfInterestImageFilterRLEImageF2USIF2(itkImageToImageFilterRLEImageF2USIF2):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageF2USIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageF2USIF2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageF2USIF2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USIF2_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USIF2_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USIF2_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USIF2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USIF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageF2USIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageF2USIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageF2USIF2

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageF2USIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageF2USIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageF2USIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageF2USIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageF2USIF2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USIF2_swigregister(itkRegionOfInterestImageFilterRLEImageF2USIF2)

def itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_New():
    return itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US.New()

class itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US(itkImageToImageFilterRLEImageF2USRLEImageF2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US_swigregister(itkRegionOfInterestImageFilterRLEImageF2USRLEImageF2US)

def itkRegionOfInterestImageFilterRLEImageF3USIF3_New():
    return itkRegionOfInterestImageFilterRLEImageF3USIF3.New()

class itkRegionOfInterestImageFilterRLEImageF3USIF3(itkImageToImageFilterRLEImageF3USIF3):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageF3USIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageF3USIF3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageF3USIF3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USIF3_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USIF3_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USIF3_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USIF3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USIF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageF3USIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageF3USIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageF3USIF3

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageF3USIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageF3USIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageF3USIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageF3USIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageF3USIF3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USIF3_swigregister(itkRegionOfInterestImageFilterRLEImageF3USIF3)

def itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_New():
    return itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US.New()

class itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US(itkImageToImageFilterRLEImageF3USRLEImageF3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US_swigregister(itkRegionOfInterestImageFilterRLEImageF3USRLEImageF3US)

def itkRegionOfInterestImageFilterRLEImageF4USIF4_New():
    return itkRegionOfInterestImageFilterRLEImageF4USIF4.New()

class itkRegionOfInterestImageFilterRLEImageF4USIF4(itkImageToImageFilterRLEImageF4USIF4):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageF4USIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageF4USIF4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageF4USIF4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USIF4_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USIF4_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USIF4_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USIF4_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USIF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageF4USIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageF4USIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageF4USIF4

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageF4USIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageF4USIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageF4USIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageF4USIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageF4USIF4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USIF4_swigregister(itkRegionOfInterestImageFilterRLEImageF4USIF4)

def itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_New():
    return itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US.New()

class itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US(itkImageToImageFilterRLEImageF4USRLEImageF4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US_swigregister(itkRegionOfInterestImageFilterRLEImageF4USRLEImageF4US)

def itkRegionOfInterestImageFilterRLEImageSS2USISS2_New():
    return itkRegionOfInterestImageFilterRLEImageSS2USISS2.New()

class itkRegionOfInterestImageFilterRLEImageSS2USISS2(itkImageToImageFilterRLEImageSS2USISS2):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageSS2USISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageSS2USISS2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageSS2USISS2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USISS2_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USISS2_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USISS2_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USISS2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageSS2USISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageSS2USISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageSS2USISS2

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageSS2USISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageSS2USISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageSS2USISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageSS2USISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageSS2USISS2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USISS2_swigregister(itkRegionOfInterestImageFilterRLEImageSS2USISS2)

def itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_New():
    return itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US.New()

class itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US(itkImageToImageFilterRLEImageSS2USRLEImageSS2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US_swigregister(itkRegionOfInterestImageFilterRLEImageSS2USRLEImageSS2US)

def itkRegionOfInterestImageFilterRLEImageSS3USISS3_New():
    return itkRegionOfInterestImageFilterRLEImageSS3USISS3.New()

class itkRegionOfInterestImageFilterRLEImageSS3USISS3(itkImageToImageFilterRLEImageSS3USISS3):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageSS3USISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageSS3USISS3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageSS3USISS3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USISS3_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USISS3_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USISS3_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USISS3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageSS3USISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageSS3USISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageSS3USISS3

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageSS3USISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageSS3USISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageSS3USISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageSS3USISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageSS3USISS3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USISS3_swigregister(itkRegionOfInterestImageFilterRLEImageSS3USISS3)

def itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_New():
    return itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US.New()

class itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US(itkImageToImageFilterRLEImageSS3USRLEImageSS3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US_swigregister(itkRegionOfInterestImageFilterRLEImageSS3USRLEImageSS3US)

def itkRegionOfInterestImageFilterRLEImageSS4USISS4_New():
    return itkRegionOfInterestImageFilterRLEImageSS4USISS4.New()

class itkRegionOfInterestImageFilterRLEImageSS4USISS4(itkImageToImageFilterRLEImageSS4USISS4):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageSS4USISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageSS4USISS4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageSS4USISS4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USISS4_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USISS4_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USISS4_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USISS4_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USISS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageSS4USISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageSS4USISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageSS4USISS4

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageSS4USISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageSS4USISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageSS4USISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageSS4USISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageSS4USISS4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USISS4_swigregister(itkRegionOfInterestImageFilterRLEImageSS4USISS4)

def itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_New():
    return itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US.New()

class itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US(itkImageToImageFilterRLEImageSS4USRLEImageSS4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US_swigregister(itkRegionOfInterestImageFilterRLEImageSS4USRLEImageSS4US)

def itkRegionOfInterestImageFilterRLEImageUC2USIUC2_New():
    return itkRegionOfInterestImageFilterRLEImageUC2USIUC2.New()

class itkRegionOfInterestImageFilterRLEImageUC2USIUC2(itkImageToImageFilterRLEImageUC2USIUC2):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUC2USIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUC2USIUC2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUC2USIUC2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USIUC2_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USIUC2_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USIUC2_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USIUC2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USIUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUC2USIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUC2USIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUC2USIUC2

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUC2USIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUC2USIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUC2USIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUC2USIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUC2USIUC2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USIUC2_swigregister(itkRegionOfInterestImageFilterRLEImageUC2USIUC2)

def itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_New():
    return itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US.New()

class itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US(itkImageToImageFilterRLEImageUC2USRLEImageUC2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US_swigregister(itkRegionOfInterestImageFilterRLEImageUC2USRLEImageUC2US)

def itkRegionOfInterestImageFilterRLEImageUC3USIUC3_New():
    return itkRegionOfInterestImageFilterRLEImageUC3USIUC3.New()

class itkRegionOfInterestImageFilterRLEImageUC3USIUC3(itkImageToImageFilterRLEImageUC3USIUC3):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUC3USIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUC3USIUC3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUC3USIUC3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USIUC3_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USIUC3_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USIUC3_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USIUC3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USIUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUC3USIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUC3USIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUC3USIUC3

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUC3USIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUC3USIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUC3USIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUC3USIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUC3USIUC3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USIUC3_swigregister(itkRegionOfInterestImageFilterRLEImageUC3USIUC3)

def itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_New():
    return itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US.New()

class itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US(itkImageToImageFilterRLEImageUC3USRLEImageUC3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US_swigregister(itkRegionOfInterestImageFilterRLEImageUC3USRLEImageUC3US)

def itkRegionOfInterestImageFilterRLEImageUC4USIUC4_New():
    return itkRegionOfInterestImageFilterRLEImageUC4USIUC4.New()

class itkRegionOfInterestImageFilterRLEImageUC4USIUC4(itkImageToImageFilterRLEImageUC4USIUC4):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUC4USIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUC4USIUC4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUC4USIUC4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USIUC4_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USIUC4_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USIUC4_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USIUC4_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USIUC4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUC4USIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUC4USIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUC4USIUC4

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUC4USIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUC4USIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUC4USIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUC4USIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUC4USIUC4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USIUC4_swigregister(itkRegionOfInterestImageFilterRLEImageUC4USIUC4)

def itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_New():
    return itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US.New()

class itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US(itkImageToImageFilterRLEImageUC4USRLEImageUC4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US_swigregister(itkRegionOfInterestImageFilterRLEImageUC4USRLEImageUC4US)

def itkRegionOfInterestImageFilterRLEImageUS2USIUS2_New():
    return itkRegionOfInterestImageFilterRLEImageUS2USIUS2.New()

class itkRegionOfInterestImageFilterRLEImageUS2USIUS2(itkImageToImageFilterRLEImageUS2USIUS2):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUS2USIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUS2USIUS2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUS2USIUS2_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USIUS2_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USIUS2_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USIUS2_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USIUS2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USIUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUS2USIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUS2USIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUS2USIUS2

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUS2USIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUS2USIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUS2USIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUS2USIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUS2USIUS2 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USIUS2_swigregister(itkRegionOfInterestImageFilterRLEImageUS2USIUS2)

def itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_New():
    return itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US.New()

class itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US(itkImageToImageFilterRLEImageUS2USRLEImageUS2US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion2

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion2"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US_swigregister(itkRegionOfInterestImageFilterRLEImageUS2USRLEImageUS2US)

def itkRegionOfInterestImageFilterRLEImageUS3USIUS3_New():
    return itkRegionOfInterestImageFilterRLEImageUS3USIUS3.New()

class itkRegionOfInterestImageFilterRLEImageUS3USIUS3(itkImageToImageFilterRLEImageUS3USIUS3):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUS3USIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUS3USIUS3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUS3USIUS3_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USIUS3_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USIUS3_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USIUS3_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USIUS3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USIUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUS3USIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUS3USIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUS3USIUS3

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUS3USIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUS3USIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUS3USIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUS3USIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUS3USIUS3 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USIUS3_swigregister(itkRegionOfInterestImageFilterRLEImageUS3USIUS3)

def itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_New():
    return itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US.New()

class itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US(itkImageToImageFilterRLEImageUS3USRLEImageUS3US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion3

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion3"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US_swigregister(itkRegionOfInterestImageFilterRLEImageUS3USRLEImageUS3US)

def itkRegionOfInterestImageFilterRLEImageUS4USIUS4_New():
    return itkRegionOfInterestImageFilterRLEImageUS4USIUS4.New()

class itkRegionOfInterestImageFilterRLEImageUS4USIUS4(itkImageToImageFilterRLEImageUS4USIUS4):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUS4USIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUS4USIUS4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUS4USIUS4_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USIUS4_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USIUS4_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USIUS4_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USIUS4_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USIUS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUS4USIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUS4USIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUS4USIUS4

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUS4USIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUS4USIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUS4USIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUS4USIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUS4USIUS4 in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USIUS4_swigregister(itkRegionOfInterestImageFilterRLEImageUS4USIUS4)

def itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_New():
    return itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US.New()

class itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US(itkImageToImageFilterRLEImageUS4USRLEImageUS4US):
    r"""Proxy of C++ itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_Pointer"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_Clone(self)

    def SetRegionOfInterest(self, _arg):
        r"""
        SetRegionOfInterest(self, _arg)

        Parameters
        ----------
        _arg: itkImageRegion4

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_SetRegionOfInterest(self, _arg)

    def GetRegionOfInterest(self):
        r"""GetRegionOfInterest(self) -> itkImageRegion4"""
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_GetRegionOfInterest(self)
    SameDimensionCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkRLERegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US

        Create a new object of the class itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US in _itkRLERegionOfInterestImageFilterPython:
_itkRLERegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US_swigregister(itkRegionOfInterestImageFilterRLEImageUS4USRLEImageUS4US)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def region_of_interest_image_filter(*args: itkt.ImageLike,  region_of_interest: itkt.ImageRegion=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for RegionOfInterestImageFilter"""
    import itk

    kwarg_typehints = { 'region_of_interest':region_of_interest }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.RegionOfInterestImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def region_of_interest_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RLEImage.RegionOfInterestImageFilter
    region_of_interest_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    region_of_interest_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RLEImage.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_source(*args, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageSource"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RLEImage.ImageSource
    image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_source.__doc__ = filter_object.__doc__



