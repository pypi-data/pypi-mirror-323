# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RLEImagePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRLEImagePython
else:
    import _itkRLEImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython

def itkRLEImageD2US_New():
    return itkRLEImageD2US.New()

class itkRLEImageD2US(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkRLEImageD2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageD2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageD2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageD2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageD2US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageD2US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkRLEImagePython.itkRLEImageD2US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: double const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: double const &

        """
        return _itkRLEImagePython.itkRLEImageD2US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> double const &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageD2US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > >,1 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > >,1 > >
        """
        return _itkRLEImagePython.itkRLEImageD2US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex1

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageD2US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageD2US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageD2US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageD2US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageD2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageD2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageD2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageD2US

        Create a new object of the class itkRLEImageD2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageD2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageD2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageD2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageD2US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageD2US_swigregister(itkRLEImageD2US)

def itkRLEImageD3US_New():
    return itkRLEImageD3US.New()

class itkRLEImageD3US(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkRLEImageD3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageD3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageD3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageD3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageD3US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageD3US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkRLEImagePython.itkRLEImageD3US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: double const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: double const &

        """
        return _itkRLEImagePython.itkRLEImageD3US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> double const &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageD3US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > > > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > > > >
        """
        return _itkRLEImagePython.itkRLEImageD3US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageD3US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageD3US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageD3US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageD3US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageD3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageD3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageD3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageD3US

        Create a new object of the class itkRLEImageD3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageD3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageD3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageD3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageD3US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageD3US_swigregister(itkRLEImageD3US)

def itkRLEImageD4US_New():
    return itkRLEImageD4US.New()

class itkRLEImageD4US(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkRLEImageD4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageD4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageD4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageD4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageD4US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageD4US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkRLEImagePython.itkRLEImageD4US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: double const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: double const &

        """
        return _itkRLEImagePython.itkRLEImageD4US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> double const &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageD4US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > >,3 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,double >,std::allocator< std::pair< unsigned short,double > > >,3 > >
        """
        return _itkRLEImagePython.itkRLEImageD4US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageD4US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageD4US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageD4US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageD4US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageD4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageD4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageD4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageD4US

        Create a new object of the class itkRLEImageD4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageD4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageD4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageD4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageD4US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageD4US_swigregister(itkRLEImageD4US)

def itkRLEImageF2US_New():
    return itkRLEImageF2US.New()

class itkRLEImageF2US(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkRLEImageF2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageF2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageF2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageF2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageF2US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageF2US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkRLEImagePython.itkRLEImageF2US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: float const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: float const &

        """
        return _itkRLEImagePython.itkRLEImageF2US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> float const &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageF2US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > >,1 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > >,1 > >
        """
        return _itkRLEImagePython.itkRLEImageF2US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex1

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageF2US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageF2US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageF2US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageF2US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageF2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageF2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageF2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageF2US

        Create a new object of the class itkRLEImageF2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageF2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageF2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageF2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageF2US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageF2US_swigregister(itkRLEImageF2US)

def itkRLEImageF3US_New():
    return itkRLEImageF3US.New()

class itkRLEImageF3US(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkRLEImageF3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageF3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageF3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageF3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageF3US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageF3US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkRLEImagePython.itkRLEImageF3US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: float const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: float const &

        """
        return _itkRLEImagePython.itkRLEImageF3US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> float const &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageF3US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > > > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > > > >
        """
        return _itkRLEImagePython.itkRLEImageF3US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageF3US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageF3US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageF3US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageF3US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageF3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageF3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageF3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageF3US

        Create a new object of the class itkRLEImageF3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageF3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageF3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageF3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageF3US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageF3US_swigregister(itkRLEImageF3US)

def itkRLEImageF4US_New():
    return itkRLEImageF4US.New()

class itkRLEImageF4US(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkRLEImageF4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageF4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageF4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageF4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageF4US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageF4US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkRLEImagePython.itkRLEImageF4US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: float const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: float const &

        """
        return _itkRLEImagePython.itkRLEImageF4US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> float const &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageF4US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > >,3 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,float >,std::allocator< std::pair< unsigned short,float > > >,3 > >
        """
        return _itkRLEImagePython.itkRLEImageF4US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageF4US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageF4US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageF4US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageF4US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageF4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageF4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageF4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageF4US

        Create a new object of the class itkRLEImageF4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageF4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageF4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageF4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageF4US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageF4US_swigregister(itkRLEImageF4US)

def itkRLEImageSS2US_New():
    return itkRLEImageSS2US.New()

class itkRLEImageSS2US(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkRLEImageSS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageSS2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageSS2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageSS2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageSS2US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageSS2US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkRLEImagePython.itkRLEImageSS2US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: short const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: short const &

        """
        return _itkRLEImagePython.itkRLEImageSS2US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> short const &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageSS2US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > >,1 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > >,1 > >
        """
        return _itkRLEImagePython.itkRLEImageSS2US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex1

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageSS2US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageSS2US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageSS2US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageSS2US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageSS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageSS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageSS2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageSS2US

        Create a new object of the class itkRLEImageSS2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageSS2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageSS2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageSS2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageSS2US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageSS2US_swigregister(itkRLEImageSS2US)

def itkRLEImageSS3US_New():
    return itkRLEImageSS3US.New()

class itkRLEImageSS3US(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkRLEImageSS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageSS3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageSS3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageSS3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageSS3US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageSS3US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkRLEImagePython.itkRLEImageSS3US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: short const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: short const &

        """
        return _itkRLEImagePython.itkRLEImageSS3US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> short const &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageSS3US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > > > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > > > >
        """
        return _itkRLEImagePython.itkRLEImageSS3US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageSS3US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageSS3US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageSS3US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageSS3US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageSS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageSS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageSS3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageSS3US

        Create a new object of the class itkRLEImageSS3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageSS3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageSS3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageSS3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageSS3US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageSS3US_swigregister(itkRLEImageSS3US)

def itkRLEImageSS4US_New():
    return itkRLEImageSS4US.New()

class itkRLEImageSS4US(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkRLEImageSS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageSS4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageSS4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageSS4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageSS4US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageSS4US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkRLEImagePython.itkRLEImageSS4US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: short const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: short const &

        """
        return _itkRLEImagePython.itkRLEImageSS4US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> short const &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageSS4US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > >,3 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,short >,std::allocator< std::pair< unsigned short,short > > >,3 > >
        """
        return _itkRLEImagePython.itkRLEImageSS4US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageSS4US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageSS4US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageSS4US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageSS4US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageSS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageSS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageSS4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageSS4US

        Create a new object of the class itkRLEImageSS4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageSS4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageSS4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageSS4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageSS4US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageSS4US_swigregister(itkRLEImageSS4US)

def itkRLEImageUC2US_New():
    return itkRLEImageUC2US.New()

class itkRLEImageUC2US(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkRLEImageUC2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageUC2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUC2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageUC2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUC2US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageUC2US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkRLEImagePython.itkRLEImageUC2US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned char const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: unsigned char const &

        """
        return _itkRLEImagePython.itkRLEImageUC2US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> unsigned char const &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageUC2US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > >,1 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > >,1 > >
        """
        return _itkRLEImagePython.itkRLEImageUC2US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex1

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageUC2US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageUC2US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageUC2US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageUC2US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageUC2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageUC2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageUC2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageUC2US

        Create a new object of the class itkRLEImageUC2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageUC2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageUC2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageUC2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageUC2US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageUC2US_swigregister(itkRLEImageUC2US)

def itkRLEImageUC3US_New():
    return itkRLEImageUC3US.New()

class itkRLEImageUC3US(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkRLEImageUC3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageUC3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUC3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageUC3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUC3US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageUC3US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkRLEImagePython.itkRLEImageUC3US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned char const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: unsigned char const &

        """
        return _itkRLEImagePython.itkRLEImageUC3US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> unsigned char const &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageUC3US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > > > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > > > >
        """
        return _itkRLEImagePython.itkRLEImageUC3US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageUC3US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageUC3US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageUC3US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageUC3US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageUC3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageUC3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageUC3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageUC3US

        Create a new object of the class itkRLEImageUC3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageUC3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageUC3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageUC3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageUC3US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageUC3US_swigregister(itkRLEImageUC3US)

def itkRLEImageUC4US_New():
    return itkRLEImageUC4US.New()

class itkRLEImageUC4US(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkRLEImageUC4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageUC4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUC4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageUC4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUC4US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageUC4US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkRLEImagePython.itkRLEImageUC4US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned char const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: unsigned char const &

        """
        return _itkRLEImagePython.itkRLEImageUC4US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> unsigned char const &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageUC4US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > >,3 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned char >,std::allocator< std::pair< unsigned short,unsigned char > > >,3 > >
        """
        return _itkRLEImagePython.itkRLEImageUC4US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageUC4US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageUC4US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageUC4US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageUC4US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageUC4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageUC4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageUC4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageUC4US

        Create a new object of the class itkRLEImageUC4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageUC4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageUC4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageUC4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageUC4US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageUC4US_swigregister(itkRLEImageUC4US)

def itkRLEImageUS2US_New():
    return itkRLEImageUS2US.New()

class itkRLEImageUS2US(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkRLEImageUS2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageUS2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUS2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageUS2US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUS2US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageUS2US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkRLEImagePython.itkRLEImageUS2US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned short const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: unsigned short const &

        """
        return _itkRLEImagePython.itkRLEImageUS2US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> unsigned short const &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageUS2US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > >,1 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > >,1 > >
        """
        return _itkRLEImagePython.itkRLEImageUS2US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex1

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkRLEImagePython.itkRLEImageUS2US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageUS2US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageUS2US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageUS2US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageUS2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageUS2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageUS2US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageUS2US

        Create a new object of the class itkRLEImageUS2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageUS2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageUS2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageUS2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageUS2US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageUS2US_swigregister(itkRLEImageUS2US)

def itkRLEImageUS3US_New():
    return itkRLEImageUS3US.New()

class itkRLEImageUS3US(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkRLEImageUS3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageUS3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUS3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageUS3US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUS3US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageUS3US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkRLEImagePython.itkRLEImageUS3US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned short const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: unsigned short const &

        """
        return _itkRLEImagePython.itkRLEImageUS3US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> unsigned short const &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageUS3US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > > > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > > > >
        """
        return _itkRLEImagePython.itkRLEImageUS3US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkRLEImagePython.itkRLEImageUS3US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageUS3US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageUS3US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageUS3US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageUS3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageUS3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageUS3US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageUS3US

        Create a new object of the class itkRLEImageUS3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageUS3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageUS3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageUS3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageUS3US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageUS3US_swigregister(itkRLEImageUS3US)

def itkRLEImageUS4US_New():
    return itkRLEImageUS4US.New()

class itkRLEImageUS4US(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkRLEImageUS4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRLEImageUS4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUS4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRLEImageUS4US_Pointer"""
        return _itkRLEImagePython.itkRLEImageUS4US_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkRLEImagePython.itkRLEImageUS4US_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkRLEImagePython.itkRLEImageUS4US_FillBuffer(self, value)

    def SetPixel(self, *args):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned short const &

        SetPixel(self, line, segmentRemainder, m_RealIndex, value) -> int

        Parameters
        ----------
        line: std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > > &
        segmentRemainder: long long &
        m_RealIndex: unsigned long long &
        value: unsigned short const &

        """
        return _itkRLEImagePython.itkRLEImageUS4US_SetPixel(self, *args)

    def GetPixel(self, index):
        r"""
        GetPixel(self, index) -> unsigned short const &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageUS4US_GetPixel(self, index)

    def GetBuffer(self, *args):
        r"""
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > >,3 > >
        GetBuffer(self) -> itk::SmartPointer< itk::Image< std::vector< std::pair< unsigned short,unsigned short >,std::allocator< std::pair< unsigned short,unsigned short > > >,3 > >
        """
        return _itkRLEImagePython.itkRLEImageUS4US_GetBuffer(self, *args)

    @staticmethod
    def truncateIndex(index):
        r"""
        truncateIndex(index) -> itkIndex3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkRLEImagePython.itkRLEImageUS4US_truncateIndex(index)

    def CleanUp(self):
        r"""CleanUp(self)"""
        return _itkRLEImagePython.itkRLEImageUS4US_CleanUp(self)

    def GetOnTheFlyCleanup(self):
        r"""GetOnTheFlyCleanup(self) -> bool"""
        return _itkRLEImagePython.itkRLEImageUS4US_GetOnTheFlyCleanup(self)

    def SetOnTheFlyCleanup(self, value):
        r"""
        SetOnTheFlyCleanup(self, value)

        Parameters
        ----------
        value: bool

        """
        return _itkRLEImagePython.itkRLEImageUS4US_SetOnTheFlyCleanup(self, value)
    __swig_destroy__ = _itkRLEImagePython.delete_itkRLEImageUS4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRLEImageUS4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRLEImagePython.itkRLEImageUS4US_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRLEImageUS4US

        Create a new object of the class itkRLEImageUS4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRLEImageUS4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRLEImageUS4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRLEImageUS4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRLEImageUS4US in _itkRLEImagePython:
_itkRLEImagePython.itkRLEImageUS4US_swigregister(itkRLEImageUS4US)

