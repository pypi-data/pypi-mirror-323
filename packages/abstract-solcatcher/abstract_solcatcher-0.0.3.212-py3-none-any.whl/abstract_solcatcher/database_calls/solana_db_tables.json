[
{
    "freshCall": false,
    "tableName": "defaultvalues",
    "columnSearch": "key",
    "insertName": "value",
    "type": "DefaultValue",
    "searchQuery": "SELECT value FROM defaultvalues WHERE key = %s;",
    "insertQuery": "INSERT INTO defaultvalues (key, value, last_updated) VALUES (%s, to_jsonb(%s), NOW()) ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value, last_updated = NOW() WHERE defaultvalues.value != EXCLUDED.value;",
    "table": "CREATE TABLE IF NOT EXISTS defaultvalues (id SERIAL PRIMARY KEY, key VARCHAR(255) UNIQUE NOT NULL, value JSONB NOT NULL, last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP);",
    "rpcCall": false,
    "method": "setDefaultValue"
},
    {
        "freshCall": false,
        "tableName": "inserttxnlog",
        "columnSearch": "signature",
        "insertName": "txnlog",
        "type": "TxnLog",
        "searchQuery": "SELECT txnlog FROM inserttxnlog WHERE signature = %s;",
        "insertQuery": "INSERT INTO inserttxnlog (signature, txnlog) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS inserttxnlog (id SERIAL PRIMARY KEY,signature VARCHAR(255) UNIQUE NOT NULL,txnlog JSONB NOT NULL);",
        "rpcCall": false,
        "method": "insertTxnLog"
    },
    {
        "freshCall": true,
        "tableName": "getbalance",
        "columnSearch": "pubkey",
        "insertName": "balance",
        "type": "Balance",
        "searchQuery": "SELECT balance FROM getbalance WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO getbalance (pubkey, balance) VALUES (%s, %s) ON CONFLICT (pubkey) DO UPDATE SET balance = EXCLUDED.balance WHERE getbalance.balance != EXCLUDED.balance;",
        "table": "CREATE TABLE IF NOT EXISTS getbalance (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,balance JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getBalance"
    },
    {
        "freshCall": true,
        "tableName": "getaccountinfo",
        "columnSearch": "pubkey",
        "insertName": "account_info",
        "type": "AccountInfo",
        "searchQuery": "SELECT account_info FROM getaccountinfo WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO getaccountinfo (pubkey, account_info) VALUES (%s, %s) ON CONFLICT (pubkey) DO UPDATE SET account_info = EXCLUDED.account_info WHERE getaccountinfo.account_info != EXCLUDED.account_info;",
        "table": "CREATE TABLE IF NOT EXISTS getaccountinfo (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,account_info JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getAccountInfo"
    },
    {
        "freshCall": true,
        "tableName": "getaccountinfojsonparsed",
        "columnSearch": "pubkey",
        "insertName": "account_info_json_parsed",
        "type": "AccountInfoMaybeJsonParsed",
        "searchQuery": "SELECT account_info_json_parsed FROM getaccountinfojsonparsed WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO getaccountinfojsonparsed (pubkey, account_info_json_parsed) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getaccountinfojsonparsed (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,account_info_json_parsed JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getAccountInfoJsonParsed"
    },
    {
        "freshCall": true,
        "tableName": "getblockcommitment",
        "columnSearch": "slot",
        "insertName": "block_commitment",
        "type": "BlockCommitment",
        "searchQuery": "SELECT block_commitment FROM getblockcommitment WHERE slot = %s;",
        "insertQuery": "INSERT INTO getblockcommitment (slot, block_commitment) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getblockcommitment (id SERIAL PRIMARY KEY,slot VARCHAR(255) UNIQUE NOT NULL,block_commitment JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getBlockCommitment"
    },
    {
        "freshCall": true,
        "tableName": "getblocktime",
        "columnSearch": "slot",
        "insertName": "block_time",
        "type": "BlockTime",
        "searchQuery": "SELECT block_time FROM getblocktime WHERE slot = %s;",
        "insertQuery": "INSERT INTO getblocktime (slot, block_time) VALUES (%s, to_jsonb(%s))",
        "table": "CREATE TABLE IF NOT EXISTS getblocktime (id SERIAL PRIMARY KEY,slot VARCHAR(255) UNIQUE NOT NULL,block_time JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getBlockTime"
    },
    {
        "freshCall": true,
        "tableName": "getclusternodes",
        "columnSearch": null,
        "insertName": "cluster_nodes",
        "type": "ClusterNodes",
        "searchQuery": "SELECT cluster_nodes FROM getclusternodes WHERE None = %s;",
        "insertQuery": "INSERT INTO getclusternodes (None, cluster_nodes) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getclusternodes (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,cluster_nodes JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getClusterNodes"
    },
    {
        "freshCall": false,
        "tableName": "getblock",
        "columnSearch": "slot",
        "insertName": "block",
        "type": "Block",
        "searchQuery": "SELECT block FROM getblock WHERE slot = %s;",
        "insertQuery": "INSERT INTO getblock (slot, block) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getblock (id SERIAL PRIMARY KEY,slot VARCHAR(255) UNIQUE NOT NULL,block JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getBlock"
    },
    {
        "freshCall": true,
        "tableName": "getrecentperformancesamples",
        "columnSearch": "limits",
        "insertName": "recent_performance_samples",
        "type": "RecentPerformanceSamples",
        "searchQuery": "SELECT recent_performance_samples FROM getrecentperformancesamples WHERE limits = %s;",
        "insertQuery": "INSERT INTO getrecentperformancesamples (limits, recent_performance_samples) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getrecentperformancesamples (id SERIAL PRIMARY KEY,limits VARCHAR(255) UNIQUE NOT NULL,recent_performance_samples JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getRecentPerformanceSamples"
    },
    {
        "freshCall": true,
        "tableName": "getblockheight",
        "columnSearch": "commitment",
        "insertName": "block_height",
        "type": "BlockHeight",
        "searchQuery": "SELECT block_height FROM getblockheight WHERE commitment = %s;",
        "insertQuery": "INSERT INTO getblockheight (commitment, block_height) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getblockheight (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,block_height INTEGER NOT NULL);",
        "rpcCall": true,
        "method": "getBlockHeight"
    },
    {
        "freshCall": false,
        "tableName": "getblocks",
        "columnSearch": "start_slot",
        "insertName": "blocks",
        "type": "Blocks",
        "searchQuery": "SELECT blocks FROM getblocks WHERE start_slot = %s;",
        "insertQuery": "INSERT INTO getblocks (start_slot, blocks) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getblocks (id SERIAL PRIMARY KEY,start_slot VARCHAR(255) UNIQUE NOT NULL,blocks JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getBlocks"
    },
    {
    "freshCall": true,
    "tableName": "getsignaturesforaddress",
    "columnSearch": "account",
    "insertName": "signatures_for_address",
    "type": "SignaturesForAddress",
    "searchQuery": "SELECT signatures_for_address FROM getsignaturesforaddress WHERE account = %s;",
    "insertQuery": "INSERT INTO getsignaturesforaddress (account, signatures_for_address) VALUES (%s, %s)",
    "table": "CREATE TABLE IF NOT EXISTS getsignaturesforaddress (id SERIAL PRIMARY KEY, account VARCHAR(255) UNIQUE NOT NULL, signatures_for_address JSONB NOT NULL);",
    "rpcCall": true,
    "method": "getSignaturesForAddress"
},
    {
        "freshCall": false,
        "tableName": "gettransaction",
        "columnSearch": "signature",
        "insertName": "transaction",
        "type": "Transaction",
        "searchQuery": "SELECT transaction FROM gettransaction WHERE signature = %s;",
        "insertQuery": "INSERT INTO gettransaction (signature, transaction) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettransaction (id SERIAL PRIMARY KEY,signature VARCHAR(255) UNIQUE NOT NULL,transaction JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTransaction"
    },
    {
        "freshCall": false,
        "tableName": "getparsedtransaction",
        "columnSearch": "signature",
        "insertName": "parsedtransaction",
        "type": "parsedTransaction",
        "searchQuery": "SELECT parsedtransaction FROM getparsedtransaction WHERE signature = %s;",
        "insertQuery": "INSERT INTO getparsedtransaction (signature, parsedtransaction) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getparsedtransaction (id SERIAL PRIMARY KEY,signature VARCHAR(255) UNIQUE NOT NULL,parsedtransaction JSONB NOT NULL);",
        "rpcCall": false,
        "method": "getParsedTransaction"
    },
    {
        "freshCall": true,
        "tableName": "getepochinfo",
        "columnSearch": "commitment",
        "insertName": "epoch_info",
        "type": "EpochInfo",
        "searchQuery": "SELECT epoch_info FROM getepochinfo WHERE commitment = %s;",
        "insertQuery": "INSERT INTO getepochinfo (commitment, epoch_info) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getepochinfo (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,epoch_info JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getEpochInfo"
    },
    {
        "freshCall": true,
        "tableName": "getepochschedule",
        "columnSearch": null,
        "insertName": "epoch_schedule",
        "type": "EpochSchedule",
        "searchQuery": "SELECT epoch_schedule FROM getepochschedule WHERE None = %s;",
        "insertQuery": "INSERT INTO getepochschedule (None, epoch_schedule) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getepochschedule (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,epoch_schedule JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getEpochSchedule"
    },
    {
        "freshCall": true,
        "tableName": "getfeeformessage",
        "columnSearch": "message",
        "insertName": "fee_for_message",
        "type": "FeeForMessage",
        "searchQuery": "SELECT fee_for_message FROM getfeeformessage WHERE message = %s;",
        "insertQuery": "INSERT INTO getfeeformessage (message, fee_for_message) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getfeeformessage (id SERIAL PRIMARY KEY,message VARCHAR(255) UNIQUE NOT NULL,fee_for_message JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getFeeForMessage"
    },
    {
        "freshCall": true,
        "tableName": "getfirstavailableblock",
        "columnSearch": null,
        "insertName": "first_available_block",
        "type": "FirstAvailableBlock",
        "searchQuery": "SELECT first_available_block FROM getfirstavailableblock WHERE None = %s;",
        "insertQuery": "INSERT INTO getfirstavailableblock (None, first_available_block) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getfirstavailableblock (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,first_available_block JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getFirstAvailableBlock"
    },
    {
        "freshCall": true,
        "tableName": "getgenesishash",
        "columnSearch": null,
        "insertName": "genesis_hash",
        "type": "GenesisHash",
        "searchQuery": "SELECT genesis_hash FROM getgenesishash WHERE None = %s;",
        "insertQuery": "INSERT INTO getgenesishash (None, genesis_hash) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getgenesishash (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,genesis_hash JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getGenesisHash"
    },
    {
        "freshCall": false,
        "tableName": "getgenesissignature",
        "columnSearch": "address",
        "insertName": "genesissignature",
        "type": "genesissignature",
        "searchQuery": "SELECT genesissignature FROM getgenesissignature WHERE address = %s;",
        "insertQuery": "INSERT INTO getgenesissignature (address, genesissignature) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getgenesissignature (id SERIAL PRIMARY KEY,address VARCHAR(255) UNIQUE NOT NULL,genesissignature  VARCHAR(255) NOT NULL);",
        "rpcCall": false,
        "method": "getGenesisSignature"
    },
    {
        "freshCall": true,
        "tableName": "getidentity",
        "columnSearch": null,
        "insertName": "identity",
        "type": "Identity",
        "searchQuery": "SELECT identity FROM getidentity WHERE None = %s;",
        "insertQuery": "INSERT INTO getidentity (None, identity) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getidentity (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,identity JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getIdentity"
    },
    {
        "freshCall": true,
        "tableName": "getinflationgovernor",
        "columnSearch": "commitment",
        "insertName": "inflation_governor",
        "type": "InflationGovernor",
        "searchQuery": "SELECT inflation_governor FROM getinflationgovernor WHERE commitment = %s;",
        "insertQuery": "INSERT INTO getinflationgovernor (commitment, inflation_governor) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getinflationgovernor (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,inflation_governor JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getInflationGovernor"
    },
    {
        "freshCall": true,
        "tableName": "getinflationrate",
        "columnSearch": null,
        "insertName": "inflation_rate",
        "type": "InflationRate",
        "searchQuery": "SELECT inflation_rate FROM getinflationrate WHERE None = %s;",
        "insertQuery": "INSERT INTO getinflationrate (None, inflation_rate) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getinflationrate (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,inflation_rate JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getInflationRate"
    },
    {
        "freshCall": true,
        "tableName": "getinflationreward",
        "columnSearch": "pubkeys",
        "insertName": "inflation_reward",
        "type": "InflationReward",
        "searchQuery": "SELECT inflation_reward FROM getinflationreward WHERE pubkeys = %s;",
        "insertQuery": "INSERT INTO getinflationreward (pubkeys, inflation_reward) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getinflationreward (id SERIAL PRIMARY KEY,pubkeys VARCHAR(255) UNIQUE NOT NULL,inflation_reward JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getInflationReward"
    },
    {
        "freshCall": true,
        "tableName": "getlargestaccounts",
        "columnSearch": "filter_opt",
        "insertName": "largest_accounts",
        "type": "LargestAccounts",
        "searchQuery": "SELECT largest_accounts FROM getlargestaccounts WHERE filter_opt = %s;",
        "insertQuery": "INSERT INTO getlargestaccounts (filter_opt, largest_accounts) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getlargestaccounts (id SERIAL PRIMARY KEY,filter_opt VARCHAR(255) UNIQUE NOT NULL,largest_accounts JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getLargestAccounts"
    },
    {
        "freshCall": true,
        "tableName": "getleaderschedule",
        "columnSearch": "epoch",
        "insertName": "leader_schedule",
        "type": "LeaderSchedule",
        "searchQuery": "SELECT leader_schedule FROM getleaderschedule WHERE epoch = %s;",
        "insertQuery": "INSERT INTO getleaderschedule (epoch, leader_schedule) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getleaderschedule (id SERIAL PRIMARY KEY,epoch VARCHAR(255) UNIQUE NOT NULL,leader_schedule JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getLeaderSchedule"
    },
    {
        "freshCall": true,
        "tableName": "getminimumbalanceforrentexemption",
        "columnSearch": "usize",
        "insertName": "minimum_balance_for_rent_exemption",
        "type": "MinimumBalanceForRentExemption",
        "searchQuery": "SELECT minimum_balance_for_rent_exemption FROM getminimumbalanceforrentexemption WHERE usize = %s;",
        "insertQuery": "INSERT INTO getminimumbalanceforrentexemption (usize, minimum_balance_for_rent_exemption) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getminimumbalanceforrentexemption (id SERIAL PRIMARY KEY,usize VARCHAR(255) UNIQUE NOT NULL,minimum_balance_for_rent_exemption JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getMinimumBalanceForRentExemption"
    },
    {
        "freshCall": true,
        "tableName": "getmultipleaccounts",
        "columnSearch": "pubkeys",
        "insertName": "multiple_accounts",
        "type": "MultipleAccounts",
        "searchQuery": "SELECT multiple_accounts FROM getmultipleaccounts WHERE pubkeys = %s;",
        "insertQuery": "INSERT INTO getmultipleaccounts (pubkeys, multiple_accounts) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getmultipleaccounts (id SERIAL PRIMARY KEY,pubkeys VARCHAR(255) UNIQUE NOT NULL,multiple_accounts JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getMultipleAccounts"
    },
    {
        "freshCall": true,
        "tableName": "getmultipleaccountsjsonparsed",
        "columnSearch": "pubkeys",
        "insertName": "multiple_accounts_json_parsed",
        "type": "MultipleAccountsMaybeJsonParsed",
        "searchQuery": "SELECT multiple_accounts_json_parsed FROM getmultipleaccountsjsonparsed WHERE pubkeys = %s;",
        "insertQuery": "INSERT INTO getmultipleaccountsjsonparsed (pubkeys, multiple_accounts_json_parsed) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getmultipleaccountsjsonparsed (id SERIAL PRIMARY KEY,pubkeys VARCHAR(255) UNIQUE NOT NULL,multiple_accounts_json_parsed JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getMultipleAccountsJsonParsed"
    },
    {
        "freshCall": true,
        "tableName": "getprogramaccounts",
        "columnSearch": "pubkey",
        "insertName": "program_accounts",
        "type": "ProgramAccounts",
        "searchQuery": "SELECT program_accounts FROM getprogramaccounts WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO getprogramaccounts (pubkey, program_accounts) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getprogramaccounts (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,program_accounts JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getProgramAccounts"
    },
    {
        "freshCall": true,
        "tableName": "getprogramaccountsjsonparsed",
        "columnSearch": "pubkey",
        "insertName": "program_accounts_json_parsed",
        "type": "ProgramAccountsMaybeJsonParsed",
        "searchQuery": "SELECT program_accounts_json_parsed FROM getprogramaccountsjsonparsed WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO getprogramaccountsjsonparsed (pubkey, program_accounts_json_parsed) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getprogramaccountsjsonparsed (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,program_accounts_json_parsed JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getProgramAccountsJsonParsed"
    },
    {
        "freshCall": true,
        "tableName": "getlatestblockhash",
        "columnSearch": "commitment",
        "insertName": "latest_blockhash",
        "type": "LatestBlockhash",
        "searchQuery": "SELECT latest_blockhash FROM getlatestblockhash WHERE commitment = %s;",
        "insertQuery": "INSERT INTO getlatestblockhash (commitment, latest_blockhash) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getlatestblockhash (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,latest_blockhash JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getLatestBlockhash"
    },
    {
        "freshCall": true,
        "tableName": "getsignaturestatuses",
        "columnSearch": "signatures",
        "insertName": "signature_statuses",
        "type": "SignatureStatuses",
        "searchQuery": "SELECT signature_statuses FROM getsignaturestatuses WHERE signatures = %s;",
        "insertQuery": "INSERT INTO getsignaturestatuses (signatures, signature_statuses) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getsignaturestatuses (id SERIAL PRIMARY KEY,signatures VARCHAR(255) UNIQUE NOT NULL,signature_statuses JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getSignatureStatuses"
    },
    {
        "freshCall": true,
        "tableName": "getslot",
        "columnSearch": "commitment",
        "insertName": "slot",
        "type": "Slot",
        "searchQuery": "SELECT slot FROM getslot WHERE commitment = %s;",
        "insertQuery": "INSERT INTO getslot (commitment, slot) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getslot (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,slot INTEGER NOT NULL);",
        "rpcCall": true,
        "method": "getSlot"
    },
    {
        "freshCall": true,
        "tableName": "getslotleader",
        "columnSearch": "commitment",
        "insertName": "slot_leader",
        "type": "SlotLeader",
        "searchQuery": "SELECT slot_leader FROM getslotleader WHERE commitment = %s;",
        "insertQuery": "INSERT INTO getslotleader (commitment, slot_leader) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getslotleader (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,slot_leader JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getSlotLeader"
    },
    {
        "freshCall": true,
        "tableName": "getstakeactivation",
        "columnSearch": "pubkey",
        "insertName": "stake_activation",
        "type": "StakeActivation",
        "searchQuery": "SELECT stake_activation FROM getstakeactivation WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO getstakeactivation (pubkey, stake_activation) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getstakeactivation (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,stake_activation JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getStakeActivation"
    },
    {
        "freshCall": true,
        "tableName": "getsupply",
        "columnSearch": "commitment",
        "insertName": "supply",
        "type": "Supply",
        "searchQuery": "SELECT supply FROM getsupply WHERE commitment = %s;",
        "insertQuery": "INSERT INTO getsupply (commitment, supply) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getsupply (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,supply JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getSupply"
    },
    {
        "freshCall": true,
        "tableName": "gettokenaccountbalance",
        "columnSearch": "pubkey",
        "insertName": "token_account_balance",
        "type": "TokenAccountBalance",
        "searchQuery": "SELECT token_account_balance FROM gettokenaccountbalance WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO gettokenaccountbalance (pubkey, token_account_balance) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettokenaccountbalance (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,token_account_balance JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTokenAccountBalance"
    },
    {
        "freshCall": true,
        "tableName": "gettokenaccountsbydelegate",
        "columnSearch": "delegate",
        "insertName": "token_accounts_by_delegate",
        "type": "TokenAccountsByDelegate",
        "searchQuery": "SELECT token_accounts_by_delegate FROM gettokenaccountsbydelegate WHERE delegate = %s;",
        "insertQuery": "INSERT INTO gettokenaccountsbydelegate (delegate, token_accounts_by_delegate) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettokenaccountsbydelegate (id SERIAL PRIMARY KEY,delegate VARCHAR(255) UNIQUE NOT NULL,token_accounts_by_delegate JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTokenAccountsByDelegate"
    },
    {
        "freshCall": true,
        "tableName": "gettokenaccountsbydelegatejsonparsed",
        "columnSearch": "delegate",
        "insertName": "token_accounts_by_delegate_json_parsed",
        "type": "TokenAccountsByDelegateJsonParsed",
        "searchQuery": "SELECT token_accounts_by_delegate_json_parsed FROM gettokenaccountsbydelegatejsonparsed WHERE delegate = %s;",
        "insertQuery": "INSERT INTO gettokenaccountsbydelegatejsonparsed (delegate, token_accounts_by_delegate_json_parsed) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettokenaccountsbydelegatejsonparsed (id SERIAL PRIMARY KEY,delegate VARCHAR(255) UNIQUE NOT NULL,token_accounts_by_delegate_json_parsed JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTokenAccountsByDelegateJsonParsed"
    },
    {
        "freshCall": true,
        "tableName": "gettokenaccountsbyowner",
        "columnSearch": "owner",
        "insertName": "token_accounts_by_owner",
        "type": "TokenAccountsByOwner",
        "searchQuery": "SELECT token_accounts_by_owner FROM gettokenaccountsbyowner WHERE owner = %s;",
        "insertQuery": "INSERT INTO gettokenaccountsbyowner (owner, token_accounts_by_owner) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettokenaccountsbyowner (id SERIAL PRIMARY KEY,owner VARCHAR(255) UNIQUE NOT NULL,token_accounts_by_owner JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTokenAccountsByOwner"
    },
    {
        "freshCall": true,
        "tableName": "gettokenaccountsbyownerjsonparsed",
        "columnSearch": "owner",
        "insertName": "token_accounts_by_owner_json_parsed",
        "type": "TokenAccountsByOwnerJsonParsed",
        "searchQuery": "SELECT token_accounts_by_owner_json_parsed FROM gettokenaccountsbyownerjsonparsed WHERE owner = %s;",
        "insertQuery": "INSERT INTO gettokenaccountsbyownerjsonparsed (owner, token_accounts_by_owner_json_parsed) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettokenaccountsbyownerjsonparsed (id SERIAL PRIMARY KEY,owner VARCHAR(255) UNIQUE NOT NULL,token_accounts_by_owner_json_parsed JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTokenAccountsByOwnerJsonParsed"
    },
    {
        "freshCall": true,
        "tableName": "gettokenlargestaccounts",
        "columnSearch": "pubkey",
        "insertName": "token_largest_accounts",
        "type": "TokenLargestAccounts",
        "searchQuery": "SELECT token_largest_accounts FROM gettokenlargestaccounts WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO gettokenlargestaccounts (pubkey, token_largest_accounts) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettokenlargestaccounts (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,token_largest_accounts JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTokenLargestAccounts"
    },
    {
        "freshCall": false,
        "tableName": "gettokensupply",
        "columnSearch": "pubkey",
        "insertName": "token_supply",
        "type": "TokenSupply",
        "searchQuery": "SELECT token_supply FROM gettokensupply WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO gettokensupply (pubkey, token_supply) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettokensupply (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,token_supply JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTokenSupply"
    },
    {
        "freshCall": true,
        "tableName": "gettransactioncount",
        "columnSearch": "commitment",
        "insertName": "transaction_count",
        "type": "TransactionCount",
        "searchQuery": "SELECT transaction_count FROM gettransactioncount WHERE commitment = %s;",
        "insertQuery": "INSERT INTO gettransactioncount (commitment, transaction_count) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS gettransactioncount (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,transaction_count JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getTransactionCount"
    },
    {
        "freshCall": true,
        "tableName": "getminimumledgerslot",
        "columnSearch": null,
        "insertName": "minimum_ledger_slot",
        "type": "MinimumLedgerSlot",
        "searchQuery": "SELECT minimum_ledger_slot FROM getminimumledgerslot WHERE None = %s;",
        "insertQuery": "INSERT INTO getminimumledgerslot (None, minimum_ledger_slot) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getminimumledgerslot (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,minimum_ledger_slot JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getMinimumLedgerSlot"
    },
    {
        "freshCall": true,
        "tableName": "getversion",
        "columnSearch": null,
        "insertName": "version",
        "type": "Version",
        "searchQuery": "SELECT version FROM getversion WHERE None = %s;",
        "insertQuery": "INSERT INTO getversion (None, version) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getversion (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,version JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getVersion"
    },
    {
        "freshCall": true,
        "tableName": "getvoteaccounts",
        "columnSearch": "commitment",
        "insertName": "vote_accounts",
        "type": "VoteAccounts",
        "searchQuery": "SELECT vote_accounts FROM getvoteaccounts WHERE commitment = %s;",
        "insertQuery": "INSERT INTO getvoteaccounts (commitment, vote_accounts) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getvoteaccounts (id SERIAL PRIMARY KEY,commitment VARCHAR(255) UNIQUE NOT NULL,vote_accounts JSONB NOT NULL);",
        "rpcCall": true,
        "method": "getVoteAccounts"
    },
    {
        "freshCall": true,
        "tableName": "requestairdrop",
        "columnSearch": "pubkey",
        "insertName": "airdrop",
        "type": "RequestAirdrop",
        "searchQuery": "SELECT airdrop FROM requestairdrop WHERE pubkey = %s;",
        "insertQuery": "INSERT INTO requestairdrop (pubkey, airdrop) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS requestairdrop (id SERIAL PRIMARY KEY,pubkey VARCHAR(255) UNIQUE NOT NULL,airdrop JSONB NOT NULL);",
        "rpcCall": true,
        "method": "requestAirdrop"
    },
    {
        "freshCall": true,
        "tableName": "sendrawtransaction",
        "columnSearch": "txn",
        "insertName": "raw_transaction",
        "type": "SendTransaction",
        "searchQuery": "SELECT raw_transaction FROM sendrawtransaction WHERE txn = %s;",
        "insertQuery": "INSERT INTO sendrawtransaction (txn, raw_transaction) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS sendrawtransaction (id SERIAL PRIMARY KEY,txn VARCHAR(255) UNIQUE NOT NULL,raw_transaction JSONB NOT NULL);",
        "rpcCall": true,
        "method": "sendRawTransaction"
    },
    {
        "freshCall": true,
        "tableName": "sendtransaction",
        "columnSearch": "txn",
        "insertName": "transaction",
        "type": "SendTransaction",
        "searchQuery": "SELECT transaction FROM sendtransaction WHERE txn = %s;",
        "insertQuery": "INSERT INTO sendtransaction (txn, transaction) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS sendtransaction (id SERIAL PRIMARY KEY,txn VARCHAR(255) UNIQUE NOT NULL,transaction JSONB NOT NULL);",
        "rpcCall": true,
        "method": "sendTransaction"
    },
    {
        "freshCall": true,
        "tableName": "simulatetransaction",
        "columnSearch": "txn",
        "insertName": "transaction",
        "type": "SimulateTransaction",
        "searchQuery": "SELECT transaction FROM simulatetransaction WHERE txn = %s;",
        "insertQuery": "INSERT INTO simulatetransaction (txn, transaction) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS simulatetransaction (id SERIAL PRIMARY KEY,txn VARCHAR(255) UNIQUE NOT NULL,transaction JSONB NOT NULL);",
        "rpcCall": true,
        "method": "simulateTransaction"
    },
    {
        "freshCall": true,
        "tableName": "validatorexit",
        "columnSearch": null,
        "insertName": "exit",
        "type": "ValidatorExit",
        "searchQuery": "SELECT exit FROM validatorexit WHERE None = %s;",
        "insertQuery": "INSERT INTO validatorexit (None, exit) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS validatorexit (id SERIAL PRIMARY KEY,None VARCHAR(255) UNIQUE NOT NULL,exit JSONB NOT NULL);",
        "rpcCall": true,
        "method": "validatorExit"
    },
    {
        "freshCall": true,
        "tableName": "postsendwithconfirm",
        "columnSearch": "resp",
        "insertName": "_post_send_with_confirm",
        "type": "SendTransaction",
        "searchQuery": "SELECT _post_send_with_confirm FROM postsendwithconfirm WHERE resp = %s;",
        "insertQuery": "INSERT INTO postsendwithconfirm (resp, _post_send_with_confirm) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS postsendwithconfirm (id SERIAL PRIMARY KEY,resp VARCHAR(255) UNIQUE NOT NULL,_post_send_with_confirm JSONB NOT NULL);",
        "rpcCall": true,
        "method": "postSendWithConfirm"
    },
    {
        "freshCall": true,
        "tableName": "confirmtransaction",
        "columnSearch": "tx_sig",
        "insertName": "transaction",
        "type": "SignatureStatuses",
        "searchQuery": "SELECT transaction FROM confirmtransaction WHERE tx_sig = %s;",
        "insertQuery": "INSERT INTO confirmtransaction (tx_sig, transaction) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS confirmtransaction (id SERIAL PRIMARY KEY,tx_sig VARCHAR(255) UNIQUE NOT NULL,transaction JSONB NOT NULL);",
        "rpcCall": true,
        "method": "confirmTransaction"
    },
    {
        "freshCall": false,
        "tableName": "getmetadata",
        "columnSearch": "mint",
        "insertName": "metadata",
        "type": "mintAddress",
        "searchQuery": "SELECT metadata FROM getmetadata WHERE mint = %s;",
        "insertQuery": "INSERT INTO getmetadata (mint, metadata) VALUES (%s, %s)",
        "table": "CREATE TABLE IF NOT EXISTS getmetadata (id SERIAL PRIMARY KEY,mint VARCHAR(255) UNIQUE NOT NULL,metadata JSONB NOT NULL);",
        "rpcCall": false,
        "method": "getMetaData"
    }
]
