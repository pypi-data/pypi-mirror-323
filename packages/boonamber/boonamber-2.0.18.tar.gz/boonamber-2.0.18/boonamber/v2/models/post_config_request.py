# coding: utf-8

"""
    Amber API Server

    Boon Logic Amber API server

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostConfigRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'streaming_window': 'StreamingWindow',
        'percent_variation': 'PercentVariation',
        'features': 'list[FeatureConfig]',
        'training': 'TrainingConfig',
        'autotuning': 'AutotuneConfig'
    }

    attribute_map = {
        'streaming_window': 'streamingWindow',
        'percent_variation': 'percentVariation',
        'features': 'features',
        'training': 'training',
        'autotuning': 'autotuning'
    }

    def __init__(self, streaming_window=None, percent_variation=None, features=None, training=None, autotuning=None):
        """PostConfigRequest - a model defined in Swagger"""
        self._streaming_window = None
        self._percent_variation = None
        self._features = None
        self._training = None
        self._autotuning = None
        self.discriminator = None
        self.streaming_window = streaming_window
        if percent_variation is not None:
            self.percent_variation = percent_variation
        self.features = features
        if training is not None:
            self.training = training
        if autotuning is not None:
            self.autotuning = autotuning

    @property
    def streaming_window(self):
        """Gets the streaming_window of this PostConfigRequest.


        :return: The streaming_window of this PostConfigRequest.
        :rtype: StreamingWindow
        """
        return self._streaming_window

    @streaming_window.setter
    def streaming_window(self, streaming_window):
        """Sets the streaming_window of this PostConfigRequest.


        :param streaming_window: The streaming_window of this PostConfigRequest.
        :type: StreamingWindow
        """
        if streaming_window is None:
            raise ValueError("Invalid value for `streaming_window`, must not be `None`")

        self._streaming_window = streaming_window

    @property
    def percent_variation(self):
        """Gets the percent_variation of this PostConfigRequest.


        :return: The percent_variation of this PostConfigRequest.
        :rtype: PercentVariation
        """
        return self._percent_variation

    @percent_variation.setter
    def percent_variation(self, percent_variation):
        """Sets the percent_variation of this PostConfigRequest.


        :param percent_variation: The percent_variation of this PostConfigRequest.
        :type: PercentVariation
        """

        self._percent_variation = percent_variation

    @property
    def features(self):
        """Gets the features of this PostConfigRequest.


        :return: The features of this PostConfigRequest.
        :rtype: list[FeatureConfig]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this PostConfigRequest.


        :param features: The features of this PostConfigRequest.
        :type: list[FeatureConfig]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")

        self._features = features

    @property
    def training(self):
        """Gets the training of this PostConfigRequest.


        :return: The training of this PostConfigRequest.
        :rtype: TrainingConfig
        """
        return self._training

    @training.setter
    def training(self, training):
        """Sets the training of this PostConfigRequest.


        :param training: The training of this PostConfigRequest.
        :type: TrainingConfig
        """

        self._training = training

    @property
    def autotuning(self):
        """Gets the autotuning of this PostConfigRequest.


        :return: The autotuning of this PostConfigRequest.
        :rtype: AutotuneConfig
        """
        return self._autotuning

    @autotuning.setter
    def autotuning(self, autotuning):
        """Sets the autotuning of this PostConfigRequest.


        :param autotuning: The autotuning of this PostConfigRequest.
        :type: AutotuneConfig
        """

        self._autotuning = autotuning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostConfigRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostConfigRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
