# coding: utf-8

"""
    Amber API Server

    Boon Logic Amber API server

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'str',
        'created': 'str',
        'modified': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, id=None, label=None, created=None, modified=None):
        """Model - a model defined in Swagger"""
        self._id = None
        self._label = None
        self._created = None
        self._modified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this Model.

        Unique identifier for model.

        :return: The id of this Model.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Model.

        Unique identifier for model.

        :param id: The id of this Model.
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Model.

        Free-form label for this model.

        :return: The label of this Model.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Model.

        Free-form label for this model.

        :param label: The label of this Model.
        :type: str
        """

        self._label = label

    @property
    def created(self):
        """Gets the created of this Model.

        Model creation time in ISO format.

        :return: The created of this Model.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Model.

        Model creation time in ISO format.

        :param created: The created of this Model.
        :type: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Model.

        Last time model was updated, in ISO format.

        :return: The modified of this Model.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Model.

        Last time model was updated, in ISO format.

        :param modified: The modified of this Model.
        :type: str
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
