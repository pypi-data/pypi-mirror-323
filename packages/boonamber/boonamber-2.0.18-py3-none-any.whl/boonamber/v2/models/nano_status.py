# coding: utf-8

"""
    Amber API Server

    Boon Logic Amber API server

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NanoStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pca': 'list[list[float]]',
        'cluster_growth': 'list[float]',
        'cluster_sizes': 'list[float]',
        'anomaly_indexes': 'list[float]',
        'frequency_indexes': 'list[float]',
        'distance_indexes': 'list[float]',
        'sample_count': 'int',
        'cluster_count': 'int',
        'anomaly_threshold': 'int',
        'state': 'AmberState'
    }

    attribute_map = {
        'pca': 'pca',
        'cluster_growth': 'clusterGrowth',
        'cluster_sizes': 'clusterSizes',
        'anomaly_indexes': 'anomalyIndexes',
        'frequency_indexes': 'frequencyIndexes',
        'distance_indexes': 'distanceIndexes',
        'sample_count': 'sampleCount',
        'cluster_count': 'clusterCount',
        'anomaly_threshold': 'anomalyThreshold',
        'state': 'state'
    }

    def __init__(self, pca=None, cluster_growth=None, cluster_sizes=None, anomaly_indexes=None, frequency_indexes=None, distance_indexes=None, sample_count=None, cluster_count=None, anomaly_threshold=None, state=None):
        """NanoStatus - a model defined in Swagger"""
        self._pca = None
        self._cluster_growth = None
        self._cluster_sizes = None
        self._anomaly_indexes = None
        self._frequency_indexes = None
        self._distance_indexes = None
        self._sample_count = None
        self._cluster_count = None
        self._anomaly_threshold = None
        self._state = None
        self.discriminator = None
        if pca is not None:
            self.pca = pca
        if cluster_growth is not None:
            self.cluster_growth = cluster_growth
        if cluster_sizes is not None:
            self.cluster_sizes = cluster_sizes
        if anomaly_indexes is not None:
            self.anomaly_indexes = anomaly_indexes
        if frequency_indexes is not None:
            self.frequency_indexes = frequency_indexes
        if distance_indexes is not None:
            self.distance_indexes = distance_indexes
        if sample_count is not None:
            self.sample_count = sample_count
        if cluster_count is not None:
            self.cluster_count = cluster_count
        if anomaly_threshold is not None:
            self.anomaly_threshold = anomaly_threshold
        if state is not None:
            self.state = state

    @property
    def pca(self):
        """Gets the pca of this NanoStatus.

        pca

        :return: The pca of this NanoStatus.
        :rtype: list[list[float]]
        """
        return self._pca

    @pca.setter
    def pca(self, pca):
        """Sets the pca of this NanoStatus.

        pca

        :param pca: The pca of this NanoStatus.
        :type: list[list[float]]
        """

        self._pca = pca

    @property
    def cluster_growth(self):
        """Gets the cluster_growth of this NanoStatus.

        cluster growth

        :return: The cluster_growth of this NanoStatus.
        :rtype: list[float]
        """
        return self._cluster_growth

    @cluster_growth.setter
    def cluster_growth(self, cluster_growth):
        """Sets the cluster_growth of this NanoStatus.

        cluster growth

        :param cluster_growth: The cluster_growth of this NanoStatus.
        :type: list[float]
        """

        self._cluster_growth = cluster_growth

    @property
    def cluster_sizes(self):
        """Gets the cluster_sizes of this NanoStatus.

        cluster sizes

        :return: The cluster_sizes of this NanoStatus.
        :rtype: list[float]
        """
        return self._cluster_sizes

    @cluster_sizes.setter
    def cluster_sizes(self, cluster_sizes):
        """Sets the cluster_sizes of this NanoStatus.

        cluster sizes

        :param cluster_sizes: The cluster_sizes of this NanoStatus.
        :type: list[float]
        """

        self._cluster_sizes = cluster_sizes

    @property
    def anomaly_indexes(self):
        """Gets the anomaly_indexes of this NanoStatus.

        anomaly indexes

        :return: The anomaly_indexes of this NanoStatus.
        :rtype: list[float]
        """
        return self._anomaly_indexes

    @anomaly_indexes.setter
    def anomaly_indexes(self, anomaly_indexes):
        """Sets the anomaly_indexes of this NanoStatus.

        anomaly indexes

        :param anomaly_indexes: The anomaly_indexes of this NanoStatus.
        :type: list[float]
        """

        self._anomaly_indexes = anomaly_indexes

    @property
    def frequency_indexes(self):
        """Gets the frequency_indexes of this NanoStatus.

        frequency indexes

        :return: The frequency_indexes of this NanoStatus.
        :rtype: list[float]
        """
        return self._frequency_indexes

    @frequency_indexes.setter
    def frequency_indexes(self, frequency_indexes):
        """Sets the frequency_indexes of this NanoStatus.

        frequency indexes

        :param frequency_indexes: The frequency_indexes of this NanoStatus.
        :type: list[float]
        """

        self._frequency_indexes = frequency_indexes

    @property
    def distance_indexes(self):
        """Gets the distance_indexes of this NanoStatus.

        distance indexes

        :return: The distance_indexes of this NanoStatus.
        :rtype: list[float]
        """
        return self._distance_indexes

    @distance_indexes.setter
    def distance_indexes(self, distance_indexes):
        """Sets the distance_indexes of this NanoStatus.

        distance indexes

        :param distance_indexes: The distance_indexes of this NanoStatus.
        :type: list[float]
        """

        self._distance_indexes = distance_indexes

    @property
    def sample_count(self):
        """Gets the sample_count of this NanoStatus.

        Total number of patterns processed since configuration.

        :return: The sample_count of this NanoStatus.
        :rtype: int
        """
        return self._sample_count

    @sample_count.setter
    def sample_count(self, sample_count):
        """Sets the sample_count of this NanoStatus.

        Total number of patterns processed since configuration.

        :param sample_count: The sample_count of this NanoStatus.
        :type: int
        """

        self._sample_count = sample_count

    @property
    def cluster_count(self):
        """Gets the cluster_count of this NanoStatus.

        Total number of clusters generated by patterns so far.

        :return: The cluster_count of this NanoStatus.
        :rtype: int
        """
        return self._cluster_count

    @cluster_count.setter
    def cluster_count(self, cluster_count):
        """Sets the cluster_count of this NanoStatus.

        Total number of clusters generated by patterns so far.

        :param cluster_count: The cluster_count of this NanoStatus.
        :type: int
        """

        self._cluster_count = cluster_count

    @property
    def anomaly_threshold(self):
        """Gets the anomaly_threshold of this NanoStatus.

        anomaly threshold

        :return: The anomaly_threshold of this NanoStatus.
        :rtype: int
        """
        return self._anomaly_threshold

    @anomaly_threshold.setter
    def anomaly_threshold(self, anomaly_threshold):
        """Sets the anomaly_threshold of this NanoStatus.

        anomaly threshold

        :param anomaly_threshold: The anomaly_threshold of this NanoStatus.
        :type: int
        """

        self._anomaly_threshold = anomaly_threshold

    @property
    def state(self):
        """Gets the state of this NanoStatus.


        :return: The state of this NanoStatus.
        :rtype: AmberState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NanoStatus.


        :param state: The state of this NanoStatus.
        :type: AmberState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NanoStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NanoStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
