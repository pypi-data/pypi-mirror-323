# coding: utf-8

"""
    Amber API Server

    Boon Logic Amber API server

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MTraining(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version_number': 'list[VersionNumber]',
        'm_geometric_plot_y': 'list[float]',
        'm_geometric_plot_x': 'list[float]',
        'm_cluster_growth': 'list[float]',
        'm_anomaly_indexes': 'list[float]'
    }

    attribute_map = {
        'version_number': 'versionNumber',
        'm_geometric_plot_y': 'm_GeometricPlotY',
        'm_geometric_plot_x': 'm_GeometricPlotX',
        'm_cluster_growth': 'm_ClusterGrowth',
        'm_anomaly_indexes': 'm_AnomalyIndexes'
    }

    def __init__(self, version_number=None, m_geometric_plot_y=None, m_geometric_plot_x=None, m_cluster_growth=None, m_anomaly_indexes=None):
        """MTraining - a model defined in Swagger"""
        self._version_number = None
        self._m_geometric_plot_y = None
        self._m_geometric_plot_x = None
        self._m_cluster_growth = None
        self._m_anomaly_indexes = None
        self.discriminator = None
        if version_number is not None:
            self.version_number = version_number
        self.m_geometric_plot_y = m_geometric_plot_y
        self.m_geometric_plot_x = m_geometric_plot_x
        self.m_cluster_growth = m_cluster_growth
        if m_anomaly_indexes is not None:
            self.m_anomaly_indexes = m_anomaly_indexes

    @property
    def version_number(self):
        """Gets the version_number of this MTraining.


        :return: The version_number of this MTraining.
        :rtype: list[VersionNumber]
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this MTraining.


        :param version_number: The version_number of this MTraining.
        :type: list[VersionNumber]
        """

        self._version_number = version_number

    @property
    def m_geometric_plot_y(self):
        """Gets the m_geometric_plot_y of this MTraining.


        :return: The m_geometric_plot_y of this MTraining.
        :rtype: list[float]
        """
        return self._m_geometric_plot_y

    @m_geometric_plot_y.setter
    def m_geometric_plot_y(self, m_geometric_plot_y):
        """Sets the m_geometric_plot_y of this MTraining.


        :param m_geometric_plot_y: The m_geometric_plot_y of this MTraining.
        :type: list[float]
        """
        if m_geometric_plot_y is None:
            raise ValueError("Invalid value for `m_geometric_plot_y`, must not be `None`")

        self._m_geometric_plot_y = m_geometric_plot_y

    @property
    def m_geometric_plot_x(self):
        """Gets the m_geometric_plot_x of this MTraining.


        :return: The m_geometric_plot_x of this MTraining.
        :rtype: list[float]
        """
        return self._m_geometric_plot_x

    @m_geometric_plot_x.setter
    def m_geometric_plot_x(self, m_geometric_plot_x):
        """Sets the m_geometric_plot_x of this MTraining.


        :param m_geometric_plot_x: The m_geometric_plot_x of this MTraining.
        :type: list[float]
        """
        if m_geometric_plot_x is None:
            raise ValueError("Invalid value for `m_geometric_plot_x`, must not be `None`")

        self._m_geometric_plot_x = m_geometric_plot_x

    @property
    def m_cluster_growth(self):
        """Gets the m_cluster_growth of this MTraining.


        :return: The m_cluster_growth of this MTraining.
        :rtype: list[float]
        """
        return self._m_cluster_growth

    @m_cluster_growth.setter
    def m_cluster_growth(self, m_cluster_growth):
        """Sets the m_cluster_growth of this MTraining.


        :param m_cluster_growth: The m_cluster_growth of this MTraining.
        :type: list[float]
        """
        if m_cluster_growth is None:
            raise ValueError("Invalid value for `m_cluster_growth`, must not be `None`")

        self._m_cluster_growth = m_cluster_growth

    @property
    def m_anomaly_indexes(self):
        """Gets the m_anomaly_indexes of this MTraining.


        :return: The m_anomaly_indexes of this MTraining.
        :rtype: list[float]
        """
        return self._m_anomaly_indexes

    @m_anomaly_indexes.setter
    def m_anomaly_indexes(self, m_anomaly_indexes):
        """Sets the m_anomaly_indexes of this MTraining.


        :param m_anomaly_indexes: The m_anomaly_indexes of this MTraining.
        :type: list[float]
        """

        self._m_anomaly_indexes = m_anomaly_indexes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MTraining, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MTraining):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
