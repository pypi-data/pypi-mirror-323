# coding: utf-8

"""
    Amber API Server

    Boon Logic Amber API server

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MNano(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'm_nano_config': 'MNanoConfig',
        'magic_number': 'MagicNumber',
        'version_number': 'VersionNumber',
        'backend_version': 'float',
        'm_error_msg': 'str',
        'm_nano_backend': 'MNanoBackend'
    }

    attribute_map = {
        'm_nano_config': 'm_NanoConfig',
        'magic_number': 'magicNumber',
        'version_number': 'versionNumber',
        'backend_version': 'BackendVersion',
        'm_error_msg': 'm_ErrorMsg',
        'm_nano_backend': 'm_NanoBackend'
    }

    def __init__(self, m_nano_config=None, magic_number=None, version_number=None, backend_version=None, m_error_msg=None, m_nano_backend=None):
        """MNano - a model defined in Swagger"""
        self._m_nano_config = None
        self._magic_number = None
        self._version_number = None
        self._backend_version = None
        self._m_error_msg = None
        self._m_nano_backend = None
        self.discriminator = None
        self.m_nano_config = m_nano_config
        if magic_number is not None:
            self.magic_number = magic_number
        if version_number is not None:
            self.version_number = version_number
        if backend_version is not None:
            self.backend_version = backend_version
        if m_error_msg is not None:
            self.m_error_msg = m_error_msg
        if m_nano_backend is not None:
            self.m_nano_backend = m_nano_backend

    @property
    def m_nano_config(self):
        """Gets the m_nano_config of this MNano.


        :return: The m_nano_config of this MNano.
        :rtype: MNanoConfig
        """
        return self._m_nano_config

    @m_nano_config.setter
    def m_nano_config(self, m_nano_config):
        """Sets the m_nano_config of this MNano.


        :param m_nano_config: The m_nano_config of this MNano.
        :type: MNanoConfig
        """
        if m_nano_config is None:
            raise ValueError("Invalid value for `m_nano_config`, must not be `None`")

        self._m_nano_config = m_nano_config

    @property
    def magic_number(self):
        """Gets the magic_number of this MNano.


        :return: The magic_number of this MNano.
        :rtype: MagicNumber
        """
        return self._magic_number

    @magic_number.setter
    def magic_number(self, magic_number):
        """Sets the magic_number of this MNano.


        :param magic_number: The magic_number of this MNano.
        :type: MagicNumber
        """

        self._magic_number = magic_number

    @property
    def version_number(self):
        """Gets the version_number of this MNano.


        :return: The version_number of this MNano.
        :rtype: VersionNumber
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this MNano.


        :param version_number: The version_number of this MNano.
        :type: VersionNumber
        """

        self._version_number = version_number

    @property
    def backend_version(self):
        """Gets the backend_version of this MNano.


        :return: The backend_version of this MNano.
        :rtype: float
        """
        return self._backend_version

    @backend_version.setter
    def backend_version(self, backend_version):
        """Sets the backend_version of this MNano.


        :param backend_version: The backend_version of this MNano.
        :type: float
        """

        self._backend_version = backend_version

    @property
    def m_error_msg(self):
        """Gets the m_error_msg of this MNano.


        :return: The m_error_msg of this MNano.
        :rtype: str
        """
        return self._m_error_msg

    @m_error_msg.setter
    def m_error_msg(self, m_error_msg):
        """Sets the m_error_msg of this MNano.


        :param m_error_msg: The m_error_msg of this MNano.
        :type: str
        """

        self._m_error_msg = m_error_msg

    @property
    def m_nano_backend(self):
        """Gets the m_nano_backend of this MNano.


        :return: The m_nano_backend of this MNano.
        :rtype: MNanoBackend
        """
        return self._m_nano_backend

    @m_nano_backend.setter
    def m_nano_backend(self, m_nano_backend):
        """Sets the m_nano_backend of this MNano.


        :param m_nano_backend: The m_nano_backend of this MNano.
        :type: MNanoBackend
        """

        self._m_nano_backend = m_nano_backend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MNano, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MNano):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
