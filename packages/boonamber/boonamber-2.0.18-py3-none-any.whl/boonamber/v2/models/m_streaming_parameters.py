# coding: utf-8

"""
    Amber API Server

    Boon Logic Amber API server

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MStreamingParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version_number': 'VersionNumber',
        'm_enable_autotuning': 'bool',
        'm_samples_to_buffer_for_autotuning': 'float',
        'm_graduation_at_rate_numerator': 'float',
        'm_graduation_at_rate_denominator': 'float',
        'm_graduate_at_max_clusters': 'float',
        'm_graduate_at_max_samples': 'float'
    }

    attribute_map = {
        'version_number': 'versionNumber',
        'm_enable_autotuning': 'm_EnableAutotuning',
        'm_samples_to_buffer_for_autotuning': 'm_SamplesToBufferForAutotuning',
        'm_graduation_at_rate_numerator': 'm_GraduationAtRateNumerator',
        'm_graduation_at_rate_denominator': 'm_GraduationAtRateDenominator',
        'm_graduate_at_max_clusters': 'm_GraduateAtMaxClusters',
        'm_graduate_at_max_samples': 'm_GraduateAtMaxSamples'
    }

    def __init__(self, version_number=None, m_enable_autotuning=None, m_samples_to_buffer_for_autotuning=None, m_graduation_at_rate_numerator=None, m_graduation_at_rate_denominator=None, m_graduate_at_max_clusters=None, m_graduate_at_max_samples=None):
        """MStreamingParameters - a model defined in Swagger"""
        self._version_number = None
        self._m_enable_autotuning = None
        self._m_samples_to_buffer_for_autotuning = None
        self._m_graduation_at_rate_numerator = None
        self._m_graduation_at_rate_denominator = None
        self._m_graduate_at_max_clusters = None
        self._m_graduate_at_max_samples = None
        self.discriminator = None
        if version_number is not None:
            self.version_number = version_number
        if m_enable_autotuning is not None:
            self.m_enable_autotuning = m_enable_autotuning
        self.m_samples_to_buffer_for_autotuning = m_samples_to_buffer_for_autotuning
        self.m_graduation_at_rate_numerator = m_graduation_at_rate_numerator
        self.m_graduation_at_rate_denominator = m_graduation_at_rate_denominator
        self.m_graduate_at_max_clusters = m_graduate_at_max_clusters
        self.m_graduate_at_max_samples = m_graduate_at_max_samples

    @property
    def version_number(self):
        """Gets the version_number of this MStreamingParameters.


        :return: The version_number of this MStreamingParameters.
        :rtype: VersionNumber
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this MStreamingParameters.


        :param version_number: The version_number of this MStreamingParameters.
        :type: VersionNumber
        """

        self._version_number = version_number

    @property
    def m_enable_autotuning(self):
        """Gets the m_enable_autotuning of this MStreamingParameters.


        :return: The m_enable_autotuning of this MStreamingParameters.
        :rtype: bool
        """
        return self._m_enable_autotuning

    @m_enable_autotuning.setter
    def m_enable_autotuning(self, m_enable_autotuning):
        """Sets the m_enable_autotuning of this MStreamingParameters.


        :param m_enable_autotuning: The m_enable_autotuning of this MStreamingParameters.
        :type: bool
        """

        self._m_enable_autotuning = m_enable_autotuning

    @property
    def m_samples_to_buffer_for_autotuning(self):
        """Gets the m_samples_to_buffer_for_autotuning of this MStreamingParameters.


        :return: The m_samples_to_buffer_for_autotuning of this MStreamingParameters.
        :rtype: float
        """
        return self._m_samples_to_buffer_for_autotuning

    @m_samples_to_buffer_for_autotuning.setter
    def m_samples_to_buffer_for_autotuning(self, m_samples_to_buffer_for_autotuning):
        """Sets the m_samples_to_buffer_for_autotuning of this MStreamingParameters.


        :param m_samples_to_buffer_for_autotuning: The m_samples_to_buffer_for_autotuning of this MStreamingParameters.
        :type: float
        """
        if m_samples_to_buffer_for_autotuning is None:
            raise ValueError("Invalid value for `m_samples_to_buffer_for_autotuning`, must not be `None`")

        self._m_samples_to_buffer_for_autotuning = m_samples_to_buffer_for_autotuning

    @property
    def m_graduation_at_rate_numerator(self):
        """Gets the m_graduation_at_rate_numerator of this MStreamingParameters.


        :return: The m_graduation_at_rate_numerator of this MStreamingParameters.
        :rtype: float
        """
        return self._m_graduation_at_rate_numerator

    @m_graduation_at_rate_numerator.setter
    def m_graduation_at_rate_numerator(self, m_graduation_at_rate_numerator):
        """Sets the m_graduation_at_rate_numerator of this MStreamingParameters.


        :param m_graduation_at_rate_numerator: The m_graduation_at_rate_numerator of this MStreamingParameters.
        :type: float
        """
        if m_graduation_at_rate_numerator is None:
            raise ValueError("Invalid value for `m_graduation_at_rate_numerator`, must not be `None`")

        self._m_graduation_at_rate_numerator = m_graduation_at_rate_numerator

    @property
    def m_graduation_at_rate_denominator(self):
        """Gets the m_graduation_at_rate_denominator of this MStreamingParameters.


        :return: The m_graduation_at_rate_denominator of this MStreamingParameters.
        :rtype: float
        """
        return self._m_graduation_at_rate_denominator

    @m_graduation_at_rate_denominator.setter
    def m_graduation_at_rate_denominator(self, m_graduation_at_rate_denominator):
        """Sets the m_graduation_at_rate_denominator of this MStreamingParameters.


        :param m_graduation_at_rate_denominator: The m_graduation_at_rate_denominator of this MStreamingParameters.
        :type: float
        """
        if m_graduation_at_rate_denominator is None:
            raise ValueError("Invalid value for `m_graduation_at_rate_denominator`, must not be `None`")

        self._m_graduation_at_rate_denominator = m_graduation_at_rate_denominator

    @property
    def m_graduate_at_max_clusters(self):
        """Gets the m_graduate_at_max_clusters of this MStreamingParameters.


        :return: The m_graduate_at_max_clusters of this MStreamingParameters.
        :rtype: float
        """
        return self._m_graduate_at_max_clusters

    @m_graduate_at_max_clusters.setter
    def m_graduate_at_max_clusters(self, m_graduate_at_max_clusters):
        """Sets the m_graduate_at_max_clusters of this MStreamingParameters.


        :param m_graduate_at_max_clusters: The m_graduate_at_max_clusters of this MStreamingParameters.
        :type: float
        """
        if m_graduate_at_max_clusters is None:
            raise ValueError("Invalid value for `m_graduate_at_max_clusters`, must not be `None`")

        self._m_graduate_at_max_clusters = m_graduate_at_max_clusters

    @property
    def m_graduate_at_max_samples(self):
        """Gets the m_graduate_at_max_samples of this MStreamingParameters.


        :return: The m_graduate_at_max_samples of this MStreamingParameters.
        :rtype: float
        """
        return self._m_graduate_at_max_samples

    @m_graduate_at_max_samples.setter
    def m_graduate_at_max_samples(self, m_graduate_at_max_samples):
        """Sets the m_graduate_at_max_samples of this MStreamingParameters.


        :param m_graduate_at_max_samples: The m_graduate_at_max_samples of this MStreamingParameters.
        :type: float
        """
        if m_graduate_at_max_samples is None:
            raise ValueError("Invalid value for `m_graduate_at_max_samples`, must not be `None`")

        self._m_graduate_at_max_samples = m_graduate_at_max_samples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MStreamingParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MStreamingParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
