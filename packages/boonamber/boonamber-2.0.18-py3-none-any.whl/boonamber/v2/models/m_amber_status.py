# coding: utf-8

"""
    Amber API Server

    Boon Logic Amber API server

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MAmberStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version_number': 'VersionNumber',
        'm_status': 'str',
        'm_message': 'str',
        'm_progress': 'float',
        'm_current_cluster_count': 'float',
        'm_retry_count': 'float',
        'm_streaming_window_size': 'float',
        'm_total_inferences': 'float',
        'm_total_samples_written': 'float'
    }

    attribute_map = {
        'version_number': 'versionNumber',
        'm_status': 'm_Status',
        'm_message': 'm_Message',
        'm_progress': 'm_Progress',
        'm_current_cluster_count': 'm_CurrentClusterCount',
        'm_retry_count': 'm_RetryCount',
        'm_streaming_window_size': 'm_StreamingWindowSize',
        'm_total_inferences': 'm_TotalInferences',
        'm_total_samples_written': 'm_TotalSamplesWritten'
    }

    def __init__(self, version_number=None, m_status=None, m_message=None, m_progress=None, m_current_cluster_count=None, m_retry_count=None, m_streaming_window_size=None, m_total_inferences=None, m_total_samples_written=None):
        """MAmberStatus - a model defined in Swagger"""
        self._version_number = None
        self._m_status = None
        self._m_message = None
        self._m_progress = None
        self._m_current_cluster_count = None
        self._m_retry_count = None
        self._m_streaming_window_size = None
        self._m_total_inferences = None
        self._m_total_samples_written = None
        self.discriminator = None
        if version_number is not None:
            self.version_number = version_number
        self.m_status = m_status
        if m_message is not None:
            self.m_message = m_message
        if m_progress is not None:
            self.m_progress = m_progress
        self.m_current_cluster_count = m_current_cluster_count
        self.m_retry_count = m_retry_count
        self.m_streaming_window_size = m_streaming_window_size
        self.m_total_inferences = m_total_inferences
        if m_total_samples_written is not None:
            self.m_total_samples_written = m_total_samples_written

    @property
    def version_number(self):
        """Gets the version_number of this MAmberStatus.


        :return: The version_number of this MAmberStatus.
        :rtype: VersionNumber
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this MAmberStatus.


        :param version_number: The version_number of this MAmberStatus.
        :type: VersionNumber
        """

        self._version_number = version_number

    @property
    def m_status(self):
        """Gets the m_status of this MAmberStatus.


        :return: The m_status of this MAmberStatus.
        :rtype: str
        """
        return self._m_status

    @m_status.setter
    def m_status(self, m_status):
        """Sets the m_status of this MAmberStatus.


        :param m_status: The m_status of this MAmberStatus.
        :type: str
        """
        if m_status is None:
            raise ValueError("Invalid value for `m_status`, must not be `None`")

        self._m_status = m_status

    @property
    def m_message(self):
        """Gets the m_message of this MAmberStatus.


        :return: The m_message of this MAmberStatus.
        :rtype: str
        """
        return self._m_message

    @m_message.setter
    def m_message(self, m_message):
        """Sets the m_message of this MAmberStatus.


        :param m_message: The m_message of this MAmberStatus.
        :type: str
        """

        self._m_message = m_message

    @property
    def m_progress(self):
        """Gets the m_progress of this MAmberStatus.


        :return: The m_progress of this MAmberStatus.
        :rtype: float
        """
        return self._m_progress

    @m_progress.setter
    def m_progress(self, m_progress):
        """Sets the m_progress of this MAmberStatus.


        :param m_progress: The m_progress of this MAmberStatus.
        :type: float
        """

        self._m_progress = m_progress

    @property
    def m_current_cluster_count(self):
        """Gets the m_current_cluster_count of this MAmberStatus.


        :return: The m_current_cluster_count of this MAmberStatus.
        :rtype: float
        """
        return self._m_current_cluster_count

    @m_current_cluster_count.setter
    def m_current_cluster_count(self, m_current_cluster_count):
        """Sets the m_current_cluster_count of this MAmberStatus.


        :param m_current_cluster_count: The m_current_cluster_count of this MAmberStatus.
        :type: float
        """
        if m_current_cluster_count is None:
            raise ValueError("Invalid value for `m_current_cluster_count`, must not be `None`")

        self._m_current_cluster_count = m_current_cluster_count

    @property
    def m_retry_count(self):
        """Gets the m_retry_count of this MAmberStatus.


        :return: The m_retry_count of this MAmberStatus.
        :rtype: float
        """
        return self._m_retry_count

    @m_retry_count.setter
    def m_retry_count(self, m_retry_count):
        """Sets the m_retry_count of this MAmberStatus.


        :param m_retry_count: The m_retry_count of this MAmberStatus.
        :type: float
        """
        if m_retry_count is None:
            raise ValueError("Invalid value for `m_retry_count`, must not be `None`")

        self._m_retry_count = m_retry_count

    @property
    def m_streaming_window_size(self):
        """Gets the m_streaming_window_size of this MAmberStatus.


        :return: The m_streaming_window_size of this MAmberStatus.
        :rtype: float
        """
        return self._m_streaming_window_size

    @m_streaming_window_size.setter
    def m_streaming_window_size(self, m_streaming_window_size):
        """Sets the m_streaming_window_size of this MAmberStatus.


        :param m_streaming_window_size: The m_streaming_window_size of this MAmberStatus.
        :type: float
        """
        if m_streaming_window_size is None:
            raise ValueError("Invalid value for `m_streaming_window_size`, must not be `None`")

        self._m_streaming_window_size = m_streaming_window_size

    @property
    def m_total_inferences(self):
        """Gets the m_total_inferences of this MAmberStatus.


        :return: The m_total_inferences of this MAmberStatus.
        :rtype: float
        """
        return self._m_total_inferences

    @m_total_inferences.setter
    def m_total_inferences(self, m_total_inferences):
        """Sets the m_total_inferences of this MAmberStatus.


        :param m_total_inferences: The m_total_inferences of this MAmberStatus.
        :type: float
        """
        if m_total_inferences is None:
            raise ValueError("Invalid value for `m_total_inferences`, must not be `None`")

        self._m_total_inferences = m_total_inferences

    @property
    def m_total_samples_written(self):
        """Gets the m_total_samples_written of this MAmberStatus.


        :return: The m_total_samples_written of this MAmberStatus.
        :rtype: float
        """
        return self._m_total_samples_written

    @m_total_samples_written.setter
    def m_total_samples_written(self, m_total_samples_written):
        """Sets the m_total_samples_written of this MAmberStatus.


        :param m_total_samples_written: The m_total_samples_written of this MAmberStatus.
        :type: float
        """

        self._m_total_samples_written = m_total_samples_written

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MAmberStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MAmberStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
