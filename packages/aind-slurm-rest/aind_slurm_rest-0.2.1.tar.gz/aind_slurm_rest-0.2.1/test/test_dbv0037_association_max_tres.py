# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_slurm_rest.models.dbv0037_association_max_tres import Dbv0037AssociationMaxTres

class TestDbv0037AssociationMaxTres(unittest.TestCase):
    """Dbv0037AssociationMaxTres unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dbv0037AssociationMaxTres:
        """Test Dbv0037AssociationMaxTres
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dbv0037AssociationMaxTres`
        """
        model = Dbv0037AssociationMaxTres()
        if include_optional:
            return Dbv0037AssociationMaxTres(
                group = aind_slurm_rest.models.dbv0_0_37_association_max_tres_group.dbv0_0_37_association_max_tres_group(
                    minutes = [
                        aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ], 
                    active = [
                        aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ], ),
                per = aind_slurm_rest.models.dbv0_0_37_association_max_tres_per.dbv0_0_37_association_max_tres_per(
                    job = [
                        aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ], 
                    node = [
                        aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ], ),
                total = [
                    aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                        type = '', 
                        name = '', 
                        id = 56, 
                        count = 56, )
                    ],
                minutes = aind_slurm_rest.models.dbv0_0_37_association_max_tres_minutes.dbv0_0_37_association_max_tres_minutes(
                    per = aind_slurm_rest.models.dbv0_0_37_association_max_tres_minutes_per.dbv0_0_37_association_max_tres_minutes_per(
                        job = [
                            aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                                type = '', 
                                name = '', 
                                id = 56, 
                                count = 56, )
                            ], ), 
                    total = [
                        aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ], )
            )
        else:
            return Dbv0037AssociationMaxTres(
        )
        """

    def testDbv0037AssociationMaxTres(self):
        """Test Dbv0037AssociationMaxTres"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
