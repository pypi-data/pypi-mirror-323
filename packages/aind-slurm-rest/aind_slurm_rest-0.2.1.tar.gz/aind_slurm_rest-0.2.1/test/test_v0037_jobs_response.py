# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_slurm_rest.models.v0037_jobs_response import V0037JobsResponse

class TestV0037JobsResponse(unittest.TestCase):
    """V0037JobsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V0037JobsResponse:
        """Test V0037JobsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V0037JobsResponse`
        """
        model = V0037JobsResponse()
        if include_optional:
            return V0037JobsResponse(
                errors = [
                    aind_slurm_rest.models.v0/0/37_error.v0.0.37_error(
                        error = '', 
                        errno = 56, )
                    ],
                jobs = [
                    aind_slurm_rest.models.v0/0/37_job_response_properties.v0.0.37_job_response_properties(
                        account = '', 
                        accrue_time = 56, 
                        admin_comment = '', 
                        array_job_id = '', 
                        array_task_id = '', 
                        array_max_tasks = '', 
                        array_task_string = '', 
                        association_id = '', 
                        batch_features = '', 
                        batch_flag = True, 
                        batch_host = '', 
                        flags = [
                            ''
                            ], 
                        burst_buffer = '', 
                        burst_buffer_state = '', 
                        cluster = '', 
                        cluster_features = '', 
                        command = '', 
                        comment = '', 
                        contiguous = True, 
                        core_spec = '', 
                        thread_spec = '', 
                        cores_per_socket = '', 
                        billable_tres = '', 
                        cpus_per_task = '', 
                        cpu_frequency_minimum = '', 
                        cpu_frequency_maximum = '', 
                        cpu_frequency_governor = '', 
                        cpus_per_tres = '', 
                        deadline = '', 
                        delay_boot = '', 
                        dependency = '', 
                        derived_exit_code = '', 
                        eligible_time = 56, 
                        end_time = 56, 
                        excluded_nodes = '', 
                        exit_code = 56, 
                        features = '', 
                        federation_origin = '', 
                        federation_siblings_active = '', 
                        federation_siblings_viable = '', 
                        gres_detail = [
                            ''
                            ], 
                        group_id = '', 
                        job_id = '', 
                        job_resources = aind_slurm_rest.models.v0/0/37_job_resources.v0.0.37_job_resources(
                            nodes = '', 
                            allocated_cpus = 56, 
                            allocated_hosts = 56, 
                            allocated_nodes = [
                                aind_slurm_rest.models.v0/0/37_node_allocation.v0.0.37_node_allocation(
                                    memory = 56, 
                                    cpus = aind_slurm_rest.models.cpus.cpus(), 
                                    sockets = aind_slurm_rest.models.sockets.sockets(), 
                                    cores = aind_slurm_rest.models.cores.cores(), )
                                ], ), 
                        job_state = '', 
                        last_sched_evaluation = '', 
                        licenses = '', 
                        max_cpus = '', 
                        max_nodes = '', 
                        mcs_label = '', 
                        memory_per_tres = '', 
                        name = '', 
                        nodes = '', 
                        nice = '', 
                        tasks_per_core = '', 
                        tasks_per_socket = '', 
                        tasks_per_board = '', 
                        cpus = '', 
                        node_count = '', 
                        tasks = '', 
                        het_job_id = '', 
                        het_job_id_set = '', 
                        het_job_offset = '', 
                        partition = '', 
                        memory_per_node = '', 
                        memory_per_cpu = '', 
                        minimum_cpus_per_node = '', 
                        minimum_tmp_disk_per_node = '', 
                        preempt_time = 56, 
                        pre_sus_time = 56, 
                        priority = '', 
                        profile = [
                            ''
                            ], 
                        qos = '', 
                        reboot = True, 
                        required_nodes = '', 
                        requeue = True, 
                        resize_time = 56, 
                        restart_cnt = '', 
                        resv_name = '', 
                        shared = '', 
                        show_flags = [
                            ''
                            ], 
                        sockets_per_board = '', 
                        sockets_per_node = '', 
                        start_time = 56, 
                        state_description = '', 
                        state_reason = '', 
                        standard_error = '', 
                        standard_input = '', 
                        standard_output = '', 
                        submit_time = 56, 
                        suspend_time = 56, 
                        system_comment = '', 
                        time_limit = '', 
                        time_minimum = '', 
                        threads_per_core = '', 
                        tres_bind = '', 
                        tres_freq = '', 
                        tres_per_job = '', 
                        tres_per_node = '', 
                        tres_per_socket = '', 
                        tres_per_task = '', 
                        tres_req_str = '', 
                        tres_alloc_str = '', 
                        user_id = '', 
                        user_name = '', 
                        wckey = '', 
                        current_working_directory = '', )
                    ]
            )
        else:
            return V0037JobsResponse(
        )
        """

    def testV0037JobsResponse(self):
        """Test V0037JobsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
