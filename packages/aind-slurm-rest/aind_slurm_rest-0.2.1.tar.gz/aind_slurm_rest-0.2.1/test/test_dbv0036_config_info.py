# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_slurm_rest.models.dbv0036_config_info import Dbv0036ConfigInfo

class TestDbv0036ConfigInfo(unittest.TestCase):
    """Dbv0036ConfigInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dbv0036ConfigInfo:
        """Test Dbv0036ConfigInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dbv0036ConfigInfo`
        """
        model = Dbv0036ConfigInfo()
        if include_optional:
            return Dbv0036ConfigInfo(
                errors = [
                    aind_slurm_rest.models.dbv0/0/36_error.dbv0.0.36_error(
                        errno = 56, 
                        error = '', )
                    ],
                tres = [
                    [
                        aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ]
                    ],
                accounts = [
                    aind_slurm_rest.models.dbv0/0/36_account.dbv0.0.36_account(
                        associations = [
                            aind_slurm_rest.models.dbv0/0/36_association_short_info.dbv0.0.36_association_short_info(
                                account = '', 
                                cluster = '', 
                                partition = '', 
                                user = '', )
                            ], 
                        coordinators = [
                            aind_slurm_rest.models.dbv0/0/36_coordinator_info.dbv0.0.36_coordinator_info(
                                name = '', 
                                direct = 56, )
                            ], 
                        description = '', 
                        name = '', 
                        organization = '', 
                        flags = [
                            ''
                            ], )
                    ],
                associations = [
                    aind_slurm_rest.models.dbv0/0/36_association.dbv0.0.36_association(
                        account = '', 
                        cluster = '', 
                        default = aind_slurm_rest.models.dbv0_0_37_association_default.dbv0_0_37_association_default(
                            qos = '', ), 
                        flags = [
                            ''
                            ], 
                        max = aind_slurm_rest.models.dbv0_0_36_association_max.dbv0_0_36_association_max(
                            jobs = aind_slurm_rest.models.dbv0_0_36_association_max_jobs.dbv0_0_36_association_max_jobs(
                                per = aind_slurm_rest.models.dbv0_0_37_association_max_jobs_per.dbv0_0_37_association_max_jobs_per(
                                    wall_clock = 56, ), ), 
                            per = aind_slurm_rest.models.dbv0_0_37_association_max_per.dbv0_0_37_association_max_per(
                                account = aind_slurm_rest.models.dbv0_0_37_association_max_per_account.dbv0_0_37_association_max_per_account(
                                    wall_clock = 56, ), ), 
                            tres = aind_slurm_rest.models.dbv0_0_36_association_max_tres.dbv0_0_36_association_max_tres(
                                total = [
                                    aind_slurm_rest.models.dbv0_0_37_tres_list_inner.dbv0_0_37_tres_list_inner(
                                        type = '', 
                                        name = '', 
                                        id = 56, 
                                        count = 56, )
                                    ], 
                                minutes = aind_slurm_rest.models.dbv0_0_36_association_max_tres_minutes.dbv0_0_36_association_max_tres_minutes(), ), ), 
                        min = aind_slurm_rest.models.dbv0_0_37_association_min.dbv0_0_37_association_min(
                            priority_threshold = 56, ), 
                        parent_account = '', 
                        partition = '', 
                        priority = 56, 
                        qos = [
                            ''
                            ], 
                        shares_raw = 56, 
                        usage = aind_slurm_rest.models.dbv0_0_37_association_usage.dbv0_0_37_association_usage(
                            accrue_job_count = 56, 
                            group_used_wallclock = 1.337, 
                            fairshare_factor = 1.337, 
                            fairshare_shares = 56, 
                            normalized_priority = 56, 
                            normalized_shares = 1.337, 
                            effective_normalized_usage = 1.337, 
                            raw_usage = 56, 
                            job_count = 56, 
                            fairshare_level = 1.337, ), 
                        user = '', )
                    ],
                users = [
                    aind_slurm_rest.models.dbv0/0/36_user.dbv0.0.36_user(
                        administrator_level = '', 
                        associations = aind_slurm_rest.models.dbv0_0_36_user_associations.dbv0_0_36_user_associations(
                            root = aind_slurm_rest.models.dbv0/0/36_association_short_info.dbv0.0.36_association_short_info(
                                account = '', 
                                cluster = '', 
                                partition = '', 
                                user = '', ), ), 
                        coordinators = [
                            aind_slurm_rest.models.dbv0/0/36_coordinator_info.dbv0.0.36_coordinator_info(
                                name = '', 
                                direct = 56, )
                            ], 
                        default = aind_slurm_rest.models.dbv0_0_37_user_default.dbv0_0_37_user_default(
                            account = '', 
                            wckey = '', ), 
                        name = '', )
                    ],
                qos = [
                    aind_slurm_rest.models.dbv0/0/36_qos.dbv0.0.36_qos(
                        description = '', 
                        flags = [
                            ''
                            ], 
                        id = '', 
                        limits = aind_slurm_rest.models.dbv0_0_36_qos_limits.dbv0_0_36_qos_limits(
                            max = aind_slurm_rest.models.dbv0_0_36_qos_limits_max.dbv0_0_36_qos_limits_max(
                                wall_clock = aind_slurm_rest.models.dbv0_0_37_qos_limits_max_wall_clock.dbv0_0_37_qos_limits_max_wall_clock(
                                    per = aind_slurm_rest.models.dbv0_0_37_qos_limits_max_wall_clock_per.dbv0_0_37_qos_limits_max_wall_clock_per(
                                        qos = 56, 
                                        job = 56, ), ), 
                                jobs = aind_slurm_rest.models.dbv0_0_36_qos_limits_max_jobs.dbv0_0_36_qos_limits_max_jobs(), 
                                accruing = aind_slurm_rest.models.dbv0_0_37_qos_limits_max_accruing.dbv0_0_37_qos_limits_max_accruing(), 
                                tres = aind_slurm_rest.models.dbv0_0_36_qos_limits_max_tres.dbv0_0_36_qos_limits_max_tres(
                                    minutes = aind_slurm_rest.models.dbv0_0_36_qos_limits_max_tres_minutes.dbv0_0_36_qos_limits_max_tres_minutes(), ), ), 
                            min = aind_slurm_rest.models.dbv0_0_36_qos_limits_min.dbv0_0_36_qos_limits_min(
                                priority_threshold = 56, ), ), 
                        preempt = aind_slurm_rest.models.dbv0_0_37_qos_preempt.dbv0_0_37_qos_preempt(
                            list = [
                                ''
                                ], 
                            mode = [
                                ''
                                ], 
                            exempt_time = 56, ), 
                        priority = 56, 
                        usage_factor = 1.337, 
                        usage_threshold = 1.337, )
                    ],
                wckeys = [
                    aind_slurm_rest.models.dbv0/0/36_wckey.dbv0.0.36_wckey(
                        accounts = [
                            ''
                            ], 
                        cluster = '', 
                        id = 56, 
                        name = '', 
                        user = '', 
                        flags = [
                            ''
                            ], )
                    ]
            )
        else:
            return Dbv0036ConfigInfo(
        )
        """

    def testDbv0036ConfigInfo(self):
        """Test Dbv0036ConfigInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
