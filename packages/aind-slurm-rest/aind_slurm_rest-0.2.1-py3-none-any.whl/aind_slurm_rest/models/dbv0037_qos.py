# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from aind_slurm_rest.models.dbv0037_qos_limits import Dbv0037QosLimits
from aind_slurm_rest.models.dbv0037_qos_preempt import Dbv0037QosPreempt
from typing import Optional, Set
from typing_extensions import Self

class Dbv0037Qos(BaseModel):
    """
    QOS description
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="QOS description")
    flags: Optional[List[StrictStr]] = Field(default=None, description="List of properties of QOS")
    id: Optional[StrictStr] = Field(default=None, description="Database id")
    limits: Optional[Dbv0037QosLimits] = None
    preempt: Optional[Dbv0037QosPreempt] = None
    priority: Optional[StrictInt] = Field(default=None, description="QOS priority")
    usage_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Usage factor")
    usage_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Usage threshold")
    __properties: ClassVar[List[str]] = ["description", "flags", "id", "limits", "preempt", "priority", "usage_factor", "usage_threshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dbv0037Qos from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of limits
        if self.limits:
            _dict['limits'] = self.limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preempt
        if self.preempt:
            _dict['preempt'] = self.preempt.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dbv0037Qos from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "flags": obj.get("flags"),
            "id": obj.get("id"),
            "limits": Dbv0037QosLimits.from_dict(obj["limits"]) if obj.get("limits") is not None else None,
            "preempt": Dbv0037QosPreempt.from_dict(obj["preempt"]) if obj.get("preempt") is not None else None,
            "priority": obj.get("priority"),
            "usage_factor": obj.get("usage_factor"),
            "usage_threshold": obj.get("usage_threshold")
        })
        return _obj


