# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from aind_slurm_rest.models.dbv0037_account import Dbv0037Account
from aind_slurm_rest.models.dbv0037_association import Dbv0037Association
from aind_slurm_rest.models.dbv0037_error import Dbv0037Error
from aind_slurm_rest.models.dbv0037_qos import Dbv0037Qos
from aind_slurm_rest.models.dbv0037_tres_list_inner import Dbv0037TresListInner
from aind_slurm_rest.models.dbv0037_user import Dbv0037User
from aind_slurm_rest.models.dbv0037_wckey import Dbv0037Wckey
from typing import Optional, Set
from typing_extensions import Self

class Dbv0037ConfigInfo(BaseModel):
    """
    Dbv0037ConfigInfo
    """ # noqa: E501
    errors: Optional[List[Dbv0037Error]] = Field(default=None, description="Slurm errors")
    tres: Optional[List[List[Dbv0037TresListInner]]] = Field(default=None, description="Array of TRES")
    accounts: Optional[List[Dbv0037Account]] = Field(default=None, description="Array of accounts")
    associations: Optional[List[Dbv0037Association]] = Field(default=None, description="Array of associations")
    users: Optional[List[Dbv0037User]] = Field(default=None, description="Array of users")
    qos: Optional[List[Dbv0037Qos]] = Field(default=None, description="Array of qos")
    wckeys: Optional[List[Dbv0037Wckey]] = Field(default=None, description="Array of wckeys")
    __properties: ClassVar[List[str]] = ["errors", "tres", "accounts", "associations", "users", "qos", "wckeys"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dbv0037ConfigInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tres (list of list)
        _items = []
        if self.tres:
            for _item_tres in self.tres:
                if _item_tres:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_tres if _inner_item is not None]
                    )
            _dict['tres'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item_accounts in self.accounts:
                if _item_accounts:
                    _items.append(_item_accounts.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associations (list)
        _items = []
        if self.associations:
            for _item_associations in self.associations:
                if _item_associations:
                    _items.append(_item_associations.to_dict())
            _dict['associations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in qos (list)
        _items = []
        if self.qos:
            for _item_qos in self.qos:
                if _item_qos:
                    _items.append(_item_qos.to_dict())
            _dict['qos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wckeys (list)
        _items = []
        if self.wckeys:
            for _item_wckeys in self.wckeys:
                if _item_wckeys:
                    _items.append(_item_wckeys.to_dict())
            _dict['wckeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dbv0037ConfigInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errors": [Dbv0037Error.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "tres": [
                    [Dbv0037TresListInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["tres"]
                ] if obj.get("tres") is not None else None,
            "accounts": [Dbv0037Account.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "associations": [Dbv0037Association.from_dict(_item) for _item in obj["associations"]] if obj.get("associations") is not None else None,
            "users": [Dbv0037User.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None,
            "qos": [Dbv0037Qos.from_dict(_item) for _item in obj["qos"]] if obj.get("qos") is not None else None,
            "wckeys": [Dbv0037Wckey.from_dict(_item) for _item in obj["wckeys"]] if obj.get("wckeys") is not None else None
        })
        return _obj


