# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aind_slurm_rest.models.dbv0036_association_short_info import Dbv0036AssociationShortInfo
from aind_slurm_rest.models.dbv0036_job_exit_code import Dbv0036JobExitCode
from aind_slurm_rest.models.dbv0036_job_het import Dbv0036JobHet
from aind_slurm_rest.models.dbv0036_job_state import Dbv0036JobState
from aind_slurm_rest.models.dbv0036_job_step import Dbv0036JobStep
from aind_slurm_rest.models.dbv0036_job_tres import Dbv0036JobTres
from aind_slurm_rest.models.dbv0037_job_array import Dbv0037JobArray
from aind_slurm_rest.models.dbv0037_job_comment import Dbv0037JobComment
from aind_slurm_rest.models.dbv0037_job_mcs import Dbv0037JobMcs
from aind_slurm_rest.models.dbv0037_job_required import Dbv0037JobRequired
from aind_slurm_rest.models.dbv0037_job_reservation import Dbv0037JobReservation
from aind_slurm_rest.models.dbv0037_job_time import Dbv0037JobTime
from aind_slurm_rest.models.dbv0037_job_wckey import Dbv0037JobWckey
from typing import Optional, Set
from typing_extensions import Self

class Dbv0036Job(BaseModel):
    """
    Single job description
    """ # noqa: E501
    account: Optional[StrictStr] = Field(default=None, description="Account charged by job")
    comment: Optional[Dbv0037JobComment] = None
    allocation_nodes: Optional[StrictInt] = Field(default=None, description="Nodes allocated to job")
    array: Optional[Dbv0037JobArray] = None
    time: Optional[Dbv0037JobTime] = None
    association: Optional[Dbv0036AssociationShortInfo] = None
    cluster: Optional[StrictStr] = Field(default=None, description="Assigned cluster")
    constraints: Optional[StrictStr] = Field(default=None, description="Constraints on job")
    derived_exit_code: Optional[Dbv0036JobExitCode] = None
    exit_code: Optional[Dbv0036JobExitCode] = None
    flags: Optional[List[StrictStr]] = Field(default=None, description="List of properties of job")
    group: Optional[StrictStr] = Field(default=None, description="User's group to run job")
    het: Optional[Dbv0036JobHet] = None
    job_id: Optional[StrictInt] = Field(default=None, description="Job id")
    name: Optional[StrictStr] = Field(default=None, description="Assigned job name")
    mcs: Optional[Dbv0037JobMcs] = None
    nodes: Optional[StrictStr] = Field(default=None, description="List of nodes allocated for job")
    partition: Optional[StrictStr] = Field(default=None, description="Assigned job's partition")
    priority: Optional[StrictInt] = Field(default=None, description="Priority")
    qos: Optional[StrictStr] = Field(default=None, description="Assigned qos name")
    required: Optional[Dbv0037JobRequired] = None
    kill_request_user: Optional[StrictStr] = Field(default=None, description="User who requested job killed")
    reservation: Optional[Dbv0037JobReservation] = None
    state: Optional[Dbv0036JobState] = None
    steps: Optional[List[Dbv0036JobStep]] = Field(default=None, description="Job step description")
    tres: Optional[Dbv0036JobTres] = None
    user: Optional[StrictStr] = Field(default=None, description="Job user")
    wckey: Optional[Dbv0037JobWckey] = None
    working_directory: Optional[StrictStr] = Field(default=None, description="Directory where job was initially started")
    __properties: ClassVar[List[str]] = ["account", "comment", "allocation_nodes", "array", "time", "association", "cluster", "constraints", "derived_exit_code", "exit_code", "flags", "group", "het", "job_id", "name", "mcs", "nodes", "partition", "priority", "qos", "required", "kill_request_user", "reservation", "state", "steps", "tres", "user", "wckey", "working_directory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dbv0036Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of comment
        if self.comment:
            _dict['comment'] = self.comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of array
        if self.array:
            _dict['array'] = self.array.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of association
        if self.association:
            _dict['association'] = self.association.to_dict()
        # override the default output from pydantic by calling `to_dict()` of derived_exit_code
        if self.derived_exit_code:
            _dict['derived_exit_code'] = self.derived_exit_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exit_code
        if self.exit_code:
            _dict['exit_code'] = self.exit_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of het
        if self.het:
            _dict['het'] = self.het.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mcs
        if self.mcs:
            _dict['mcs'] = self.mcs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required
        if self.required:
            _dict['required'] = self.required.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation
        if self.reservation:
            _dict['reservation'] = self.reservation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of tres
        if self.tres:
            _dict['tres'] = self.tres.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wckey
        if self.wckey:
            _dict['wckey'] = self.wckey.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dbv0036Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "comment": Dbv0037JobComment.from_dict(obj["comment"]) if obj.get("comment") is not None else None,
            "allocation_nodes": obj.get("allocation_nodes"),
            "array": Dbv0037JobArray.from_dict(obj["array"]) if obj.get("array") is not None else None,
            "time": Dbv0037JobTime.from_dict(obj["time"]) if obj.get("time") is not None else None,
            "association": Dbv0036AssociationShortInfo.from_dict(obj["association"]) if obj.get("association") is not None else None,
            "cluster": obj.get("cluster"),
            "constraints": obj.get("constraints"),
            "derived_exit_code": Dbv0036JobExitCode.from_dict(obj["derived_exit_code"]) if obj.get("derived_exit_code") is not None else None,
            "exit_code": Dbv0036JobExitCode.from_dict(obj["exit_code"]) if obj.get("exit_code") is not None else None,
            "flags": obj.get("flags"),
            "group": obj.get("group"),
            "het": Dbv0036JobHet.from_dict(obj["het"]) if obj.get("het") is not None else None,
            "job_id": obj.get("job_id"),
            "name": obj.get("name"),
            "mcs": Dbv0037JobMcs.from_dict(obj["mcs"]) if obj.get("mcs") is not None else None,
            "nodes": obj.get("nodes"),
            "partition": obj.get("partition"),
            "priority": obj.get("priority"),
            "qos": obj.get("qos"),
            "required": Dbv0037JobRequired.from_dict(obj["required"]) if obj.get("required") is not None else None,
            "kill_request_user": obj.get("kill_request_user"),
            "reservation": Dbv0037JobReservation.from_dict(obj["reservation"]) if obj.get("reservation") is not None else None,
            "state": Dbv0036JobState.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "steps": [Dbv0036JobStep.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None,
            "tres": Dbv0036JobTres.from_dict(obj["tres"]) if obj.get("tres") is not None else None,
            "user": obj.get("user"),
            "wckey": Dbv0037JobWckey.from_dict(obj["wckey"]) if obj.get("wckey") is not None else None,
            "working_directory": obj.get("working_directory")
        })
        return _obj


