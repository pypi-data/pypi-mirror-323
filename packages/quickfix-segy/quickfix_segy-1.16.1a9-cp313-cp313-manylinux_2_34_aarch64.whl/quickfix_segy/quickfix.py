# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _quickfix
else:
    import _quickfix

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _quickfix.SWIG_PyInstanceMethod_New
_swig_new_static_method = _quickfix.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_SwigPyIterator

    def value(self):
        r"""value(self) -> PyObject *"""
        return _quickfix.SwigPyIterator_value(self)
    value = _swig_new_instance_method(_quickfix.SwigPyIterator_value)

    def incr(self, n=1):
        r"""
        incr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _quickfix.SwigPyIterator_incr(self, n)
    incr = _swig_new_instance_method(_quickfix.SwigPyIterator_incr)

    def decr(self, n=1):
        r"""
        decr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _quickfix.SwigPyIterator_decr(self, n)
    decr = _swig_new_instance_method(_quickfix.SwigPyIterator_decr)

    def distance(self, x):
        r"""
        distance(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _quickfix.SwigPyIterator_distance(self, x)
    distance = _swig_new_instance_method(_quickfix.SwigPyIterator_distance)

    def equal(self, x):
        r"""
        equal(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _quickfix.SwigPyIterator_equal(self, x)
    equal = _swig_new_instance_method(_quickfix.SwigPyIterator_equal)

    def copy(self):
        r"""copy(self) -> SwigPyIterator"""
        return _quickfix.SwigPyIterator_copy(self)
    copy = _swig_new_instance_method(_quickfix.SwigPyIterator_copy)

    def next(self):
        r"""next(self) -> PyObject *"""
        return _quickfix.SwigPyIterator_next(self)
    next = _swig_new_instance_method(_quickfix.SwigPyIterator_next)

    def __next__(self):
        r"""__next__(self) -> PyObject *"""
        return _quickfix.SwigPyIterator___next__(self)
    __next__ = _swig_new_instance_method(_quickfix.SwigPyIterator___next__)

    def previous(self):
        r"""previous(self) -> PyObject *"""
        return _quickfix.SwigPyIterator_previous(self)
    previous = _swig_new_instance_method(_quickfix.SwigPyIterator_previous)

    def advance(self, n):
        r"""
        advance(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _quickfix.SwigPyIterator_advance(self, n)
    advance = _swig_new_instance_method(_quickfix.SwigPyIterator_advance)

    def __eq__(self, x):
        r"""
        __eq__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _quickfix.SwigPyIterator___eq__(self, x)
    __eq__ = _swig_new_instance_method(_quickfix.SwigPyIterator___eq__)

    def __ne__(self, x):
        r"""
        __ne__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _quickfix.SwigPyIterator___ne__(self, x)
    __ne__ = _swig_new_instance_method(_quickfix.SwigPyIterator___ne__)

    def __iadd__(self, n):
        r"""
        __iadd__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _quickfix.SwigPyIterator___iadd__(self, n)
    __iadd__ = _swig_new_instance_method(_quickfix.SwigPyIterator___iadd__)

    def __isub__(self, n):
        r"""
        __isub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _quickfix.SwigPyIterator___isub__(self, n)
    __isub__ = _swig_new_instance_method(_quickfix.SwigPyIterator___isub__)

    def __add__(self, n):
        r"""
        __add__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _quickfix.SwigPyIterator___add__(self, n)
    __add__ = _swig_new_instance_method(_quickfix.SwigPyIterator___add__)

    def __sub__(self, *args):
        r"""
        __sub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _quickfix.SwigPyIterator___sub__(self, *args)
    __sub__ = _swig_new_instance_method(_quickfix.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _quickfix:
_quickfix.SwigPyIterator_swigregister(SwigPyIterator)
class VectorString(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _quickfix.VectorString_iterator(self)
    iterator = _swig_new_instance_method(_quickfix.VectorString_iterator)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _quickfix.VectorString___nonzero__(self)
    __nonzero__ = _swig_new_instance_method(_quickfix.VectorString___nonzero__)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _quickfix.VectorString___bool__(self)
    __bool__ = _swig_new_instance_method(_quickfix.VectorString___bool__)

    def __len__(self):
        r"""__len__(self) -> std::vector< std::string >::size_type"""
        return _quickfix.VectorString___len__(self)
    __len__ = _swig_new_instance_method(_quickfix.VectorString___len__)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> VectorString

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _quickfix.VectorString___getslice__(self, i, j)
    __getslice__ = _swig_new_instance_method(_quickfix.VectorString___getslice__)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _quickfix.VectorString___setslice__(self, *args)
    __setslice__ = _swig_new_instance_method(_quickfix.VectorString___setslice__)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _quickfix.VectorString___delslice__(self, i, j)
    __delslice__ = _swig_new_instance_method(_quickfix.VectorString___delslice__)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _quickfix.VectorString___delitem__(self, *args)
    __delitem__ = _swig_new_instance_method(_quickfix.VectorString___delitem__)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> VectorString

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _quickfix.VectorString___getitem__(self, *args)
    __getitem__ = _swig_new_instance_method(_quickfix.VectorString___getitem__)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _quickfix.VectorString___setitem__(self, *args)
    __setitem__ = _swig_new_instance_method(_quickfix.VectorString___setitem__)

    def pop(self):
        r"""pop(self) -> std::vector< std::string >::value_type"""
        return _quickfix.VectorString_pop(self)
    pop = _swig_new_instance_method(_quickfix.VectorString_pop)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _quickfix.VectorString_append(self, x)
    append = _swig_new_instance_method(_quickfix.VectorString_append)

    def empty(self):
        r"""empty(self) -> bool"""
        return _quickfix.VectorString_empty(self)
    empty = _swig_new_instance_method(_quickfix.VectorString_empty)

    def size(self):
        r"""size(self) -> std::vector< std::string >::size_type"""
        return _quickfix.VectorString_size(self)
    size = _swig_new_instance_method(_quickfix.VectorString_size)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _quickfix.VectorString_swap(self, v)
    swap = _swig_new_instance_method(_quickfix.VectorString_swap)

    def begin(self):
        r"""begin(self) -> std::vector< std::string >::iterator"""
        return _quickfix.VectorString_begin(self)
    begin = _swig_new_instance_method(_quickfix.VectorString_begin)

    def end(self):
        r"""end(self) -> std::vector< std::string >::iterator"""
        return _quickfix.VectorString_end(self)
    end = _swig_new_instance_method(_quickfix.VectorString_end)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< std::string >::reverse_iterator"""
        return _quickfix.VectorString_rbegin(self)
    rbegin = _swig_new_instance_method(_quickfix.VectorString_rbegin)

    def rend(self):
        r"""rend(self) -> std::vector< std::string >::reverse_iterator"""
        return _quickfix.VectorString_rend(self)
    rend = _swig_new_instance_method(_quickfix.VectorString_rend)

    def clear(self):
        r"""clear(self)"""
        return _quickfix.VectorString_clear(self)
    clear = _swig_new_instance_method(_quickfix.VectorString_clear)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< std::string >::allocator_type"""
        return _quickfix.VectorString_get_allocator(self)
    get_allocator = _swig_new_instance_method(_quickfix.VectorString_get_allocator)

    def pop_back(self):
        r"""pop_back(self)"""
        return _quickfix.VectorString_pop_back(self)
    pop_back = _swig_new_instance_method(_quickfix.VectorString_pop_back)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(self, first, last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _quickfix.VectorString_erase(self, *args)
    erase = _swig_new_instance_method(_quickfix.VectorString_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> VectorString
        __init__(self, other) -> VectorString

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(self, size) -> VectorString

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(self, size, value) -> VectorString

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _quickfix.VectorString_swiginit(self, _quickfix.new_VectorString(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _quickfix.VectorString_push_back(self, x)
    push_back = _swig_new_instance_method(_quickfix.VectorString_push_back)

    def front(self):
        r"""front(self) -> std::vector< std::string >::value_type const &"""
        return _quickfix.VectorString_front(self)
    front = _swig_new_instance_method(_quickfix.VectorString_front)

    def back(self):
        r"""back(self) -> std::vector< std::string >::value_type const &"""
        return _quickfix.VectorString_back(self)
    back = _swig_new_instance_method(_quickfix.VectorString_back)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _quickfix.VectorString_assign(self, n, x)
    assign = _swig_new_instance_method(_quickfix.VectorString_assign)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _quickfix.VectorString_resize(self, *args)
    resize = _swig_new_instance_method(_quickfix.VectorString_resize)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _quickfix.VectorString_insert(self, *args)
    insert = _swig_new_instance_method(_quickfix.VectorString_insert)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _quickfix.VectorString_reserve(self, n)
    reserve = _swig_new_instance_method(_quickfix.VectorString_reserve)

    def capacity(self):
        r"""capacity(self) -> std::vector< std::string >::size_type"""
        return _quickfix.VectorString_capacity(self)
    capacity = _swig_new_instance_method(_quickfix.VectorString_capacity)
    __swig_destroy__ = _quickfix.delete_VectorString

# Register VectorString in _quickfix:
_quickfix.VectorString_swigregister(VectorString)
class IntArray(object):
    r"""Proxy of C++ IntArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        r"""
        __init__(self, nelements) -> IntArray

        Parameters
        ----------
        nelements: size_t

        """
        _quickfix.IntArray_swiginit(self, _quickfix.new_IntArray(nelements))
    __swig_destroy__ = _quickfix.delete_IntArray

    def __getitem__(self, index):
        r"""
        __getitem__(self, index) -> int

        Parameters
        ----------
        index: size_t

        """
        return _quickfix.IntArray___getitem__(self, index)
    __getitem__ = _swig_new_instance_method(_quickfix.IntArray___getitem__)

    def __setitem__(self, index, value):
        r"""
        __setitem__(self, index, value)

        Parameters
        ----------
        index: size_t
        value: int

        """
        return _quickfix.IntArray___setitem__(self, index, value)
    __setitem__ = _swig_new_instance_method(_quickfix.IntArray___setitem__)

    def cast(self):
        r"""cast(self) -> int *"""
        return _quickfix.IntArray_cast(self)
    cast = _swig_new_instance_method(_quickfix.IntArray_cast)

    @staticmethod
    def frompointer(t):
        r"""
        frompointer(t) -> IntArray

        Parameters
        ----------
        t: int *

        """
        return _quickfix.IntArray_frompointer(t)
    frompointer = _swig_new_static_method(_quickfix.IntArray_frompointer)

# Register IntArray in _quickfix:
_quickfix.IntArray_swigregister(IntArray)
class SessionIDSet(object):
    r"""Proxy of C++ std::set< FIX::SessionID > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _quickfix.SessionIDSet_iterator(self)
    iterator = _swig_new_instance_method(_quickfix.SessionIDSet_iterator)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _quickfix.SessionIDSet___nonzero__(self)
    __nonzero__ = _swig_new_instance_method(_quickfix.SessionIDSet___nonzero__)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _quickfix.SessionIDSet___bool__(self)
    __bool__ = _swig_new_instance_method(_quickfix.SessionIDSet___bool__)

    def __len__(self):
        r"""__len__(self) -> std::set< FIX::SessionID >::size_type"""
        return _quickfix.SessionIDSet___len__(self)
    __len__ = _swig_new_instance_method(_quickfix.SessionIDSet___len__)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::set< FIX::SessionID >::value_type

        """
        return _quickfix.SessionIDSet_append(self, x)
    append = _swig_new_instance_method(_quickfix.SessionIDSet_append)

    def __contains__(self, x):
        r"""
        __contains__(self, x) -> bool

        Parameters
        ----------
        x: std::set< FIX::SessionID >::value_type

        """
        return _quickfix.SessionIDSet___contains__(self, x)
    __contains__ = _swig_new_instance_method(_quickfix.SessionIDSet___contains__)

    def __getitem__(self, i):
        r"""
        __getitem__(self, i) -> SessionID

        Parameters
        ----------
        i: std::set< FIX::SessionID >::difference_type

        """
        return _quickfix.SessionIDSet___getitem__(self, i)
    __getitem__ = _swig_new_instance_method(_quickfix.SessionIDSet___getitem__)

    def add(self, x):
        r"""
        add(self, x)

        Parameters
        ----------
        x: std::set< FIX::SessionID >::value_type

        """
        return _quickfix.SessionIDSet_add(self, x)
    add = _swig_new_instance_method(_quickfix.SessionIDSet_add)

    def discard(self, x):
        r"""
        discard(self, x)

        Parameters
        ----------
        x: std::set< FIX::SessionID >::value_type

        """
        return _quickfix.SessionIDSet_discard(self, x)
    discard = _swig_new_instance_method(_quickfix.SessionIDSet_discard)

    def __init__(self, *args):
        r"""
        __init__(self, other) -> SessionIDSet

        Parameters
        ----------
        other: std::less< FIX::SessionID > const &

        __init__(self) -> SessionIDSet
        __init__(self, other) -> SessionIDSet

        Parameters
        ----------
        other: std::set< FIX::SessionID > const &

        """
        _quickfix.SessionIDSet_swiginit(self, _quickfix.new_SessionIDSet(*args))

    def empty(self):
        r"""empty(self) -> bool"""
        return _quickfix.SessionIDSet_empty(self)
    empty = _swig_new_instance_method(_quickfix.SessionIDSet_empty)

    def size(self):
        r"""size(self) -> std::set< FIX::SessionID >::size_type"""
        return _quickfix.SessionIDSet_size(self)
    size = _swig_new_instance_method(_quickfix.SessionIDSet_size)

    def clear(self):
        r"""clear(self)"""
        return _quickfix.SessionIDSet_clear(self)
    clear = _swig_new_instance_method(_quickfix.SessionIDSet_clear)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::set< FIX::SessionID > &

        """
        return _quickfix.SessionIDSet_swap(self, v)
    swap = _swig_new_instance_method(_quickfix.SessionIDSet_swap)

    def count(self, x):
        r"""
        count(self, x) -> std::set< FIX::SessionID >::size_type

        Parameters
        ----------
        x: std::set< FIX::SessionID >::key_type const &

        """
        return _quickfix.SessionIDSet_count(self, x)
    count = _swig_new_instance_method(_quickfix.SessionIDSet_count)

    def begin(self):
        r"""begin(self) -> std::set< FIX::SessionID >::iterator"""
        return _quickfix.SessionIDSet_begin(self)
    begin = _swig_new_instance_method(_quickfix.SessionIDSet_begin)

    def end(self):
        r"""end(self) -> std::set< FIX::SessionID >::iterator"""
        return _quickfix.SessionIDSet_end(self)
    end = _swig_new_instance_method(_quickfix.SessionIDSet_end)

    def rbegin(self):
        r"""rbegin(self) -> std::set< FIX::SessionID >::reverse_iterator"""
        return _quickfix.SessionIDSet_rbegin(self)
    rbegin = _swig_new_instance_method(_quickfix.SessionIDSet_rbegin)

    def rend(self):
        r"""rend(self) -> std::set< FIX::SessionID >::reverse_iterator"""
        return _quickfix.SessionIDSet_rend(self)
    rend = _swig_new_instance_method(_quickfix.SessionIDSet_rend)

    def erase(self, *args):
        r"""
        erase(self, x) -> std::set< FIX::SessionID >::size_type

        Parameters
        ----------
        x: std::set< FIX::SessionID >::key_type const &

        erase(self, pos)

        Parameters
        ----------
        pos: std::set< FIX::SessionID >::iterator

        erase(self, first, last)

        Parameters
        ----------
        first: std::set< FIX::SessionID >::iterator
        last: std::set< FIX::SessionID >::iterator

        """
        return _quickfix.SessionIDSet_erase(self, *args)
    erase = _swig_new_instance_method(_quickfix.SessionIDSet_erase)

    def find(self, x):
        r"""
        find(self, x) -> std::set< FIX::SessionID >::iterator

        Parameters
        ----------
        x: std::set< FIX::SessionID >::key_type const &

        """
        return _quickfix.SessionIDSet_find(self, x)
    find = _swig_new_instance_method(_quickfix.SessionIDSet_find)

    def lower_bound(self, x):
        r"""
        lower_bound(self, x) -> std::set< FIX::SessionID >::iterator

        Parameters
        ----------
        x: std::set< FIX::SessionID >::key_type const &

        """
        return _quickfix.SessionIDSet_lower_bound(self, x)
    lower_bound = _swig_new_instance_method(_quickfix.SessionIDSet_lower_bound)

    def upper_bound(self, x):
        r"""
        upper_bound(self, x) -> std::set< FIX::SessionID >::iterator

        Parameters
        ----------
        x: std::set< FIX::SessionID >::key_type const &

        """
        return _quickfix.SessionIDSet_upper_bound(self, x)
    upper_bound = _swig_new_instance_method(_quickfix.SessionIDSet_upper_bound)

    def equal_range(self, x):
        r"""
        equal_range(self, x) -> std::pair< std::set< FIX::SessionID >::iterator,std::set< FIX::SessionID >::iterator >

        Parameters
        ----------
        x: std::set< FIX::SessionID >::key_type const &

        """
        return _quickfix.SessionIDSet_equal_range(self, x)
    equal_range = _swig_new_instance_method(_quickfix.SessionIDSet_equal_range)

    def insert(self, __x):
        r"""
        insert(self, __x) -> std::pair< std::set< FIX::SessionID >::iterator,bool >

        Parameters
        ----------
        __x: std::set< FIX::SessionID >::value_type const &

        """
        return _quickfix.SessionIDSet_insert(self, __x)
    insert = _swig_new_instance_method(_quickfix.SessionIDSet_insert)
    __swig_destroy__ = _quickfix.delete_SessionIDSet

# Register SessionIDSet in _quickfix:
_quickfix.SessionIDSet_swigregister(SessionIDSet)
class FIXException(Exception):
    r"""Proxy of C++ FIX::Exception class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, detail):
        r"""
        __init__(self, type, detail) -> FIXException

        Parameters
        ----------
        type: std::string const &
        detail: std::string const &

        """
        _quickfix.FIXException_swiginit(self, _quickfix.new_FIXException(type, detail))
    __swig_destroy__ = _quickfix.delete_FIXException
    type = property(_quickfix.FIXException_type_get, _quickfix.FIXException_type_set, doc=r"""type""")
    detail = property(_quickfix.FIXException_detail_get, _quickfix.FIXException_detail_set, doc=r"""detail""")

    def __str__(self):
        r"""__str__(self) -> std::string"""
        return _quickfix.FIXException___str__(self)
    __str__ = _swig_new_instance_method(_quickfix.FIXException___str__)

# Register FIXException in _quickfix:
_quickfix.FIXException_swigregister(FIXException)
class DataDictionaryNotFound(FIXException):
    r"""Proxy of C++ FIX::DataDictionaryNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, version, what="") -> DataDictionaryNotFound

        Parameters
        ----------
        version: std::string const &
        what: std::string const &

        """
        _quickfix.DataDictionaryNotFound_swiginit(self, _quickfix.new_DataDictionaryNotFound(*args))
    __swig_destroy__ = _quickfix.delete_DataDictionaryNotFound
    version = property(_quickfix.DataDictionaryNotFound_version_get, _quickfix.DataDictionaryNotFound_version_set, doc=r"""version""")

# Register DataDictionaryNotFound in _quickfix:
_quickfix.DataDictionaryNotFound_swigregister(DataDictionaryNotFound)
class FieldNotFound(FIXException):
    r"""Proxy of C++ FIX::FieldNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> FieldNotFound

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.FieldNotFound_swiginit(self, _quickfix.new_FieldNotFound(*args))
    field = property(_quickfix.FieldNotFound_field_get, _quickfix.FieldNotFound_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_FieldNotFound

# Register FieldNotFound in _quickfix:
_quickfix.FieldNotFound_swigregister(FieldNotFound)
class FieldConvertError(FIXException):
    r"""Proxy of C++ FIX::FieldConvertError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> FieldConvertError

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.FieldConvertError_swiginit(self, _quickfix.new_FieldConvertError(*args))
    __swig_destroy__ = _quickfix.delete_FieldConvertError

# Register FieldConvertError in _quickfix:
_quickfix.FieldConvertError_swigregister(FieldConvertError)
class MessageParseError(FIXException):
    r"""Proxy of C++ FIX::MessageParseError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> MessageParseError

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.MessageParseError_swiginit(self, _quickfix.new_MessageParseError(*args))
    __swig_destroy__ = _quickfix.delete_MessageParseError

# Register MessageParseError in _quickfix:
_quickfix.MessageParseError_swigregister(MessageParseError)
class InvalidMessage(FIXException):
    r"""Proxy of C++ FIX::InvalidMessage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> InvalidMessage

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.InvalidMessage_swiginit(self, _quickfix.new_InvalidMessage(*args))
    __swig_destroy__ = _quickfix.delete_InvalidMessage

# Register InvalidMessage in _quickfix:
_quickfix.InvalidMessage_swigregister(InvalidMessage)
class ConfigError(FIXException):
    r"""Proxy of C++ FIX::ConfigError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> ConfigError

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.ConfigError_swiginit(self, _quickfix.new_ConfigError(*args))
    __swig_destroy__ = _quickfix.delete_ConfigError

# Register ConfigError in _quickfix:
_quickfix.ConfigError_swigregister(ConfigError)
class RuntimeError(FIXException):
    r"""Proxy of C++ FIX::RuntimeError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> RuntimeError

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.RuntimeError_swiginit(self, _quickfix.new_RuntimeError(*args))
    __swig_destroy__ = _quickfix.delete_RuntimeError

# Register RuntimeError in _quickfix:
_quickfix.RuntimeError_swigregister(RuntimeError)
class InvalidTagNumber(FIXException):
    r"""Proxy of C++ FIX::InvalidTagNumber class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> InvalidTagNumber

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.InvalidTagNumber_swiginit(self, _quickfix.new_InvalidTagNumber(*args))
    field = property(_quickfix.InvalidTagNumber_field_get, _quickfix.InvalidTagNumber_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_InvalidTagNumber

# Register InvalidTagNumber in _quickfix:
_quickfix.InvalidTagNumber_swigregister(InvalidTagNumber)
class RequiredTagMissing(FIXException):
    r"""Proxy of C++ FIX::RequiredTagMissing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> RequiredTagMissing

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.RequiredTagMissing_swiginit(self, _quickfix.new_RequiredTagMissing(*args))
    field = property(_quickfix.RequiredTagMissing_field_get, _quickfix.RequiredTagMissing_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_RequiredTagMissing

# Register RequiredTagMissing in _quickfix:
_quickfix.RequiredTagMissing_swigregister(RequiredTagMissing)
class TagNotDefinedForMessage(FIXException):
    r"""Proxy of C++ FIX::TagNotDefinedForMessage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> TagNotDefinedForMessage

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.TagNotDefinedForMessage_swiginit(self, _quickfix.new_TagNotDefinedForMessage(*args))
    field = property(_quickfix.TagNotDefinedForMessage_field_get, _quickfix.TagNotDefinedForMessage_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_TagNotDefinedForMessage

# Register TagNotDefinedForMessage in _quickfix:
_quickfix.TagNotDefinedForMessage_swigregister(TagNotDefinedForMessage)
class NoTagValue(FIXException):
    r"""Proxy of C++ FIX::NoTagValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> NoTagValue

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.NoTagValue_swiginit(self, _quickfix.new_NoTagValue(*args))
    field = property(_quickfix.NoTagValue_field_get, _quickfix.NoTagValue_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_NoTagValue

# Register NoTagValue in _quickfix:
_quickfix.NoTagValue_swigregister(NoTagValue)
class IncorrectTagValue(FIXException):
    r"""Proxy of C++ FIX::IncorrectTagValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> IncorrectTagValue

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.IncorrectTagValue_swiginit(self, _quickfix.new_IncorrectTagValue(*args))
    field = property(_quickfix.IncorrectTagValue_field_get, _quickfix.IncorrectTagValue_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_IncorrectTagValue

# Register IncorrectTagValue in _quickfix:
_quickfix.IncorrectTagValue_swigregister(IncorrectTagValue)
class IncorrectDataFormat(FIXException):
    r"""Proxy of C++ FIX::IncorrectDataFormat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> IncorrectDataFormat

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.IncorrectDataFormat_swiginit(self, _quickfix.new_IncorrectDataFormat(*args))
    field = property(_quickfix.IncorrectDataFormat_field_get, _quickfix.IncorrectDataFormat_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_IncorrectDataFormat

# Register IncorrectDataFormat in _quickfix:
_quickfix.IncorrectDataFormat_swigregister(IncorrectDataFormat)
class IncorrectMessageStructure(FIXException):
    r"""Proxy of C++ FIX::IncorrectMessageStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> IncorrectMessageStructure

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.IncorrectMessageStructure_swiginit(self, _quickfix.new_IncorrectMessageStructure(*args))
    __swig_destroy__ = _quickfix.delete_IncorrectMessageStructure

# Register IncorrectMessageStructure in _quickfix:
_quickfix.IncorrectMessageStructure_swigregister(IncorrectMessageStructure)
class DuplicateFieldNumber(FIXException):
    r"""Proxy of C++ FIX::DuplicateFieldNumber class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> DuplicateFieldNumber

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.DuplicateFieldNumber_swiginit(self, _quickfix.new_DuplicateFieldNumber(*args))
    __swig_destroy__ = _quickfix.delete_DuplicateFieldNumber

# Register DuplicateFieldNumber in _quickfix:
_quickfix.DuplicateFieldNumber_swigregister(DuplicateFieldNumber)
class InvalidMessageType(FIXException):
    r"""Proxy of C++ FIX::InvalidMessageType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> InvalidMessageType

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.InvalidMessageType_swiginit(self, _quickfix.new_InvalidMessageType(*args))
    __swig_destroy__ = _quickfix.delete_InvalidMessageType

# Register InvalidMessageType in _quickfix:
_quickfix.InvalidMessageType_swigregister(InvalidMessageType)
class UnsupportedMessageType(FIXException):
    r"""Proxy of C++ FIX::UnsupportedMessageType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> UnsupportedMessageType

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.UnsupportedMessageType_swiginit(self, _quickfix.new_UnsupportedMessageType(*args))
    __swig_destroy__ = _quickfix.delete_UnsupportedMessageType

# Register UnsupportedMessageType in _quickfix:
_quickfix.UnsupportedMessageType_swigregister(UnsupportedMessageType)
class UnsupportedVersion(FIXException):
    r"""Proxy of C++ FIX::UnsupportedVersion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> UnsupportedVersion

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.UnsupportedVersion_swiginit(self, _quickfix.new_UnsupportedVersion(*args))
    __swig_destroy__ = _quickfix.delete_UnsupportedVersion

# Register UnsupportedVersion in _quickfix:
_quickfix.UnsupportedVersion_swigregister(UnsupportedVersion)
class TagOutOfOrder(FIXException):
    r"""Proxy of C++ FIX::TagOutOfOrder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> TagOutOfOrder

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.TagOutOfOrder_swiginit(self, _quickfix.new_TagOutOfOrder(*args))
    field = property(_quickfix.TagOutOfOrder_field_get, _quickfix.TagOutOfOrder_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_TagOutOfOrder

# Register TagOutOfOrder in _quickfix:
_quickfix.TagOutOfOrder_swigregister(TagOutOfOrder)
class RepeatedTag(FIXException):
    r"""Proxy of C++ FIX::RepeatedTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> RepeatedTag

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.RepeatedTag_swiginit(self, _quickfix.new_RepeatedTag(*args))
    field = property(_quickfix.RepeatedTag_field_get, _quickfix.RepeatedTag_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_RepeatedTag

# Register RepeatedTag in _quickfix:
_quickfix.RepeatedTag_swigregister(RepeatedTag)
class RepeatingGroupCountMismatch(FIXException):
    r"""Proxy of C++ FIX::RepeatingGroupCountMismatch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field=0, what="") -> RepeatingGroupCountMismatch

        Parameters
        ----------
        field: int
        what: std::string const &

        """
        _quickfix.RepeatingGroupCountMismatch_swiginit(self, _quickfix.new_RepeatingGroupCountMismatch(*args))
    field = property(_quickfix.RepeatingGroupCountMismatch_field_get, _quickfix.RepeatingGroupCountMismatch_field_set, doc=r"""field""")
    __swig_destroy__ = _quickfix.delete_RepeatingGroupCountMismatch

# Register RepeatingGroupCountMismatch in _quickfix:
_quickfix.RepeatingGroupCountMismatch_swigregister(RepeatingGroupCountMismatch)
class DoNotSend(FIXException):
    r"""Proxy of C++ FIX::DoNotSend class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> DoNotSend

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.DoNotSend_swiginit(self, _quickfix.new_DoNotSend(*args))
    __swig_destroy__ = _quickfix.delete_DoNotSend

# Register DoNotSend in _quickfix:
_quickfix.DoNotSend_swigregister(DoNotSend)
class RejectLogon(FIXException):
    r"""Proxy of C++ FIX::RejectLogon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> RejectLogon

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.RejectLogon_swiginit(self, _quickfix.new_RejectLogon(*args))
    __swig_destroy__ = _quickfix.delete_RejectLogon

# Register RejectLogon in _quickfix:
_quickfix.RejectLogon_swigregister(RejectLogon)
class SessionNotFound(FIXException):
    r"""Proxy of C++ FIX::SessionNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> SessionNotFound

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.SessionNotFound_swiginit(self, _quickfix.new_SessionNotFound(*args))
    __swig_destroy__ = _quickfix.delete_SessionNotFound

# Register SessionNotFound in _quickfix:
_quickfix.SessionNotFound_swigregister(SessionNotFound)
class IOException(FIXException):
    r"""Proxy of C++ FIX::IOException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, what="") -> IOException

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.IOException_swiginit(self, _quickfix.new_IOException(*args))
    __swig_destroy__ = _quickfix.delete_IOException

# Register IOException in _quickfix:
_quickfix.IOException_swigregister(IOException)
class SocketException(FIXException):
    r"""Proxy of C++ FIX::SocketException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> SocketException
        __init__(self, what) -> SocketException

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.SocketException_swiginit(self, _quickfix.new_SocketException(*args))

    @staticmethod
    def errorToWhat():
        r"""errorToWhat() -> std::string"""
        return _quickfix.SocketException_errorToWhat()
    errorToWhat = _swig_new_static_method(_quickfix.SocketException_errorToWhat)
    __swig_destroy__ = _quickfix.delete_SocketException

# Register SocketException in _quickfix:
_quickfix.SocketException_swigregister(SocketException)
class SocketSendFailed(SocketException):
    r"""Proxy of C++ FIX::SocketSendFailed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> SocketSendFailed
        __init__(self, what) -> SocketSendFailed

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.SocketSendFailed_swiginit(self, _quickfix.new_SocketSendFailed(*args))
    __swig_destroy__ = _quickfix.delete_SocketSendFailed

# Register SocketSendFailed in _quickfix:
_quickfix.SocketSendFailed_swigregister(SocketSendFailed)
class SocketRecvFailed(SocketException):
    r"""Proxy of C++ FIX::SocketRecvFailed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, size) -> SocketRecvFailed

        Parameters
        ----------
        size: ssize_t

        __init__(self, what) -> SocketRecvFailed

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.SocketRecvFailed_swiginit(self, _quickfix.new_SocketRecvFailed(*args))
    __swig_destroy__ = _quickfix.delete_SocketRecvFailed

# Register SocketRecvFailed in _quickfix:
_quickfix.SocketRecvFailed_swigregister(SocketRecvFailed)
class SocketCloseFailed(SocketException):
    r"""Proxy of C++ FIX::SocketCloseFailed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> SocketCloseFailed
        __init__(self, what) -> SocketCloseFailed

        Parameters
        ----------
        what: std::string const &

        """
        _quickfix.SocketCloseFailed_swiginit(self, _quickfix.new_SocketCloseFailed(*args))
    __swig_destroy__ = _quickfix.delete_SocketCloseFailed

# Register SocketCloseFailed in _quickfix:
_quickfix.SocketCloseFailed_swigregister(SocketCloseFailed)
class DateTime(object):
    r"""Proxy of C++ FIX::DateTime class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_date = property(_quickfix.DateTime_m_date_get, _quickfix.DateTime_m_date_set, doc=r"""m_date""")
    m_time = property(_quickfix.DateTime_m_time_get, _quickfix.DateTime_m_time_set, doc=r"""m_time""")

    def __init__(self, *args):
        r"""
        __init__(self) -> DateTime
        __init__(self, date, time) -> DateTime

        Parameters
        ----------
        date: int
        time: int64_t

        __init__(self, year, month, day, hour, minute, second, millis) -> DateTime

        Parameters
        ----------
        year: int
        month: int
        day: int
        hour: int
        minute: int
        second: int
        millis: int

        __init__(self, year, month, day, hour, minute, second, fraction, precision) -> DateTime

        Parameters
        ----------
        year: int
        month: int
        day: int
        hour: int
        minute: int
        second: int
        fraction: int
        precision: int

        """
        _quickfix.DateTime_swiginit(self, _quickfix.new_DateTime(*args))
    __swig_destroy__ = _quickfix.delete_DateTime

    def getYear(self):
        r"""getYear(self) -> int"""
        return _quickfix.DateTime_getYear(self)
    getYear = _swig_new_instance_method(_quickfix.DateTime_getYear)

    def getMonth(self):
        r"""getMonth(self) -> int"""
        return _quickfix.DateTime_getMonth(self)
    getMonth = _swig_new_instance_method(_quickfix.DateTime_getMonth)

    def getDay(self):
        r"""getDay(self) -> int"""
        return _quickfix.DateTime_getDay(self)
    getDay = _swig_new_instance_method(_quickfix.DateTime_getDay)

    def getDate(self):
        r"""getDate(self) -> int"""
        return _quickfix.DateTime_getDate(self)
    getDate = _swig_new_instance_method(_quickfix.DateTime_getDate)

    def getJulianDate(self):
        r"""getJulianDate(self) -> int"""
        return _quickfix.DateTime_getJulianDate(self)
    getJulianDate = _swig_new_instance_method(_quickfix.DateTime_getJulianDate)

    def getHour(self):
        r"""getHour(self) -> int"""
        return _quickfix.DateTime_getHour(self)
    getHour = _swig_new_instance_method(_quickfix.DateTime_getHour)

    def getMinute(self):
        r"""getMinute(self) -> int"""
        return _quickfix.DateTime_getMinute(self)
    getMinute = _swig_new_instance_method(_quickfix.DateTime_getMinute)

    def getSecond(self):
        r"""getSecond(self) -> int"""
        return _quickfix.DateTime_getSecond(self)
    getSecond = _swig_new_instance_method(_quickfix.DateTime_getSecond)

    def getMillisecond(self):
        r"""getMillisecond(self) -> int"""
        return _quickfix.DateTime_getMillisecond(self)
    getMillisecond = _swig_new_instance_method(_quickfix.DateTime_getMillisecond)

    def getMicrosecond(self):
        r"""getMicrosecond(self) -> int"""
        return _quickfix.DateTime_getMicrosecond(self)
    getMicrosecond = _swig_new_instance_method(_quickfix.DateTime_getMicrosecond)

    def getNanosecond(self):
        r"""getNanosecond(self) -> unsigned int"""
        return _quickfix.DateTime_getNanosecond(self)
    getNanosecond = _swig_new_instance_method(_quickfix.DateTime_getNanosecond)

    def getFraction(self, precision):
        r"""
        getFraction(self, precision) -> int

        Parameters
        ----------
        precision: int

        """
        return _quickfix.DateTime_getFraction(self, precision)
    getFraction = _swig_new_instance_method(_quickfix.DateTime_getFraction)

    def getWeekDay(self):
        r"""getWeekDay(self) -> int"""
        return _quickfix.DateTime_getWeekDay(self)
    getWeekDay = _swig_new_instance_method(_quickfix.DateTime_getWeekDay)

    def getTimeT(self):
        r"""getTimeT(self) -> time_t"""
        return _quickfix.DateTime_getTimeT(self)
    getTimeT = _swig_new_instance_method(_quickfix.DateTime_getTimeT)

    def getTmUtc(self):
        r"""getTmUtc(self) -> tm"""
        return _quickfix.DateTime_getTmUtc(self)
    getTmUtc = _swig_new_instance_method(_quickfix.DateTime_getTmUtc)

    def setYMD(self, year, month, day):
        r"""
        setYMD(self, year, month, day)

        Parameters
        ----------
        year: int
        month: int
        day: int

        """
        return _quickfix.DateTime_setYMD(self, year, month, day)
    setYMD = _swig_new_instance_method(_quickfix.DateTime_setYMD)

    def setHMS(self, *args):
        r"""
        setHMS(self, hour, minute, second, millis)

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        millis: int

        setHMS(self, hour, minute, second, fraction, precision)

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        fraction: int
        precision: int

        """
        return _quickfix.DateTime_setHMS(self, *args)
    setHMS = _swig_new_instance_method(_quickfix.DateTime_setHMS)

    def setHour(self, hour):
        r"""
        setHour(self, hour)

        Parameters
        ----------
        hour: int

        """
        return _quickfix.DateTime_setHour(self, hour)
    setHour = _swig_new_instance_method(_quickfix.DateTime_setHour)

    def setMinute(self, min):
        r"""
        setMinute(self, min)

        Parameters
        ----------
        min: int

        """
        return _quickfix.DateTime_setMinute(self, min)
    setMinute = _swig_new_instance_method(_quickfix.DateTime_setMinute)

    def setSecond(self, sec):
        r"""
        setSecond(self, sec)

        Parameters
        ----------
        sec: int

        """
        return _quickfix.DateTime_setSecond(self, sec)
    setSecond = _swig_new_instance_method(_quickfix.DateTime_setSecond)

    def setMillisecond(self, millis):
        r"""
        setMillisecond(self, millis)

        Parameters
        ----------
        millis: int

        """
        return _quickfix.DateTime_setMillisecond(self, millis)
    setMillisecond = _swig_new_instance_method(_quickfix.DateTime_setMillisecond)

    def setMicrosecond(self, micros):
        r"""
        setMicrosecond(self, micros)

        Parameters
        ----------
        micros: int

        """
        return _quickfix.DateTime_setMicrosecond(self, micros)
    setMicrosecond = _swig_new_instance_method(_quickfix.DateTime_setMicrosecond)

    def setNanosecond(self, nanos):
        r"""
        setNanosecond(self, nanos)

        Parameters
        ----------
        nanos: int

        """
        return _quickfix.DateTime_setNanosecond(self, nanos)
    setNanosecond = _swig_new_instance_method(_quickfix.DateTime_setNanosecond)

    def setFraction(self, fraction, precision):
        r"""
        setFraction(self, fraction, precision)

        Parameters
        ----------
        fraction: int
        precision: int

        """
        return _quickfix.DateTime_setFraction(self, fraction, precision)
    setFraction = _swig_new_instance_method(_quickfix.DateTime_setFraction)

    def clearDate(self):
        r"""clearDate(self)"""
        return _quickfix.DateTime_clearDate(self)
    clearDate = _swig_new_instance_method(_quickfix.DateTime_clearDate)

    def clearTime(self):
        r"""clearTime(self)"""
        return _quickfix.DateTime_clearTime(self)
    clearTime = _swig_new_instance_method(_quickfix.DateTime_clearTime)

    def set(self, *args):
        r"""
        set(self, date, time)

        Parameters
        ----------
        date: int
        time: int64_t

        set(self, other)

        Parameters
        ----------
        other: FIX::DateTime const &

        """
        return _quickfix.DateTime_set(self, *args)
    set = _swig_new_instance_method(_quickfix.DateTime_set)

    def __iadd__(self, seconds):
        r"""
        __iadd__(self, seconds)

        Parameters
        ----------
        seconds: int

        """
        return _quickfix.DateTime___iadd__(self, seconds)
    __iadd__ = _swig_new_instance_method(_quickfix.DateTime___iadd__)

    @staticmethod
    def convertToNanos(fraction, precision):
        r"""
        convertToNanos(fraction, precision) -> int

        Parameters
        ----------
        fraction: int
        precision: int

        """
        return _quickfix.DateTime_convertToNanos(fraction, precision)
    convertToNanos = _swig_new_static_method(_quickfix.DateTime_convertToNanos)

    @staticmethod
    def makeHMS(hour, minute, second, nanos):
        r"""
        makeHMS(hour, minute, second, nanos) -> int64_t

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        nanos: int

        """
        return _quickfix.DateTime_makeHMS(hour, minute, second, nanos)
    makeHMS = _swig_new_static_method(_quickfix.DateTime_makeHMS)

    @staticmethod
    def nowUtc():
        r"""nowUtc() -> DateTime"""
        return _quickfix.DateTime_nowUtc()
    nowUtc = _swig_new_static_method(_quickfix.DateTime_nowUtc)

    @staticmethod
    def nowLocal():
        r"""nowLocal() -> DateTime"""
        return _quickfix.DateTime_nowLocal()
    nowLocal = _swig_new_static_method(_quickfix.DateTime_nowLocal)

    @staticmethod
    def fromUtcTimeT(*args):
        r"""
        fromUtcTimeT(t, millis=0) -> DateTime

        Parameters
        ----------
        t: time_t
        millis: int

        fromUtcTimeT(t, fraction, precision) -> DateTime

        Parameters
        ----------
        t: time_t
        fraction: int
        precision: int

        """
        return _quickfix.DateTime_fromUtcTimeT(*args)
    fromUtcTimeT = _swig_new_static_method(_quickfix.DateTime_fromUtcTimeT)

    @staticmethod
    def fromLocalTimeT(*args):
        r"""
        fromLocalTimeT(t, millis=0) -> DateTime

        Parameters
        ----------
        t: time_t
        millis: int

        fromLocalTimeT(t, fraction, precision) -> DateTime

        Parameters
        ----------
        t: time_t
        fraction: int
        precision: int

        """
        return _quickfix.DateTime_fromLocalTimeT(*args)
    fromLocalTimeT = _swig_new_static_method(_quickfix.DateTime_fromLocalTimeT)

    @staticmethod
    def fromTm(*args):
        r"""
        fromTm(tm, millis=0) -> DateTime

        Parameters
        ----------
        tm: tm const &
        millis: int

        fromTm(tm, fraction, precision) -> DateTime

        Parameters
        ----------
        tm: tm const &
        fraction: int
        precision: int

        """
        return _quickfix.DateTime_fromTm(*args)
    fromTm = _swig_new_static_method(_quickfix.DateTime_fromTm)

    @staticmethod
    def julianDate(year, month, day):
        r"""
        julianDate(year, month, day) -> int

        Parameters
        ----------
        year: int
        month: int
        day: int

        """
        return _quickfix.DateTime_julianDate(year, month, day)
    julianDate = _swig_new_static_method(_quickfix.DateTime_julianDate)

# Register DateTime in _quickfix:
_quickfix.DateTime_swigregister(DateTime)
cvar = _quickfix.cvar
PRECISION_FACTOR = cvar.PRECISION_FACTOR


def __sub__(lhs, rhs):
    r"""
    __sub__(lhs, rhs) -> int

    Parameters
    ----------
    lhs: FIX::DateTime const &
    rhs: FIX::DateTime const &

    """
    return _quickfix.__sub__(lhs, rhs)
__sub__ = _quickfix.__sub__
class UtcTimeStamp(DateTime):
    r"""Proxy of C++ FIX::UtcTimeStamp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def now():
        r"""now() -> UtcTimeStamp"""
        return _quickfix.UtcTimeStamp_now()
    now = _swig_new_static_method(_quickfix.UtcTimeStamp_now)

    def __init__(self, *args):
        r"""
        __init__(self) -> UtcTimeStamp
        __init__(self, dateTime) -> UtcTimeStamp

        Parameters
        ----------
        dateTime: FIX::DateTime

        __init__(self, hour, minute, second, millisecond=0) -> UtcTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        millisecond: int

        __init__(self, hour, minute, second, fraction, precision) -> UtcTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        fraction: int
        precision: int

        __init__(self, hour, minute, second, date, month, year) -> UtcTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        date: int
        month: int
        year: int

        __init__(self, hour, minute, second, millisecond, date, month, year) -> UtcTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        millisecond: int
        date: int
        month: int
        year: int

        __init__(self, hour, minute, second, fraction, date, month, year, precision) -> UtcTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        fraction: int
        date: int
        month: int
        year: int
        precision: int

        __init__(self, time, millisecond=0) -> UtcTimeStamp

        Parameters
        ----------
        time: time_t
        millisecond: int

        __init__(self, time, fraction, precision) -> UtcTimeStamp

        Parameters
        ----------
        time: time_t
        fraction: int
        precision: int

        __init__(self, time, millisecond=0) -> UtcTimeStamp

        Parameters
        ----------
        time: tm const *
        millisecond: int

        __init__(self, time, fraction, precision) -> UtcTimeStamp

        Parameters
        ----------
        time: tm const *
        fraction: int
        precision: int

        """
        _quickfix.UtcTimeStamp_swiginit(self, _quickfix.new_UtcTimeStamp(*args))

    def setCurrent(self):
        r"""setCurrent(self)"""
        return _quickfix.UtcTimeStamp_setCurrent(self)
    setCurrent = _swig_new_instance_method(_quickfix.UtcTimeStamp_setCurrent)

    def getDateTime(self):
        r"""getDateTime(self) -> PyObject *"""
        return _quickfix.UtcTimeStamp_getDateTime(self)
    getDateTime = _swig_new_instance_method(_quickfix.UtcTimeStamp_getDateTime)
    __swig_destroy__ = _quickfix.delete_UtcTimeStamp

# Register UtcTimeStamp in _quickfix:
_quickfix.UtcTimeStamp_swigregister(UtcTimeStamp)
class LocalTimeStamp(DateTime):
    r"""Proxy of C++ FIX::LocalTimeStamp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> LocalTimeStamp
        __init__(self, hour, minute, second, millisecond=0) -> LocalTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        millisecond: int

        __init__(self, hour, minute, second, fraction, precision) -> LocalTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        fraction: int
        precision: int

        __init__(self, hour, minute, second, date, month, year) -> LocalTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        date: int
        month: int
        year: int

        __init__(self, hour, minute, second, millisecond, date, month, year) -> LocalTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        millisecond: int
        date: int
        month: int
        year: int

        __init__(self, hour, minute, second, fraction, date, month, year, precision) -> LocalTimeStamp

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        fraction: int
        date: int
        month: int
        year: int
        precision: int

        __init__(self, time, millisecond=0) -> LocalTimeStamp

        Parameters
        ----------
        time: time_t
        millisecond: int

        __init__(self, time, fraction, precision) -> LocalTimeStamp

        Parameters
        ----------
        time: time_t
        fraction: int
        precision: int

        __init__(self, time, millisecond=0) -> LocalTimeStamp

        Parameters
        ----------
        time: tm const *
        millisecond: int

        __init__(self, time, fraction, precision) -> LocalTimeStamp

        Parameters
        ----------
        time: tm const *
        fraction: int
        precision: int

        """
        _quickfix.LocalTimeStamp_swiginit(self, _quickfix.new_LocalTimeStamp(*args))

    def setCurrent(self):
        r"""setCurrent(self)"""
        return _quickfix.LocalTimeStamp_setCurrent(self)
    setCurrent = _swig_new_instance_method(_quickfix.LocalTimeStamp_setCurrent)
    __swig_destroy__ = _quickfix.delete_LocalTimeStamp

# Register LocalTimeStamp in _quickfix:
_quickfix.LocalTimeStamp_swigregister(LocalTimeStamp)
class UtcTimeOnly(DateTime):
    r"""Proxy of C++ FIX::UtcTimeOnly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> UtcTimeOnly
        __init__(self, val) -> UtcTimeOnly

        Parameters
        ----------
        val: FIX::DateTime const &

        __init__(self, hour, minute, second, millisecond=0) -> UtcTimeOnly

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        millisecond: int

        __init__(self, hour, minute, second, fraction, precision) -> UtcTimeOnly

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        fraction: int
        precision: int

        __init__(self, time, millisecond=0) -> UtcTimeOnly

        Parameters
        ----------
        time: time_t
        millisecond: int

        __init__(self, time, fraction, precision) -> UtcTimeOnly

        Parameters
        ----------
        time: time_t
        fraction: int
        precision: int

        __init__(self, time, millisecond=0) -> UtcTimeOnly

        Parameters
        ----------
        time: tm const *
        millisecond: int

        __init__(self, time, fraction, precision) -> UtcTimeOnly

        Parameters
        ----------
        time: tm const *
        fraction: int
        precision: int

        """
        _quickfix.UtcTimeOnly_swiginit(self, _quickfix.new_UtcTimeOnly(*args))

    def setCurrent(self):
        r"""setCurrent(self)"""
        return _quickfix.UtcTimeOnly_setCurrent(self)
    setCurrent = _swig_new_instance_method(_quickfix.UtcTimeOnly_setCurrent)
    __swig_destroy__ = _quickfix.delete_UtcTimeOnly

# Register UtcTimeOnly in _quickfix:
_quickfix.UtcTimeOnly_swigregister(UtcTimeOnly)
class LocalTimeOnly(DateTime):
    r"""Proxy of C++ FIX::LocalTimeOnly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> LocalTimeOnly
        __init__(self, val) -> LocalTimeOnly

        Parameters
        ----------
        val: FIX::DateTime const &

        __init__(self, hour, minute, second, millisecond=0) -> LocalTimeOnly

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        millisecond: int

        __init__(self, hour, minute, second, fraction, precision) -> LocalTimeOnly

        Parameters
        ----------
        hour: int
        minute: int
        second: int
        fraction: int
        precision: int

        __init__(self, time, millisecond=0) -> LocalTimeOnly

        Parameters
        ----------
        time: time_t
        millisecond: int

        __init__(self, time, fraction, precision) -> LocalTimeOnly

        Parameters
        ----------
        time: time_t
        fraction: int
        precision: int

        __init__(self, time, millisecond=0) -> LocalTimeOnly

        Parameters
        ----------
        time: tm const *
        millisecond: int

        __init__(self, time, fraction, precision) -> LocalTimeOnly

        Parameters
        ----------
        time: tm const *
        fraction: int
        precision: int

        """
        _quickfix.LocalTimeOnly_swiginit(self, _quickfix.new_LocalTimeOnly(*args))

    def setCurrent(self):
        r"""setCurrent(self)"""
        return _quickfix.LocalTimeOnly_setCurrent(self)
    setCurrent = _swig_new_instance_method(_quickfix.LocalTimeOnly_setCurrent)
    __swig_destroy__ = _quickfix.delete_LocalTimeOnly

# Register LocalTimeOnly in _quickfix:
_quickfix.LocalTimeOnly_swigregister(LocalTimeOnly)
class UtcDate(DateTime):
    r"""Proxy of C++ FIX::UtcDate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> UtcDate
        __init__(self, val) -> UtcDate

        Parameters
        ----------
        val: FIX::DateTime const &

        __init__(self, date, month, year) -> UtcDate

        Parameters
        ----------
        date: int
        month: int
        year: int

        __init__(self, sec) -> UtcDate

        Parameters
        ----------
        sec: int

        __init__(self, time) -> UtcDate

        Parameters
        ----------
        time: tm const *

        """
        _quickfix.UtcDate_swiginit(self, _quickfix.new_UtcDate(*args))

    def setCurrent(self):
        r"""setCurrent(self)"""
        return _quickfix.UtcDate_setCurrent(self)
    setCurrent = _swig_new_instance_method(_quickfix.UtcDate_setCurrent)
    __swig_destroy__ = _quickfix.delete_UtcDate

# Register UtcDate in _quickfix:
_quickfix.UtcDate_swigregister(UtcDate)
class LocalDate(DateTime):
    r"""Proxy of C++ FIX::LocalDate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> LocalDate
        __init__(self, val) -> LocalDate

        Parameters
        ----------
        val: FIX::DateTime const &

        __init__(self, date, month, year) -> LocalDate

        Parameters
        ----------
        date: int
        month: int
        year: int

        __init__(self, sec) -> LocalDate

        Parameters
        ----------
        sec: int

        __init__(self, time) -> LocalDate

        Parameters
        ----------
        time: tm const *

        """
        _quickfix.LocalDate_swiginit(self, _quickfix.new_LocalDate(*args))

    def setCurrent(self):
        r"""setCurrent(self)"""
        return _quickfix.LocalDate_setCurrent(self)
    setCurrent = _swig_new_instance_method(_quickfix.LocalDate_setCurrent)
    __swig_destroy__ = _quickfix.delete_LocalDate

# Register LocalDate in _quickfix:
_quickfix.LocalDate_swigregister(LocalDate)
EnumUnknown = _quickfix.EnumUnknown

EnumString = _quickfix.EnumString

EnumChar = _quickfix.EnumChar

EnumPrice = _quickfix.EnumPrice

EnumInt = _quickfix.EnumInt

EnumAmt = _quickfix.EnumAmt

EnumQty = _quickfix.EnumQty

EnumCurrency = _quickfix.EnumCurrency

EnumMultipleValueString = _quickfix.EnumMultipleValueString

EnumMultipleStringValue = _quickfix.EnumMultipleStringValue

EnumMultipleCharValue = _quickfix.EnumMultipleCharValue

EnumExchange = _quickfix.EnumExchange

EnumUtcTimeStamp = _quickfix.EnumUtcTimeStamp

EnumBoolean = _quickfix.EnumBoolean

EnumLocalMktTime = _quickfix.EnumLocalMktTime

EnumLocalMktDate = _quickfix.EnumLocalMktDate

EnumData = _quickfix.EnumData

EnumFloat = _quickfix.EnumFloat

EnumPriceOffset = _quickfix.EnumPriceOffset

EnumMonthYear = _quickfix.EnumMonthYear

EnumDayOfMonth = _quickfix.EnumDayOfMonth

EnumUtcDate = _quickfix.EnumUtcDate

EnumUtcDateOnly = _quickfix.EnumUtcDateOnly

EnumUtcTimeOnly = _quickfix.EnumUtcTimeOnly

EnumNumInGroup = _quickfix.EnumNumInGroup

EnumPercentage = _quickfix.EnumPercentage

EnumSeqNum = _quickfix.EnumSeqNum

EnumTagNum = _quickfix.EnumTagNum

EnumLength = _quickfix.EnumLength

EnumCountry = _quickfix.EnumCountry

EnumTzTimeOnly = _quickfix.EnumTzTimeOnly

EnumTzTimeStamp = _quickfix.EnumTzTimeStamp

EnumXmlData = _quickfix.EnumXmlData

EnumLanguage = _quickfix.EnumLanguage

EnumXid = _quickfix.EnumXid

EnumXidRef = _quickfix.EnumXidRef

class FieldBase(object):
    r"""Proxy of C++ FIX::FieldBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_FieldBase

    def __init__(self, *args):
        r"""
        __init__(self, tag, string) -> FieldBase

        Parameters
        ----------
        tag: int
        string: std::string const &

        __init__(self, rhs) -> FieldBase

        Parameters
        ----------
        rhs: FIX::FieldBase const &

        """
        _quickfix.FieldBase_swiginit(self, _quickfix.new_FieldBase(*args))

    def swap(self, rhs):
        r"""
        swap(self, rhs)

        Parameters
        ----------
        rhs: FIX::FieldBase &

        """
        return _quickfix.FieldBase_swap(self, rhs)
    swap = _swig_new_instance_method(_quickfix.FieldBase_swap)

    def setTag(self, tag):
        r"""
        setTag(self, tag)

        Parameters
        ----------
        tag: int

        """
        return _quickfix.FieldBase_setTag(self, tag)
    setTag = _swig_new_instance_method(_quickfix.FieldBase_setTag)

    def setField(self, field):
        r"""
        setField(self, field)

        Parameters
        ----------
        field: int

        """
        return _quickfix.FieldBase_setField(self, field)
    setField = _swig_new_instance_method(_quickfix.FieldBase_setField)

    def setString(self, string):
        r"""
        setString(self, string)

        Parameters
        ----------
        string: std::string const &

        """
        return _quickfix.FieldBase_setString(self, string)
    setString = _swig_new_instance_method(_quickfix.FieldBase_setString)

    def getTag(self):
        r"""getTag(self) -> int"""
        return _quickfix.FieldBase_getTag(self)
    getTag = _swig_new_instance_method(_quickfix.FieldBase_getTag)

    def getField(self):
        r"""getField(self) -> int"""
        return _quickfix.FieldBase_getField(self)
    getField = _swig_new_instance_method(_quickfix.FieldBase_getField)

    def getString(self):
        r"""getString(self) -> std::string const &"""
        return _quickfix.FieldBase_getString(self)
    getString = _swig_new_instance_method(_quickfix.FieldBase_getString)

    def getFixString(self):
        r"""getFixString(self) -> std::string const &"""
        return _quickfix.FieldBase_getFixString(self)
    getFixString = _swig_new_instance_method(_quickfix.FieldBase_getFixString)

    def getLength(self):
        r"""getLength(self) -> int"""
        return _quickfix.FieldBase_getLength(self)
    getLength = _swig_new_instance_method(_quickfix.FieldBase_getLength)

    def getTotal(self):
        r"""getTotal(self) -> int"""
        return _quickfix.FieldBase_getTotal(self)
    getTotal = _swig_new_instance_method(_quickfix.FieldBase_getTotal)

    def __lt__(self, field):
        r"""
        __lt__(self, field) -> bool

        Parameters
        ----------
        field: FIX::FieldBase const &

        """
        return _quickfix.FieldBase___lt__(self, field)
    __lt__ = _swig_new_instance_method(_quickfix.FieldBase___lt__)

    def __str__(self):
        r"""__str__(self) -> std::string"""
        return _quickfix.FieldBase___str__(self)
    __str__ = _swig_new_instance_method(_quickfix.FieldBase___str__)

# Register FieldBase in _quickfix:
_quickfix.FieldBase_swigregister(FieldBase)

def swap(lhs, rhs):
    r"""
    swap(lhs, rhs)

    Parameters
    ----------
    lhs: FIX::FieldBase &
    rhs: FIX::FieldBase &

    """
    return _quickfix.swap(lhs, rhs)
swap = _quickfix.swap
class StringField(FieldBase):
    r"""Proxy of C++ FIX::StringField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data) -> StringField

        Parameters
        ----------
        field: int
        data: std::string const &

        __init__(self, field) -> StringField

        Parameters
        ----------
        field: int

        """
        _quickfix.StringField_swiginit(self, _quickfix.new_StringField(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.StringField_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.StringField_setValue)

    def getValue(self):
        r"""getValue(self) -> std::string const &"""
        return _quickfix.StringField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.StringField_getValue)

    def __lt__(self, rhs):
        r"""
        __lt__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::StringField const &

        """
        return _quickfix.StringField___lt__(self, rhs)
    __lt__ = _swig_new_instance_method(_quickfix.StringField___lt__)

    def __gt__(self, rhs):
        r"""
        __gt__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::StringField const &

        """
        return _quickfix.StringField___gt__(self, rhs)
    __gt__ = _swig_new_instance_method(_quickfix.StringField___gt__)

    def __eq__(self, rhs):
        r"""
        __eq__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::StringField const &

        """
        return _quickfix.StringField___eq__(self, rhs)
    __eq__ = _swig_new_instance_method(_quickfix.StringField___eq__)

    def __ne__(self, rhs):
        r"""
        __ne__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::StringField const &

        """
        return _quickfix.StringField___ne__(self, rhs)
    __ne__ = _swig_new_instance_method(_quickfix.StringField___ne__)

    def __le__(self, rhs):
        r"""
        __le__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::StringField const &

        """
        return _quickfix.StringField___le__(self, rhs)
    __le__ = _swig_new_instance_method(_quickfix.StringField___le__)

    def __ge__(self, rhs):
        r"""
        __ge__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::StringField const &

        """
        return _quickfix.StringField___ge__(self, rhs)
    __ge__ = _swig_new_instance_method(_quickfix.StringField___ge__)
    __swig_destroy__ = _quickfix.delete_StringField

# Register StringField in _quickfix:
_quickfix.StringField_swigregister(StringField)

def __gt__(*args):
    r"""
    __gt__(lhs, rhs) -> bool

    Parameters
    ----------
    lhs: FIX::DateTime const &
    rhs: FIX::DateTime const &

    __gt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: char const *

    __gt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: char const *
    arg2: FIX::StringField const &

    __gt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: std::string const &

    __gt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: std::string const &
    arg2: FIX::StringField const &

    """
    return _quickfix.__gt__(*args)
__gt__ = _quickfix.__gt__

def __le__(*args):
    r"""
    __le__(lhs, rhs) -> bool

    Parameters
    ----------
    lhs: FIX::DateTime const &
    rhs: FIX::DateTime const &

    __le__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: char const *

    __le__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: char const *
    arg2: FIX::StringField const &

    __le__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: std::string const &

    __le__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: std::string const &
    arg2: FIX::StringField const &

    """
    return _quickfix.__le__(*args)
__le__ = _quickfix.__le__

def __ge__(*args):
    r"""
    __ge__(lhs, rhs) -> bool

    Parameters
    ----------
    lhs: FIX::DateTime const &
    rhs: FIX::DateTime const &

    __ge__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: char const *

    __ge__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: char const *
    arg2: FIX::StringField const &

    __ge__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: std::string const &

    __ge__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: std::string const &
    arg2: FIX::StringField const &

    """
    return _quickfix.__ge__(*args)
__ge__ = _quickfix.__ge__

class CharField(FieldBase):
    r"""Proxy of C++ FIX::CharField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data) -> CharField

        Parameters
        ----------
        field: int
        data: char

        __init__(self, field) -> CharField

        Parameters
        ----------
        field: int

        """
        _quickfix.CharField_swiginit(self, _quickfix.new_CharField(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: char

        """
        return _quickfix.CharField_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.CharField_setValue)

    def getValue(self):
        r"""getValue(self) -> char"""
        return _quickfix.CharField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.CharField_getValue)
    __swig_destroy__ = _quickfix.delete_CharField

# Register CharField in _quickfix:
_quickfix.CharField_swigregister(CharField)
class DoubleField(FieldBase):
    r"""Proxy of C++ FIX::DoubleField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data, padding=0) -> DoubleField

        Parameters
        ----------
        field: int
        data: double
        padding: int

        __init__(self, field) -> DoubleField

        Parameters
        ----------
        field: int

        """
        _quickfix.DoubleField_swiginit(self, _quickfix.new_DoubleField(*args))

    def setValue(self, value, padding=0):
        r"""
        setValue(self, value, padding=0)

        Parameters
        ----------
        value: double
        padding: int

        """
        return _quickfix.DoubleField_setValue(self, value, padding)
    setValue = _swig_new_instance_method(_quickfix.DoubleField_setValue)

    def getValue(self):
        r"""getValue(self) -> double"""
        return _quickfix.DoubleField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.DoubleField_getValue)
    __swig_destroy__ = _quickfix.delete_DoubleField

# Register DoubleField in _quickfix:
_quickfix.DoubleField_swigregister(DoubleField)
class IntField(FieldBase):
    r"""Proxy of C++ FIX::IntField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data) -> IntField

        Parameters
        ----------
        field: int
        data: int

        __init__(self, field) -> IntField

        Parameters
        ----------
        field: int

        """
        _quickfix.IntField_swiginit(self, _quickfix.new_IntField(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: int

        """
        return _quickfix.IntField_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.IntField_setValue)

    def getValue(self):
        r"""getValue(self) -> int"""
        return _quickfix.IntField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.IntField_getValue)
    __swig_destroy__ = _quickfix.delete_IntField

# Register IntField in _quickfix:
_quickfix.IntField_swigregister(IntField)
class Int64Field(FieldBase):
    r"""Proxy of C++ FIX::Int64Field class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data) -> Int64Field

        Parameters
        ----------
        field: int
        data: int64_t

        __init__(self, field) -> Int64Field

        Parameters
        ----------
        field: int

        """
        _quickfix.Int64Field_swiginit(self, _quickfix.new_Int64Field(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: int64_t

        """
        return _quickfix.Int64Field_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.Int64Field_setValue)

    def getValue(self):
        r"""getValue(self) -> int64_t"""
        return _quickfix.Int64Field_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.Int64Field_getValue)
    __swig_destroy__ = _quickfix.delete_Int64Field

# Register Int64Field in _quickfix:
_quickfix.Int64Field_swigregister(Int64Field)
class UInt64Field(FieldBase):
    r"""Proxy of C++ FIX::UInt64Field class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data) -> UInt64Field

        Parameters
        ----------
        field: int
        data: uint64_t

        __init__(self, field) -> UInt64Field

        Parameters
        ----------
        field: int

        """
        _quickfix.UInt64Field_swiginit(self, _quickfix.new_UInt64Field(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: uint64_t

        """
        return _quickfix.UInt64Field_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.UInt64Field_setValue)

    def getValue(self):
        r"""getValue(self) -> uint64_t"""
        return _quickfix.UInt64Field_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.UInt64Field_getValue)
    __swig_destroy__ = _quickfix.delete_UInt64Field

# Register UInt64Field in _quickfix:
_quickfix.UInt64Field_swigregister(UInt64Field)
class BoolField(FieldBase):
    r"""Proxy of C++ FIX::BoolField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data) -> BoolField

        Parameters
        ----------
        field: int
        data: bool

        __init__(self, field) -> BoolField

        Parameters
        ----------
        field: int

        """
        _quickfix.BoolField_swiginit(self, _quickfix.new_BoolField(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.BoolField_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.BoolField_setValue)

    def getValue(self):
        r"""getValue(self) -> bool"""
        return _quickfix.BoolField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.BoolField_getValue)

    def __nonzero__(self):
        return _quickfix.BoolField___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _quickfix.delete_BoolField

# Register BoolField in _quickfix:
_quickfix.BoolField_swigregister(BoolField)
class UtcTimeStampField(FieldBase):
    r"""Proxy of C++ FIX::UtcTimeStampField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data, precision=0) -> UtcTimeStampField

        Parameters
        ----------
        field: int
        data: FIX::UtcTimeStamp const &
        precision: int

        __init__(self, field, precision=0) -> UtcTimeStampField

        Parameters
        ----------
        field: int
        precision: int

        """
        _quickfix.UtcTimeStampField_swiginit(self, _quickfix.new_UtcTimeStampField(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: FIX::UtcTimeStamp const &

        """
        return _quickfix.UtcTimeStampField_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.UtcTimeStampField_setValue)

    def getValue(self):
        r"""getValue(self) -> UtcTimeStamp"""
        return _quickfix.UtcTimeStampField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.UtcTimeStampField_getValue)

    def __lt__(self, rhs):
        r"""
        __lt__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcTimeStampField const &

        """
        return _quickfix.UtcTimeStampField___lt__(self, rhs)
    __lt__ = _swig_new_instance_method(_quickfix.UtcTimeStampField___lt__)

    def __eq__(self, rhs):
        r"""
        __eq__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcTimeStampField const &

        """
        return _quickfix.UtcTimeStampField___eq__(self, rhs)
    __eq__ = _swig_new_instance_method(_quickfix.UtcTimeStampField___eq__)

    def __ne__(self, rhs):
        r"""
        __ne__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcTimeStampField const &

        """
        return _quickfix.UtcTimeStampField___ne__(self, rhs)
    __ne__ = _swig_new_instance_method(_quickfix.UtcTimeStampField___ne__)
    __swig_destroy__ = _quickfix.delete_UtcTimeStampField

# Register UtcTimeStampField in _quickfix:
_quickfix.UtcTimeStampField_swigregister(UtcTimeStampField)
class UtcDateField(FieldBase):
    r"""Proxy of C++ FIX::UtcDateField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data) -> UtcDateField

        Parameters
        ----------
        field: int
        data: FIX::UtcDate const &

        __init__(self, field) -> UtcDateField

        Parameters
        ----------
        field: int

        """
        _quickfix.UtcDateField_swiginit(self, _quickfix.new_UtcDateField(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: FIX::UtcDate const &

        """
        return _quickfix.UtcDateField_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.UtcDateField_setValue)

    def getValue(self):
        r"""getValue(self) -> UtcDate"""
        return _quickfix.UtcDateField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.UtcDateField_getValue)

    def __lt__(self, rhs):
        r"""
        __lt__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcDateField const &

        """
        return _quickfix.UtcDateField___lt__(self, rhs)
    __lt__ = _swig_new_instance_method(_quickfix.UtcDateField___lt__)

    def __eq__(self, rhs):
        r"""
        __eq__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcDateField const &

        """
        return _quickfix.UtcDateField___eq__(self, rhs)
    __eq__ = _swig_new_instance_method(_quickfix.UtcDateField___eq__)

    def __ne__(self, rhs):
        r"""
        __ne__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcDateField const &

        """
        return _quickfix.UtcDateField___ne__(self, rhs)
    __ne__ = _swig_new_instance_method(_quickfix.UtcDateField___ne__)
    __swig_destroy__ = _quickfix.delete_UtcDateField

# Register UtcDateField in _quickfix:
_quickfix.UtcDateField_swigregister(UtcDateField)
class UtcTimeOnlyField(FieldBase):
    r"""Proxy of C++ FIX::UtcTimeOnlyField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data, precision=0) -> UtcTimeOnlyField

        Parameters
        ----------
        field: int
        data: FIX::UtcTimeOnly const &
        precision: int

        __init__(self, field, precision=0) -> UtcTimeOnlyField

        Parameters
        ----------
        field: int
        precision: int

        """
        _quickfix.UtcTimeOnlyField_swiginit(self, _quickfix.new_UtcTimeOnlyField(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: FIX::UtcTimeOnly const &

        """
        return _quickfix.UtcTimeOnlyField_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.UtcTimeOnlyField_setValue)

    def getValue(self):
        r"""getValue(self) -> UtcTimeOnly"""
        return _quickfix.UtcTimeOnlyField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.UtcTimeOnlyField_getValue)

    def __lt__(self, rhs):
        r"""
        __lt__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcTimeOnlyField const &

        """
        return _quickfix.UtcTimeOnlyField___lt__(self, rhs)
    __lt__ = _swig_new_instance_method(_quickfix.UtcTimeOnlyField___lt__)

    def __eq__(self, rhs):
        r"""
        __eq__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcTimeOnlyField const &

        """
        return _quickfix.UtcTimeOnlyField___eq__(self, rhs)
    __eq__ = _swig_new_instance_method(_quickfix.UtcTimeOnlyField___eq__)

    def __ne__(self, rhs):
        r"""
        __ne__(self, rhs) -> bool

        Parameters
        ----------
        rhs: FIX::UtcTimeOnlyField const &

        """
        return _quickfix.UtcTimeOnlyField___ne__(self, rhs)
    __ne__ = _swig_new_instance_method(_quickfix.UtcTimeOnlyField___ne__)
    __swig_destroy__ = _quickfix.delete_UtcTimeOnlyField

# Register UtcTimeOnlyField in _quickfix:
_quickfix.UtcTimeOnlyField_swigregister(UtcTimeOnlyField)
class CheckSumField(FieldBase):
    r"""Proxy of C++ FIX::CheckSumField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, data) -> CheckSumField

        Parameters
        ----------
        field: int
        data: int

        __init__(self, field) -> CheckSumField

        Parameters
        ----------
        field: int

        """
        _quickfix.CheckSumField_swiginit(self, _quickfix.new_CheckSumField(*args))

    def setValue(self, value):
        r"""
        setValue(self, value)

        Parameters
        ----------
        value: int

        """
        return _quickfix.CheckSumField_setValue(self, value)
    setValue = _swig_new_instance_method(_quickfix.CheckSumField_setValue)

    def getValue(self):
        r"""getValue(self) -> int"""
        return _quickfix.CheckSumField_getValue(self)
    getValue = _swig_new_instance_method(_quickfix.CheckSumField_getValue)
    __swig_destroy__ = _quickfix.delete_CheckSumField

# Register CheckSumField in _quickfix:
_quickfix.CheckSumField_swigregister(CheckSumField)
class FieldMap(object):
    r"""Proxy of C++ FIX::FieldMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, order=message_order(message_order::normal)) -> FieldMap

        Parameters
        ----------
        order: message_order const &

        __init__(self, order) -> FieldMap

        Parameters
        ----------
        order: int const []

        __init__(self, copy) -> FieldMap

        Parameters
        ----------
        copy: FIX::FieldMap const &

        __init__(self, rhs) -> FieldMap

        Parameters
        ----------
        rhs: FIX::FieldMap &&

        """
        _quickfix.FieldMap_swiginit(self, _quickfix.new_FieldMap(*args))
    __swig_destroy__ = _quickfix.delete_FieldMap

    def setField(self, *args):
        r"""
        setField(self, field, overwrite=True)

        Parameters
        ----------
        field: FIX::FieldBase const &
        overwrite: bool

        setField(self, tag, value)

        Parameters
        ----------
        tag: int
        value: std::string const &

        """
        return _quickfix.FieldMap_setField(self, *args)
    setField = _swig_new_instance_method(_quickfix.FieldMap_setField)

    def getFieldIfSet(self, field):
        r"""
        getFieldIfSet(self, field) -> bool

        Parameters
        ----------
        field: FIX::FieldBase &

        """
        return _quickfix.FieldMap_getFieldIfSet(self, field)
    getFieldIfSet = _swig_new_instance_method(_quickfix.FieldMap_getFieldIfSet)

    def getField(self, *args):
        r"""
        getField(self, field) -> FieldBase

        Parameters
        ----------
        field: FIX::FieldBase &

        getField(self, tag) -> std::string const &

        Parameters
        ----------
        tag: int

        """
        return _quickfix.FieldMap_getField(self, *args)
    getField = _swig_new_instance_method(_quickfix.FieldMap_getField)

    def getFieldRef(self, tag):
        r"""
        getFieldRef(self, tag) -> FieldBase

        Parameters
        ----------
        tag: int

        """
        return _quickfix.FieldMap_getFieldRef(self, tag)
    getFieldRef = _swig_new_instance_method(_quickfix.FieldMap_getFieldRef)

    def getFieldPtr(self, tag):
        r"""
        getFieldPtr(self, tag) -> FieldBase

        Parameters
        ----------
        tag: int

        """
        return _quickfix.FieldMap_getFieldPtr(self, tag)
    getFieldPtr = _swig_new_instance_method(_quickfix.FieldMap_getFieldPtr)

    def isSetField(self, *args):
        r"""
        isSetField(self, field) -> bool

        Parameters
        ----------
        field: FIX::FieldBase const &

        isSetField(self, tag) -> bool

        Parameters
        ----------
        tag: int

        """
        return _quickfix.FieldMap_isSetField(self, *args)
    isSetField = _swig_new_instance_method(_quickfix.FieldMap_isSetField)

    def removeField(self, tag):
        r"""
        removeField(self, tag)

        Parameters
        ----------
        tag: int

        """
        return _quickfix.FieldMap_removeField(self, tag)
    removeField = _swig_new_instance_method(_quickfix.FieldMap_removeField)

    def addGroup(self, tag, group, setCount=True):
        r"""
        addGroup(self, tag, group, setCount=True)

        Parameters
        ----------
        tag: int
        group: FIX::FieldMap const &
        setCount: bool

        """
        return _quickfix.FieldMap_addGroup(self, tag, group, setCount)
    addGroup = _swig_new_instance_method(_quickfix.FieldMap_addGroup)

    def addGroupPtr(self, tag, group, setCount=True):
        r"""
        addGroupPtr(self, tag, group, setCount=True)

        Parameters
        ----------
        tag: int
        group: FIX::FieldMap *
        setCount: bool

        """
        return _quickfix.FieldMap_addGroupPtr(self, tag, group, setCount)
    addGroupPtr = _swig_new_instance_method(_quickfix.FieldMap_addGroupPtr)

    def replaceGroup(self, num, tag, group):
        r"""
        replaceGroup(self, num, tag, group)

        Parameters
        ----------
        num: int
        tag: int
        group: FIX::FieldMap const &

        """
        return _quickfix.FieldMap_replaceGroup(self, num, tag, group)
    replaceGroup = _swig_new_instance_method(_quickfix.FieldMap_replaceGroup)

    def getGroup(self, num, tag, group):
        r"""
        getGroup(self, num, tag, group) -> FieldMap

        Parameters
        ----------
        num: int
        tag: int
        group: FIX::FieldMap &

        """
        return _quickfix.FieldMap_getGroup(self, num, tag, group)
    getGroup = _swig_new_instance_method(_quickfix.FieldMap_getGroup)

    def getGroupRef(self, num, tag):
        r"""
        getGroupRef(self, num, tag) -> FieldMap

        Parameters
        ----------
        num: int
        tag: int

        """
        return _quickfix.FieldMap_getGroupRef(self, num, tag)
    getGroupRef = _swig_new_instance_method(_quickfix.FieldMap_getGroupRef)

    def getGroupPtr(self, num, tag):
        r"""
        getGroupPtr(self, num, tag) -> FieldMap

        Parameters
        ----------
        num: int
        tag: int

        """
        return _quickfix.FieldMap_getGroupPtr(self, num, tag)
    getGroupPtr = _swig_new_instance_method(_quickfix.FieldMap_getGroupPtr)

    def groups(self):
        r"""groups(self) -> FIX::FieldMap::Groups const &"""
        return _quickfix.FieldMap_groups(self)
    groups = _swig_new_instance_method(_quickfix.FieldMap_groups)

    def removeGroup(self, *args):
        r"""
        removeGroup(self, num, tag)

        Parameters
        ----------
        num: int
        tag: int

        removeGroup(self, tag)

        Parameters
        ----------
        tag: int

        """
        return _quickfix.FieldMap_removeGroup(self, *args)
    removeGroup = _swig_new_instance_method(_quickfix.FieldMap_removeGroup)

    def hasGroup(self, *args):
        r"""
        hasGroup(self, tag) -> bool

        Parameters
        ----------
        tag: int

        hasGroup(self, num, tag) -> bool

        Parameters
        ----------
        num: int
        tag: int

        """
        return _quickfix.FieldMap_hasGroup(self, *args)
    hasGroup = _swig_new_instance_method(_quickfix.FieldMap_hasGroup)

    def groupCount(self, tag):
        r"""
        groupCount(self, tag) -> size_t

        Parameters
        ----------
        tag: int

        """
        return _quickfix.FieldMap_groupCount(self, tag)
    groupCount = _swig_new_instance_method(_quickfix.FieldMap_groupCount)

    def clear(self):
        r"""clear(self)"""
        return _quickfix.FieldMap_clear(self)
    clear = _swig_new_instance_method(_quickfix.FieldMap_clear)

    def isEmpty(self):
        r"""isEmpty(self) -> bool"""
        return _quickfix.FieldMap_isEmpty(self)
    isEmpty = _swig_new_instance_method(_quickfix.FieldMap_isEmpty)

    def totalFields(self):
        r"""totalFields(self) -> size_t"""
        return _quickfix.FieldMap_totalFields(self)
    totalFields = _swig_new_instance_method(_quickfix.FieldMap_totalFields)

    def calculateString(self, arg2):
        r"""
        calculateString(self, arg2) -> std::string &

        Parameters
        ----------
        arg2: std::string &

        """
        return _quickfix.FieldMap_calculateString(self, arg2)
    calculateString = _swig_new_instance_method(_quickfix.FieldMap_calculateString)

    def calculateLength(self, *args):
        r"""
        calculateLength(self, beginStringField=FIELD::BeginString, bodyLengthField=FIELD::BodyLength, checkSumField=FIELD::CheckSum) -> int

        Parameters
        ----------
        beginStringField: int
        bodyLengthField: int
        checkSumField: int

        """
        return _quickfix.FieldMap_calculateLength(self, *args)
    calculateLength = _swig_new_instance_method(_quickfix.FieldMap_calculateLength)

    def calculateTotal(self, *args):
        r"""
        calculateTotal(self, checkSumField=FIELD::CheckSum) -> int

        Parameters
        ----------
        checkSumField: int

        """
        return _quickfix.FieldMap_calculateTotal(self, *args)
    calculateTotal = _swig_new_instance_method(_quickfix.FieldMap_calculateTotal)

    def begin(self, *args):
        r"""
        begin(self) -> FIX::FieldMap::iterator
        begin(self) -> FIX::FieldMap::const_iterator
        """
        return _quickfix.FieldMap_begin(self, *args)
    begin = _swig_new_instance_method(_quickfix.FieldMap_begin)

    def end(self, *args):
        r"""
        end(self) -> FIX::FieldMap::iterator
        end(self) -> FIX::FieldMap::const_iterator
        """
        return _quickfix.FieldMap_end(self, *args)
    end = _swig_new_instance_method(_quickfix.FieldMap_end)

    def g_begin(self, *args):
        r"""
        g_begin(self) -> FIX::FieldMap::g_iterator
        g_begin(self) -> FIX::FieldMap::g_const_iterator
        """
        return _quickfix.FieldMap_g_begin(self, *args)
    g_begin = _swig_new_instance_method(_quickfix.FieldMap_g_begin)

    def g_end(self, *args):
        r"""
        g_end(self) -> FIX::FieldMap::g_iterator
        g_end(self) -> FIX::FieldMap::g_const_iterator
        """
        return _quickfix.FieldMap_g_end(self, *args)
    g_end = _swig_new_instance_method(_quickfix.FieldMap_g_end)

# Register FieldMap in _quickfix:
_quickfix.FieldMap_swigregister(FieldMap)
class Header(FieldMap):
    r"""Proxy of C++ FIX::Header class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> Header
        __init__(self, order) -> Header

        Parameters
        ----------
        order: message_order const &

        """
        _quickfix.Header_swiginit(self, _quickfix.new_Header(*args))

    def addGroup(self, group):
        r"""
        addGroup(self, group)

        Parameters
        ----------
        group: FIX::Group const &

        """
        return _quickfix.Header_addGroup(self, group)
    addGroup = _swig_new_instance_method(_quickfix.Header_addGroup)

    def replaceGroup(self, num, group):
        r"""
        replaceGroup(self, num, group)

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        """
        return _quickfix.Header_replaceGroup(self, num, group)
    replaceGroup = _swig_new_instance_method(_quickfix.Header_replaceGroup)

    def getGroup(self, num, group):
        r"""
        getGroup(self, num, group) -> Group &

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group &

        """
        return _quickfix.Header_getGroup(self, num, group)
    getGroup = _swig_new_instance_method(_quickfix.Header_getGroup)

    def removeGroup(self, *args):
        r"""
        removeGroup(self, num, group)

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        removeGroup(self, group)

        Parameters
        ----------
        group: FIX::Group const &

        """
        return _quickfix.Header_removeGroup(self, *args)
    removeGroup = _swig_new_instance_method(_quickfix.Header_removeGroup)

    def hasGroup(self, *args):
        r"""
        hasGroup(self, group) -> bool

        Parameters
        ----------
        group: FIX::Group const &

        hasGroup(self, num, group) -> bool

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        """
        return _quickfix.Header_hasGroup(self, *args)
    hasGroup = _swig_new_instance_method(_quickfix.Header_hasGroup)
    __swig_destroy__ = _quickfix.delete_Header

# Register Header in _quickfix:
_quickfix.Header_swigregister(Header)
class Trailer(FieldMap):
    r"""Proxy of C++ FIX::Trailer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> Trailer
        __init__(self, order) -> Trailer

        Parameters
        ----------
        order: message_order const &

        """
        _quickfix.Trailer_swiginit(self, _quickfix.new_Trailer(*args))

    def addGroup(self, group):
        r"""
        addGroup(self, group)

        Parameters
        ----------
        group: FIX::Group const &

        """
        return _quickfix.Trailer_addGroup(self, group)
    addGroup = _swig_new_instance_method(_quickfix.Trailer_addGroup)

    def replaceGroup(self, num, group):
        r"""
        replaceGroup(self, num, group)

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        """
        return _quickfix.Trailer_replaceGroup(self, num, group)
    replaceGroup = _swig_new_instance_method(_quickfix.Trailer_replaceGroup)

    def getGroup(self, num, group):
        r"""
        getGroup(self, num, group) -> Group &

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group &

        """
        return _quickfix.Trailer_getGroup(self, num, group)
    getGroup = _swig_new_instance_method(_quickfix.Trailer_getGroup)

    def removeGroup(self, *args):
        r"""
        removeGroup(self, num, group)

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        removeGroup(self, group)

        Parameters
        ----------
        group: FIX::Group const &

        """
        return _quickfix.Trailer_removeGroup(self, *args)
    removeGroup = _swig_new_instance_method(_quickfix.Trailer_removeGroup)

    def hasGroup(self, *args):
        r"""
        hasGroup(self, group) -> bool

        Parameters
        ----------
        group: FIX::Group const &

        hasGroup(self, num, group) -> bool

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        """
        return _quickfix.Trailer_hasGroup(self, *args)
    hasGroup = _swig_new_instance_method(_quickfix.Trailer_hasGroup)
    __swig_destroy__ = _quickfix.delete_Trailer

# Register Trailer in _quickfix:
_quickfix.Trailer_swigregister(Trailer)
class Message(FieldMap):
    r"""Proxy of C++ FIX::Message class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> Message
        __init__(self, hdrOrder, trlOrder, order) -> Message

        Parameters
        ----------
        hdrOrder: message_order const &
        trlOrder: message_order const &
        order: message_order const &

        __init__(self, string, validate=True) -> Message

        Parameters
        ----------
        string: std::string const &
        validate: bool

        __init__(self, string, dataDictionary, validate=True) -> Message

        Parameters
        ----------
        string: std::string const &
        dataDictionary: FIX::DataDictionary const &
        validate: bool

        __init__(self, string, sessionDataDictionary, applicationDataDictionary, validate=True) -> Message

        Parameters
        ----------
        string: std::string const &
        sessionDataDictionary: FIX::DataDictionary const &
        applicationDataDictionary: FIX::DataDictionary const &
        validate: bool

        __init__(self, headerOrder, trailerOrder, order, string, dataDictionary, validate=True) -> Message

        Parameters
        ----------
        headerOrder: message_order const &
        trailerOrder: message_order const &
        order: message_order const &
        string: std::string const &
        dataDictionary: FIX::DataDictionary const &
        validate: bool

        __init__(self, headerOrder, trailerOrder, order, string, sessionDataDictionary, applicationDataDictionary, validate=True) -> Message

        Parameters
        ----------
        headerOrder: message_order const &
        trailerOrder: message_order const &
        order: message_order const &
        string: std::string const &
        sessionDataDictionary: FIX::DataDictionary const &
        applicationDataDictionary: FIX::DataDictionary const &
        validate: bool

        __init__(self, arg2) -> Message

        Parameters
        ----------
        arg2: FIX::Message const &

        __init__(self, arg2) -> Message

        Parameters
        ----------
        arg2: FIX::Message &&

        """
        _quickfix.Message_swiginit(self, _quickfix.new_Message(*args))
    __swig_destroy__ = _quickfix.delete_Message

    @staticmethod
    def InitializeXML(string):
        r"""
        InitializeXML(string) -> bool

        Parameters
        ----------
        string: std::string const &

        """
        return _quickfix.Message_InitializeXML(string)
    InitializeXML = _swig_new_static_method(_quickfix.Message_InitializeXML)

    def addGroup(self, group):
        r"""
        addGroup(self, group)

        Parameters
        ----------
        group: FIX::Group const &

        """
        return _quickfix.Message_addGroup(self, group)
    addGroup = _swig_new_instance_method(_quickfix.Message_addGroup)

    def replaceGroup(self, num, group):
        r"""
        replaceGroup(self, num, group)

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        """
        return _quickfix.Message_replaceGroup(self, num, group)
    replaceGroup = _swig_new_instance_method(_quickfix.Message_replaceGroup)

    def getGroup(self, num, group):
        r"""
        getGroup(self, num, group) -> Group &

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group &

        """
        return _quickfix.Message_getGroup(self, num, group)
    getGroup = _swig_new_instance_method(_quickfix.Message_getGroup)

    def removeGroup(self, *args):
        r"""
        removeGroup(self, num, group)

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        removeGroup(self, group)

        Parameters
        ----------
        group: FIX::Group const &

        """
        return _quickfix.Message_removeGroup(self, *args)
    removeGroup = _swig_new_instance_method(_quickfix.Message_removeGroup)

    def hasGroup(self, *args):
        r"""
        hasGroup(self, group) -> bool

        Parameters
        ----------
        group: FIX::Group const &

        hasGroup(self, num, group) -> bool

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        """
        return _quickfix.Message_hasGroup(self, *args)
    hasGroup = _swig_new_instance_method(_quickfix.Message_hasGroup)

    def toString(self, *args):
        r"""
        toString(self, beginStringField=FIELD::BeginString, bodyLengthField=FIELD::BodyLength, checkSumField=FIELD::CheckSum) -> std::string

        Parameters
        ----------
        beginStringField: int
        bodyLengthField: int
        checkSumField: int

        toString(self, arg2, beginStringField=FIELD::BeginString, bodyLengthField=FIELD::BodyLength, checkSumField=FIELD::CheckSum) -> std::string

        Parameters
        ----------
        arg2: std::string &
        beginStringField: int
        bodyLengthField: int
        checkSumField: int

        """
        return _quickfix.Message_toString(self, *args)
    toString = _swig_new_instance_method(_quickfix.Message_toString)

    def toXML(self, *args):
        r"""
        toXML(self) -> std::string
        toXML(self, arg2) -> std::string &

        Parameters
        ----------
        arg2: std::string &

        """
        return _quickfix.Message_toXML(self, *args)
    toXML = _swig_new_instance_method(_quickfix.Message_toXML)

    def reverseRoute(self, arg2):
        r"""
        reverseRoute(self, arg2)

        Parameters
        ----------
        arg2: FIX::Header const &

        """
        return _quickfix.Message_reverseRoute(self, arg2)
    reverseRoute = _swig_new_instance_method(_quickfix.Message_reverseRoute)

    def setString(self, *args):
        r"""
        setString(self, string)

        Parameters
        ----------
        string: std::string const &

        setString(self, string, validate)

        Parameters
        ----------
        string: std::string const &
        validate: bool

        setString(self, string, validate, pDataDictionary)

        Parameters
        ----------
        string: std::string const &
        validate: bool
        pDataDictionary: FIX::DataDictionary const *

        setString(self, string, validate, pSessionDataDictionary, pApplicationDataDictionary)

        Parameters
        ----------
        string: std::string const &
        validate: bool
        pSessionDataDictionary: FIX::DataDictionary const *
        pApplicationDataDictionary: FIX::DataDictionary const *

        """
        return _quickfix.Message_setString(self, *args)
    setString = _swig_new_instance_method(_quickfix.Message_setString)

    def setGroup(self, msg, field, string, pos, map, dataDictionary):
        r"""
        setGroup(self, msg, field, string, pos, map, dataDictionary)

        Parameters
        ----------
        msg: std::string const &
        field: FIX::FieldBase const &
        string: std::string const &
        pos: std::string::size_type &
        map: FIX::FieldMap &
        dataDictionary: DataDictionary const &

        """
        return _quickfix.Message_setGroup(self, msg, field, string, pos, map, dataDictionary)
    setGroup = _swig_new_instance_method(_quickfix.Message_setGroup)

    def setStringHeader(self, string):
        r"""
        setStringHeader(self, string) -> bool

        Parameters
        ----------
        string: std::string const &

        """
        return _quickfix.Message_setStringHeader(self, string)
    setStringHeader = _swig_new_instance_method(_quickfix.Message_setStringHeader)

    def getHeader(self, *args):
        r"""
        getHeader(self) -> Header
        getHeader(self) -> Header
        """
        return _quickfix.Message_getHeader(self, *args)
    getHeader = _swig_new_instance_method(_quickfix.Message_getHeader)

    def getTrailer(self, *args):
        r"""
        getTrailer(self) -> Trailer
        getTrailer(self) -> Trailer
        """
        return _quickfix.Message_getTrailer(self, *args)
    getTrailer = _swig_new_instance_method(_quickfix.Message_getTrailer)

    def hasValidStructure(self, tag):
        r"""
        hasValidStructure(self, tag) -> bool

        Parameters
        ----------
        tag: int &

        """
        return _quickfix.Message_hasValidStructure(self, tag)
    hasValidStructure = _swig_new_instance_method(_quickfix.Message_hasValidStructure)

    def bodyLength(self, *args):
        r"""
        bodyLength(self, beginStringField=FIELD::BeginString, bodyLengthField=FIELD::BodyLength, checkSumField=FIELD::CheckSum) -> int

        Parameters
        ----------
        beginStringField: int
        bodyLengthField: int
        checkSumField: int

        """
        return _quickfix.Message_bodyLength(self, *args)
    bodyLength = _swig_new_instance_method(_quickfix.Message_bodyLength)

    def checkSum(self, *args):
        r"""
        checkSum(self, checkSumField=FIELD::CheckSum) -> int

        Parameters
        ----------
        checkSumField: int

        """
        return _quickfix.Message_checkSum(self, *args)
    checkSum = _swig_new_instance_method(_quickfix.Message_checkSum)

    def isAdmin(self):
        r"""isAdmin(self) -> bool"""
        return _quickfix.Message_isAdmin(self)
    isAdmin = _swig_new_instance_method(_quickfix.Message_isAdmin)

    def isApp(self):
        r"""isApp(self) -> bool"""
        return _quickfix.Message_isApp(self)
    isApp = _swig_new_instance_method(_quickfix.Message_isApp)

    def isEmpty(self):
        r"""isEmpty(self) -> bool"""
        return _quickfix.Message_isEmpty(self)
    isEmpty = _swig_new_instance_method(_quickfix.Message_isEmpty)

    def clear(self):
        r"""clear(self)"""
        return _quickfix.Message_clear(self)
    clear = _swig_new_instance_method(_quickfix.Message_clear)

    @staticmethod
    def isAdminMsgType(msgType):
        r"""
        isAdminMsgType(msgType) -> bool

        Parameters
        ----------
        msgType: MsgType const &

        """
        return _quickfix.Message_isAdminMsgType(msgType)
    isAdminMsgType = _swig_new_static_method(_quickfix.Message_isAdminMsgType)

    @staticmethod
    def toApplVerID(value):
        r"""
        toApplVerID(value) -> ApplVerID

        Parameters
        ----------
        value: BeginString const &

        """
        return _quickfix.Message_toApplVerID(value)
    toApplVerID = _swig_new_static_method(_quickfix.Message_toApplVerID)

    @staticmethod
    def toBeginString(applVerID):
        r"""
        toBeginString(applVerID) -> BeginString

        Parameters
        ----------
        applVerID: ApplVerID const &

        """
        return _quickfix.Message_toBeginString(applVerID)
    toBeginString = _swig_new_static_method(_quickfix.Message_toBeginString)

    @staticmethod
    def isHeaderField(*args):
        r"""
        isHeaderField(field) -> bool

        Parameters
        ----------
        field: int

        isHeaderField(field, pD=None) -> bool

        Parameters
        ----------
        field: FIX::FieldBase const &
        pD: DataDictionary const *

        isHeaderField(field, pD) -> bool

        Parameters
        ----------
        field: int
        pD: DataDictionary const *

        """
        return _quickfix.Message_isHeaderField(*args)
    isHeaderField = _swig_new_static_method(_quickfix.Message_isHeaderField)

    @staticmethod
    def isTrailerField(*args):
        r"""
        isTrailerField(field) -> bool

        Parameters
        ----------
        field: int

        isTrailerField(field, pD=None) -> bool

        Parameters
        ----------
        field: FIX::FieldBase const &
        pD: DataDictionary const *

        isTrailerField(field, pD) -> bool

        Parameters
        ----------
        field: int
        pD: DataDictionary const *

        """
        return _quickfix.Message_isTrailerField(*args)
    isTrailerField = _swig_new_static_method(_quickfix.Message_isTrailerField)

    def getSessionID(self, *args):
        r"""
        getSessionID(self, qualifier="") -> SessionID

        Parameters
        ----------
        qualifier: std::string const &

        """
        return _quickfix.Message_getSessionID(self, *args)
    getSessionID = _swig_new_instance_method(_quickfix.Message_getSessionID)

    def setSessionID(self, sessionID):
        r"""
        setSessionID(self, sessionID)

        Parameters
        ----------
        sessionID: SessionID const &

        """
        return _quickfix.Message_setSessionID(self, sessionID)
    setSessionID = _swig_new_instance_method(_quickfix.Message_setSessionID)

    def __str__(self):
        r"""__str__(self) -> std::string"""
        return _quickfix.Message___str__(self)
    __str__ = _swig_new_instance_method(_quickfix.Message___str__)

# Register Message in _quickfix:
_quickfix.Message_swigregister(Message)

def identifyType(message):
    r"""
    identifyType(message) -> MsgType

    Parameters
    ----------
    message: std::string const &

    """
    return _quickfix.identifyType(message)
identifyType = _quickfix.identifyType
class Group(FieldMap):
    r"""Proxy of C++ FIX::Group class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, field, delim) -> Group

        Parameters
        ----------
        field: int
        delim: int

        __init__(self, field, delim, order) -> Group

        Parameters
        ----------
        field: int
        delim: int
        order: int const []

        __init__(self, field, delim, order) -> Group

        Parameters
        ----------
        field: int
        delim: int
        order: message_order const &

        __init__(self, copy) -> Group

        Parameters
        ----------
        copy: FIX::Group const &

        """
        _quickfix.Group_swiginit(self, _quickfix.new_Group(*args))

    def field(self):
        r"""field(self) -> int"""
        return _quickfix.Group_field(self)
    field = _swig_new_instance_method(_quickfix.Group_field)

    def delim(self):
        r"""delim(self) -> int"""
        return _quickfix.Group_delim(self)
    delim = _swig_new_instance_method(_quickfix.Group_delim)

    def addGroup(self, group):
        r"""
        addGroup(self, group)

        Parameters
        ----------
        group: FIX::Group const &

        """
        return _quickfix.Group_addGroup(self, group)
    addGroup = _swig_new_instance_method(_quickfix.Group_addGroup)

    def replaceGroup(self, num, group):
        r"""
        replaceGroup(self, num, group)

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        """
        return _quickfix.Group_replaceGroup(self, num, group)
    replaceGroup = _swig_new_instance_method(_quickfix.Group_replaceGroup)

    def getGroup(self, num, group):
        r"""
        getGroup(self, num, group) -> Group

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group &

        """
        return _quickfix.Group_getGroup(self, num, group)
    getGroup = _swig_new_instance_method(_quickfix.Group_getGroup)

    def removeGroup(self, *args):
        r"""
        removeGroup(self, num, group)

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        removeGroup(self, group)

        Parameters
        ----------
        group: FIX::Group const &

        """
        return _quickfix.Group_removeGroup(self, *args)
    removeGroup = _swig_new_instance_method(_quickfix.Group_removeGroup)

    def hasGroup(self, *args):
        r"""
        hasGroup(self, group) -> bool

        Parameters
        ----------
        group: FIX::Group const &

        hasGroup(self, num, group) -> bool

        Parameters
        ----------
        num: unsigned int
        group: FIX::Group const &

        """
        return _quickfix.Group_hasGroup(self, *args)
    hasGroup = _swig_new_instance_method(_quickfix.Group_hasGroup)
    __swig_destroy__ = _quickfix.delete_Group

# Register Group in _quickfix:
_quickfix.Group_swigregister(Group)
class BeginString(StringField):
    r"""Proxy of C++ FIX::BeginString class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tag = _quickfix.BeginString_tag
    

    def __init__(self, *args):
        r"""
        __init__(self) -> BeginString
        __init__(self, value) -> BeginString

        Parameters
        ----------
        value: FIX::STRING const &

        """
        _quickfix.BeginString_swiginit(self, _quickfix.new_BeginString(*args))
    __swig_destroy__ = _quickfix.delete_BeginString

# Register BeginString in _quickfix:
_quickfix.BeginString_swigregister(BeginString)
class SenderCompID(StringField):
    r"""Proxy of C++ FIX::SenderCompID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tag = _quickfix.SenderCompID_tag
    

    def __init__(self, *args):
        r"""
        __init__(self) -> SenderCompID
        __init__(self, value) -> SenderCompID

        Parameters
        ----------
        value: FIX::STRING const &

        """
        _quickfix.SenderCompID_swiginit(self, _quickfix.new_SenderCompID(*args))
    __swig_destroy__ = _quickfix.delete_SenderCompID

# Register SenderCompID in _quickfix:
_quickfix.SenderCompID_swigregister(SenderCompID)
class TargetCompID(StringField):
    r"""Proxy of C++ FIX::TargetCompID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tag = _quickfix.TargetCompID_tag
    

    def __init__(self, *args):
        r"""
        __init__(self) -> TargetCompID
        __init__(self, value) -> TargetCompID

        Parameters
        ----------
        value: FIX::STRING const &

        """
        _quickfix.TargetCompID_swiginit(self, _quickfix.new_TargetCompID(*args))
    __swig_destroy__ = _quickfix.delete_TargetCompID

# Register TargetCompID in _quickfix:
_quickfix.TargetCompID_swigregister(TargetCompID)
class SessionID(object):
    r"""Proxy of C++ FIX::SessionID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> SessionID
        __init__(self, beginString, senderCompID, targetCompID, sessionQualifier="") -> SessionID

        Parameters
        ----------
        beginString: std::string const &
        senderCompID: std::string const &
        targetCompID: std::string const &
        sessionQualifier: std::string const &

        """
        _quickfix.SessionID_swiginit(self, _quickfix.new_SessionID(*args))

    def getBeginString(self):
        r"""getBeginString(self) -> BeginString"""
        return _quickfix.SessionID_getBeginString(self)
    getBeginString = _swig_new_instance_method(_quickfix.SessionID_getBeginString)

    def getSenderCompID(self):
        r"""getSenderCompID(self) -> SenderCompID"""
        return _quickfix.SessionID_getSenderCompID(self)
    getSenderCompID = _swig_new_instance_method(_quickfix.SessionID_getSenderCompID)

    def getTargetCompID(self):
        r"""getTargetCompID(self) -> TargetCompID"""
        return _quickfix.SessionID_getTargetCompID(self)
    getTargetCompID = _swig_new_instance_method(_quickfix.SessionID_getTargetCompID)

    def getSessionQualifier(self):
        r"""getSessionQualifier(self) -> std::string const &"""
        return _quickfix.SessionID_getSessionQualifier(self)
    getSessionQualifier = _swig_new_instance_method(_quickfix.SessionID_getSessionQualifier)

    def isFIXT(self):
        r"""isFIXT(self) -> bool const"""
        return _quickfix.SessionID_isFIXT(self)
    isFIXT = _swig_new_instance_method(_quickfix.SessionID_isFIXT)

    def toStringFrozen(self):
        r"""toStringFrozen(self) -> std::string const &"""
        return _quickfix.SessionID_toStringFrozen(self)
    toStringFrozen = _swig_new_instance_method(_quickfix.SessionID_toStringFrozen)

    def fromString(self, str):
        r"""
        fromString(self, str)

        Parameters
        ----------
        str: std::string const &

        """
        return _quickfix.SessionID_fromString(self, str)
    fromString = _swig_new_instance_method(_quickfix.SessionID_fromString)

    def toString(self, *args):
        r"""
        toString(self) -> std::string
        toString(self, str) -> std::string &

        Parameters
        ----------
        str: std::string &

        """
        return _quickfix.SessionID_toString(self, *args)
    toString = _swig_new_instance_method(_quickfix.SessionID_toString)

    def __invert__(self):
        r"""__invert__(self) -> SessionID"""
        return _quickfix.SessionID___invert__(self)
    __invert__ = _swig_new_instance_method(_quickfix.SessionID___invert__)

    def __str__(self):
        r"""__str__(self) -> std::string"""
        return _quickfix.SessionID___str__(self)
    __str__ = _swig_new_instance_method(_quickfix.SessionID___str__)
    __swig_destroy__ = _quickfix.delete_SessionID

# Register SessionID in _quickfix:
_quickfix.SessionID_swigregister(SessionID)
BeginString_FIXT11 = cvar.BeginString_FIXT11
BeginString_FIX50 = cvar.BeginString_FIX50
BeginString_FIX44 = cvar.BeginString_FIX44
BeginString_FIX43 = cvar.BeginString_FIX43
BeginString_FIX42 = cvar.BeginString_FIX42
BeginString_FIX41 = cvar.BeginString_FIX41
BeginString_FIX40 = cvar.BeginString_FIX40
SessionRejectReason_INVALID_TAG_NUMBER_TEXT = cvar.SessionRejectReason_INVALID_TAG_NUMBER_TEXT
SessionRejectReason_REQUIRED_TAG_MISSING_TEXT = cvar.SessionRejectReason_REQUIRED_TAG_MISSING_TEXT
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT
SessionRejectReason_UNDEFINED_TAG_TEXT = cvar.SessionRejectReason_UNDEFINED_TAG_TEXT
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT
SessionRejectReason_VALUE_IS_INCORRECT_TEXT = cvar.SessionRejectReason_VALUE_IS_INCORRECT_TEXT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT
SessionRejectReason_DECRYPTION_PROBLEM_TEXT = cvar.SessionRejectReason_DECRYPTION_PROBLEM_TEXT
SessionRejectReason_SIGNATURE_PROBLEM_TEXT = cvar.SessionRejectReason_SIGNATURE_PROBLEM_TEXT
SessionRejectReason_COMPID_PROBLEM_TEXT = cvar.SessionRejectReason_COMPID_PROBLEM_TEXT
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT
SessionRejectReason_INVALID_MSGTYPE_TEXT = cvar.SessionRejectReason_INVALID_MSGTYPE_TEXT
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT
BusinessRejectReason_OTHER_TEXT = cvar.BusinessRejectReason_OTHER_TEXT
BusinessRejectReason_UNKNOWN_ID_TEXT = cvar.BusinessRejectReason_UNKNOWN_ID_TEXT
BusinessRejectReason_UNKNOWN_SECURITY_TEXT = cvar.BusinessRejectReason_UNKNOWN_SECURITY_TEXT
BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT = cvar.BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT
BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT = cvar.BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT
BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT = cvar.BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT
BusinessRejectReason_NOT_AUTHORIZED_TEXT = cvar.BusinessRejectReason_NOT_AUTHORIZED_TEXT
BusinessRejectReason_DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT = cvar.BusinessRejectReason_DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT
MsgType_Heartbeat = cvar.MsgType_Heartbeat
MsgType_TestRequest = cvar.MsgType_TestRequest
MsgType_ResendRequest = cvar.MsgType_ResendRequest
MsgType_Reject = cvar.MsgType_Reject
MsgType_SequenceReset = cvar.MsgType_SequenceReset
MsgType_Logout = cvar.MsgType_Logout
MsgType_Logon = cvar.MsgType_Logon
MsgType_XMLnonFIX = cvar.MsgType_XMLnonFIX
MsgType_IOI = cvar.MsgType_IOI
MsgType_Advertisement = cvar.MsgType_Advertisement
MsgType_ExecutionReport = cvar.MsgType_ExecutionReport
MsgType_OrderCancelReject = cvar.MsgType_OrderCancelReject
MsgType_News = cvar.MsgType_News
MsgType_Email = cvar.MsgType_Email
MsgType_NewOrderSingle = cvar.MsgType_NewOrderSingle
MsgType_NewOrderList = cvar.MsgType_NewOrderList
MsgType_OrderCancelRequest = cvar.MsgType_OrderCancelRequest
MsgType_OrderCancelReplaceRequest = cvar.MsgType_OrderCancelReplaceRequest
MsgType_OrderStatusRequest = cvar.MsgType_OrderStatusRequest
MsgType_Allocation = cvar.MsgType_Allocation
MsgType_ListCancelRequest = cvar.MsgType_ListCancelRequest
MsgType_ListExecute = cvar.MsgType_ListExecute
MsgType_ListStatusRequest = cvar.MsgType_ListStatusRequest
MsgType_ListStatus = cvar.MsgType_ListStatus
MsgType_AllocationInstructionAck = cvar.MsgType_AllocationInstructionAck
MsgType_DontKnowTrade = cvar.MsgType_DontKnowTrade
MsgType_QuoteRequest = cvar.MsgType_QuoteRequest
MsgType_Quote = cvar.MsgType_Quote
MsgType_SettlementInstructions = cvar.MsgType_SettlementInstructions
MsgType_MarketDataRequest = cvar.MsgType_MarketDataRequest
MsgType_MarketDataSnapshotFullRefresh = cvar.MsgType_MarketDataSnapshotFullRefresh
MsgType_MarketDataIncrementalRefresh = cvar.MsgType_MarketDataIncrementalRefresh
MsgType_MarketDataRequestReject = cvar.MsgType_MarketDataRequestReject
MsgType_QuoteCancel = cvar.MsgType_QuoteCancel
MsgType_QuoteStatusRequest = cvar.MsgType_QuoteStatusRequest
MsgType_QuoteAcknowledgement = cvar.MsgType_QuoteAcknowledgement
MsgType_SecurityDefinitionRequest = cvar.MsgType_SecurityDefinitionRequest
MsgType_SecurityDefinition = cvar.MsgType_SecurityDefinition
MsgType_SecurityStatusRequest = cvar.MsgType_SecurityStatusRequest
MsgType_SecurityStatus = cvar.MsgType_SecurityStatus
MsgType_TradingSessionStatusRequest = cvar.MsgType_TradingSessionStatusRequest
MsgType_TradingSessionStatus = cvar.MsgType_TradingSessionStatus
MsgType_MassQuote = cvar.MsgType_MassQuote
MsgType_BusinessMessageReject = cvar.MsgType_BusinessMessageReject
MsgType_BidRequest = cvar.MsgType_BidRequest
MsgType_BidResponse = cvar.MsgType_BidResponse
MsgType_ListStrikePrice = cvar.MsgType_ListStrikePrice
MsgType_AllocationAck = cvar.MsgType_AllocationAck
MsgType_MassQuoteAcknowledgement = cvar.MsgType_MassQuoteAcknowledgement
MsgType_RegistrationInstructions = cvar.MsgType_RegistrationInstructions
MsgType_RegistrationInstructionsResponse = cvar.MsgType_RegistrationInstructionsResponse
MsgType_OrderMassCancelRequest = cvar.MsgType_OrderMassCancelRequest
MsgType_OrderMassCancelReport = cvar.MsgType_OrderMassCancelReport
MsgType_NewOrderCross = cvar.MsgType_NewOrderCross
MsgType_CrossOrderCancelReplaceRequest = cvar.MsgType_CrossOrderCancelReplaceRequest
MsgType_CrossOrderCancelRequest = cvar.MsgType_CrossOrderCancelRequest
MsgType_SecurityTypeRequest = cvar.MsgType_SecurityTypeRequest
MsgType_SecurityTypes = cvar.MsgType_SecurityTypes
MsgType_SecurityListRequest = cvar.MsgType_SecurityListRequest
MsgType_SecurityList = cvar.MsgType_SecurityList
MsgType_DerivativeSecurityListRequest = cvar.MsgType_DerivativeSecurityListRequest
MsgType_DerivativeSecurityList = cvar.MsgType_DerivativeSecurityList
MsgType_NewOrderMultileg = cvar.MsgType_NewOrderMultileg
MsgType_MultilegOrderCancelReplaceRequest = cvar.MsgType_MultilegOrderCancelReplaceRequest
MsgType_TradeCaptureReportRequest = cvar.MsgType_TradeCaptureReportRequest
MsgType_TradeCaptureReport = cvar.MsgType_TradeCaptureReport
MsgType_OrderMassStatusRequest = cvar.MsgType_OrderMassStatusRequest
MsgType_QuoteRequestReject = cvar.MsgType_QuoteRequestReject
MsgType_RFQRequest = cvar.MsgType_RFQRequest
MsgType_QuoteStatusReport = cvar.MsgType_QuoteStatusReport
MsgType_AllocationInstruction = cvar.MsgType_AllocationInstruction
MsgType_MultilegOrderCancelReplace = cvar.MsgType_MultilegOrderCancelReplace
MsgType_QuoteResponse = cvar.MsgType_QuoteResponse
MsgType_Confirmation = cvar.MsgType_Confirmation
MsgType_PositionMaintenanceRequest = cvar.MsgType_PositionMaintenanceRequest
MsgType_PositionMaintenanceReport = cvar.MsgType_PositionMaintenanceReport
MsgType_RequestForPositions = cvar.MsgType_RequestForPositions
MsgType_RequestForPositionsAck = cvar.MsgType_RequestForPositionsAck
MsgType_PositionReport = cvar.MsgType_PositionReport
MsgType_TradeCaptureReportRequestAck = cvar.MsgType_TradeCaptureReportRequestAck
MsgType_TradeCaptureReportAck = cvar.MsgType_TradeCaptureReportAck
MsgType_AllocationReport = cvar.MsgType_AllocationReport
MsgType_AllocationReportAck = cvar.MsgType_AllocationReportAck
MsgType_ConfirmationAck = cvar.MsgType_ConfirmationAck
MsgType_SettlementInstructionRequest = cvar.MsgType_SettlementInstructionRequest
MsgType_AssignmentReport = cvar.MsgType_AssignmentReport
MsgType_CollateralRequest = cvar.MsgType_CollateralRequest
MsgType_CollateralAssignment = cvar.MsgType_CollateralAssignment
MsgType_CollateralResponse = cvar.MsgType_CollateralResponse
MsgType_CollateralReport = cvar.MsgType_CollateralReport
MsgType_CollateralInquiry = cvar.MsgType_CollateralInquiry
MsgType_NetworkCounterpartySystemStatusRequest = cvar.MsgType_NetworkCounterpartySystemStatusRequest
MsgType_NetworkCounterpartySystemStatusResponse = cvar.MsgType_NetworkCounterpartySystemStatusResponse
MsgType_UserRequest = cvar.MsgType_UserRequest
MsgType_UserResponse = cvar.MsgType_UserResponse
MsgType_CollateralInquiryAck = cvar.MsgType_CollateralInquiryAck
MsgType_ConfirmationRequest = cvar.MsgType_ConfirmationRequest
MsgType_ContraryIntentionReport = cvar.MsgType_ContraryIntentionReport
MsgType_SecurityDefinitionUpdateReport = cvar.MsgType_SecurityDefinitionUpdateReport
MsgType_SecurityListUpdateReport = cvar.MsgType_SecurityListUpdateReport
MsgType_AdjustedPositionReport = cvar.MsgType_AdjustedPositionReport
MsgType_AllocationInstructionAlert = cvar.MsgType_AllocationInstructionAlert
MsgType_ExecutionAcknowledgement = cvar.MsgType_ExecutionAcknowledgement
MsgType_TradingSessionList = cvar.MsgType_TradingSessionList
MsgType_TradingSessionListRequest = cvar.MsgType_TradingSessionListRequest
MsgType_SettlementObligationReport = cvar.MsgType_SettlementObligationReport
MsgType_DerivativeSecurityListUpdateReport = cvar.MsgType_DerivativeSecurityListUpdateReport
MsgType_TradingSessionListUpdateReport = cvar.MsgType_TradingSessionListUpdateReport
MsgType_MarketDefinitionRequest = cvar.MsgType_MarketDefinitionRequest
MsgType_MarketDefinition = cvar.MsgType_MarketDefinition
MsgType_MarketDefinitionUpdateReport = cvar.MsgType_MarketDefinitionUpdateReport
MsgType_UserNotification = cvar.MsgType_UserNotification
MsgType_OrderMassActionReport = cvar.MsgType_OrderMassActionReport
MsgType_OrderMassActionRequest = cvar.MsgType_OrderMassActionRequest
MsgType_ApplicationMessageRequest = cvar.MsgType_ApplicationMessageRequest
MsgType_ApplicationMessageRequestAck = cvar.MsgType_ApplicationMessageRequestAck
MsgType_ApplicationMessageReport = cvar.MsgType_ApplicationMessageReport
MsgType_MassQuoteAck = cvar.MsgType_MassQuoteAck
MsgType_ExecutionAck = cvar.MsgType_ExecutionAck
MsgType_StreamAssignmentRequest = cvar.MsgType_StreamAssignmentRequest
MsgType_StreamAssignmentReport = cvar.MsgType_StreamAssignmentReport
MsgType_StreamAssignmentReportACK = cvar.MsgType_StreamAssignmentReportACK
MsgType_MarginRequirementInquiry = cvar.MsgType_MarginRequirementInquiry
MsgType_MarginRequirementInquiryAck = cvar.MsgType_MarginRequirementInquiryAck
MsgType_MarginRequirementReport = cvar.MsgType_MarginRequirementReport
MsgType_PartyDetailsListRequest = cvar.MsgType_PartyDetailsListRequest
MsgType_PartyDetailsListReport = cvar.MsgType_PartyDetailsListReport
MsgType_PartyDetailsListUpdateReport = cvar.MsgType_PartyDetailsListUpdateReport
MsgType_PartyRiskLimitsRequest = cvar.MsgType_PartyRiskLimitsRequest
MsgType_PartyRiskLimitsReport = cvar.MsgType_PartyRiskLimitsReport
MsgType_SecurityMassStatusRequest = cvar.MsgType_SecurityMassStatusRequest
MsgType_SecurityMassStatus = cvar.MsgType_SecurityMassStatus
MsgType_AccountSummaryReport = cvar.MsgType_AccountSummaryReport
MsgType_PartyRiskLimitsUpdateReport = cvar.MsgType_PartyRiskLimitsUpdateReport
MsgType_PartyRiskLimitsDefinitionRequest = cvar.MsgType_PartyRiskLimitsDefinitionRequest
MsgType_PartyRiskLimitsDefinitionRequestAck = cvar.MsgType_PartyRiskLimitsDefinitionRequestAck
MsgType_PartyEntitlementsRequest = cvar.MsgType_PartyEntitlementsRequest
MsgType_PartyEntitlementsReport = cvar.MsgType_PartyEntitlementsReport
MsgType_QuoteAck = cvar.MsgType_QuoteAck
MsgType_PartyDetailsDefinitionRequest = cvar.MsgType_PartyDetailsDefinitionRequest
MsgType_PartyDetailsDefinitionRequestAck = cvar.MsgType_PartyDetailsDefinitionRequestAck
MsgType_PartyEntitlementsUpdateReport = cvar.MsgType_PartyEntitlementsUpdateReport
MsgType_PartyEntitlementsDefinitionRequest = cvar.MsgType_PartyEntitlementsDefinitionRequest
MsgType_PartyEntitlementsDefinitionRequestAck = cvar.MsgType_PartyEntitlementsDefinitionRequestAck
MsgType_TradeMatchReport = cvar.MsgType_TradeMatchReport
MsgType_TradeMatchReportAck = cvar.MsgType_TradeMatchReportAck
MsgType_PartyRiskLimitsReportAck = cvar.MsgType_PartyRiskLimitsReportAck
MsgType_PartyRiskLimitCheckRequest = cvar.MsgType_PartyRiskLimitCheckRequest
MsgType_PartyRiskLimitCheckRequestAck = cvar.MsgType_PartyRiskLimitCheckRequestAck
MsgType_PartyActionRequest = cvar.MsgType_PartyActionRequest
MsgType_PartyActionReport = cvar.MsgType_PartyActionReport
MsgType_MassOrder = cvar.MsgType_MassOrder
MsgType_MassOrderAck = cvar.MsgType_MassOrderAck
MsgType_PositionTransferInstruction = cvar.MsgType_PositionTransferInstruction
MsgType_PositionTransferInstructionAck = cvar.MsgType_PositionTransferInstructionAck
MsgType_PositionTransferReport = cvar.MsgType_PositionTransferReport
MsgType_MarketDataStatisticsRequest = cvar.MsgType_MarketDataStatisticsRequest
MsgType_MarketDataStatisticsReport = cvar.MsgType_MarketDataStatisticsReport
MsgType_CollateralReportAck = cvar.MsgType_CollateralReportAck
MsgType_MarketDataReport = cvar.MsgType_MarketDataReport
MsgType_CrossRequest = cvar.MsgType_CrossRequest
MsgType_CrossRequestAck = cvar.MsgType_CrossRequestAck
MsgType_AllocationInstructionAlertRequest = cvar.MsgType_AllocationInstructionAlertRequest
MsgType_AllocationInstructionAlertRequestAck = cvar.MsgType_AllocationInstructionAlertRequestAck
MsgType_TradeAggregationRequest = cvar.MsgType_TradeAggregationRequest
MsgType_TradeAggregationReport = cvar.MsgType_TradeAggregationReport
MsgType_PayManagementReport = cvar.MsgType_PayManagementReport
MsgType_PayManagementReportAck = cvar.MsgType_PayManagementReportAck
MsgType_PayManagementRequest = cvar.MsgType_PayManagementRequest
MsgType_PayManagementRequestAck = cvar.MsgType_PayManagementRequestAck
PossDupFlag_NO = cvar.PossDupFlag_NO
PossDupFlag_YES = cvar.PossDupFlag_YES
PossResend_NO = cvar.PossResend_NO
PossResend_YES = cvar.PossResend_YES
EncryptMethod_NONE_OTHER = cvar.EncryptMethod_NONE_OTHER
EncryptMethod_PKCS = cvar.EncryptMethod_PKCS
EncryptMethod_DES = cvar.EncryptMethod_DES
EncryptMethod_PKCSDES = cvar.EncryptMethod_PKCSDES
EncryptMethod_PGPDES = cvar.EncryptMethod_PGPDES
EncryptMethod_PGPDESMD5 = cvar.EncryptMethod_PGPDESMD5
EncryptMethod_PEMDESMD5 = cvar.EncryptMethod_PEMDESMD5
EncryptMethod_NONE = cvar.EncryptMethod_NONE
EncryptMethod_PEM = cvar.EncryptMethod_PEM
GapFillFlag_NO = cvar.GapFillFlag_NO
GapFillFlag_YES = cvar.GapFillFlag_YES
ResetSeqNumFlag_NO = cvar.ResetSeqNumFlag_NO
ResetSeqNumFlag_YES = cvar.ResetSeqNumFlag_YES
MessageEncoding_EUCJP = cvar.MessageEncoding_EUCJP
MessageEncoding_ISO2022_JP = cvar.MessageEncoding_ISO2022_JP
MessageEncoding_SHIFT_JIS = cvar.MessageEncoding_SHIFT_JIS
MessageEncoding_UTF8 = cvar.MessageEncoding_UTF8
SessionRejectReason_INVALID_TAG_NUMBER = cvar.SessionRejectReason_INVALID_TAG_NUMBER
SessionRejectReason_REQUIRED_TAG_MISSING = cvar.SessionRejectReason_REQUIRED_TAG_MISSING
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE
SessionRejectReason_UNDEFINED_TAG = cvar.SessionRejectReason_UNDEFINED_TAG
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE
SessionRejectReason_VALUE_IS_INCORRECT = cvar.SessionRejectReason_VALUE_IS_INCORRECT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE
SessionRejectReason_DECRYPTION_PROBLEM = cvar.SessionRejectReason_DECRYPTION_PROBLEM
SessionRejectReason_SIGNATURE_PROBLEM = cvar.SessionRejectReason_SIGNATURE_PROBLEM
SessionRejectReason_COMPID_PROBLEM = cvar.SessionRejectReason_COMPID_PROBLEM
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM
SessionRejectReason_INVALID_MSGTYPE = cvar.SessionRejectReason_INVALID_MSGTYPE
SessionRejectReason_XML_VALIDATION_ERROR = cvar.SessionRejectReason_XML_VALIDATION_ERROR
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER
SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER = cvar.SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP
SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER = cvar.SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER
SessionRejectReason_INVALID_UNSUPPORTED_APPLICATION_VERSION = cvar.SessionRejectReason_INVALID_UNSUPPORTED_APPLICATION_VERSION
SessionRejectReason_OTHER = cvar.SessionRejectReason_OTHER
SessionRejectReason_SENDING_TIME_ACCURACY_PROBLEM = cvar.SessionRejectReason_SENDING_TIME_ACCURACY_PROBLEM
SessionRejectReason_INVALID_MSG_TYPE = cvar.SessionRejectReason_INVALID_MSG_TYPE
SessionRejectReason_COMP_ID_PROBLEM = cvar.SessionRejectReason_COMP_ID_PROBLEM
SessionRejectReason_NON = cvar.SessionRejectReason_NON
SessionRejectReason_INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP = cvar.SessionRejectReason_INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP
TestMessageIndicator_NO = cvar.TestMessageIndicator_NO
TestMessageIndicator_YES = cvar.TestMessageIndicator_YES
ApplVerID_FIX27 = cvar.ApplVerID_FIX27
ApplVerID_FIX30 = cvar.ApplVerID_FIX30
ApplVerID_FIX40 = cvar.ApplVerID_FIX40
ApplVerID_FIX41 = cvar.ApplVerID_FIX41
ApplVerID_FIX42 = cvar.ApplVerID_FIX42
ApplVerID_FIX43 = cvar.ApplVerID_FIX43
ApplVerID_FIX44 = cvar.ApplVerID_FIX44
ApplVerID_FIX50 = cvar.ApplVerID_FIX50
ApplVerID_FIX50_SP1 = cvar.ApplVerID_FIX50_SP1
ApplVerID_FIX50_SP2 = cvar.ApplVerID_FIX50_SP2
SessionStatus_SESSION_ACTIVE = cvar.SessionStatus_SESSION_ACTIVE
SessionStatus_SESSION_PASSWORD_CHANGED = cvar.SessionStatus_SESSION_PASSWORD_CHANGED
SessionStatus_SESSION_PASSWORD_DUE_TO_EXPIRE = cvar.SessionStatus_SESSION_PASSWORD_DUE_TO_EXPIRE
SessionStatus_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY = cvar.SessionStatus_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY
SessionStatus_SESSION_LOGOUT_COMPLETE = cvar.SessionStatus_SESSION_LOGOUT_COMPLETE
SessionStatus_INVALID_USERNAME_OR_PASSWORD = cvar.SessionStatus_INVALID_USERNAME_OR_PASSWORD
SessionStatus_ACCOUNT_LOCKED = cvar.SessionStatus_ACCOUNT_LOCKED
SessionStatus_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME = cvar.SessionStatus_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME
SessionStatus_PASSWORD_EXPIRED = cvar.SessionStatus_PASSWORD_EXPIRED
AdvSide_BUY = cvar.AdvSide_BUY
AdvSide_SELL = cvar.AdvSide_SELL
AdvSide_TRADE = cvar.AdvSide_TRADE
AdvSide_CROSS = cvar.AdvSide_CROSS
AdvTransType_CANCEL = cvar.AdvTransType_CANCEL
AdvTransType_NEW = cvar.AdvTransType_NEW
AdvTransType_REPLACE = cvar.AdvTransType_REPLACE
CommType_PER_UNIT = cvar.CommType_PER_UNIT
CommType_PERCENT = cvar.CommType_PERCENT
CommType_ABSOLUTE = cvar.CommType_ABSOLUTE
CommType_POINTS_PER_BOND_OR_CONTRACT = cvar.CommType_POINTS_PER_BOND_OR_CONTRACT
CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS = cvar.CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS
CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT = cvar.CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT
CommType_BASIS_POINTS = cvar.CommType_BASIS_POINTS
CommType_AMOUNT_PER_CONTRACT = cvar.CommType_AMOUNT_PER_CONTRACT
ExecInst_STAY_ON_OFFER_SIDE = cvar.ExecInst_STAY_ON_OFFER_SIDE
ExecInst_NOT_HELD = cvar.ExecInst_NOT_HELD
ExecInst_WORK = cvar.ExecInst_WORK
ExecInst_GO_ALONG = cvar.ExecInst_GO_ALONG
ExecInst_OVER_THE_DAY = cvar.ExecInst_OVER_THE_DAY
ExecInst_HELD = cvar.ExecInst_HELD
ExecInst_PARTICIPATE_DO_NOT_INITIATE = cvar.ExecInst_PARTICIPATE_DO_NOT_INITIATE
ExecInst_STRICT_SCALE = cvar.ExecInst_STRICT_SCALE
ExecInst_TRY_TO_SCALE = cvar.ExecInst_TRY_TO_SCALE
ExecInst_STAY_ON_BID_SIDE = cvar.ExecInst_STAY_ON_BID_SIDE
ExecInst_NO_CROSS = cvar.ExecInst_NO_CROSS
ExecInst_OK_TO_CROSS = cvar.ExecInst_OK_TO_CROSS
ExecInst_CALL_FIRST = cvar.ExecInst_CALL_FIRST
ExecInst_PERCENT_OF_VOLUME = cvar.ExecInst_PERCENT_OF_VOLUME
ExecInst_DO_NOT_INCREASE = cvar.ExecInst_DO_NOT_INCREASE
ExecInst_DO_NOT_REDUCE = cvar.ExecInst_DO_NOT_REDUCE
ExecInst_ALL_OR_NONE = cvar.ExecInst_ALL_OR_NONE
ExecInst_INSTITUTIONS_ONLY = cvar.ExecInst_INSTITUTIONS_ONLY
ExecInst_LAST_PEG = cvar.ExecInst_LAST_PEG
ExecInst_MID_PRICE_PEG = cvar.ExecInst_MID_PRICE_PEG
ExecInst_NON_NEGOTIABLE = cvar.ExecInst_NON_NEGOTIABLE
ExecInst_OPENING_PEG = cvar.ExecInst_OPENING_PEG
ExecInst_MARKET_PEG = cvar.ExecInst_MARKET_PEG
ExecInst_PRIMARY_PEG = cvar.ExecInst_PRIMARY_PEG
ExecInst_SUSPEND = cvar.ExecInst_SUSPEND
ExecInst_CUSTOMER_DISPLAY_INSTRUCTION = cvar.ExecInst_CUSTOMER_DISPLAY_INSTRUCTION
ExecInst_NETTING = cvar.ExecInst_NETTING
ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = cvar.ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER
ExecInst_PEG_TO_VWAP = cvar.ExecInst_PEG_TO_VWAP
ExecInst_TRY_TO_STOP = cvar.ExecInst_TRY_TO_STOP
ExecInst_CANCEL_ON_SYSTEM_FAILURE = cvar.ExecInst_CANCEL_ON_SYSTEM_FAILURE
ExecInst_TRADE_ALONG = cvar.ExecInst_TRADE_ALONG
ExecInst_REINSTATE_ON_SYSTEM_FAILURE = cvar.ExecInst_REINSTATE_ON_SYSTEM_FAILURE
ExecInst_REINSTATE_ON_TRADING_HALT = cvar.ExecInst_REINSTATE_ON_TRADING_HALT
ExecInst_CANCEL_ON_TRADING_HALT = cvar.ExecInst_CANCEL_ON_TRADING_HALT
ExecInst_CANCEL_IF_NOT_BEST = cvar.ExecInst_CANCEL_IF_NOT_BEST
ExecInst_TRAILING_STOP_PEG = cvar.ExecInst_TRAILING_STOP_PEG
ExecInst_STRICT_LIMIT = cvar.ExecInst_STRICT_LIMIT
ExecInst_IGNORE_PRICE_VALIDITY_CHECKS = cvar.ExecInst_IGNORE_PRICE_VALIDITY_CHECKS
ExecInst_PEG_TO_LIMIT_PRICE = cvar.ExecInst_PEG_TO_LIMIT_PRICE
ExecInst_WORK_TO_TARGET_STRATEGY = cvar.ExecInst_WORK_TO_TARGET_STRATEGY
ExecInst_INTERMARKET_SWEEP = cvar.ExecInst_INTERMARKET_SWEEP
ExecInst_EXTERNAL_ROUTING_ALLOWED = cvar.ExecInst_EXTERNAL_ROUTING_ALLOWED
ExecInst_EXTERNAL_ROUTING_NOT_ALLOWED = cvar.ExecInst_EXTERNAL_ROUTING_NOT_ALLOWED
ExecInst_IMBALANCE_ONLY = cvar.ExecInst_IMBALANCE_ONLY
ExecInst_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE = cvar.ExecInst_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE
ExecInst_BEST_EXECUTION = cvar.ExecInst_BEST_EXECUTION
ExecInst_SUSPEND_ON_SYSTEM_FAILURE = cvar.ExecInst_SUSPEND_ON_SYSTEM_FAILURE
ExecInst_SUSPEND_ON_TRADING_HALT = cvar.ExecInst_SUSPEND_ON_TRADING_HALT
ExecInst_REINSTATE_ON_CONNECTION_LOSS = cvar.ExecInst_REINSTATE_ON_CONNECTION_LOSS
ExecInst_CANCEL_ON_CONNECTION_LOSS = cvar.ExecInst_CANCEL_ON_CONNECTION_LOSS
ExecInst_SUSPEND_ON_CONNECTION_LOSS = cvar.ExecInst_SUSPEND_ON_CONNECTION_LOSS
ExecInst_RELEASE_FROM_SUSPENSION = cvar.ExecInst_RELEASE_FROM_SUSPENSION
ExecInst_EXECUTE_AS_DELTA_NEUTRAL = cvar.ExecInst_EXECUTE_AS_DELTA_NEUTRAL
ExecInst_EXECUTE_AS_DURATION_NEUTRAL = cvar.ExecInst_EXECUTE_AS_DURATION_NEUTRAL
ExecInst_EXECUTE_AS_FX_NEUTRAL = cvar.ExecInst_EXECUTE_AS_FX_NEUTRAL
ExecInst_RELEASE = cvar.ExecInst_RELEASE
ExecInst_MIN_GUARANTEED_FILL_ELIGIBLE = cvar.ExecInst_MIN_GUARANTEED_FILL_ELIGIBLE
ExecInst_BYPASS_NON_DISPLAY_LIQUIDITY = cvar.ExecInst_BYPASS_NON_DISPLAY_LIQUIDITY
ExecInst_LOCK = cvar.ExecInst_LOCK
ExecInst_IGNORE_NOTIONAL_VALUE_CHECKS = cvar.ExecInst_IGNORE_NOTIONAL_VALUE_CHECKS
ExecInst_TRD_AT_REF_PX = cvar.ExecInst_TRD_AT_REF_PX
ExecInst_ALLOW_FACILITATION = cvar.ExecInst_ALLOW_FACILITATION
ExecTransType_NEW = cvar.ExecTransType_NEW
ExecTransType_CANCEL = cvar.ExecTransType_CANCEL
ExecTransType_CORRECT = cvar.ExecTransType_CORRECT
ExecTransType_STATUS = cvar.ExecTransType_STATUS
HandlInst_AUTOMATED_EXECUTION_NO_INTERVENTION = cvar.HandlInst_AUTOMATED_EXECUTION_NO_INTERVENTION
HandlInst_AUTOMATED_EXECUTION_INTERVENTION_OK = cvar.HandlInst_AUTOMATED_EXECUTION_INTERVENTION_OK
HandlInst_MANUAL_ORDER = cvar.HandlInst_MANUAL_ORDER
IDSource_CUSIP = cvar.IDSource_CUSIP
IDSource_SEDOL = cvar.IDSource_SEDOL
IDSource_QUIK = cvar.IDSource_QUIK
IDSource_ISIN_NUMBER = cvar.IDSource_ISIN_NUMBER
IDSource_RIC_CODE = cvar.IDSource_RIC_CODE
IDSource_ISO_CURRENCY_CODE = cvar.IDSource_ISO_CURRENCY_CODE
IDSource_ISO_COUNTRY_CODE = cvar.IDSource_ISO_COUNTRY_CODE
IDSource_EXCHANGE_SYMBOL = cvar.IDSource_EXCHANGE_SYMBOL
IDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.IDSource_CONSOLIDATED_TAPE_ASSOCIATION
IOIOthSvc_AUTEX = cvar.IOIOthSvc_AUTEX
IOIOthSvc_BRIDGE = cvar.IOIOthSvc_BRIDGE
IOIQltyInd_HIGH = cvar.IOIQltyInd_HIGH
IOIQltyInd_LOW = cvar.IOIQltyInd_LOW
IOIQltyInd_MEDIUM = cvar.IOIQltyInd_MEDIUM
IOIShares_LARGE = cvar.IOIShares_LARGE
IOIShares_MEDIUM = cvar.IOIShares_MEDIUM
IOIShares_SMALL = cvar.IOIShares_SMALL
IOITransType_CANCEL = cvar.IOITransType_CANCEL
IOITransType_NEW = cvar.IOITransType_NEW
IOITransType_REPLACE = cvar.IOITransType_REPLACE
LastCapacity_AGENT = cvar.LastCapacity_AGENT
LastCapacity_CROSS_AS_AGENT = cvar.LastCapacity_CROSS_AS_AGENT
LastCapacity_CROSS_AS_PRINCIPAL = cvar.LastCapacity_CROSS_AS_PRINCIPAL
LastCapacity_PRINCIPAL = cvar.LastCapacity_PRINCIPAL
LastCapacity_RISKLESS_PRINCIPAL = cvar.LastCapacity_RISKLESS_PRINCIPAL
OrdStatus_NEW = cvar.OrdStatus_NEW
OrdStatus_PARTIALLY_FILLED = cvar.OrdStatus_PARTIALLY_FILLED
OrdStatus_FILLED = cvar.OrdStatus_FILLED
OrdStatus_DONE_FOR_DAY = cvar.OrdStatus_DONE_FOR_DAY
OrdStatus_CANCELED = cvar.OrdStatus_CANCELED
OrdStatus_REPLACED = cvar.OrdStatus_REPLACED
OrdStatus_PENDING_CANCEL = cvar.OrdStatus_PENDING_CANCEL
OrdStatus_STOPPED = cvar.OrdStatus_STOPPED
OrdStatus_REJECTED = cvar.OrdStatus_REJECTED
OrdStatus_SUSPENDED = cvar.OrdStatus_SUSPENDED
OrdStatus_PENDING_NEW = cvar.OrdStatus_PENDING_NEW
OrdStatus_CALCULATED = cvar.OrdStatus_CALCULATED
OrdStatus_EXPIRED = cvar.OrdStatus_EXPIRED
OrdStatus_ACCEPTED_FOR_BIDDING = cvar.OrdStatus_ACCEPTED_FOR_BIDDING
OrdStatus_PENDING_REPLACE = cvar.OrdStatus_PENDING_REPLACE
OrdType_MARKET = cvar.OrdType_MARKET
OrdType_LIMIT = cvar.OrdType_LIMIT
OrdType_STOP = cvar.OrdType_STOP
OrdType_STOP_LIMIT = cvar.OrdType_STOP_LIMIT
OrdType_MARKET_ON_CLOSE = cvar.OrdType_MARKET_ON_CLOSE
OrdType_WITH_OR_WITHOUT = cvar.OrdType_WITH_OR_WITHOUT
OrdType_LIMIT_OR_BETTER = cvar.OrdType_LIMIT_OR_BETTER
OrdType_LIMIT_WITH_OR_WITHOUT = cvar.OrdType_LIMIT_WITH_OR_WITHOUT
OrdType_ON_BASIS = cvar.OrdType_ON_BASIS
OrdType_ON_CLOSE = cvar.OrdType_ON_CLOSE
OrdType_LIMIT_ON_CLOSE = cvar.OrdType_LIMIT_ON_CLOSE
OrdType_FOREX_MARKET = cvar.OrdType_FOREX_MARKET
OrdType_PREVIOUSLY_QUOTED = cvar.OrdType_PREVIOUSLY_QUOTED
OrdType_PREVIOUSLY_INDICATED = cvar.OrdType_PREVIOUSLY_INDICATED
OrdType_PEGGED = cvar.OrdType_PEGGED
OrdType_FOREX_LIMIT = cvar.OrdType_FOREX_LIMIT
OrdType_FOREX_SWAP = cvar.OrdType_FOREX_SWAP
OrdType_FOREX_PREVIOUSLY_QUOTED = cvar.OrdType_FOREX_PREVIOUSLY_QUOTED
OrdType_FUNARI = cvar.OrdType_FUNARI
OrdType_MARKET_IF_TOUCHED = cvar.OrdType_MARKET_IF_TOUCHED
OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT = cvar.OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT
OrdType_PREVIOUS_FUND_VALUATION_POINT = cvar.OrdType_PREVIOUS_FUND_VALUATION_POINT
OrdType_NEXT_FUND_VALUATION_POINT = cvar.OrdType_NEXT_FUND_VALUATION_POINT
OrdType_COUNTER_ORDER_SELECTION = cvar.OrdType_COUNTER_ORDER_SELECTION
OrdType_STOP_ON_BID_OR_OFFER = cvar.OrdType_STOP_ON_BID_OR_OFFER
OrdType_STOP_LIMIT_ON_BID_OR_OFFER = cvar.OrdType_STOP_LIMIT_ON_BID_OR_OFFER
Rule80A_AGENCY_SINGLE_ORDER = cvar.Rule80A_AGENCY_SINGLE_ORDER
Rule80A_PROPRIETARY_NON_ALGO = cvar.Rule80A_PROPRIETARY_NON_ALGO
Rule80A_PROGRAM_ORDER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_MEMBER
Rule80A_INDIVIDUAL_INVESTOR = cvar.Rule80A_INDIVIDUAL_INVESTOR
Rule80A_PROPRIETARY_ALGO = cvar.Rule80A_PROPRIETARY_ALGO
Rule80A_AGENCY_ALGO = cvar.Rule80A_AGENCY_ALGO
Rule80A_PROGRAM_ORDER_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_OTHER_MEMBER
Rule80A_AGENT_FOR_OTHER_MEMBER = cvar.Rule80A_AGENT_FOR_OTHER_MEMBER
Rule80A_AGENCY_INDEX_ARB = cvar.Rule80A_AGENCY_INDEX_ARB
Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER = cvar.Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER
Rule80A_AGENCY_NON_ALGO = cvar.Rule80A_AGENCY_NON_ALGO
Rule80A_SHORT_EXEMPT_TRANSACTION_A_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_A_TYPE
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL
Rule80A_SHORT_EXEMPT_TRANSACTION_W_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_W_TYPE
Rule80A_SHORT_EXEMPT_TRANSACTION_I_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_I_TYPE
Rule80A_SHORT_EXEMPT_TRANSACTION_MEMBER_AFFLIATED = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_MEMBER_AFFLIATED
Rule80A_PROPRIETARY_TRANSACTION_AFFILIATED = cvar.Rule80A_PROPRIETARY_TRANSACTION_AFFILIATED
Rule80A_PRINCIPAL = cvar.Rule80A_PRINCIPAL
Rule80A_TRANSACTION_NON_MEMBER = cvar.Rule80A_TRANSACTION_NON_MEMBER
Rule80A_SPECIALIST_TRADES = cvar.Rule80A_SPECIALIST_TRADES
Rule80A_TRANSACTION_UNAFFILIATED_MEMBER = cvar.Rule80A_TRANSACTION_UNAFFILIATED_MEMBER
Rule80A_SHORT_EXEMPT_TRANSACTION_MEMBER_NOT_AFFLIATED = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_MEMBER_NOT_AFFLIATED
Rule80A_SHORT_EXEMPT_TRANSACTION_NON_MEMBER = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_NON_MEMBER
Side_BUY = cvar.Side_BUY
Side_SELL = cvar.Side_SELL
Side_BUY_MINUS = cvar.Side_BUY_MINUS
Side_SELL_PLUS = cvar.Side_SELL_PLUS
Side_SELL_SHORT = cvar.Side_SELL_SHORT
Side_SELL_SHORT_EXEMPT = cvar.Side_SELL_SHORT_EXEMPT
Side_UNDISCLOSED = cvar.Side_UNDISCLOSED
Side_CROSS = cvar.Side_CROSS
Side_CROSS_SHORT = cvar.Side_CROSS_SHORT
Side_AS_DEFINED = cvar.Side_AS_DEFINED
Side_OPPOSITE = cvar.Side_OPPOSITE
Side_CROSS_SHORT_EXEMPT = cvar.Side_CROSS_SHORT_EXEMPT
Side_SUBSCRIBE = cvar.Side_SUBSCRIBE
Side_REDEEM = cvar.Side_REDEEM
Side_LEND = cvar.Side_LEND
Side_BORROW = cvar.Side_BORROW
Side_SELL_UNDISCLOSED = cvar.Side_SELL_UNDISCLOSED
TimeInForce_DAY = cvar.TimeInForce_DAY
TimeInForce_GOOD_TILL_CANCEL = cvar.TimeInForce_GOOD_TILL_CANCEL
TimeInForce_AT_THE_OPENING = cvar.TimeInForce_AT_THE_OPENING
TimeInForce_IMMEDIATE_OR_CANCEL = cvar.TimeInForce_IMMEDIATE_OR_CANCEL
TimeInForce_FILL_OR_KILL = cvar.TimeInForce_FILL_OR_KILL
TimeInForce_GOOD_TILL_CROSSING = cvar.TimeInForce_GOOD_TILL_CROSSING
TimeInForce_GOOD_TILL_DATE = cvar.TimeInForce_GOOD_TILL_DATE
TimeInForce_AT_THE_CLOSE = cvar.TimeInForce_AT_THE_CLOSE
TimeInForce_GOOD_THROUGH_CROSSING = cvar.TimeInForce_GOOD_THROUGH_CROSSING
TimeInForce_AT_CROSSING = cvar.TimeInForce_AT_CROSSING
TimeInForce_GOOD_FOR_TIME = cvar.TimeInForce_GOOD_FOR_TIME
TimeInForce_GOOD_FOR_AUCTION = cvar.TimeInForce_GOOD_FOR_AUCTION
TimeInForce_GOOD_FOR_MONTH = cvar.TimeInForce_GOOD_FOR_MONTH
Urgency_NORMAL = cvar.Urgency_NORMAL
Urgency_FLASH = cvar.Urgency_FLASH
Urgency_BACKGROUND = cvar.Urgency_BACKGROUND
SettlmntTyp_REGULAR = cvar.SettlmntTyp_REGULAR
SettlmntTyp_CASH = cvar.SettlmntTyp_CASH
SettlmntTyp_NEXT_DAY = cvar.SettlmntTyp_NEXT_DAY
SettlmntTyp_T_PLUS2 = cvar.SettlmntTyp_T_PLUS2
SettlmntTyp_T_PLUS3 = cvar.SettlmntTyp_T_PLUS3
SettlmntTyp_T_PLUS4 = cvar.SettlmntTyp_T_PLUS4
SettlmntTyp_FUTURE = cvar.SettlmntTyp_FUTURE
SettlmntTyp_WHEN_AND_IF_ISSUED = cvar.SettlmntTyp_WHEN_AND_IF_ISSUED
SettlmntTyp_SELLERS_OPTION = cvar.SettlmntTyp_SELLERS_OPTION
SettlmntTyp_T_PLUS5 = cvar.SettlmntTyp_T_PLUS5
SettlmntTyp_T1 = cvar.SettlmntTyp_T1
SymbolSfx_EUCP_WITH_LUMP_SUM_INTEREST = cvar.SymbolSfx_EUCP_WITH_LUMP_SUM_INTEREST
SymbolSfx_WHEN_ISSUED = cvar.SymbolSfx_WHEN_ISSUED
AllocTransType_NEW = cvar.AllocTransType_NEW
AllocTransType_REPLACE = cvar.AllocTransType_REPLACE
AllocTransType_CANCEL = cvar.AllocTransType_CANCEL
AllocTransType_PRELIMINARY = cvar.AllocTransType_PRELIMINARY
AllocTransType_CALCULATED = cvar.AllocTransType_CALCULATED
AllocTransType_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocTransType_CALCULATED_WITHOUT_PRELIMINARY
AllocTransType_REVERSAL = cvar.AllocTransType_REVERSAL
OpenClose_CLOSE = cvar.OpenClose_CLOSE
OpenClose_OPEN = cvar.OpenClose_OPEN
ProcessCode_REGULAR = cvar.ProcessCode_REGULAR
ProcessCode_SOFT_DOLLAR = cvar.ProcessCode_SOFT_DOLLAR
ProcessCode_STEP_IN = cvar.ProcessCode_STEP_IN
ProcessCode_STEP_OUT = cvar.ProcessCode_STEP_OUT
ProcessCode_SOFT_DOLLAR_STEP_IN = cvar.ProcessCode_SOFT_DOLLAR_STEP_IN
ProcessCode_SOFT_DOLLAR_STEP_OUT = cvar.ProcessCode_SOFT_DOLLAR_STEP_OUT
ProcessCode_PLAN_SPONSOR = cvar.ProcessCode_PLAN_SPONSOR
AllocStatus_ACCEPTED = cvar.AllocStatus_ACCEPTED
AllocStatus_BLOCK_LEVEL_REJECT = cvar.AllocStatus_BLOCK_LEVEL_REJECT
AllocStatus_ACCOUNT_LEVEL_REJECT = cvar.AllocStatus_ACCOUNT_LEVEL_REJECT
AllocStatus_RECEIVED = cvar.AllocStatus_RECEIVED
AllocStatus_INCOMPLETE = cvar.AllocStatus_INCOMPLETE
AllocStatus_REJECTED_BY_INTERMEDIARY = cvar.AllocStatus_REJECTED_BY_INTERMEDIARY
AllocStatus_ALLOCATION_PENDING = cvar.AllocStatus_ALLOCATION_PENDING
AllocStatus_REVERSED = cvar.AllocStatus_REVERSED
AllocStatus_CANCELLED_BY_INTERMEDIARY = cvar.AllocStatus_CANCELLED_BY_INTERMEDIARY
AllocStatus_CLAIMED = cvar.AllocStatus_CLAIMED
AllocStatus_REFUSED = cvar.AllocStatus_REFUSED
AllocStatus_PENDING_GIVE_UP_APPROVAL = cvar.AllocStatus_PENDING_GIVE_UP_APPROVAL
AllocStatus_CANCELLED = cvar.AllocStatus_CANCELLED
AllocStatus_PENDING_TAKE_UP_APPROVAL = cvar.AllocStatus_PENDING_TAKE_UP_APPROVAL
AllocStatus_REVERSAL_PENDING = cvar.AllocStatus_REVERSAL_PENDING
AllocRejCode_UNKNOWN_ACCOUNT = cvar.AllocRejCode_UNKNOWN_ACCOUNT
AllocRejCode_INCORRECT_QUANTITY = cvar.AllocRejCode_INCORRECT_QUANTITY
AllocRejCode_INCORRECT_AVERAGEG_PRICE = cvar.AllocRejCode_INCORRECT_AVERAGEG_PRICE
AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC = cvar.AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC
AllocRejCode_COMMISSION_DIFFERENCE = cvar.AllocRejCode_COMMISSION_DIFFERENCE
AllocRejCode_UNKNOWN_ORDER_ID = cvar.AllocRejCode_UNKNOWN_ORDER_ID
AllocRejCode_UNKNOWN_LIST_ID = cvar.AllocRejCode_UNKNOWN_LIST_ID
AllocRejCode_OTHER_SEE_TEXT = cvar.AllocRejCode_OTHER_SEE_TEXT
AllocRejCode_INCORRECT_ALLOCATED_QUANTITY = cvar.AllocRejCode_INCORRECT_ALLOCATED_QUANTITY
AllocRejCode_CALCULATION_DIFFERENCE = cvar.AllocRejCode_CALCULATION_DIFFERENCE
AllocRejCode_UNKNOWN_OR_STALE_EXEC_ID = cvar.AllocRejCode_UNKNOWN_OR_STALE_EXEC_ID
AllocRejCode_MISMATCHED_DATA = cvar.AllocRejCode_MISMATCHED_DATA
AllocRejCode_UNKNOWN_CL_ORD_ID = cvar.AllocRejCode_UNKNOWN_CL_ORD_ID
AllocRejCode_WAREHOUSE_REQUEST_REJECTED = cvar.AllocRejCode_WAREHOUSE_REQUEST_REJECTED
AllocRejCode_INCORRECT_AVERAGE_PRICE = cvar.AllocRejCode_INCORRECT_AVERAGE_PRICE
AllocRejCode_DUPLICATE_OR_MISSING_INDIVIDUAL_ALLOC_ID = cvar.AllocRejCode_DUPLICATE_OR_MISSING_INDIVIDUAL_ALLOC_ID
AllocRejCode_TRADE_NOT_RECOGNIZED = cvar.AllocRejCode_TRADE_NOT_RECOGNIZED
AllocRejCode_DUPLICATE_TRADE = cvar.AllocRejCode_DUPLICATE_TRADE
AllocRejCode_INCORRECT_OR_MISSING_INSTRUMENT = cvar.AllocRejCode_INCORRECT_OR_MISSING_INSTRUMENT
AllocRejCode_INCORRECT_OR_MISSING_SETTL_DATE = cvar.AllocRejCode_INCORRECT_OR_MISSING_SETTL_DATE
AllocRejCode_INCORRECT_OR_MISSING_FUND_ID_OR_FUND_NAME = cvar.AllocRejCode_INCORRECT_OR_MISSING_FUND_ID_OR_FUND_NAME
AllocRejCode_INCORRECT_OR_MISSING_SETTL_INSTRUCTIONS = cvar.AllocRejCode_INCORRECT_OR_MISSING_SETTL_INSTRUCTIONS
AllocRejCode_INCORRECT_OR_MISSING_FEES = cvar.AllocRejCode_INCORRECT_OR_MISSING_FEES
AllocRejCode_INCORRECT_OR_MISSING_TAX = cvar.AllocRejCode_INCORRECT_OR_MISSING_TAX
AllocRejCode_UNKNOWN_OR_MISSING_PARTY = cvar.AllocRejCode_UNKNOWN_OR_MISSING_PARTY
AllocRejCode_INCORRECT_OR_MISSING_SIDE = cvar.AllocRejCode_INCORRECT_OR_MISSING_SIDE
AllocRejCode_INCORRECT_OR_MISSING_NET_MONEY = cvar.AllocRejCode_INCORRECT_OR_MISSING_NET_MONEY
AllocRejCode_INCORRECT_OR_MISSING_TRADE_DATE = cvar.AllocRejCode_INCORRECT_OR_MISSING_TRADE_DATE
AllocRejCode_INCORRECT_OR_MISSING_SETTL_CCY_INSTRUCTIONS = cvar.AllocRejCode_INCORRECT_OR_MISSING_SETTL_CCY_INSTRUCTIONS
AllocRejCode_INCORRECT_OR_MISSING_PROCESS_CODE = cvar.AllocRejCode_INCORRECT_OR_MISSING_PROCESS_CODE
AllocRejCode_OTHER = cvar.AllocRejCode_OTHER
EmailType_NEW = cvar.EmailType_NEW
EmailType_REPLY = cvar.EmailType_REPLY
EmailType_ADMIN_REPLY = cvar.EmailType_ADMIN_REPLY
ExDestination_NONE = cvar.ExDestination_NONE
ExDestination_POSIT = cvar.ExDestination_POSIT
CxlRejReason_TOO_LATE_TO_CANCEL = cvar.CxlRejReason_TOO_LATE_TO_CANCEL
CxlRejReason_UNKNOWN_ORDER = cvar.CxlRejReason_UNKNOWN_ORDER
CxlRejReason_BROKER_CREDIT = cvar.CxlRejReason_BROKER_CREDIT
CxlRejReason_ORDER_ALREADY_IN_PENDING_STATUS = cvar.CxlRejReason_ORDER_ALREADY_IN_PENDING_STATUS
CxlRejReason_DUPLICATE_CL_ORD_ID = cvar.CxlRejReason_DUPLICATE_CL_ORD_ID
CxlRejReason_ORIG_ORD_MOD_TIME = cvar.CxlRejReason_ORIG_ORD_MOD_TIME
CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST = cvar.CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST
CxlRejReason_OTHER = cvar.CxlRejReason_OTHER
CxlRejReason_INVALID_PRICE_INCREMENT = cvar.CxlRejReason_INVALID_PRICE_INCREMENT
CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE = cvar.CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE
CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
OrdRejReason_BROKER_CREDIT = cvar.OrdRejReason_BROKER_CREDIT
OrdRejReason_UNKNOWN_SYMBOL = cvar.OrdRejReason_UNKNOWN_SYMBOL
OrdRejReason_EXCHANGE_CLOSED = cvar.OrdRejReason_EXCHANGE_CLOSED
OrdRejReason_ORDER_EXCEEDS_LIMIT = cvar.OrdRejReason_ORDER_EXCEEDS_LIMIT
OrdRejReason_TOO_LATE_TO_ENTER = cvar.OrdRejReason_TOO_LATE_TO_ENTER
OrdRejReason_UNKNOWN_ORDER = cvar.OrdRejReason_UNKNOWN_ORDER
OrdRejReason_DUPLICATE_ORDER = cvar.OrdRejReason_DUPLICATE_ORDER
OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER = cvar.OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER
OrdRejReason_STALE_ORDER = cvar.OrdRejReason_STALE_ORDER
OrdRejReason_TRADE_ALONG_REQUIRED = cvar.OrdRejReason_TRADE_ALONG_REQUIRED
OrdRejReason_INVALID_INVESTOR_ID = cvar.OrdRejReason_INVALID_INVESTOR_ID
OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC = cvar.OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC
OrdRejReason_SURVEILLENCE_OPTION = cvar.OrdRejReason_SURVEILLENCE_OPTION
OrdRejReason_INCORRECT_QUANTITY = cvar.OrdRejReason_INCORRECT_QUANTITY
OrdRejReason_INCORRECT_ALLOCATED_QUANTITY = cvar.OrdRejReason_INCORRECT_ALLOCATED_QUANTITY
OrdRejReason_UNKNOWN_ACCOUNT = cvar.OrdRejReason_UNKNOWN_ACCOUNT
OrdRejReason_OTHER = cvar.OrdRejReason_OTHER
OrdRejReason_INVALID_PRICE_INCREMENT = cvar.OrdRejReason_INVALID_PRICE_INCREMENT
OrdRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.OrdRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
OrdRejReason_SURVEILLANCE_OPTION = cvar.OrdRejReason_SURVEILLANCE_OPTION
OrdRejReason_REFERENCE_PRICE_NOT_AVAILABLE = cvar.OrdRejReason_REFERENCE_PRICE_NOT_AVAILABLE
OrdRejReason_NOTIONAL_VALUE_EXCEEDS_THRESHOLD = cvar.OrdRejReason_NOTIONAL_VALUE_EXCEEDS_THRESHOLD
OrdRejReason_ALGORITHM_RISK_THRESHOLD_BREACHED = cvar.OrdRejReason_ALGORITHM_RISK_THRESHOLD_BREACHED
OrdRejReason_SHORT_SELL_NOT_PERMITTED = cvar.OrdRejReason_SHORT_SELL_NOT_PERMITTED
OrdRejReason_SHORT_SELL_SECURITY_PRE_BORROW_RESTRICTION = cvar.OrdRejReason_SHORT_SELL_SECURITY_PRE_BORROW_RESTRICTION
OrdRejReason_SHORT_SELL_ACCOUNT_PRE_BORROW_RESTRICTION = cvar.OrdRejReason_SHORT_SELL_ACCOUNT_PRE_BORROW_RESTRICTION
OrdRejReason_INSUFFICIENT_CREDIT_LIMIT = cvar.OrdRejReason_INSUFFICIENT_CREDIT_LIMIT
OrdRejReason_EXCEEDED_CLIP_SIZE_LIMIT = cvar.OrdRejReason_EXCEEDED_CLIP_SIZE_LIMIT
OrdRejReason_EXCEEDED_MAX_NOTIONAL_ORDER_AMT = cvar.OrdRejReason_EXCEEDED_MAX_NOTIONAL_ORDER_AMT
OrdRejReason_EXCEEDED_DV01_PV01_LIMIT = cvar.OrdRejReason_EXCEEDED_DV01_PV01_LIMIT
OrdRejReason_EXCEEDED_CS01_LIMIT = cvar.OrdRejReason_EXCEEDED_CS01_LIMIT
IOIQualifier_ALL_OR_NONE = cvar.IOIQualifier_ALL_OR_NONE
IOIQualifier_AT_THE_CLOSE = cvar.IOIQualifier_AT_THE_CLOSE
IOIQualifier_IN_TOUCH_WITH = cvar.IOIQualifier_IN_TOUCH_WITH
IOIQualifier_LIMIT = cvar.IOIQualifier_LIMIT
IOIQualifier_MORE_BEHIND = cvar.IOIQualifier_MORE_BEHIND
IOIQualifier_AT_THE_OPEN = cvar.IOIQualifier_AT_THE_OPEN
IOIQualifier_TAKING_A_POSITION = cvar.IOIQualifier_TAKING_A_POSITION
IOIQualifier_AT_THE_MARKET = cvar.IOIQualifier_AT_THE_MARKET
IOIQualifier_PORTFOLIO_SHOWN = cvar.IOIQualifier_PORTFOLIO_SHOWN
IOIQualifier_THROUGH_THE_DAY = cvar.IOIQualifier_THROUGH_THE_DAY
IOIQualifier_VERSUS = cvar.IOIQualifier_VERSUS
IOIQualifier_INDICATION = cvar.IOIQualifier_INDICATION
IOIQualifier_CROSSING_OPPORTUNITY = cvar.IOIQualifier_CROSSING_OPPORTUNITY
IOIQualifier_AT_THE_MIDPOINT = cvar.IOIQualifier_AT_THE_MIDPOINT
IOIQualifier_PRE_OPEN = cvar.IOIQualifier_PRE_OPEN
IOIQualifier_READY_TO_TRADE = cvar.IOIQualifier_READY_TO_TRADE
IOIQualifier_VWAP = cvar.IOIQualifier_VWAP
IOIQualifier_MARKET_ON_CLOSE = cvar.IOIQualifier_MARKET_ON_CLOSE
IOIQualifier_AXE = cvar.IOIQualifier_AXE
IOIQualifier_AXE_ON_BID = cvar.IOIQualifier_AXE_ON_BID
IOIQualifier_AXE_ON_OFFER = cvar.IOIQualifier_AXE_ON_OFFER
IOIQualifier_CLIENT_NATURAL_WORKING = cvar.IOIQualifier_CLIENT_NATURAL_WORKING
IOIQualifier_POSITION_WANTED = cvar.IOIQualifier_POSITION_WANTED
IOIQualifier_MARKET_MAKING = cvar.IOIQualifier_MARKET_MAKING
IOIQualifier_CLIENT_NATURAL_BLOCK = cvar.IOIQualifier_CLIENT_NATURAL_BLOCK
IOIQualifier_UNWIND = cvar.IOIQualifier_UNWIND
IOIQualifier_QUANTITY_NEGOTIABLE = cvar.IOIQualifier_QUANTITY_NEGOTIABLE
IOIQualifier_ALLOW_LATE_BIDS = cvar.IOIQualifier_ALLOW_LATE_BIDS
IOIQualifier_IMMEDIATE_OR_COUNTER = cvar.IOIQualifier_IMMEDIATE_OR_COUNTER
IOIQualifier_AUTO_TRADE = cvar.IOIQualifier_AUTO_TRADE
IOIQualifier_AUTOMATIC_SPOT = cvar.IOIQualifier_AUTOMATIC_SPOT
IOIQualifier_PLATFORM_CALCULATED_SPOT = cvar.IOIQualifier_PLATFORM_CALCULATED_SPOT
IOIQualifier_OUTSIDE_SPREAD = cvar.IOIQualifier_OUTSIDE_SPREAD
IOIQualifier_DEFERRED_SPOT = cvar.IOIQualifier_DEFERRED_SPOT
IOIQualifier_NEGOTIATED_SPOT = cvar.IOIQualifier_NEGOTIATED_SPOT
ReportToExch_NO = cvar.ReportToExch_NO
ReportToExch_YES = cvar.ReportToExch_YES
LocateReqd_NO = cvar.LocateReqd_NO
LocateReqd_YES = cvar.LocateReqd_YES
ForexReq_NO = cvar.ForexReq_NO
ForexReq_YES = cvar.ForexReq_YES
CxlType_FULL_REMAINING_QUANTITY = cvar.CxlType_FULL_REMAINING_QUANTITY
CxlType_PARTIAL_CANCEL = cvar.CxlType_PARTIAL_CANCEL
DKReason_UNKNOWN_SYMBOL = cvar.DKReason_UNKNOWN_SYMBOL
DKReason_WRONG_SIDE = cvar.DKReason_WRONG_SIDE
DKReason_QUANTITY_EXCEEDS_ORDER = cvar.DKReason_QUANTITY_EXCEEDS_ORDER
DKReason_NO_MATCHING_ORDER = cvar.DKReason_NO_MATCHING_ORDER
DKReason_PRICE_EXCEEDS_LIMIT = cvar.DKReason_PRICE_EXCEEDS_LIMIT
DKReason_OTHER = cvar.DKReason_OTHER
DKReason_CALCULATION_DIFFERENCE = cvar.DKReason_CALCULATION_DIFFERENCE
DKReason_NO_MATCHING_EXECUTION_REPORT = cvar.DKReason_NO_MATCHING_EXECUTION_REPORT
IOINaturalFlag_NO = cvar.IOINaturalFlag_NO
IOINaturalFlag_YES = cvar.IOINaturalFlag_YES
MiscFeeType_REGULATORY = cvar.MiscFeeType_REGULATORY
MiscFeeType_TAX = cvar.MiscFeeType_TAX
MiscFeeType_LOCAL_COMMISSION = cvar.MiscFeeType_LOCAL_COMMISSION
MiscFeeType_EXCHANGE_FEES = cvar.MiscFeeType_EXCHANGE_FEES
MiscFeeType_STAMP = cvar.MiscFeeType_STAMP
MiscFeeType_LEVY = cvar.MiscFeeType_LEVY
MiscFeeType_OTHER = cvar.MiscFeeType_OTHER
MiscFeeType_MARKUP = cvar.MiscFeeType_MARKUP
MiscFeeType_CONSUMPTION_TAX = cvar.MiscFeeType_CONSUMPTION_TAX
MiscFeeType_PER_TRANSACTION = cvar.MiscFeeType_PER_TRANSACTION
MiscFeeType_CONVERSION = cvar.MiscFeeType_CONVERSION
MiscFeeType_AGENT = cvar.MiscFeeType_AGENT
MiscFeeType_TRANSFER_FEE = cvar.MiscFeeType_TRANSFER_FEE
MiscFeeType_SECURITY_LENDING = cvar.MiscFeeType_SECURITY_LENDING
MiscFeeType_TRADE_REPORTING = cvar.MiscFeeType_TRADE_REPORTING
MiscFeeType_TAX_ON_PRINCIPAL_AMOUNT = cvar.MiscFeeType_TAX_ON_PRINCIPAL_AMOUNT
MiscFeeType_TAX_ON_ACCRUED_INTEREST_AMOUNT = cvar.MiscFeeType_TAX_ON_ACCRUED_INTEREST_AMOUNT
MiscFeeType_NEW_ISSUANCE_FEE = cvar.MiscFeeType_NEW_ISSUANCE_FEE
MiscFeeType_SERVICE_FEE = cvar.MiscFeeType_SERVICE_FEE
MiscFeeType_ODD_LOT_FEE = cvar.MiscFeeType_ODD_LOT_FEE
MiscFeeType_AUCTION_FEE = cvar.MiscFeeType_AUCTION_FEE
MiscFeeType_VALUE_ADDED_TAX = cvar.MiscFeeType_VALUE_ADDED_TAX
MiscFeeType_SALES_TAX = cvar.MiscFeeType_SALES_TAX
MiscFeeType_EXECUTION_FEE = cvar.MiscFeeType_EXECUTION_FEE
MiscFeeType_ORDER_ENTRY_FEE = cvar.MiscFeeType_ORDER_ENTRY_FEE
MiscFeeType_ORDER_MODIFICATION_FEE = cvar.MiscFeeType_ORDER_MODIFICATION_FEE
MiscFeeType_ORDERS_CANCELLATION_FEE = cvar.MiscFeeType_ORDERS_CANCELLATION_FEE
MiscFeeType_MARKET_DATA_ACCESS_FEE = cvar.MiscFeeType_MARKET_DATA_ACCESS_FEE
MiscFeeType_MARKET_DATA_TERMINAL_FEE = cvar.MiscFeeType_MARKET_DATA_TERMINAL_FEE
MiscFeeType_MARKET_DATA_VOLUME_FEE = cvar.MiscFeeType_MARKET_DATA_VOLUME_FEE
MiscFeeType_CLEARING_FEE = cvar.MiscFeeType_CLEARING_FEE
MiscFeeType_SETTLEMENT_FEE = cvar.MiscFeeType_SETTLEMENT_FEE
MiscFeeType_REBATES = cvar.MiscFeeType_REBATES
MiscFeeType_DISCOUNTS = cvar.MiscFeeType_DISCOUNTS
MiscFeeType_PAYMENTS = cvar.MiscFeeType_PAYMENTS
MiscFeeType_NON_MONETARY_PAYMENTS = cvar.MiscFeeType_NON_MONETARY_PAYMENTS
ExecType_NEW = cvar.ExecType_NEW
ExecType_PARTIAL_FILL = cvar.ExecType_PARTIAL_FILL
ExecType_FILL = cvar.ExecType_FILL
ExecType_DONE_FOR_DAY = cvar.ExecType_DONE_FOR_DAY
ExecType_CANCELED = cvar.ExecType_CANCELED
ExecType_REPLACED = cvar.ExecType_REPLACED
ExecType_PENDING_CANCEL = cvar.ExecType_PENDING_CANCEL
ExecType_STOPPED = cvar.ExecType_STOPPED
ExecType_REJECTED = cvar.ExecType_REJECTED
ExecType_SUSPENDED = cvar.ExecType_SUSPENDED
ExecType_PENDING_NEW = cvar.ExecType_PENDING_NEW
ExecType_CALCULATED = cvar.ExecType_CALCULATED
ExecType_EXPIRED = cvar.ExecType_EXPIRED
ExecType_RESTATED = cvar.ExecType_RESTATED
ExecType_PENDING_REPLACE = cvar.ExecType_PENDING_REPLACE
ExecType_TRADE = cvar.ExecType_TRADE
ExecType_TRADE_CORRECT = cvar.ExecType_TRADE_CORRECT
ExecType_TRADE_CANCEL = cvar.ExecType_TRADE_CANCEL
ExecType_ORDER_STATUS = cvar.ExecType_ORDER_STATUS
ExecType_TRADE_IN_A_CLEARING_HOLD = cvar.ExecType_TRADE_IN_A_CLEARING_HOLD
ExecType_TRADE_HAS_BEEN_RELEASED_TO_CLEARING = cvar.ExecType_TRADE_HAS_BEEN_RELEASED_TO_CLEARING
ExecType_TRIGGERED_OR_ACTIVATED_BY_SYSTEM = cvar.ExecType_TRIGGERED_OR_ACTIVATED_BY_SYSTEM
ExecType_LOCKED = cvar.ExecType_LOCKED
ExecType_RELEASED = cvar.ExecType_RELEASED
SettlCurrFxRateCalc_DIVIDE = cvar.SettlCurrFxRateCalc_DIVIDE
SettlCurrFxRateCalc_MULTIPLY = cvar.SettlCurrFxRateCalc_MULTIPLY
SettlInstMode_DEFAULT = cvar.SettlInstMode_DEFAULT
SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED = cvar.SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED
SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING = cvar.SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING
SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_STANDING = cvar.SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_STANDING
SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT = cvar.SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT
SettlInstMode_REQUEST_REJECT = cvar.SettlInstMode_REQUEST_REJECT
SettlInstTransType_CANCEL = cvar.SettlInstTransType_CANCEL
SettlInstTransType_NEW = cvar.SettlInstTransType_NEW
SettlInstTransType_REPLACE = cvar.SettlInstTransType_REPLACE
SettlInstTransType_RESTATE = cvar.SettlInstTransType_RESTATE
SettlInstSource_BROKER_CREDIT = cvar.SettlInstSource_BROKER_CREDIT
SettlInstSource_INSTITUTION = cvar.SettlInstSource_INSTITUTION
SettlInstSource_INVESTOR = cvar.SettlInstSource_INVESTOR
SettlLocation_CEDEL = cvar.SettlLocation_CEDEL
SettlLocation_DEPOSITORY_TRUST_COMPANY = cvar.SettlLocation_DEPOSITORY_TRUST_COMPANY
SettlLocation_EURO_CLEAR = cvar.SettlLocation_EURO_CLEAR
SettlLocation_FEDERAL_BOOK_ENTRY = cvar.SettlLocation_FEDERAL_BOOK_ENTRY
SettlLocation_LOCAL_MARKET_SETTLE_LOCATION = cvar.SettlLocation_LOCAL_MARKET_SETTLE_LOCATION
SettlLocation_PHYSICAL = cvar.SettlLocation_PHYSICAL
SettlLocation_PARTICIPANT_TRUST_COMPANY = cvar.SettlLocation_PARTICIPANT_TRUST_COMPANY
SecurityType_BANKERS_ACCEPTANCE = cvar.SecurityType_BANKERS_ACCEPTANCE
SecurityType_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_CERTIFICATE_OF_DEPOSIT
SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION = cvar.SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION
SecurityType_CORPORATE_BOND = cvar.SecurityType_CORPORATE_BOND
SecurityType_COMMERCIAL_PAPER = cvar.SecurityType_COMMERCIAL_PAPER
SecurityType_CORPORATE_PRIVATE_PLACEMENT = cvar.SecurityType_CORPORATE_PRIVATE_PLACEMENT
SecurityType_COMMON_STOCK = cvar.SecurityType_COMMON_STOCK
SecurityType_FEDERAL_HOUSING_AUTHORITY = cvar.SecurityType_FEDERAL_HOUSING_AUTHORITY
SecurityType_FEDERAL_HOME_LOAN = cvar.SecurityType_FEDERAL_HOME_LOAN
SecurityType_FEDERAL_NATIONAL_MORTGAGE_ASSOCIATION = cvar.SecurityType_FEDERAL_NATIONAL_MORTGAGE_ASSOCIATION
SecurityType_FOREIGN_EXCHANGE_CONTRACT = cvar.SecurityType_FOREIGN_EXCHANGE_CONTRACT
SecurityType_FUTURE = cvar.SecurityType_FUTURE
SecurityType_GOVERNMENT_NATIONAL_MORTGAGE_ASSOCIATION = cvar.SecurityType_GOVERNMENT_NATIONAL_MORTGAGE_ASSOCIATION
SecurityType_TREASURIES_AGENCY_DEBENTURE = cvar.SecurityType_TREASURIES_AGENCY_DEBENTURE
SecurityType_MUTUAL_FUND = cvar.SecurityType_MUTUAL_FUND
SecurityType_MORTGAGE_INTEREST_ONLY = cvar.SecurityType_MORTGAGE_INTEREST_ONLY
SecurityType_MORTGAGE_PRINCIPAL_ONLY = cvar.SecurityType_MORTGAGE_PRINCIPAL_ONLY
SecurityType_MORTGAGE_PRIVATE_PLACEMENT = cvar.SecurityType_MORTGAGE_PRIVATE_PLACEMENT
SecurityType_MISCELLANEOUS_PASS_THROUGH = cvar.SecurityType_MISCELLANEOUS_PASS_THROUGH
SecurityType_MUNICIPAL_BOND = cvar.SecurityType_MUNICIPAL_BOND
SecurityType_NO_SECURITY_TYPE = cvar.SecurityType_NO_SECURITY_TYPE
SecurityType_OPTION = cvar.SecurityType_OPTION
SecurityType_PREFERRED_STOCK = cvar.SecurityType_PREFERRED_STOCK
SecurityType_REPURCHASE_AGREEMENT = cvar.SecurityType_REPURCHASE_AGREEMENT
SecurityType_REVERSE_REPURCHASE_AGREEMENT = cvar.SecurityType_REVERSE_REPURCHASE_AGREEMENT
SecurityType_STUDENT_LOAN_MARKETING_ASSOCIATION = cvar.SecurityType_STUDENT_LOAN_MARKETING_ASSOCIATION
SecurityType_TIME_DEPOSIT = cvar.SecurityType_TIME_DEPOSIT
SecurityType_US_TREASURY_BILL_OLD = cvar.SecurityType_US_TREASURY_BILL_OLD
SecurityType_WARRANT = cvar.SecurityType_WARRANT
SecurityType_CATS_TIGERS_AND_LIONS = cvar.SecurityType_CATS_TIGERS_AND_LIONS
SecurityType_WILDCARD = cvar.SecurityType_WILDCARD
SecurityType_CONVERTIBLE_BOND = cvar.SecurityType_CONVERTIBLE_BOND
SecurityType_IOETTE_MORTGAGE = cvar.SecurityType_IOETTE_MORTGAGE
SecurityType_VARIABLE_RATE_DEMAND_NOTE = cvar.SecurityType_VARIABLE_RATE_DEMAND_NOTE
SecurityType_PLAZOS_FIJOS = cvar.SecurityType_PLAZOS_FIJOS
SecurityType_PROMISSORY_NOTE = cvar.SecurityType_PROMISSORY_NOTE
SecurityType_OVERNIGHT = cvar.SecurityType_OVERNIGHT
SecurityType_MEDIUM_TERM_NOTES = cvar.SecurityType_MEDIUM_TERM_NOTES
SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER = cvar.SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER
SecurityType_AMENDED = cvar.SecurityType_AMENDED
SecurityType_BRIDGE_LOAN = cvar.SecurityType_BRIDGE_LOAN
SecurityType_LETTER_OF_CREDIT = cvar.SecurityType_LETTER_OF_CREDIT
SecurityType_SWING_LINE_FACILITY = cvar.SecurityType_SWING_LINE_FACILITY
SecurityType_DEBTOR_IN_POSSESSION = cvar.SecurityType_DEBTOR_IN_POSSESSION
SecurityType_DEFAULTED = cvar.SecurityType_DEFAULTED
SecurityType_WITHDRAWN = cvar.SecurityType_WITHDRAWN
SecurityType_LIQUIDITY_NOTE = cvar.SecurityType_LIQUIDITY_NOTE
SecurityType_MATURED = cvar.SecurityType_MATURED
SecurityType_DEPOSIT_NOTES = cvar.SecurityType_DEPOSIT_NOTES
SecurityType_RETIRED = cvar.SecurityType_RETIRED
SecurityType_BANK_NOTES = cvar.SecurityType_BANK_NOTES
SecurityType_BILL_OF_EXCHANGES = cvar.SecurityType_BILL_OF_EXCHANGES
SecurityType_CALL_LOANS = cvar.SecurityType_CALL_LOANS
SecurityType_REPLACED = cvar.SecurityType_REPLACED
SecurityType_MANDATORY_TENDER = cvar.SecurityType_MANDATORY_TENDER
SecurityType_REVOLVER = cvar.SecurityType_REVOLVER
SecurityType_SHORT_TERM_LOAN_NOTE = cvar.SecurityType_SHORT_TERM_LOAN_NOTE
SecurityType_TO_BE_ANNOUNCED = cvar.SecurityType_TO_BE_ANNOUNCED
SecurityType_OTHER_ANTICIPATION_NOTES = cvar.SecurityType_OTHER_ANTICIPATION_NOTES
SecurityType_CERTIFICATE_OF_PARTICIPATION = cvar.SecurityType_CERTIFICATE_OF_PARTICIPATION
SecurityType_MORTGAGE_BACKED_SECURITIES = cvar.SecurityType_MORTGAGE_BACKED_SECURITIES
SecurityType_REVENUE_BONDS = cvar.SecurityType_REVENUE_BONDS
SecurityType_SPECIAL_ASSESSMENT = cvar.SecurityType_SPECIAL_ASSESSMENT
SecurityType_SPECIAL_OBLIGATION = cvar.SecurityType_SPECIAL_OBLIGATION
SecurityType_SPECIAL_TAX = cvar.SecurityType_SPECIAL_TAX
SecurityType_TAX_ANTICIPATION_NOTE = cvar.SecurityType_TAX_ANTICIPATION_NOTE
SecurityType_TAX_ALLOCATION = cvar.SecurityType_TAX_ALLOCATION
SecurityType_CERTIFICATE_OF_OBLIGATION = cvar.SecurityType_CERTIFICATE_OF_OBLIGATION
SecurityType_GENERAL_OBLIGATION_BONDS = cvar.SecurityType_GENERAL_OBLIGATION_BONDS
SecurityType_MULTILEG_INSTRUMENT = cvar.SecurityType_MULTILEG_INSTRUMENT
SecurityType_TAX_REVENUE_ANTICIPATION_NOTE = cvar.SecurityType_TAX_REVENUE_ANTICIPATION_NOTE
SecurityType_EXTENDED_COMM_NOTE = cvar.SecurityType_EXTENDED_COMM_NOTE
SecurityType_AGENCY_POOLS = cvar.SecurityType_AGENCY_POOLS
SecurityType_ASSET_BACKED_SECURITIES = cvar.SecurityType_ASSET_BACKED_SECURITIES
SecurityType_CORP = cvar.SecurityType_CORP
SecurityType_REVENUE_ANTICIPATION_NOTE = cvar.SecurityType_REVENUE_ANTICIPATION_NOTE
SecurityType_REVOLVER_LOAN = cvar.SecurityType_REVOLVER_LOAN
SecurityType_FEDERAL_AGENCY_COUPON = cvar.SecurityType_FEDERAL_AGENCY_COUPON
SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE = cvar.SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE
SecurityType_PRIVATE_EXPORT_FUNDING = cvar.SecurityType_PRIVATE_EXPORT_FUNDING
SecurityType_DUAL_CURRENCY = cvar.SecurityType_DUAL_CURRENCY
SecurityType_INDEXED_LINKED = cvar.SecurityType_INDEXED_LINKED
SecurityType_YANKEE_CORPORATE_BOND = cvar.SecurityType_YANKEE_CORPORATE_BOND
SecurityType_BRADY_BOND = cvar.SecurityType_BRADY_BOND
SecurityType_US_TREASURY_BOND = cvar.SecurityType_US_TREASURY_BOND
SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE = cvar.SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE
SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES = cvar.SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES
SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE = cvar.SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE
SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE = cvar.SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE
SecurityType_US_TREASURY_NOTE_OLD = cvar.SecurityType_US_TREASURY_NOTE_OLD
SecurityType_TERM_LOAN = cvar.SecurityType_TERM_LOAN
SecurityType_STRUCTURED_NOTES = cvar.SecurityType_STRUCTURED_NOTES
SecurityType_EURO_SUPRANATIONAL_COUPONS = cvar.SecurityType_EURO_SUPRANATIONAL_COUPONS
SecurityType_USD_SUPRANATIONAL_COUPONS = cvar.SecurityType_USD_SUPRANATIONAL_COUPONS
SecurityType_EURO_CORPORATE_BOND = cvar.SecurityType_EURO_CORPORATE_BOND
SecurityType_EURO_SOVEREIGNS = cvar.SecurityType_EURO_SOVEREIGNS
SecurityType_US_TREASURY_NOTE = cvar.SecurityType_US_TREASURY_NOTE
SecurityType_US_TREASURY_BILL = cvar.SecurityType_US_TREASURY_BILL
SecurityType_REPURCHASE = cvar.SecurityType_REPURCHASE
SecurityType_FORWARD = cvar.SecurityType_FORWARD
SecurityType_BUY_SELLBACK = cvar.SecurityType_BUY_SELLBACK
SecurityType_SECURITIES_LOAN = cvar.SecurityType_SECURITIES_LOAN
SecurityType_SECURITIES_PLEDGE = cvar.SecurityType_SECURITIES_PLEDGE
SecurityType_EURO_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_EURO_CERTIFICATE_OF_DEPOSIT
SecurityType_EURO_COMMERCIAL_PAPER = cvar.SecurityType_EURO_COMMERCIAL_PAPER
SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT
SecurityType_PFANDBRIEFE = cvar.SecurityType_PFANDBRIEFE
SecurityType_OPTIONS_ON_FUTURES = cvar.SecurityType_OPTIONS_ON_FUTURES
SecurityType_OPTIONS_ON_PHYSICAL = cvar.SecurityType_OPTIONS_ON_PHYSICAL
SecurityType_WILDCARD_ENTRY = cvar.SecurityType_WILDCARD_ENTRY
SecurityType_CASH = cvar.SecurityType_CASH
SecurityType_EURO_CORPORATE_FLOATING_RATE_NOTES = cvar.SecurityType_EURO_CORPORATE_FLOATING_RATE_NOTES
SecurityType_US_CORPORATE_FLOATING_RATE_NOTES = cvar.SecurityType_US_CORPORATE_FLOATING_RATE_NOTES
SecurityType_CREDIT_DEFAULT_SWAP = cvar.SecurityType_CREDIT_DEFAULT_SWAP
SecurityType_INTEREST_RATE_SWAP = cvar.SecurityType_INTEREST_RATE_SWAP
SecurityType_OPTIONS_ON_COMBO = cvar.SecurityType_OPTIONS_ON_COMBO
SecurityType_CANADIAN_TREASURY_NOTES = cvar.SecurityType_CANADIAN_TREASURY_NOTES
SecurityType_CANADIAN_TREASURY_BILLS = cvar.SecurityType_CANADIAN_TREASURY_BILLS
SecurityType_CANADIAN_PROVINCIAL_BONDS = cvar.SecurityType_CANADIAN_PROVINCIAL_BONDS
SecurityType_TREASURY_BILL = cvar.SecurityType_TREASURY_BILL
SecurityType_BANK_DEPOSITORY_NOTE = cvar.SecurityType_BANK_DEPOSITORY_NOTE
SecurityType_CANADIAN_MONEY_MARKETS = cvar.SecurityType_CANADIAN_MONEY_MARKETS
SecurityType_SECURED_LIQUIDITY_NOTE = cvar.SecurityType_SECURED_LIQUIDITY_NOTE
SecurityType_TERM_LIQUIDITY_NOTE = cvar.SecurityType_TERM_LIQUIDITY_NOTE
SecurityType_CANADIAN_MORTGAGE_BONDS = cvar.SecurityType_CANADIAN_MORTGAGE_BONDS
SecurityType_TAXABLE_MUNICIPAL_CP = cvar.SecurityType_TAXABLE_MUNICIPAL_CP
SecurityType_OFFSHORE_ISSUED_CHINESE_YUAN_CORPORATE_BOND = cvar.SecurityType_OFFSHORE_ISSUED_CHINESE_YUAN_CORPORATE_BOND
SecurityType_PREFERRED_CORPORATE_BOND = cvar.SecurityType_PREFERRED_CORPORATE_BOND
SecurityType_NON_DELIVERABLE_FORWARD = cvar.SecurityType_NON_DELIVERABLE_FORWARD
SecurityType_FX_SPOT = cvar.SecurityType_FX_SPOT
SecurityType_FX_FORWARD = cvar.SecurityType_FX_FORWARD
SecurityType_FX_SWAP = cvar.SecurityType_FX_SWAP
SecurityType_NON_DELIVERABLE_SWAP = cvar.SecurityType_NON_DELIVERABLE_SWAP
SecurityType_FX_BANK_NOTE = cvar.SecurityType_FX_BANK_NOTE
SecurityType_FOREIGN_CURRENCY_DISCOUNT_NOTE = cvar.SecurityType_FOREIGN_CURRENCY_DISCOUNT_NOTE
SecurityType_CAP = cvar.SecurityType_CAP
SecurityType_COLLAR = cvar.SecurityType_COLLAR
SecurityType_COMMODITY_SWAP = cvar.SecurityType_COMMODITY_SWAP
SecurityType_EXOTIC = cvar.SecurityType_EXOTIC
SecurityType_FLOOR = cvar.SecurityType_FLOOR
SecurityType_FRA = cvar.SecurityType_FRA
SecurityType_DERIVATIVE_FORWARD = cvar.SecurityType_DERIVATIVE_FORWARD
SecurityType_TOTAL_RETURN_SWAP = cvar.SecurityType_TOTAL_RETURN_SWAP
SecurityType_LOAN_LEASE = cvar.SecurityType_LOAN_LEASE
SecurityType_SPOT_FORWARD = cvar.SecurityType_SPOT_FORWARD
SecurityType_SWAP_OPTION = cvar.SecurityType_SWAP_OPTION
SecurityType_TRANSMISSION = cvar.SecurityType_TRANSMISSION
SecurityType_INDEX = cvar.SecurityType_INDEX
SecurityType_BOND_BASKET = cvar.SecurityType_BOND_BASKET
SecurityType_CONTRACT_FOR_DIFFERENCE = cvar.SecurityType_CONTRACT_FOR_DIFFERENCE
SecurityType_CORRELATION_SWAP = cvar.SecurityType_CORRELATION_SWAP
SecurityType_DIVIEND_SWAP = cvar.SecurityType_DIVIEND_SWAP
SecurityType_EQUITY_BASKET = cvar.SecurityType_EQUITY_BASKET
SecurityType_EQUITY_FORWARD = cvar.SecurityType_EQUITY_FORWARD
SecurityType_RETURN_SWAP = cvar.SecurityType_RETURN_SWAP
SecurityType_VARIANCE_SWAP = cvar.SecurityType_VARIANCE_SWAP
SecurityType_PORTFOLIO_SWAPS = cvar.SecurityType_PORTFOLIO_SWAPS
SecurityType_FUTURES_ON_A_SWAP = cvar.SecurityType_FUTURES_ON_A_SWAP
SecurityType_FORWARDS_ON_A_SWAP = cvar.SecurityType_FORWARDS_ON_A_SWAP
SecurityType_FORWARD_FREIGHT_AGREEMENT = cvar.SecurityType_FORWARD_FREIGHT_AGREEMENT
SecurityType_SPREAD_BETTING = cvar.SecurityType_SPREAD_BETTING
SecurityType_EXCHANGE_TRADED_COMMODITY = cvar.SecurityType_EXCHANGE_TRADED_COMMODITY
SecurityType_DEPOSITORY_RECEIPTS = cvar.SecurityType_DEPOSITORY_RECEIPTS
SecurityType_DELIVERY_VERSUS_PLEDGE = cvar.SecurityType_DELIVERY_VERSUS_PLEDGE
SecurityType_COLLATERAL_BASKET = cvar.SecurityType_COLLATERAL_BASKET
SecurityType_STRUCTURED_FINANCE_PRODUCT = cvar.SecurityType_STRUCTURED_FINANCE_PRODUCT
SecurityType_MARGIN_LOAN = cvar.SecurityType_MARGIN_LOAN
SecurityType_OFFSHORE_ISSUED_CHINESE_YUAN_SOVEREIGN_BOND = cvar.SecurityType_OFFSHORE_ISSUED_CHINESE_YUAN_SOVEREIGN_BOND
SecurityType_SOVEREIGN_BOND = cvar.SecurityType_SOVEREIGN_BOND
SecurityType_US_TREASURY_FLOATING_RATE_NOTE = cvar.SecurityType_US_TREASURY_FLOATING_RATE_NOTE
SecurityType_BANK_ACCEPTED_BILL = cvar.SecurityType_BANK_ACCEPTED_BILL
SecurityType_SHORT_TERM_BANK_NOTE = cvar.SecurityType_SHORT_TERM_BANK_NOTE
SecurityType_CALLABLE_COMMERCIAL_PAPER = cvar.SecurityType_CALLABLE_COMMERCIAL_PAPER
SecurityType_COMMERCIAL_NOTE = cvar.SecurityType_COMMERCIAL_NOTE
SecurityType_INTEREST_BEARING_COMMERCIAL_PAPER = cvar.SecurityType_INTEREST_BEARING_COMMERCIAL_PAPER
SecurityType_EURO_MEDIUM_TERM_NOTE = cvar.SecurityType_EURO_MEDIUM_TERM_NOTE
SecurityType_EURO_NEGOTIABLE_COMMERCIAL_PAPER = cvar.SecurityType_EURO_NEGOTIABLE_COMMERCIAL_PAPER
SecurityType_EURO_STRUCTURED_LIQUIDITY_NOTE = cvar.SecurityType_EURO_STRUCTURED_LIQUIDITY_NOTE
SecurityType_EURO_TIME_DEPOSIT = cvar.SecurityType_EURO_TIME_DEPOSIT
SecurityType_JUMBO_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_JUMBO_CERTIFICATE_OF_DEPOSIT
SecurityType_MONEY_MARKET_FUND = cvar.SecurityType_MONEY_MARKET_FUND
SecurityType_MASTER_NOTE = cvar.SecurityType_MASTER_NOTE
SecurityType_NEGOTIABLE_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_NEGOTIABLE_CERTIFICATE_OF_DEPOSIT
SecurityType_NEGOTIABLE_COMMERCIAL_PAPER = cvar.SecurityType_NEGOTIABLE_COMMERCIAL_PAPER
SecurityType_RETAIL_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_RETAIL_CERTIFICATE_OF_DEPOSIT
SecurityType_TERM_DEPOSIT_RECEIPT = cvar.SecurityType_TERM_DEPOSIT_RECEIPT
SecurityType_PFANDBRIEF = cvar.SecurityType_PFANDBRIEF
SecurityType_MUNICIPAL_INTEREST_BEARING_COMMERCIAL_PAPER = cvar.SecurityType_MUNICIPAL_INTEREST_BEARING_COMMERCIAL_PAPER
SecurityType_TAXABLE_MUNICIPAL_BOND = cvar.SecurityType_TAXABLE_MUNICIPAL_BOND
SecurityType_VARIABLE_RATE_DEMAND_OBLIGATION = cvar.SecurityType_VARIABLE_RATE_DEMAND_OBLIGATION
SecurityType_OTHER = cvar.SecurityType_OTHER
SecurityType_EXCHANGE_TRADED_NOTE = cvar.SecurityType_EXCHANGE_TRADED_NOTE
SecurityType_SECURITIZED_DERIVATIVE = cvar.SecurityType_SECURITIZED_DERIVATIVE
SecurityType_EXCHANGE_TRADED_FUND = cvar.SecurityType_EXCHANGE_TRADED_FUND
SecurityType_DIGITAL_ASSET = cvar.SecurityType_DIGITAL_ASSET
StandInstDbType_OTHER = cvar.StandInstDbType_OTHER
StandInstDbType_DTCSID = cvar.StandInstDbType_DTCSID
StandInstDbType_THOMSON_ALERT = cvar.StandInstDbType_THOMSON_ALERT
StandInstDbType_A_GLOBAL_CUSTODIAN = cvar.StandInstDbType_A_GLOBAL_CUSTODIAN
StandInstDbType_ACCOUNT_NET = cvar.StandInstDbType_ACCOUNT_NET
SettlDeliveryType_FREE = cvar.SettlDeliveryType_FREE
SettlDeliveryType_VERSUS = cvar.SettlDeliveryType_VERSUS
SettlDeliveryType_TRI_PARTY = cvar.SettlDeliveryType_TRI_PARTY
SettlDeliveryType_HOLD_IN_CUSTODY = cvar.SettlDeliveryType_HOLD_IN_CUSTODY
AllocLinkType_FX_NETTING = cvar.AllocLinkType_FX_NETTING
AllocLinkType_FX_SWAP = cvar.AllocLinkType_FX_SWAP
PutOrCall_PUT = cvar.PutOrCall_PUT
PutOrCall_CALL = cvar.PutOrCall_CALL
PutOrCall_OTHER = cvar.PutOrCall_OTHER
PutOrCall_CHOOSER = cvar.PutOrCall_CHOOSER
CoveredOrUncovered_COVERED = cvar.CoveredOrUncovered_COVERED
CoveredOrUncovered_UNCOVERED = cvar.CoveredOrUncovered_UNCOVERED
CustomerOrFirm_CUSTOMER = cvar.CustomerOrFirm_CUSTOMER
CustomerOrFirm_FIRM = cvar.CustomerOrFirm_FIRM
NotifyBrokerOfCredit_NO = cvar.NotifyBrokerOfCredit_NO
NotifyBrokerOfCredit_YES = cvar.NotifyBrokerOfCredit_YES
AllocHandlInst_MATCH = cvar.AllocHandlInst_MATCH
AllocHandlInst_FORWARD = cvar.AllocHandlInst_FORWARD
AllocHandlInst_FORWARD_AND_MATCH = cvar.AllocHandlInst_FORWARD_AND_MATCH
AllocHandlInst_AUTO_CLAIM_GIVE_UP = cvar.AllocHandlInst_AUTO_CLAIM_GIVE_UP
RoutingType_TARGET_FIRM = cvar.RoutingType_TARGET_FIRM
RoutingType_TARGET_LIST = cvar.RoutingType_TARGET_LIST
RoutingType_BLOCK_FIRM = cvar.RoutingType_BLOCK_FIRM
RoutingType_BLOCK_LIST = cvar.RoutingType_BLOCK_LIST
RoutingType_TARGET_PERSON = cvar.RoutingType_TARGET_PERSON
RoutingType_BLOCK_PERSON = cvar.RoutingType_BLOCK_PERSON
Benchmark_CURVE = cvar.Benchmark_CURVE
Benchmark_FIVE_YR = cvar.Benchmark_FIVE_YR
Benchmark_OLD5 = cvar.Benchmark_OLD5
Benchmark_TEN_YR = cvar.Benchmark_TEN_YR
Benchmark_OLD10 = cvar.Benchmark_OLD10
Benchmark_THIRTY_YR = cvar.Benchmark_THIRTY_YR
Benchmark_OLD30 = cvar.Benchmark_OLD30
Benchmark_THREE_MOLIBOR = cvar.Benchmark_THREE_MOLIBOR
Benchmark_SIX_MOLIBOR = cvar.Benchmark_SIX_MOLIBOR
SubscriptionRequestType_SNAPSHOT = cvar.SubscriptionRequestType_SNAPSHOT
SubscriptionRequestType_SNAPSHOT_AND_UPDATES = cvar.SubscriptionRequestType_SNAPSHOT_AND_UPDATES
SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT = cvar.SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT
MDUpdateType_FULL_REFRESH = cvar.MDUpdateType_FULL_REFRESH
MDUpdateType_INCREMENTAL_REFRESH = cvar.MDUpdateType_INCREMENTAL_REFRESH
AggregatedBook_NO = cvar.AggregatedBook_NO
AggregatedBook_YES = cvar.AggregatedBook_YES
MDEntryType_BID = cvar.MDEntryType_BID
MDEntryType_OFFER = cvar.MDEntryType_OFFER
MDEntryType_TRADE = cvar.MDEntryType_TRADE
MDEntryType_INDEX_VALUE = cvar.MDEntryType_INDEX_VALUE
MDEntryType_OPENING_PRICE = cvar.MDEntryType_OPENING_PRICE
MDEntryType_CLOSING_PRICE = cvar.MDEntryType_CLOSING_PRICE
MDEntryType_SETTLEMENT_PRICE = cvar.MDEntryType_SETTLEMENT_PRICE
MDEntryType_TRADING_SESSION_HIGH_PRICE = cvar.MDEntryType_TRADING_SESSION_HIGH_PRICE
MDEntryType_TRADING_SESSION_LOW_PRICE = cvar.MDEntryType_TRADING_SESSION_LOW_PRICE
MDEntryType_TRADING_SESSION_VWAP_PRICE = cvar.MDEntryType_TRADING_SESSION_VWAP_PRICE
MDEntryType_IMBALANCE = cvar.MDEntryType_IMBALANCE
MDEntryType_TRADE_VOLUME = cvar.MDEntryType_TRADE_VOLUME
MDEntryType_OPEN_INTEREST = cvar.MDEntryType_OPEN_INTEREST
MDEntryType_COMPOSITE_UNDERLYING_PRICE = cvar.MDEntryType_COMPOSITE_UNDERLYING_PRICE
MDEntryType_SIMULATED_SELL_PRICE = cvar.MDEntryType_SIMULATED_SELL_PRICE
MDEntryType_SIMULATED_BUY_PRICE = cvar.MDEntryType_SIMULATED_BUY_PRICE
MDEntryType_MARGIN_RATE = cvar.MDEntryType_MARGIN_RATE
MDEntryType_MID_PRICE = cvar.MDEntryType_MID_PRICE
MDEntryType_EMPTY_BOOK = cvar.MDEntryType_EMPTY_BOOK
MDEntryType_SETTLE_HIGH_PRICE = cvar.MDEntryType_SETTLE_HIGH_PRICE
MDEntryType_SETTLE_LOW_PRICE = cvar.MDEntryType_SETTLE_LOW_PRICE
MDEntryType_PRIOR_SETTLE_PRICE = cvar.MDEntryType_PRIOR_SETTLE_PRICE
MDEntryType_SESSION_HIGH_BID = cvar.MDEntryType_SESSION_HIGH_BID
MDEntryType_SESSION_LOW_OFFER = cvar.MDEntryType_SESSION_LOW_OFFER
MDEntryType_EARLY_PRICES = cvar.MDEntryType_EARLY_PRICES
MDEntryType_AUCTION_CLEARING_PRICE = cvar.MDEntryType_AUCTION_CLEARING_PRICE
MDEntryType_SWAP_VALUE_FACTOR = cvar.MDEntryType_SWAP_VALUE_FACTOR
MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS = cvar.MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS
MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS = cvar.MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS
MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS = cvar.MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS
MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS = cvar.MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS
MDEntryType_VWAP = cvar.MDEntryType_VWAP
MDEntryType_FIXING_PRICE = cvar.MDEntryType_FIXING_PRICE
MDEntryType_CASH_RATE = cvar.MDEntryType_CASH_RATE
MDEntryType_RECOVERY_RATE = cvar.MDEntryType_RECOVERY_RATE
MDEntryType_RECOVERY_RATE_FOR_LONG = cvar.MDEntryType_RECOVERY_RATE_FOR_LONG
MDEntryType_RECOVERY_RATE_FOR_SHORT = cvar.MDEntryType_RECOVERY_RATE_FOR_SHORT
MDEntryType_MARKET_BID = cvar.MDEntryType_MARKET_BID
MDEntryType_MARKET_OFFER = cvar.MDEntryType_MARKET_OFFER
MDEntryType_SHORT_SALE_MIN_PRICE = cvar.MDEntryType_SHORT_SALE_MIN_PRICE
MDEntryType_PREVIOUS_CLOSING_PRICE = cvar.MDEntryType_PREVIOUS_CLOSING_PRICE
MDEntryType_THRESHOLD_LIMIT_PRICE_BANDING = cvar.MDEntryType_THRESHOLD_LIMIT_PRICE_BANDING
MDEntryType_DAILY_FINANCING_VALUE = cvar.MDEntryType_DAILY_FINANCING_VALUE
MDEntryType_ACCRUED_FINANCING_VALUE = cvar.MDEntryType_ACCRUED_FINANCING_VALUE
MDEntryType_TWAP = cvar.MDEntryType_TWAP
TickDirection_PLUS_TICK = cvar.TickDirection_PLUS_TICK
TickDirection_ZERO_PLUS_TICK = cvar.TickDirection_ZERO_PLUS_TICK
TickDirection_MINUS_TICK = cvar.TickDirection_MINUS_TICK
TickDirection_ZERO_MINUS_TICK = cvar.TickDirection_ZERO_MINUS_TICK
QuoteCondition_OPEN = cvar.QuoteCondition_OPEN
QuoteCondition_CLOSED = cvar.QuoteCondition_CLOSED
QuoteCondition_EXCHANGE_BEST = cvar.QuoteCondition_EXCHANGE_BEST
QuoteCondition_CONSOLIDATED_BEST = cvar.QuoteCondition_CONSOLIDATED_BEST
QuoteCondition_LOCKED = cvar.QuoteCondition_LOCKED
QuoteCondition_CROSSED = cvar.QuoteCondition_CROSSED
QuoteCondition_DEPTH = cvar.QuoteCondition_DEPTH
QuoteCondition_FAST_TRADING = cvar.QuoteCondition_FAST_TRADING
QuoteCondition_NON_FIRM = cvar.QuoteCondition_NON_FIRM
QuoteCondition_MANUAL = cvar.QuoteCondition_MANUAL
QuoteCondition_OUTRIGHT_PRICE = cvar.QuoteCondition_OUTRIGHT_PRICE
QuoteCondition_IMPLIED_PRICE = cvar.QuoteCondition_IMPLIED_PRICE
QuoteCondition_DEPTH_ON_OFFER = cvar.QuoteCondition_DEPTH_ON_OFFER
QuoteCondition_DEPTH_ON_BID = cvar.QuoteCondition_DEPTH_ON_BID
QuoteCondition_CLOSING = cvar.QuoteCondition_CLOSING
QuoteCondition_NEWS_DISSEMINATION = cvar.QuoteCondition_NEWS_DISSEMINATION
QuoteCondition_TRADING_RANGE = cvar.QuoteCondition_TRADING_RANGE
QuoteCondition_ORDER_INFLUX = cvar.QuoteCondition_ORDER_INFLUX
QuoteCondition_DUE_TO_RELATED = cvar.QuoteCondition_DUE_TO_RELATED
QuoteCondition_NEWS_PENDING = cvar.QuoteCondition_NEWS_PENDING
QuoteCondition_ADDITIONAL_INFO = cvar.QuoteCondition_ADDITIONAL_INFO
QuoteCondition_ADDITIONAL_INFO_DUE_TO_RELATED = cvar.QuoteCondition_ADDITIONAL_INFO_DUE_TO_RELATED
QuoteCondition_RESUME = cvar.QuoteCondition_RESUME
QuoteCondition_VIEW_OF_COMMON = cvar.QuoteCondition_VIEW_OF_COMMON
QuoteCondition_VOLUME_ALERT = cvar.QuoteCondition_VOLUME_ALERT
QuoteCondition_ORDER_IMBALANCE = cvar.QuoteCondition_ORDER_IMBALANCE
QuoteCondition_EQUIPMENT_CHANGEOVER = cvar.QuoteCondition_EQUIPMENT_CHANGEOVER
QuoteCondition_NO_OPEN = cvar.QuoteCondition_NO_OPEN
QuoteCondition_REGULAR_ETH = cvar.QuoteCondition_REGULAR_ETH
QuoteCondition_AUTOMATIC_EXECUTION = cvar.QuoteCondition_AUTOMATIC_EXECUTION
QuoteCondition_AUTOMATIC_EXECUTION_ETH = cvar.QuoteCondition_AUTOMATIC_EXECUTION_ETH
QuoteCondition_FAST_MARKET_ETH = cvar.QuoteCondition_FAST_MARKET_ETH
QuoteCondition_INACTIVE_ETH = cvar.QuoteCondition_INACTIVE_ETH
QuoteCondition_ROTATION = cvar.QuoteCondition_ROTATION
QuoteCondition_ROTATION_ETH = cvar.QuoteCondition_ROTATION_ETH
QuoteCondition_HALT = cvar.QuoteCondition_HALT
QuoteCondition_HALT_ETH = cvar.QuoteCondition_HALT_ETH
QuoteCondition_DUE_TO_NEWS_DISSEMINATION = cvar.QuoteCondition_DUE_TO_NEWS_DISSEMINATION
QuoteCondition_DUE_TO_NEWS_PENDING = cvar.QuoteCondition_DUE_TO_NEWS_PENDING
QuoteCondition_TRADING_RESUME = cvar.QuoteCondition_TRADING_RESUME
QuoteCondition_OUT_OF_SEQUENCE = cvar.QuoteCondition_OUT_OF_SEQUENCE
QuoteCondition_BID_SPECIALIST = cvar.QuoteCondition_BID_SPECIALIST
QuoteCondition_OFFER_SPECIALIST = cvar.QuoteCondition_OFFER_SPECIALIST
QuoteCondition_BID_OFFER_SPECIALIST = cvar.QuoteCondition_BID_OFFER_SPECIALIST
QuoteCondition_END_OF_DAY_SAM = cvar.QuoteCondition_END_OF_DAY_SAM
QuoteCondition_FORBIDDEN_SAM = cvar.QuoteCondition_FORBIDDEN_SAM
QuoteCondition_FROZEN_SAM = cvar.QuoteCondition_FROZEN_SAM
QuoteCondition_PRE_OPENING_SAM = cvar.QuoteCondition_PRE_OPENING_SAM
QuoteCondition_OPENING_SAM = cvar.QuoteCondition_OPENING_SAM
QuoteCondition_OPEN_SAM = cvar.QuoteCondition_OPEN_SAM
QuoteCondition_SURVEILLANCE_SAM = cvar.QuoteCondition_SURVEILLANCE_SAM
QuoteCondition_SUSPENDED_SAM = cvar.QuoteCondition_SUSPENDED_SAM
QuoteCondition_RESERVED_SAM = cvar.QuoteCondition_RESERVED_SAM
QuoteCondition_NO_ACTIVE_SAM = cvar.QuoteCondition_NO_ACTIVE_SAM
QuoteCondition_RESTRICTED = cvar.QuoteCondition_RESTRICTED
QuoteCondition_REST_OF_BOOK_VWAP = cvar.QuoteCondition_REST_OF_BOOK_VWAP
QuoteCondition_BETTER_PRICES_IN_CONDITIONAL_ORDERS = cvar.QuoteCondition_BETTER_PRICES_IN_CONDITIONAL_ORDERS
QuoteCondition_MEDIAN_PRICE = cvar.QuoteCondition_MEDIAN_PRICE
QuoteCondition_FULL_CURVE = cvar.QuoteCondition_FULL_CURVE
QuoteCondition_FLAT_CURVE = cvar.QuoteCondition_FLAT_CURVE
TradeCondition_CASH = cvar.TradeCondition_CASH
TradeCondition_AVERAGE_PRICE_TRADE = cvar.TradeCondition_AVERAGE_PRICE_TRADE
TradeCondition_CASH_TRADE = cvar.TradeCondition_CASH_TRADE
TradeCondition_NEXT_DAY = cvar.TradeCondition_NEXT_DAY
TradeCondition_OPENING = cvar.TradeCondition_OPENING
TradeCondition_INTRADAY_TRADE_DETAIL = cvar.TradeCondition_INTRADAY_TRADE_DETAIL
TradeCondition_RULE127_TRADE = cvar.TradeCondition_RULE127_TRADE
TradeCondition_RULE155_TRADE = cvar.TradeCondition_RULE155_TRADE
TradeCondition_SOLD_LAST = cvar.TradeCondition_SOLD_LAST
TradeCondition_NEXT_DAY_TRADE = cvar.TradeCondition_NEXT_DAY_TRADE
TradeCondition_OPENED = cvar.TradeCondition_OPENED
TradeCondition_SELLER = cvar.TradeCondition_SELLER
TradeCondition_SOLD = cvar.TradeCondition_SOLD
TradeCondition_STOPPED_STOCK = cvar.TradeCondition_STOPPED_STOCK
TradeCondition_IMBALANCE_MORE_BUYERS = cvar.TradeCondition_IMBALANCE_MORE_BUYERS
TradeCondition_IMBALANCE_MORE_SELLERS = cvar.TradeCondition_IMBALANCE_MORE_SELLERS
TradeCondition_OPENING_PRICE = cvar.TradeCondition_OPENING_PRICE
TradeCondition_BARGAIN_CONDITION = cvar.TradeCondition_BARGAIN_CONDITION
TradeCondition_CONVERTED_PRICE_INDICATOR = cvar.TradeCondition_CONVERTED_PRICE_INDICATOR
TradeCondition_EXCHANGE_LAST = cvar.TradeCondition_EXCHANGE_LAST
TradeCondition_FINAL_PRICE_OF_SESSION = cvar.TradeCondition_FINAL_PRICE_OF_SESSION
TradeCondition_EX_PIT = cvar.TradeCondition_EX_PIT
TradeCondition_CROSSED = cvar.TradeCondition_CROSSED
TradeCondition_TRADES_RESULTING_FROM_MANUAL = cvar.TradeCondition_TRADES_RESULTING_FROM_MANUAL
TradeCondition_TRADES_RESULTING_FROM_INTERMARKET_SWEEP = cvar.TradeCondition_TRADES_RESULTING_FROM_INTERMARKET_SWEEP
TradeCondition_VOLUME_ONLY = cvar.TradeCondition_VOLUME_ONLY
TradeCondition_DIRECT_PLUS = cvar.TradeCondition_DIRECT_PLUS
TradeCondition_ACQUISITION = cvar.TradeCondition_ACQUISITION
TradeCondition_BUNCHED = cvar.TradeCondition_BUNCHED
TradeCondition_DISTRIBUTION = cvar.TradeCondition_DISTRIBUTION
TradeCondition_BUNCHED_SALE = cvar.TradeCondition_BUNCHED_SALE
TradeCondition_SPLIT_TRADE = cvar.TradeCondition_SPLIT_TRADE
TradeCondition_CANCEL_STOPPED = cvar.TradeCondition_CANCEL_STOPPED
TradeCondition_CANCEL_ETH = cvar.TradeCondition_CANCEL_ETH
TradeCondition_CANCEL_STOPPED_ETH = cvar.TradeCondition_CANCEL_STOPPED_ETH
TradeCondition_OUT_OF_SEQUENCE_ETH = cvar.TradeCondition_OUT_OF_SEQUENCE_ETH
TradeCondition_CANCEL_LAST_ETH = cvar.TradeCondition_CANCEL_LAST_ETH
TradeCondition_SOLD_LAST_SALE_ETH = cvar.TradeCondition_SOLD_LAST_SALE_ETH
TradeCondition_CANCEL_LAST = cvar.TradeCondition_CANCEL_LAST
TradeCondition_SOLD_LAST_SALE = cvar.TradeCondition_SOLD_LAST_SALE
TradeCondition_CANCEL_OPEN = cvar.TradeCondition_CANCEL_OPEN
TradeCondition_CANCEL_OPEN_ETH = cvar.TradeCondition_CANCEL_OPEN_ETH
TradeCondition_OPENED_SALE_ETH = cvar.TradeCondition_OPENED_SALE_ETH
TradeCondition_CANCEL_ONLY = cvar.TradeCondition_CANCEL_ONLY
TradeCondition_CANCEL_ONLY_ETH = cvar.TradeCondition_CANCEL_ONLY_ETH
TradeCondition_LATE_OPEN_ETH = cvar.TradeCondition_LATE_OPEN_ETH
TradeCondition_AUTO_EXECUTION_ETH = cvar.TradeCondition_AUTO_EXECUTION_ETH
TradeCondition_REOPEN = cvar.TradeCondition_REOPEN
TradeCondition_REOPEN_ETH = cvar.TradeCondition_REOPEN_ETH
TradeCondition_ADJUSTED = cvar.TradeCondition_ADJUSTED
TradeCondition_ADJUSTED_ETH = cvar.TradeCondition_ADJUSTED_ETH
TradeCondition_SPREAD = cvar.TradeCondition_SPREAD
TradeCondition_SPREAD_ETH = cvar.TradeCondition_SPREAD_ETH
TradeCondition_STRADDLE = cvar.TradeCondition_STRADDLE
TradeCondition_STRADDLE_ETH = cvar.TradeCondition_STRADDLE_ETH
TradeCondition_STOPPED = cvar.TradeCondition_STOPPED
TradeCondition_STOPPED_ETH = cvar.TradeCondition_STOPPED_ETH
TradeCondition_REGULAR_ETH = cvar.TradeCondition_REGULAR_ETH
TradeCondition_COMBO = cvar.TradeCondition_COMBO
TradeCondition_COMBO_ETH = cvar.TradeCondition_COMBO_ETH
TradeCondition_OFFICIAL_CLOSING_PRICE = cvar.TradeCondition_OFFICIAL_CLOSING_PRICE
TradeCondition_PRIOR_REFERENCE_PRICE = cvar.TradeCondition_PRIOR_REFERENCE_PRICE
TradeCondition_CANCEL = cvar.TradeCondition_CANCEL
TradeCondition_STOPPED_SOLD_LAST = cvar.TradeCondition_STOPPED_SOLD_LAST
TradeCondition_STOPPED_OUT_OF_SEQUENCE = cvar.TradeCondition_STOPPED_OUT_OF_SEQUENCE
TradeCondition_OFFICAL_CLOSING_PRICE = cvar.TradeCondition_OFFICAL_CLOSING_PRICE
TradeCondition_CROSSED_OLD = cvar.TradeCondition_CROSSED_OLD
TradeCondition_FAST_MARKET = cvar.TradeCondition_FAST_MARKET
TradeCondition_AUTOMATIC_EXECUTION = cvar.TradeCondition_AUTOMATIC_EXECUTION
TradeCondition_FORM_T = cvar.TradeCondition_FORM_T
TradeCondition_BASKET_INDEX = cvar.TradeCondition_BASKET_INDEX
TradeCondition_BURST_BASKET = cvar.TradeCondition_BURST_BASKET
TradeCondition_OUTSIDE_SPREAD = cvar.TradeCondition_OUTSIDE_SPREAD
TradeCondition_IMPLIED_TRADE = cvar.TradeCondition_IMPLIED_TRADE
TradeCondition_MARKETPLACE_ENTERED_TRADE = cvar.TradeCondition_MARKETPLACE_ENTERED_TRADE
TradeCondition_MULT_ASSET_CLASS_MULTILEG_TRADE = cvar.TradeCondition_MULT_ASSET_CLASS_MULTILEG_TRADE
TradeCondition_MULTILEG_TO_MULTILEG_TRADE = cvar.TradeCondition_MULTILEG_TO_MULTILEG_TRADE
TradeCondition_OFFICIAL_CLOSING_PRICE_DUP = cvar.TradeCondition_OFFICIAL_CLOSING_PRICE_DUP
TradeCondition_TRADE_THROUGH_EXEMPT = cvar.TradeCondition_TRADE_THROUGH_EXEMPT
TradeCondition_QUOTE_SPREAD = cvar.TradeCondition_QUOTE_SPREAD
TradeCondition_LAST_AUCTION_PRICE = cvar.TradeCondition_LAST_AUCTION_PRICE
TradeCondition_HIGH_PRICE = cvar.TradeCondition_HIGH_PRICE
TradeCondition_LOW_PRICE = cvar.TradeCondition_LOW_PRICE
TradeCondition_SYSTEMATIC_INTERNALISER = cvar.TradeCondition_SYSTEMATIC_INTERNALISER
TradeCondition_AWAY_MARKET = cvar.TradeCondition_AWAY_MARKET
TradeCondition_MIDPOINT_PRICE = cvar.TradeCondition_MIDPOINT_PRICE
TradeCondition_TRADED_BEFORE_ISSUE_DATE = cvar.TradeCondition_TRADED_BEFORE_ISSUE_DATE
TradeCondition_PREVIOUS_CLOSING_PRICE = cvar.TradeCondition_PREVIOUS_CLOSING_PRICE
TradeCondition_NATIONAL_BEST_BID_OFFER = cvar.TradeCondition_NATIONAL_BEST_BID_OFFER
TradeCondition_MULTI_ASSET_CLASS_MULTILEG_TRADE = cvar.TradeCondition_MULTI_ASSET_CLASS_MULTILEG_TRADE
TradeCondition_SHORT_SALE_MIN_PRICE = cvar.TradeCondition_SHORT_SALE_MIN_PRICE
TradeCondition_BENCHMARK = cvar.TradeCondition_BENCHMARK
MDUpdateAction_NEW = cvar.MDUpdateAction_NEW
MDUpdateAction_CHANGE = cvar.MDUpdateAction_CHANGE
MDUpdateAction_DELETE = cvar.MDUpdateAction_DELETE
MDUpdateAction_DELETE_THRU = cvar.MDUpdateAction_DELETE_THRU
MDUpdateAction_DELETE_FROM = cvar.MDUpdateAction_DELETE_FROM
MDUpdateAction_OVERLAY = cvar.MDUpdateAction_OVERLAY
MDReqRejReason_UNKNOWN_SYMBOL = cvar.MDReqRejReason_UNKNOWN_SYMBOL
MDReqRejReason_DUPLICATE_MD_REQ_ID = cvar.MDReqRejReason_DUPLICATE_MD_REQ_ID
MDReqRejReason_INSUFFICIENT_BANDWIDTH = cvar.MDReqRejReason_INSUFFICIENT_BANDWIDTH
MDReqRejReason_INSUFFICIENT_PERMISSIONS = cvar.MDReqRejReason_INSUFFICIENT_PERMISSIONS
MDReqRejReason_UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE = cvar.MDReqRejReason_UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE
MDReqRejReason_UNSUPPORTED_MARKET_DEPTH = cvar.MDReqRejReason_UNSUPPORTED_MARKET_DEPTH
MDReqRejReason_UNSUPPORTED_MD_UPDATE_TYPE = cvar.MDReqRejReason_UNSUPPORTED_MD_UPDATE_TYPE
MDReqRejReason_UNSUPPORTED_AGGREGATED_BOOK = cvar.MDReqRejReason_UNSUPPORTED_AGGREGATED_BOOK
MDReqRejReason_UNSUPPORTED_MD_ENTRY_TYPE = cvar.MDReqRejReason_UNSUPPORTED_MD_ENTRY_TYPE
MDReqRejReason_UNSUPPORTED_MD_IMPLICIT_DELETE = cvar.MDReqRejReason_UNSUPPORTED_MD_IMPLICIT_DELETE
MDReqRejReason_UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG = cvar.MDReqRejReason_UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG
MDReqRejReason_UNSUPPORTED_SCOPE = cvar.MDReqRejReason_UNSUPPORTED_SCOPE
MDReqRejReason_UNSUPPORTED_TRADING_SESSION_ID = cvar.MDReqRejReason_UNSUPPORTED_TRADING_SESSION_ID
MDReqRejReason_INSUFFICIENT_CREDIT = cvar.MDReqRejReason_INSUFFICIENT_CREDIT
DeleteReason_CANCELLATION = cvar.DeleteReason_CANCELLATION
DeleteReason_ERROR = cvar.DeleteReason_ERROR
OpenCloseSettleFlag_DAILY_OPEN = cvar.OpenCloseSettleFlag_DAILY_OPEN
OpenCloseSettleFlag_SESSION_OPEN = cvar.OpenCloseSettleFlag_SESSION_OPEN
OpenCloseSettleFlag_DELIVERY_SETTLEMENT_ENTRY = cvar.OpenCloseSettleFlag_DELIVERY_SETTLEMENT_ENTRY
OpenCloseSettleFlag_EXPECTED_ENTRY = cvar.OpenCloseSettleFlag_EXPECTED_ENTRY
OpenCloseSettleFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettleFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY
FinancialStatus_BANKRUPT = cvar.FinancialStatus_BANKRUPT
FinancialStatus_PENDING_DELISTING = cvar.FinancialStatus_PENDING_DELISTING
FinancialStatus_RESTRICTED = cvar.FinancialStatus_RESTRICTED
CorporateAction_EX_DIVIDEND = cvar.CorporateAction_EX_DIVIDEND
CorporateAction_EX_DISTRIBUTION = cvar.CorporateAction_EX_DISTRIBUTION
CorporateAction_EX_RIGHTS = cvar.CorporateAction_EX_RIGHTS
CorporateAction_NEW = cvar.CorporateAction_NEW
CorporateAction_EX_INTEREST = cvar.CorporateAction_EX_INTEREST
CorporateAction_CASH_DIVIDEND = cvar.CorporateAction_CASH_DIVIDEND
CorporateAction_STOCK_DIVIDEND = cvar.CorporateAction_STOCK_DIVIDEND
CorporateAction_NON_INTEGER_STOCK_SPLIT = cvar.CorporateAction_NON_INTEGER_STOCK_SPLIT
CorporateAction_REVERSE_STOCK_SPLIT = cvar.CorporateAction_REVERSE_STOCK_SPLIT
CorporateAction_STANDARD_INTEGER_STOCK_SPLIT = cvar.CorporateAction_STANDARD_INTEGER_STOCK_SPLIT
CorporateAction_POSITION_CONSOLIDATION = cvar.CorporateAction_POSITION_CONSOLIDATION
CorporateAction_LIQUIDATION_REORGANIZATION = cvar.CorporateAction_LIQUIDATION_REORGANIZATION
CorporateAction_MERGER_REORGANIZATION = cvar.CorporateAction_MERGER_REORGANIZATION
CorporateAction_RIGHTS_OFFERING = cvar.CorporateAction_RIGHTS_OFFERING
CorporateAction_SHAREHOLDER_MEETING = cvar.CorporateAction_SHAREHOLDER_MEETING
CorporateAction_SPINOFF = cvar.CorporateAction_SPINOFF
CorporateAction_TENDER_OFFER = cvar.CorporateAction_TENDER_OFFER
CorporateAction_WARRANT = cvar.CorporateAction_WARRANT
CorporateAction_SPECIAL_ACTION = cvar.CorporateAction_SPECIAL_ACTION
CorporateAction_SYMBOL_CONVERSION = cvar.CorporateAction_SYMBOL_CONVERSION
CorporateAction_CUSIP = cvar.CorporateAction_CUSIP
CorporateAction_LEAP_ROLLOVER = cvar.CorporateAction_LEAP_ROLLOVER
CorporateAction_SUCCESSION_EVENT = cvar.CorporateAction_SUCCESSION_EVENT
QuoteAckStatus_ACCEPTED = cvar.QuoteAckStatus_ACCEPTED
QuoteAckStatus_CANCEL_FOR_SYMBOL = cvar.QuoteAckStatus_CANCEL_FOR_SYMBOL
QuoteAckStatus_CANCELED_FOR_SECURITY_TYPE = cvar.QuoteAckStatus_CANCELED_FOR_SECURITY_TYPE
QuoteAckStatus_CANCELED_FOR_UNDERLYING = cvar.QuoteAckStatus_CANCELED_FOR_UNDERLYING
QuoteAckStatus_CANCELED_ALL = cvar.QuoteAckStatus_CANCELED_ALL
QuoteAckStatus_REJECTED = cvar.QuoteAckStatus_REJECTED
QuoteAckStatus_RECEIVED_NOT_YET_PROCESSED = cvar.QuoteAckStatus_RECEIVED_NOT_YET_PROCESSED
QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES = cvar.QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES
QuoteCancelType_CANCEL_FOR_SECURITY_TYPE = cvar.QuoteCancelType_CANCEL_FOR_SECURITY_TYPE
QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY = cvar.QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY
QuoteCancelType_CANCEL_ALL_QUOTES = cvar.QuoteCancelType_CANCEL_ALL_QUOTES
QuoteCancelType_CANCEL_QUOTE_SPECIFIED_IN_QUOTE_ID = cvar.QuoteCancelType_CANCEL_QUOTE_SPECIFIED_IN_QUOTE_ID
QuoteCancelType_CANCEL_SPECIFIED_SINGLE_QUOTE = cvar.QuoteCancelType_CANCEL_SPECIFIED_SINGLE_QUOTE
QuoteCancelType_CANCEL_BY_TYPE_OF_QUOTE = cvar.QuoteCancelType_CANCEL_BY_TYPE_OF_QUOTE
QuoteCancelType_CANCEL_FOR_SECURITY_ISSUER = cvar.QuoteCancelType_CANCEL_FOR_SECURITY_ISSUER
QuoteCancelType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.QuoteCancelType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
QuoteRejectReason_UNKNOWN_SYMBOL = cvar.QuoteRejectReason_UNKNOWN_SYMBOL
QuoteRejectReason_EXCHANGE = cvar.QuoteRejectReason_EXCHANGE
QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT = cvar.QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
QuoteRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteRejectReason_TOO_LATE_TO_ENTER
QuoteRejectReason_UNKNOWN_QUOTE = cvar.QuoteRejectReason_UNKNOWN_QUOTE
QuoteRejectReason_DUPLICATE_QUOTE = cvar.QuoteRejectReason_DUPLICATE_QUOTE
QuoteRejectReason_INVALID_BID = cvar.QuoteRejectReason_INVALID_BID
QuoteRejectReason_INVALID_PRICE = cvar.QuoteRejectReason_INVALID_PRICE
QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY = cvar.QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
QuoteRejectReason_OTHER = cvar.QuoteRejectReason_OTHER
QuoteRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.QuoteRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
QuoteRejectReason_QUOTE_LOCKED = cvar.QuoteRejectReason_QUOTE_LOCKED
QuoteRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.QuoteRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
QuoteRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.QuoteRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
QuoteRejectReason_NOTIONAL_VALUE_EXCEEDS_THRESHOLD = cvar.QuoteRejectReason_NOTIONAL_VALUE_EXCEEDS_THRESHOLD
QuoteRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND_DEPR = cvar.QuoteRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND_DEPR
QuoteRejectReason_REFERENCE_PRICE_NOT_AVAILABLE = cvar.QuoteRejectReason_REFERENCE_PRICE_NOT_AVAILABLE
QuoteRejectReason_INSUFFICIENT_CREDIT_LIMIT = cvar.QuoteRejectReason_INSUFFICIENT_CREDIT_LIMIT
QuoteRejectReason_EXCEEDED_CLIP_SIZE_LIMIT = cvar.QuoteRejectReason_EXCEEDED_CLIP_SIZE_LIMIT
QuoteRejectReason_EXCEEDED_MAX_NOTIONAL_ORDER_AMT = cvar.QuoteRejectReason_EXCEEDED_MAX_NOTIONAL_ORDER_AMT
QuoteRejectReason_EXCEEDED_DV01_PV01_LIMIT = cvar.QuoteRejectReason_EXCEEDED_DV01_PV01_LIMIT
QuoteRejectReason_EXCEEDED_CS01_LIMIT = cvar.QuoteRejectReason_EXCEEDED_CS01_LIMIT
QuoteResponseLevel_NO_ACKNOWLEDGEMENT = cvar.QuoteResponseLevel_NO_ACKNOWLEDGEMENT
QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES = cvar.QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES
QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE = cvar.QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE
QuoteResponseLevel_SUMMARY_ACKNOWLEDGEMENT = cvar.QuoteResponseLevel_SUMMARY_ACKNOWLEDGEMENT
QuoteRequestType_MANUAL = cvar.QuoteRequestType_MANUAL
QuoteRequestType_AUTOMATIC = cvar.QuoteRequestType_AUTOMATIC
QuoteRequestType_CONFIRM_QUOTE = cvar.QuoteRequestType_CONFIRM_QUOTE
SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS = cvar.SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS
SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_SPECIFICATIONS = cvar.SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_SPECIFICATIONS
SecurityRequestType_REQUEST_LIST_SECURITY_TYPES = cvar.SecurityRequestType_REQUEST_LIST_SECURITY_TYPES
SecurityRequestType_REQUEST_LIST_SECURITIES = cvar.SecurityRequestType_REQUEST_LIST_SECURITIES
SecurityRequestType_SYMBOL = cvar.SecurityRequestType_SYMBOL
SecurityRequestType_SECURITY_TYPE_AND_OR_CFI_CODE = cvar.SecurityRequestType_SECURITY_TYPE_AND_OR_CFI_CODE
SecurityRequestType_PRODUCT = cvar.SecurityRequestType_PRODUCT
SecurityRequestType_TRADING_SESSION_ID = cvar.SecurityRequestType_TRADING_SESSION_ID
SecurityRequestType_ALL_SECURITIES = cvar.SecurityRequestType_ALL_SECURITIES
SecurityRequestType_MARKET_ID_OR_MARKET_ID = cvar.SecurityRequestType_MARKET_ID_OR_MARKET_ID
SecurityResponseType_ACCEPT_AS_IS = cvar.SecurityResponseType_ACCEPT_AS_IS
SecurityResponseType_ACCEPT_WITH_REVISIONS = cvar.SecurityResponseType_ACCEPT_WITH_REVISIONS
SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST = cvar.SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST
SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST = cvar.SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST
SecurityResponseType_REJECT_SECURITY_PROPOSAL = cvar.SecurityResponseType_REJECT_SECURITY_PROPOSAL
SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA = cvar.SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA
UnsolicitedIndicator_NO = cvar.UnsolicitedIndicator_NO
UnsolicitedIndicator_YES = cvar.UnsolicitedIndicator_YES
SecurityTradingStatus_OPENING_DELAY = cvar.SecurityTradingStatus_OPENING_DELAY
SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL = cvar.SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL
SecurityTradingStatus_NO_MARKET_IMBALANCE = cvar.SecurityTradingStatus_NO_MARKET_IMBALANCE
SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE = cvar.SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE
SecurityTradingStatus_ITS_PRE_OPENING = cvar.SecurityTradingStatus_ITS_PRE_OPENING
SecurityTradingStatus_NEW_PRICE_INDICATION = cvar.SecurityTradingStatus_NEW_PRICE_INDICATION
SecurityTradingStatus_TRADE_DISSEMINATION_TIME = cvar.SecurityTradingStatus_TRADE_DISSEMINATION_TIME
SecurityTradingStatus_READY_TO_TRADE = cvar.SecurityTradingStatus_READY_TO_TRADE
SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING = cvar.SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING
SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET = cvar.SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET
SecurityTradingStatus_TRADING_HALT = cvar.SecurityTradingStatus_TRADING_HALT
SecurityTradingStatus_UNKNOWN_OR_INVALID = cvar.SecurityTradingStatus_UNKNOWN_OR_INVALID
SecurityTradingStatus_RESUME = cvar.SecurityTradingStatus_RESUME
SecurityTradingStatus_NO_OPEN = cvar.SecurityTradingStatus_NO_OPEN
SecurityTradingStatus_PRICE_INDICATION = cvar.SecurityTradingStatus_PRICE_INDICATION
SecurityTradingStatus_TRADING_RANGE_INDICATION = cvar.SecurityTradingStatus_TRADING_RANGE_INDICATION
SecurityTradingStatus_MARKET_IMBALANCE_BUY = cvar.SecurityTradingStatus_MARKET_IMBALANCE_BUY
SecurityTradingStatus_MARKET_IMBALANCE_SELL = cvar.SecurityTradingStatus_MARKET_IMBALANCE_SELL
SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY = cvar.SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY
SecurityTradingStatus_OPENING_ROTATION = cvar.SecurityTradingStatus_OPENING_ROTATION
SecurityTradingStatus_PRE_OPEN = cvar.SecurityTradingStatus_PRE_OPEN
SecurityTradingStatus_FAST_MARKET = cvar.SecurityTradingStatus_FAST_MARKET
SecurityTradingStatus_PRE_CROSS = cvar.SecurityTradingStatus_PRE_CROSS
SecurityTradingStatus_CROSS = cvar.SecurityTradingStatus_CROSS
SecurityTradingStatus_POST_CLOSE = cvar.SecurityTradingStatus_POST_CLOSE
SecurityTradingStatus_NO_CANCEL = cvar.SecurityTradingStatus_NO_CANCEL
HaltReasonChar_NEWS_DISSEMINATION = cvar.HaltReasonChar_NEWS_DISSEMINATION
HaltReasonChar_ORDER_INFLUX = cvar.HaltReasonChar_ORDER_INFLUX
HaltReasonChar_ORDER_IMBALANCE = cvar.HaltReasonChar_ORDER_IMBALANCE
HaltReasonChar_ADDITIONAL_INFORMATION = cvar.HaltReasonChar_ADDITIONAL_INFORMATION
HaltReasonChar_NEWS_PENDING = cvar.HaltReasonChar_NEWS_PENDING
HaltReasonChar_EQUIPMENT_CHANGEOVER = cvar.HaltReasonChar_EQUIPMENT_CHANGEOVER
HaltReasonChar_NEW_PENDING = cvar.HaltReasonChar_NEW_PENDING
InViewOfCommon_NO = cvar.InViewOfCommon_NO
InViewOfCommon_YES = cvar.InViewOfCommon_YES
DueToRelated_NO = cvar.DueToRelated_NO
DueToRelated_YES = cvar.DueToRelated_YES
Adjustment_CANCEL = cvar.Adjustment_CANCEL
Adjustment_ERROR = cvar.Adjustment_ERROR
Adjustment_CORRECTION = cvar.Adjustment_CORRECTION
TradingSessionID_DAY = cvar.TradingSessionID_DAY
TradingSessionID_HALF_DAY = cvar.TradingSessionID_HALF_DAY
TradingSessionID_MORNING = cvar.TradingSessionID_MORNING
TradingSessionID_AFTERNOON = cvar.TradingSessionID_AFTERNOON
TradingSessionID_EVENING = cvar.TradingSessionID_EVENING
TradingSessionID_AFTER_HOURS = cvar.TradingSessionID_AFTER_HOURS
TradingSessionID_HOLIDAY = cvar.TradingSessionID_HOLIDAY
TradSesMethod_ELECTRONIC = cvar.TradSesMethod_ELECTRONIC
TradSesMethod_OPEN_OUTCRY = cvar.TradSesMethod_OPEN_OUTCRY
TradSesMethod_TWO_PARTY = cvar.TradSesMethod_TWO_PARTY
TradSesMethod_VOICE = cvar.TradSesMethod_VOICE
TradSesMode_TESTING = cvar.TradSesMode_TESTING
TradSesMode_SIMULATED = cvar.TradSesMode_SIMULATED
TradSesMode_PRODUCTION = cvar.TradSesMode_PRODUCTION
TradSesStatus_HALTED = cvar.TradSesStatus_HALTED
TradSesStatus_OPEN = cvar.TradSesStatus_OPEN
TradSesStatus_CLOSED = cvar.TradSesStatus_CLOSED
TradSesStatus_PRE_OPEN = cvar.TradSesStatus_PRE_OPEN
TradSesStatus_PRE_CLOSE = cvar.TradSesStatus_PRE_CLOSE
TradSesStatus_REQUEST_REJECTED = cvar.TradSesStatus_REQUEST_REJECTED
TradSesStatus_UNKNOWN = cvar.TradSesStatus_UNKNOWN
QuoteEntryRejectReason_UNKNOWN_SYMBOL = cvar.QuoteEntryRejectReason_UNKNOWN_SYMBOL
QuoteEntryRejectReason_EXCHANGE = cvar.QuoteEntryRejectReason_EXCHANGE
QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT = cvar.QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT
QuoteEntryRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteEntryRejectReason_TOO_LATE_TO_ENTER
QuoteEntryRejectReason_UNKNOWN_QUOTE = cvar.QuoteEntryRejectReason_UNKNOWN_QUOTE
QuoteEntryRejectReason_DUPLICATE_QUOTE = cvar.QuoteEntryRejectReason_DUPLICATE_QUOTE
QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD = cvar.QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD
QuoteEntryRejectReason_INVALID_PRICE = cvar.QuoteEntryRejectReason_INVALID_PRICE
QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY = cvar.QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
BidRequestTransType_CANCEL = cvar.BidRequestTransType_CANCEL
BidRequestTransType_NEW = cvar.BidRequestTransType_NEW
SolicitedFlag_NO = cvar.SolicitedFlag_NO
SolicitedFlag_YES = cvar.SolicitedFlag_YES
ExecRestatementReason_GT_CORPORATE_ACTION = cvar.ExecRestatementReason_GT_CORPORATE_ACTION
ExecRestatementReason_GT_RENEWAL = cvar.ExecRestatementReason_GT_RENEWAL
ExecRestatementReason_VERBAL_CHANGE = cvar.ExecRestatementReason_VERBAL_CHANGE
ExecRestatementReason_REPRICING_OF_ORDER = cvar.ExecRestatementReason_REPRICING_OF_ORDER
ExecRestatementReason_BROKER_OPTION = cvar.ExecRestatementReason_BROKER_OPTION
ExecRestatementReason_PARTIAL_DECLINE_OF_ORDER_QTY = cvar.ExecRestatementReason_PARTIAL_DECLINE_OF_ORDER_QTY
ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE = cvar.ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE
ExecRestatementReason_MARKET = cvar.ExecRestatementReason_MARKET
ExecRestatementReason_CANCEL_ON_TRADING_HALT = cvar.ExecRestatementReason_CANCEL_ON_TRADING_HALT
ExecRestatementReason_CANCELED = cvar.ExecRestatementReason_CANCELED
ExecRestatementReason_WAREHOUSE_RECAP = cvar.ExecRestatementReason_WAREHOUSE_RECAP
ExecRestatementReason_OTHER = cvar.ExecRestatementReason_OTHER
ExecRestatementReason_PEG_REFRESH = cvar.ExecRestatementReason_PEG_REFRESH
ExecRestatementReason_CANCEL_ON_CONNECTION_LOSS = cvar.ExecRestatementReason_CANCEL_ON_CONNECTION_LOSS
ExecRestatementReason_CANCEL_ON_LOGOUT = cvar.ExecRestatementReason_CANCEL_ON_LOGOUT
ExecRestatementReason_ASSIGN_TIME_PRIORITY = cvar.ExecRestatementReason_ASSIGN_TIME_PRIORITY
ExecRestatementReason_CANCELLED_FOR_TRADE_PRICE_VIOLATION = cvar.ExecRestatementReason_CANCELLED_FOR_TRADE_PRICE_VIOLATION
ExecRestatementReason_CANCELLED_FOR_CROSS_IMBALANCE = cvar.ExecRestatementReason_CANCELLED_FOR_CROSS_IMBALANCE
ExecRestatementReason_CXLD_SMP = cvar.ExecRestatementReason_CXLD_SMP
ExecRestatementReason_CXLD_SMP_AGGRESSIVE = cvar.ExecRestatementReason_CXLD_SMP_AGGRESSIVE
ExecRestatementReason_CXLD_SMP_PASSIVE = cvar.ExecRestatementReason_CXLD_SMP_PASSIVE
ExecRestatementReason_CXLD_SMP_AGGRESSIVE_PASSIVE = cvar.ExecRestatementReason_CXLD_SMP_AGGRESSIVE_PASSIVE
BusinessRejectReason_OTHER = cvar.BusinessRejectReason_OTHER
BusinessRejectReason_UNKNOWN_ID = cvar.BusinessRejectReason_UNKNOWN_ID
BusinessRejectReason_UNKNOWN_SECURITY = cvar.BusinessRejectReason_UNKNOWN_SECURITY
BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE = cvar.BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE
BusinessRejectReason_APPLICATION_NOT_AVAILABLE = cvar.BusinessRejectReason_APPLICATION_NOT_AVAILABLE
BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING = cvar.BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING
BusinessRejectReason_DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME = cvar.BusinessRejectReason_DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME
BusinessRejectReason_NOT_AUTHORIZED = cvar.BusinessRejectReason_NOT_AUTHORIZED
BusinessRejectReason_INVALID_PRICE_INCREMENT = cvar.BusinessRejectReason_INVALID_PRICE_INCREMENT
BusinessRejectReason_THROTTLE_LIMIT_EXCEEDED = cvar.BusinessRejectReason_THROTTLE_LIMIT_EXCEEDED
BusinessRejectReason_THROTTLE_LIMIT_EXCEEDED_SESSION_DISCONNECTED = cvar.BusinessRejectReason_THROTTLE_LIMIT_EXCEEDED_SESSION_DISCONNECTED
BusinessRejectReason_THROTTLED_MESSAGES_REJECTED_ON_REQUEST = cvar.BusinessRejectReason_THROTTLED_MESSAGES_REJECTED_ON_REQUEST
MsgDirection_RECEIVE = cvar.MsgDirection_RECEIVE
MsgDirection_SEND = cvar.MsgDirection_SEND
DiscretionInst_RELATED_TO_DISPLAYED_PRICE = cvar.DiscretionInst_RELATED_TO_DISPLAYED_PRICE
DiscretionInst_RELATED_TO_MARKET_PRICE = cvar.DiscretionInst_RELATED_TO_MARKET_PRICE
DiscretionInst_RELATED_TO_PRIMARY_PRICE = cvar.DiscretionInst_RELATED_TO_PRIMARY_PRICE
DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE = cvar.DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE
DiscretionInst_RELATED_TO_MIDPOINT_PRICE = cvar.DiscretionInst_RELATED_TO_MIDPOINT_PRICE
DiscretionInst_RELATED_TO_LAST_TRADE_PRICE = cvar.DiscretionInst_RELATED_TO_LAST_TRADE_PRICE
DiscretionInst_RELATED_TO_VWAP = cvar.DiscretionInst_RELATED_TO_VWAP
DiscretionInst_AVERAGE_PRICE_GUARANTEE = cvar.DiscretionInst_AVERAGE_PRICE_GUARANTEE
BidType_NON_DISCLOSED = cvar.BidType_NON_DISCLOSED
BidType_DISCLOSED = cvar.BidType_DISCLOSED
BidType_NO_BIDDING_PROCESS = cvar.BidType_NO_BIDDING_PROCESS
BidDescriptorType_INDEX = cvar.BidDescriptorType_INDEX
BidDescriptorType_COUNTRY = cvar.BidDescriptorType_COUNTRY
BidDescriptorType_SECTOR = cvar.BidDescriptorType_SECTOR
SideValueInd_SIDE_VALUE1 = cvar.SideValueInd_SIDE_VALUE1
SideValueInd_SIDE_VALUE2 = cvar.SideValueInd_SIDE_VALUE2
LiquidityIndType_FIVE_DAY_MOVING_AVERAGE = cvar.LiquidityIndType_FIVE_DAY_MOVING_AVERAGE
LiquidityIndType_TWENTY_DAY_MOVING_AVERAGE = cvar.LiquidityIndType_TWENTY_DAY_MOVING_AVERAGE
LiquidityIndType_NORMAL_MARKET_SIZE = cvar.LiquidityIndType_NORMAL_MARKET_SIZE
LiquidityIndType_OTHER = cvar.LiquidityIndType_OTHER
ExchangeForPhysical_NO = cvar.ExchangeForPhysical_NO
ExchangeForPhysical_YES = cvar.ExchangeForPhysical_YES
ProgRptReqs_BUY_SIDE_REQUESTS = cvar.ProgRptReqs_BUY_SIDE_REQUESTS
ProgRptReqs_SELL_SIDE_SENDS = cvar.ProgRptReqs_SELL_SIDE_SENDS
ProgRptReqs_REAL_TIME_EXECUTION_REPORTS = cvar.ProgRptReqs_REAL_TIME_EXECUTION_REPORTS
IncTaxInd_NET = cvar.IncTaxInd_NET
IncTaxInd_GROSS = cvar.IncTaxInd_GROSS
TradeType_AGENCY = cvar.TradeType_AGENCY
TradeType_VWAP_GUARANTEE = cvar.TradeType_VWAP_GUARANTEE
TradeType_GUARANTEED_CLOSE = cvar.TradeType_GUARANTEED_CLOSE
TradeType_RISK_TRADE = cvar.TradeType_RISK_TRADE
BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION = cvar.BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION
BasisPxType_CLOSING_PRICE = cvar.BasisPxType_CLOSING_PRICE
BasisPxType_CURRENT_PRICE = cvar.BasisPxType_CURRENT_PRICE
BasisPxType_SQ = cvar.BasisPxType_SQ
BasisPxType_VWAP_THROUGH_A_DAY = cvar.BasisPxType_VWAP_THROUGH_A_DAY
BasisPxType_VWAP_THROUGH_A_MORNING_SESSION = cvar.BasisPxType_VWAP_THROUGH_A_MORNING_SESSION
BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION = cvar.BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION
BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT = cvar.BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT
BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT = cvar.BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT
BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT = cvar.BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT
BasisPxType_STRIKE = cvar.BasisPxType_STRIKE
BasisPxType_OPEN = cvar.BasisPxType_OPEN
BasisPxType_OTHERS = cvar.BasisPxType_OTHERS
PriceType_PERCENTAGE = cvar.PriceType_PERCENTAGE
PriceType_PER_UNIT = cvar.PriceType_PER_UNIT
PriceType_FIXED_AMOUNT = cvar.PriceType_FIXED_AMOUNT
PriceType_DISCOUNT = cvar.PriceType_DISCOUNT
PriceType_SPREAD = cvar.PriceType_SPREAD
PriceType_TED_PRICE = cvar.PriceType_TED_PRICE
PriceType_TED_YIELD = cvar.PriceType_TED_YIELD
PriceType_PREMIUM = cvar.PriceType_PREMIUM
PriceType_YIELD = cvar.PriceType_YIELD
PriceType_FIXED_CABINET_TRADE_PRICE = cvar.PriceType_FIXED_CABINET_TRADE_PRICE
PriceType_VARIABLE_CABINET_TRADE_PRICE = cvar.PriceType_VARIABLE_CABINET_TRADE_PRICE
PriceType_PRODUCT_TICKS_IN_HALFS = cvar.PriceType_PRODUCT_TICKS_IN_HALFS
PriceType_PRODUCT_TICKS_IN_FOURTHS = cvar.PriceType_PRODUCT_TICKS_IN_FOURTHS
PriceType_PRODUCT_TICKS_IN_EIGHTS = cvar.PriceType_PRODUCT_TICKS_IN_EIGHTS
PriceType_PRODUCT_TICKS_IN_SIXTEENTHS = cvar.PriceType_PRODUCT_TICKS_IN_SIXTEENTHS
PriceType_PRODUCT_TICKS_IN_THIRTY_SECONDS = cvar.PriceType_PRODUCT_TICKS_IN_THIRTY_SECONDS
PriceType_PRODUCT_TICKS_IN_SIXTY_FORTHS = cvar.PriceType_PRODUCT_TICKS_IN_SIXTY_FORTHS
PriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS = cvar.PriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS
PriceType_PRICE_SPREAD = cvar.PriceType_PRICE_SPREAD
PriceType_PRODUCT_TICKS_IN_HALVES = cvar.PriceType_PRODUCT_TICKS_IN_HALVES
PriceType_PRODUCT_TICKS_IN_EIGHTHS = cvar.PriceType_PRODUCT_TICKS_IN_EIGHTHS
PriceType_PRODUCT_TICKS_IN_SIXTY_FOURTHS = cvar.PriceType_PRODUCT_TICKS_IN_SIXTY_FOURTHS
PriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTHS = cvar.PriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTHS
PriceType_NORMAL_RATE_REPRESENTATION = cvar.PriceType_NORMAL_RATE_REPRESENTATION
PriceType_INVERSE_RATE_REPRESENTATION = cvar.PriceType_INVERSE_RATE_REPRESENTATION
PriceType_BASIS_POINTS = cvar.PriceType_BASIS_POINTS
PriceType_UPFRONT_POINTS = cvar.PriceType_UPFRONT_POINTS
PriceType_INTEREST_RATE = cvar.PriceType_INTEREST_RATE
PriceType_PERCENTAGE_NOTIONAL = cvar.PriceType_PERCENTAGE_NOTIONAL
GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION = cvar.GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION
GTBookingInst_ACCUMULATE_UNTIL_FILLED_OR_EXPIRED = cvar.GTBookingInst_ACCUMULATE_UNTIL_FILLED_OR_EXPIRED
GTBookingInst_ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE = cvar.GTBookingInst_ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE
GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE = cvar.GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE
ListStatusType_ALERT = cvar.ListStatusType_ALERT
ListStatusType_EXEC_STARTED = cvar.ListStatusType_EXEC_STARTED
ListStatusType_TIMED = cvar.ListStatusType_TIMED
ListStatusType_RESPONSE = cvar.ListStatusType_RESPONSE
ListStatusType_ACK = cvar.ListStatusType_ACK
ListStatusType_ALL_DONE = cvar.ListStatusType_ALL_DONE
NetGrossInd_NET = cvar.NetGrossInd_NET
NetGrossInd_GROSS = cvar.NetGrossInd_GROSS
ListOrderStatus_CANCELLING = cvar.ListOrderStatus_CANCELLING
ListOrderStatus_EXECUTING = cvar.ListOrderStatus_EXECUTING
ListOrderStatus_REJECT = cvar.ListOrderStatus_REJECT
ListOrderStatus_ALL_DONE = cvar.ListOrderStatus_ALL_DONE
ListOrderStatus_ALERT = cvar.ListOrderStatus_ALERT
ListOrderStatus_RECEIVED_FOR_EXECUTION = cvar.ListOrderStatus_RECEIVED_FOR_EXECUTION
ListOrderStatus_IN_BIDDING_PROCESS = cvar.ListOrderStatus_IN_BIDDING_PROCESS
ListExecInstType_IMMEDIATE = cvar.ListExecInstType_IMMEDIATE
ListExecInstType_WAIT_FOR_INSTRUCTION = cvar.ListExecInstType_WAIT_FOR_INSTRUCTION
ListExecInstType_BUY_DRIVEN_CASH_WITHDRAW = cvar.ListExecInstType_BUY_DRIVEN_CASH_WITHDRAW
ListExecInstType_BUY_DRIVEN_CASH_TOP_UP = cvar.ListExecInstType_BUY_DRIVEN_CASH_TOP_UP
ListExecInstType_SELL_DRIVEN = cvar.ListExecInstType_SELL_DRIVEN
CxlRejResponseTo_ORDER_CANCEL_REQUEST = cvar.CxlRejResponseTo_ORDER_CANCEL_REQUEST
CxlRejResponseTo_ORDER_CANCEL = cvar.CxlRejResponseTo_ORDER_CANCEL
CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST = cvar.CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST
MultiLegReportingType_SINGLE_SECURITY = cvar.MultiLegReportingType_SINGLE_SECURITY
MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = cvar.MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
MultiLegReportingType_MULTI_LEG_SECURITY = cvar.MultiLegReportingType_MULTI_LEG_SECURITY
SecurityIDSource_SICOVAM = cvar.SecurityIDSource_SICOVAM
SecurityIDSource_SEDOL = cvar.SecurityIDSource_SEDOL
SecurityIDSource_CUSIP = cvar.SecurityIDSource_CUSIP
SecurityIDSource_QUIK = cvar.SecurityIDSource_QUIK
SecurityIDSource_BELGIAN = cvar.SecurityIDSource_BELGIAN
SecurityIDSource_VALOREN = cvar.SecurityIDSource_VALOREN
SecurityIDSource_DUTCH = cvar.SecurityIDSource_DUTCH
SecurityIDSource_WERTPAPIER = cvar.SecurityIDSource_WERTPAPIER
SecurityIDSource_BLOOMBERG_SYMBOL = cvar.SecurityIDSource_BLOOMBERG_SYMBOL
SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION
SecurityIDSource_EXCHANGE_SYMBOL = cvar.SecurityIDSource_EXCHANGE_SYMBOL
SecurityIDSource_ISO_COUNTRY_CODE = cvar.SecurityIDSource_ISO_COUNTRY_CODE
SecurityIDSource_ISO_CURRENCY_CODE = cvar.SecurityIDSource_ISO_CURRENCY_CODE
SecurityIDSource_RIC_CODE = cvar.SecurityIDSource_RIC_CODE
SecurityIDSource_ISIN_NUMBER = cvar.SecurityIDSource_ISIN_NUMBER
SecurityIDSource_COMMON = cvar.SecurityIDSource_COMMON
SecurityIDSource_CLEARING_HOUSE = cvar.SecurityIDSource_CLEARING_HOUSE
SecurityIDSource_ISDA_FP_ML_SPECIFICATION = cvar.SecurityIDSource_ISDA_FP_ML_SPECIFICATION
SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY = cvar.SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY
SecurityIDSource_ISDA_FP_MLURL = cvar.SecurityIDSource_ISDA_FP_MLURL
SecurityIDSource_LETTER_OF_CREDIT = cvar.SecurityIDSource_LETTER_OF_CREDIT
SecurityIDSource_MARKETPLACE_ASSIGNED_IDENTIFIER = cvar.SecurityIDSource_MARKETPLACE_ASSIGNED_IDENTIFIER
SecurityIDSource_MARKIT_RED_ENTITY_CLIP = cvar.SecurityIDSource_MARKIT_RED_ENTITY_CLIP
SecurityIDSource_MARKIT_RED_PAIR_CLIP = cvar.SecurityIDSource_MARKIT_RED_PAIR_CLIP
SecurityIDSource_CFTC_COMMODITY_CODE = cvar.SecurityIDSource_CFTC_COMMODITY_CODE
SecurityIDSource_ISDA_COMMODITY_REFERENCE_PRICE = cvar.SecurityIDSource_ISDA_COMMODITY_REFERENCE_PRICE
SecurityIDSource_FINANCIAL_INSTRUMENT_GLOBAL_IDENTIFIER = cvar.SecurityIDSource_FINANCIAL_INSTRUMENT_GLOBAL_IDENTIFIER
SecurityIDSource_LEGAL_ENTITY_IDENTIFIER = cvar.SecurityIDSource_LEGAL_ENTITY_IDENTIFIER
SecurityIDSource_SYNTHETIC = cvar.SecurityIDSource_SYNTHETIC
SecurityIDSource_FIDESSA_INSTRUMENT_MNEMONIC = cvar.SecurityIDSource_FIDESSA_INSTRUMENT_MNEMONIC
SecurityIDSource_INDEX_NAME = cvar.SecurityIDSource_INDEX_NAME
SecurityIDSource_UNIFORM_SYMBOL = cvar.SecurityIDSource_UNIFORM_SYMBOL
SecurityIDSource_DIGITAL_TOKEN_IDENTIFIER = cvar.SecurityIDSource_DIGITAL_TOKEN_IDENTIFIER
IOIQty_LARGE = cvar.IOIQty_LARGE
IOIQty_MEDIUM = cvar.IOIQty_MEDIUM
IOIQty_SMALL = cvar.IOIQty_SMALL
IOIQty_UNDISCLOSED_QUANTITY = cvar.IOIQty_UNDISCLOSED_QUANTITY
PositionEffect_FIFO = cvar.PositionEffect_FIFO
PositionEffect_ROLLED = cvar.PositionEffect_ROLLED
PositionEffect_CLOSE = cvar.PositionEffect_CLOSE
PositionEffect_OPEN = cvar.PositionEffect_OPEN
PositionEffect_CLOSE_BUT_NOTIFY_ON_OPEN = cvar.PositionEffect_CLOSE_BUT_NOTIFY_ON_OPEN
PositionEffect_DEFAULT = cvar.PositionEffect_DEFAULT
BenchmarkCurveName_SWAP = cvar.BenchmarkCurveName_SWAP
BenchmarkCurveName_LIBID = cvar.BenchmarkCurveName_LIBID
BenchmarkCurveName_OTHER = cvar.BenchmarkCurveName_OTHER
BenchmarkCurveName_TREASURY = cvar.BenchmarkCurveName_TREASURY
BenchmarkCurveName_EURIBOR = cvar.BenchmarkCurveName_EURIBOR
BenchmarkCurveName_PFANDBRIEFE = cvar.BenchmarkCurveName_PFANDBRIEFE
BenchmarkCurveName_FUTURE_SWAP = cvar.BenchmarkCurveName_FUTURE_SWAP
BenchmarkCurveName_MUNI_AAA = cvar.BenchmarkCurveName_MUNI_AAA
BenchmarkCurveName_LIBOR = cvar.BenchmarkCurveName_LIBOR
BenchmarkCurveName_EONIA = cvar.BenchmarkCurveName_EONIA
BenchmarkCurveName_EUREPO = cvar.BenchmarkCurveName_EUREPO
BenchmarkCurveName_SONIA = cvar.BenchmarkCurveName_SONIA
BenchmarkCurveName_FED_FUND_RATE_EFFECTIVE = cvar.BenchmarkCurveName_FED_FUND_RATE_EFFECTIVE
BenchmarkCurveName_FED_OPEN = cvar.BenchmarkCurveName_FED_OPEN
BenchmarkCurveName_AUBSW = cvar.BenchmarkCurveName_AUBSW
BenchmarkCurveName_BUBOR = cvar.BenchmarkCurveName_BUBOR
BenchmarkCurveName_CDOR = cvar.BenchmarkCurveName_CDOR
BenchmarkCurveName_CIBOR = cvar.BenchmarkCurveName_CIBOR
BenchmarkCurveName_EONIASWAP = cvar.BenchmarkCurveName_EONIASWAP
BenchmarkCurveName_ESTR = cvar.BenchmarkCurveName_ESTR
BenchmarkCurveName_EURODOLLAR = cvar.BenchmarkCurveName_EURODOLLAR
BenchmarkCurveName_EUROSWISS = cvar.BenchmarkCurveName_EUROSWISS
BenchmarkCurveName_GCFREPO = cvar.BenchmarkCurveName_GCFREPO
BenchmarkCurveName_ISDAFIX = cvar.BenchmarkCurveName_ISDAFIX
BenchmarkCurveName_JIBAR = cvar.BenchmarkCurveName_JIBAR
BenchmarkCurveName_MOSPRIM = cvar.BenchmarkCurveName_MOSPRIM
BenchmarkCurveName_NIBOR = cvar.BenchmarkCurveName_NIBOR
BenchmarkCurveName_PRIBOR = cvar.BenchmarkCurveName_PRIBOR
BenchmarkCurveName_SOFR = cvar.BenchmarkCurveName_SOFR
BenchmarkCurveName_STIBOR = cvar.BenchmarkCurveName_STIBOR
BenchmarkCurveName_TELBOR = cvar.BenchmarkCurveName_TELBOR
BenchmarkCurveName_TIBOR = cvar.BenchmarkCurveName_TIBOR
BenchmarkCurveName_WIBOR = cvar.BenchmarkCurveName_WIBOR
BenchmarkCurveName_AONIA = cvar.BenchmarkCurveName_AONIA
BenchmarkCurveName_AONIAR = cvar.BenchmarkCurveName_AONIAR
BenchmarkCurveName_BKBM = cvar.BenchmarkCurveName_BKBM
BenchmarkCurveName_CD19_D = cvar.BenchmarkCurveName_CD19_D
BenchmarkCurveName_CORRA = cvar.BenchmarkCurveName_CORRA
BenchmarkCurveName_DIRRTN = cvar.BenchmarkCurveName_DIRRTN
BenchmarkCurveName_EIBOR = cvar.BenchmarkCurveName_EIBOR
BenchmarkCurveName_FIXING_REPO_RATE = cvar.BenchmarkCurveName_FIXING_REPO_RATE
BenchmarkCurveName_HIBOR = cvar.BenchmarkCurveName_HIBOR
BenchmarkCurveName_IBR = cvar.BenchmarkCurveName_IBR
BenchmarkCurveName_KLIBOR = cvar.BenchmarkCurveName_KLIBOR
BenchmarkCurveName_MIBOR = cvar.BenchmarkCurveName_MIBOR
BenchmarkCurveName_NZONIA = cvar.BenchmarkCurveName_NZONIA
BenchmarkCurveName_PHIREF = cvar.BenchmarkCurveName_PHIREF
BenchmarkCurveName_REIBOR = cvar.BenchmarkCurveName_REIBOR
BenchmarkCurveName_SAIBOR = cvar.BenchmarkCurveName_SAIBOR
BenchmarkCurveName_SARON = cvar.BenchmarkCurveName_SARON
BenchmarkCurveName_SORA = cvar.BenchmarkCurveName_SORA
BenchmarkCurveName_TLREF = cvar.BenchmarkCurveName_TLREF
BenchmarkCurveName_TIIE = cvar.BenchmarkCurveName_TIIE
BenchmarkCurveName_THBFIX = cvar.BenchmarkCurveName_THBFIX
BenchmarkCurveName_TONAR = cvar.BenchmarkCurveName_TONAR
StipulationType_ABSOLUTE_PREPAYMENT_SPEED = cvar.StipulationType_ABSOLUTE_PREPAYMENT_SPEED
StipulationType_WEIGHTED_AVERAGE_LOAN_AGE = cvar.StipulationType_WEIGHTED_AVERAGE_LOAN_AGE
StipulationType_WEIGHTED_AVERAGE_MATURITY = cvar.StipulationType_WEIGHTED_AVERAGE_MATURITY
StipulationType_CONSTANT_PREPAYMENT_RATE = cvar.StipulationType_CONSTANT_PREPAYMENT_RATE
StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE = cvar.StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE
StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON = cvar.StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON
StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE
StipulationType_SINGLE_MONTHLY_MORTALITY = cvar.StipulationType_SINGLE_MONTHLY_MORTALITY
StipulationType_MONTHLY_PREPAYMENT_RATE = cvar.StipulationType_MONTHLY_PREPAYMENT_RATE
StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE
StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE
StipulationType_CONSTANT_PREPAYMENT_PENALTY = cvar.StipulationType_CONSTANT_PREPAYMENT_PENALTY
StipulationType_LOT_VARIANCE = cvar.StipulationType_LOT_VARIANCE
StipulationType_CONSTANT_PREPAYMENT_YIELD = cvar.StipulationType_CONSTANT_PREPAYMENT_YIELD
StipulationType_WEIGHTED_AVERAGE_COUPON = cvar.StipulationType_WEIGHTED_AVERAGE_COUPON
StipulationType_ISSUE_DATE = cvar.StipulationType_ISSUE_DATE
StipulationType_MATURITY_YEAR_AND_MONTH = cvar.StipulationType_MATURITY_YEAR_AND_MONTH
StipulationType_NUMBER_OF_PIECES = cvar.StipulationType_NUMBER_OF_PIECES
StipulationType_POOLS_MAXIMUM = cvar.StipulationType_POOLS_MAXIMUM
StipulationType_POOLS_PER_MILLION = cvar.StipulationType_POOLS_PER_MILLION
StipulationType_POOLS_PER_LOT = cvar.StipulationType_POOLS_PER_LOT
StipulationType_POOLS_PER_TRADE = cvar.StipulationType_POOLS_PER_TRADE
StipulationType_PRODUCTION_YEAR = cvar.StipulationType_PRODUCTION_YEAR
StipulationType_TRADE_VARIANCE = cvar.StipulationType_TRADE_VARIANCE
StipulationType_GEOGRAPHICS = cvar.StipulationType_GEOGRAPHICS
StipulationType_ALTERNATIVE_MINIMUM_TAX = cvar.StipulationType_ALTERNATIVE_MINIMUM_TAX
StipulationType_AUTO_REINVESTMENT = cvar.StipulationType_AUTO_REINVESTMENT
StipulationType_BANK_QUALIFIED = cvar.StipulationType_BANK_QUALIFIED
StipulationType_BARGAIN_CONDITIONS = cvar.StipulationType_BARGAIN_CONDITIONS
StipulationType_COUPON_RANGE = cvar.StipulationType_COUPON_RANGE
StipulationType_ISO_CURRENCY_CODE = cvar.StipulationType_ISO_CURRENCY_CODE
StipulationType_CUSTOM_START = cvar.StipulationType_CUSTOM_START
StipulationType_VALUATION_DISCOUNT = cvar.StipulationType_VALUATION_DISCOUNT
StipulationType_INSURED = cvar.StipulationType_INSURED
StipulationType_ISSUER = cvar.StipulationType_ISSUER
StipulationType_ISSUE_SIZE_RANGE = cvar.StipulationType_ISSUE_SIZE_RANGE
StipulationType_LOOKBACK_DAYS = cvar.StipulationType_LOOKBACK_DAYS
StipulationType_EXPLICIT_LOT_IDENTIFIER = cvar.StipulationType_EXPLICIT_LOT_IDENTIFIER
StipulationType_MATURITY_RANGE = cvar.StipulationType_MATURITY_RANGE
StipulationType_MAXIMUM_SUBSTITUTIONS = cvar.StipulationType_MAXIMUM_SUBSTITUTIONS
StipulationType_MINIMUM_QUANTITY = cvar.StipulationType_MINIMUM_QUANTITY
StipulationType_MINIMUM_INCREMENT = cvar.StipulationType_MINIMUM_INCREMENT
StipulationType_MINIMUM_DENOMINATION = cvar.StipulationType_MINIMUM_DENOMINATION
StipulationType_PAYMENT_FREQUENCY = cvar.StipulationType_PAYMENT_FREQUENCY
StipulationType_PRICE_RANGE = cvar.StipulationType_PRICE_RANGE
StipulationType_PRICING_FREQUENCY = cvar.StipulationType_PRICING_FREQUENCY
StipulationType_CALL_PROTECTION = cvar.StipulationType_CALL_PROTECTION
StipulationType_PURPOSE = cvar.StipulationType_PURPOSE
StipulationType_BENCHMARK_PRICE_SOURCE = cvar.StipulationType_BENCHMARK_PRICE_SOURCE
StipulationType_RATING_SOURCE_AND_RANGE = cvar.StipulationType_RATING_SOURCE_AND_RANGE
StipulationType_TYPE_OF_REDEMPTION = cvar.StipulationType_TYPE_OF_REDEMPTION
StipulationType_RESTRICTED = cvar.StipulationType_RESTRICTED
StipulationType_MARKET_SECTOR = cvar.StipulationType_MARKET_SECTOR
StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED = cvar.StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED
StipulationType_STRUCTURE = cvar.StipulationType_STRUCTURE
StipulationType_SUBSTITUTIONS_FREQUENCY = cvar.StipulationType_SUBSTITUTIONS_FREQUENCY
StipulationType_SUBSTITUTIONS_LEFT = cvar.StipulationType_SUBSTITUTIONS_LEFT
StipulationType_FREEFORM_TEXT = cvar.StipulationType_FREEFORM_TEXT
StipulationType_WHOLE_POOL = cvar.StipulationType_WHOLE_POOL
StipulationType_YIELD_RANGE = cvar.StipulationType_YIELD_RANGE
StipulationType_AVERAGE_FICO_SCORE = cvar.StipulationType_AVERAGE_FICO_SCORE
StipulationType_AVERAGE_LOAN_SIZE = cvar.StipulationType_AVERAGE_LOAN_SIZE
StipulationType_MAXIMUM_LOAN_BALANCE = cvar.StipulationType_MAXIMUM_LOAN_BALANCE
StipulationType_POOL_IDENTIFIER = cvar.StipulationType_POOL_IDENTIFIER
StipulationType_TYPE_OF_ROLL_TRADE = cvar.StipulationType_TYPE_OF_ROLL_TRADE
StipulationType_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE
StipulationType_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE
StipulationType_INTEREST_OF_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_INTEREST_OF_ROLLING_OR_CLOSING_TRADE
StipulationType_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET = cvar.StipulationType_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET
StipulationType_BROKER_CREDIT = cvar.StipulationType_BROKER_CREDIT
StipulationType_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS = cvar.StipulationType_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS
StipulationType_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS = cvar.StipulationType_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS
StipulationType_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY = cvar.StipulationType_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY
StipulationType_MAXIMUM_ORDER_SIZE = cvar.StipulationType_MAXIMUM_ORDER_SIZE
StipulationType_ORDER_QUANTITY_INCREMENT = cvar.StipulationType_ORDER_QUANTITY_INCREMENT
StipulationType_PRIMARY_OR_SECONDARY_MARKET_INDICATOR = cvar.StipulationType_PRIMARY_OR_SECONDARY_MARKET_INDICATOR
StipulationType_BROKER_SALES_CREDIT_OVERRIDE = cvar.StipulationType_BROKER_SALES_CREDIT_OVERRIDE
StipulationType_TRADER_CREDIT = cvar.StipulationType_TRADER_CREDIT
StipulationType_DISCOUNT_RATE = cvar.StipulationType_DISCOUNT_RATE
StipulationType_YIELD_TO_MATURITY = cvar.StipulationType_YIELD_TO_MATURITY
StipulationType_ORIGINAL_AMOUNT = cvar.StipulationType_ORIGINAL_AMOUNT
StipulationType_POOL_EFFECTIVE_DATE = cvar.StipulationType_POOL_EFFECTIVE_DATE
StipulationType_POOL_INITIAL_FACTOR = cvar.StipulationType_POOL_INITIAL_FACTOR
StipulationType_TRANCHE = cvar.StipulationType_TRANCHE
StipulationType_SUBSTITUTION = cvar.StipulationType_SUBSTITUTION
StipulationType_MULTEXCHFLLBCK = cvar.StipulationType_MULTEXCHFLLBCK
StipulationType_COMPSECFLLBCK = cvar.StipulationType_COMPSECFLLBCK
StipulationType_LOCLJRSDCTN = cvar.StipulationType_LOCLJRSDCTN
StipulationType_RELVJRSDCTN = cvar.StipulationType_RELVJRSDCTN
StipulationType_INCURRED_RECOVERY = cvar.StipulationType_INCURRED_RECOVERY
StipulationType_ADDITIONAL_TERM = cvar.StipulationType_ADDITIONAL_TERM
StipulationType_MODIFIED_EQUITY_DELIVERY = cvar.StipulationType_MODIFIED_EQUITY_DELIVERY
StipulationType_NO_REFERENCE_OBLICATION = cvar.StipulationType_NO_REFERENCE_OBLICATION
StipulationType_UNKNOWN_REFERENCE_OBLIGATION = cvar.StipulationType_UNKNOWN_REFERENCE_OBLIGATION
StipulationType_ALL_GUARANTEES = cvar.StipulationType_ALL_GUARANTEES
StipulationType_REFERENCE_PRICE = cvar.StipulationType_REFERENCE_PRICE
StipulationType_REFERENCE_POLICY = cvar.StipulationType_REFERENCE_POLICY
StipulationType_SECURED_LIST = cvar.StipulationType_SECURED_LIST
StipulationType_INTEREST_PAYOFF_OF_ROLLING_OR_AMENDING_TRADE = cvar.StipulationType_INTEREST_PAYOFF_OF_ROLLING_OR_AMENDING_TRADE
YieldType_TRUE_YIELD = cvar.YieldType_TRUE_YIELD
YieldType_PREVIOUS_CLOSE_YIELD = cvar.YieldType_PREVIOUS_CLOSE_YIELD
YieldType_YIELD_TO_LONGEST_AVERAGE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE
YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE
YieldType_YIELD_TO_MATURITY = cvar.YieldType_YIELD_TO_MATURITY
YieldType_MARK_TO_MARKET_YIELD = cvar.YieldType_MARK_TO_MARKET_YIELD
YieldType_OPEN_AVERAGE_YIELD = cvar.YieldType_OPEN_AVERAGE_YIELD
YieldType_YIELD_TO_NEXT_PUT = cvar.YieldType_YIELD_TO_NEXT_PUT
YieldType_PROCEEDS_YIELD = cvar.YieldType_PROCEEDS_YIELD
YieldType_SEMI_ANNUAL_YIELD = cvar.YieldType_SEMI_ANNUAL_YIELD
YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE
YieldType_YIELD_TO_SHORTEST_AVERAGE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE
YieldType_SIMPLE_YIELD = cvar.YieldType_SIMPLE_YIELD
YieldType_YIELD_TO_TENDER_DATE = cvar.YieldType_YIELD_TO_TENDER_DATE
YieldType_YIELD_VALUE_OF32NDS = cvar.YieldType_YIELD_VALUE_OF32NDS
YieldType_YIELD_TO_WORST = cvar.YieldType_YIELD_TO_WORST
YieldType_TAX_EQUIVALENT_YIELD = cvar.YieldType_TAX_EQUIVALENT_YIELD
YieldType_ANNUAL_YIELD = cvar.YieldType_ANNUAL_YIELD
YieldType_CLOSING_YIELD_MOST_RECENT_YEAR = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_YEAR
YieldType_YIELD_TO_NEXT_REFUND = cvar.YieldType_YIELD_TO_NEXT_REFUND
YieldType_AFTER_TAX_YIELD = cvar.YieldType_AFTER_TAX_YIELD
YieldType_YIELD_AT_ISSUE = cvar.YieldType_YIELD_AT_ISSUE
YieldType_YIELD_TO_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_AVERAGE_LIFE
YieldType_YIELD_TO_AVERAGE_MATURITY = cvar.YieldType_YIELD_TO_AVERAGE_MATURITY
YieldType_BOOK_YIELD = cvar.YieldType_BOOK_YIELD
YieldType_YIELD_TO_NEXT_CALL = cvar.YieldType_YIELD_TO_NEXT_CALL
YieldType_YIELD_CHANGE_SINCE_CLOSE = cvar.YieldType_YIELD_CHANGE_SINCE_CLOSE
YieldType_COMPOUND_YIELD = cvar.YieldType_COMPOUND_YIELD
YieldType_CURRENT_YIELD = cvar.YieldType_CURRENT_YIELD
YieldType_TRUE_GROSS_YIELD = cvar.YieldType_TRUE_GROSS_YIELD
YieldType_GVNT_EQUIVALENT_YIELD = cvar.YieldType_GVNT_EQUIVALENT_YIELD
YieldType_YIELD_WITH_INFLATION_ASSUMPTION = cvar.YieldType_YIELD_WITH_INFLATION_ASSUMPTION
YieldType_INVERSE_FLOATER_BOND_YIELD = cvar.YieldType_INVERSE_FLOATER_BOND_YIELD
YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER
YieldType_MOST_RECENT_CLOSING_YIELD = cvar.YieldType_MOST_RECENT_CLOSING_YIELD
YieldType_CLOSING_YIELD_MOST_RECENT_MONTH = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_MONTH
YieldType_CLOSING_YIELD = cvar.YieldType_CLOSING_YIELD
YieldType_YIELD_VALUE_OF132 = cvar.YieldType_YIELD_VALUE_OF132
TradedFlatSwitch_NO = cvar.TradedFlatSwitch_NO
TradedFlatSwitch_YES = cvar.TradedFlatSwitch_YES
QuoteStatus_REMOVED_FROM_MARKET = cvar.QuoteStatus_REMOVED_FROM_MARKET
QuoteStatus_CANCEL_FOR_SYMBOL = cvar.QuoteStatus_CANCEL_FOR_SYMBOL
QuoteStatus_PENDING = cvar.QuoteStatus_PENDING
QuoteStatus_QUOTE_NOT_FOUND = cvar.QuoteStatus_QUOTE_NOT_FOUND
QuoteStatus_QUERY = cvar.QuoteStatus_QUERY
QuoteStatus_EXPIRED = cvar.QuoteStatus_EXPIRED
QuoteStatus_REJECTED = cvar.QuoteStatus_REJECTED
QuoteStatus_CANCELED_ALL = cvar.QuoteStatus_CANCELED_ALL
QuoteStatus_CANCELED_FOR_UNDERLYING = cvar.QuoteStatus_CANCELED_FOR_UNDERLYING
QuoteStatus_CANCELED_FOR_SECURITY_TYPE = cvar.QuoteStatus_CANCELED_FOR_SECURITY_TYPE
QuoteStatus_ACCEPTED = cvar.QuoteStatus_ACCEPTED
QuoteStatus_PASS = cvar.QuoteStatus_PASS
QuoteStatus_LOCKED_MARKET_WARNING = cvar.QuoteStatus_LOCKED_MARKET_WARNING
QuoteStatus_CROSS_MARKET_WARNING = cvar.QuoteStatus_CROSS_MARKET_WARNING
QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET = cvar.QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET
QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET = cvar.QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET
QuoteStatus_ACTIVE = cvar.QuoteStatus_ACTIVE
QuoteStatus_CANCELED = cvar.QuoteStatus_CANCELED
QuoteStatus_UNSOLICITED_QUOTE_REPLENISHMENT = cvar.QuoteStatus_UNSOLICITED_QUOTE_REPLENISHMENT
QuoteStatus_PENDING_END_TRADE = cvar.QuoteStatus_PENDING_END_TRADE
QuoteStatus_TOO_LATE_TO_END = cvar.QuoteStatus_TOO_LATE_TO_END
QuoteStatus_TRADED = cvar.QuoteStatus_TRADED
QuoteStatus_TRADED_AND_REMOVED = cvar.QuoteStatus_TRADED_AND_REMOVED
QuoteStatus_CONTRACT_TERMINATES = cvar.QuoteStatus_CONTRACT_TERMINATES
PartyIDSource_CHINESE_INVESTOR_ID = cvar.PartyIDSource_CHINESE_INVESTOR_ID
PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER = cvar.PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER
PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER = cvar.PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER
PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER = cvar.PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER
PartyIDSource_ISO_COUNTRY_CODE = cvar.PartyIDSource_ISO_COUNTRY_CODE
PartyIDSource_BIC = cvar.PartyIDSource_BIC
PartyIDSource_US_SOCIAL_SECURITY_NUMBER = cvar.PartyIDSource_US_SOCIAL_SECURITY_NUMBER
PartyIDSource_PROPRIETARY = cvar.PartyIDSource_PROPRIETARY
PartyIDSource_SETTLEMENT_ENTITY_LOCATION = cvar.PartyIDSource_SETTLEMENT_ENTITY_LOCATION
PartyIDSource_KOREAN_INVESTOR_ID = cvar.PartyIDSource_KOREAN_INVESTOR_ID
PartyIDSource_TAIWANESE_FOREIGN_INVESTOR_ID = cvar.PartyIDSource_TAIWANESE_FOREIGN_INVESTOR_ID
PartyIDSource_TAIWANESE_TRADING_ACCT = cvar.PartyIDSource_TAIWANESE_TRADING_ACCT
PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY = cvar.PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY
PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER = cvar.PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER
PartyIDSource_GENERAL_IDENTIFIER = cvar.PartyIDSource_GENERAL_IDENTIFIER
PartyIDSource_MIC = cvar.PartyIDSource_MIC
PartyIDSource_CSD_PARTICIPANT = cvar.PartyIDSource_CSD_PARTICIPANT
PartyIDSource_ISITC_ACRONYM = cvar.PartyIDSource_ISITC_ACRONYM
PartyIDSource_TAX_ID = cvar.PartyIDSource_TAX_ID
PartyIDSource_AUSTRALIAN_COMPANY_NUMBER = cvar.PartyIDSource_AUSTRALIAN_COMPANY_NUMBER
PartyIDSource_AUSTRALIAN_REGISTERED_BODY_NUMBER = cvar.PartyIDSource_AUSTRALIAN_REGISTERED_BODY_NUMBER
PartyIDSource_CFTC_REPORTING_FIRM_IDENTIFIER = cvar.PartyIDSource_CFTC_REPORTING_FIRM_IDENTIFIER
PartyIDSource_LEGAL_ENTITY_IDENTIFIER = cvar.PartyIDSource_LEGAL_ENTITY_IDENTIFIER
PartyIDSource_INTERIM_IDENTIFIER = cvar.PartyIDSource_INTERIM_IDENTIFIER
PartyIDSource_SHORT_CODE_IDENTIFIER = cvar.PartyIDSource_SHORT_CODE_IDENTIFIER
PartyIDSource_NATIONAL_ID_NATURAL_PERSON = cvar.PartyIDSource_NATIONAL_ID_NATURAL_PERSON
PartyIDSource_INDIA_PERMANENT_ACCOUNT_NUMBER = cvar.PartyIDSource_INDIA_PERMANENT_ACCOUNT_NUMBER
PartyIDSource_FDID = cvar.PartyIDSource_FDID
PartyIDSource_SPSAID = cvar.PartyIDSource_SPSAID
PartyIDSource_MASTER_SPSAID = cvar.PartyIDSource_MASTER_SPSAID
PartyRole_CORRESPONDANT_CLEARING_FIRM = cvar.PartyRole_CORRESPONDANT_CLEARING_FIRM
PartyRole_CLIENT_ID = cvar.PartyRole_CLIENT_ID
PartyRole_UNDERLYING_CONTRA_FIRM = cvar.PartyRole_UNDERLYING_CONTRA_FIRM
PartyRole_SPONSORING_FIRM = cvar.PartyRole_SPONSORING_FIRM
PartyRole_CONTRA_CLEARING_FIRM = cvar.PartyRole_CONTRA_CLEARING_FIRM
PartyRole_CONTRA_FIRM = cvar.PartyRole_CONTRA_FIRM
PartyRole_EXECUTING_SYSTEM = cvar.PartyRole_EXECUTING_SYSTEM
PartyRole_ENTERING_FIRM = cvar.PartyRole_ENTERING_FIRM
PartyRole_EXECUTING_FIRM = cvar.PartyRole_EXECUTING_FIRM
PartyRole_BROKER_OF_CREDIT = cvar.PartyRole_BROKER_OF_CREDIT
PartyRole_INVESTOR_ID = cvar.PartyRole_INVESTOR_ID
PartyRole_INTRODUCING_FIRM = cvar.PartyRole_INTRODUCING_FIRM
PartyRole_GIVEUP_CLEARING_FIRM = cvar.PartyRole_GIVEUP_CLEARING_FIRM
PartyRole_LOCATE = cvar.PartyRole_LOCATE
PartyRole_FUND_MANAGER_CLIENT_ID = cvar.PartyRole_FUND_MANAGER_CLIENT_ID
PartyRole_SETTLEMENT_LOCATION = cvar.PartyRole_SETTLEMENT_LOCATION
PartyRole_ORDER_ORIGINATION_TRADER = cvar.PartyRole_ORDER_ORIGINATION_TRADER
PartyRole_EXECUTING_TRADER = cvar.PartyRole_EXECUTING_TRADER
PartyRole_ORDER_ORIGINATION_FIRM = cvar.PartyRole_ORDER_ORIGINATION_FIRM
PartyRole_CLEARING_FIRM = cvar.PartyRole_CLEARING_FIRM
PartyRole_CLEARING_ORGANIZATION = cvar.PartyRole_CLEARING_ORGANIZATION
PartyRole_EXCHANGE = cvar.PartyRole_EXCHANGE
PartyRole_CUSTOMER_ACCOUNT = cvar.PartyRole_CUSTOMER_ACCOUNT
PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION = cvar.PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION
PartyRole_CORRESPONDENT_BROKER = cvar.PartyRole_CORRESPONDENT_BROKER
PartyRole_BUYER = cvar.PartyRole_BUYER
PartyRole_CUSTODIAN = cvar.PartyRole_CUSTODIAN
PartyRole_INTERMEDIARY = cvar.PartyRole_INTERMEDIARY
PartyRole_AGENT = cvar.PartyRole_AGENT
PartyRole_SUB_CUSTODIAN = cvar.PartyRole_SUB_CUSTODIAN
PartyRole_BENEFICIARY = cvar.PartyRole_BENEFICIARY
PartyRole_INTERESTED_PARTY = cvar.PartyRole_INTERESTED_PARTY
PartyRole_REGULATORY_BODY = cvar.PartyRole_REGULATORY_BODY
PartyRole_LIQUIDITY_PROVIDER = cvar.PartyRole_LIQUIDITY_PROVIDER
PartyRole_ENTERING_TRADER = cvar.PartyRole_ENTERING_TRADER
PartyRole_CONTRA_TRADER = cvar.PartyRole_CONTRA_TRADER
PartyRole_POSITION_ACCOUNT = cvar.PartyRole_POSITION_ACCOUNT
PartyRole_CONTRA_INVESTOR_ID = cvar.PartyRole_CONTRA_INVESTOR_ID
PartyRole_TRANSFER_TO_FIRM = cvar.PartyRole_TRANSFER_TO_FIRM
PartyRole_CONTRA_POSITION_ACCOUNT = cvar.PartyRole_CONTRA_POSITION_ACCOUNT
PartyRole_CONTRA_EXCHANGE = cvar.PartyRole_CONTRA_EXCHANGE
PartyRole_INTERNAL_CARRY_ACCOUNT = cvar.PartyRole_INTERNAL_CARRY_ACCOUNT
PartyRole_ORDER_ENTRY_OPERATOR_ID = cvar.PartyRole_ORDER_ENTRY_OPERATOR_ID
PartyRole_SECONDARY_ACCOUNT_NUMBER = cvar.PartyRole_SECONDARY_ACCOUNT_NUMBER
PartyRole_FOREIGN_FIRM = cvar.PartyRole_FOREIGN_FIRM
PartyRole_THIRD_PARTY_ALLOCATION_FIRM = cvar.PartyRole_THIRD_PARTY_ALLOCATION_FIRM
PartyRole_CLAIMING_ACCOUNT = cvar.PartyRole_CLAIMING_ACCOUNT
PartyRole_ASSET_MANAGER = cvar.PartyRole_ASSET_MANAGER
PartyRole_PLEDGOR_ACCOUNT = cvar.PartyRole_PLEDGOR_ACCOUNT
PartyRole_PLEDGEE_ACCOUNT = cvar.PartyRole_PLEDGEE_ACCOUNT
PartyRole_LARGE_TRADER_REPORTABLE_ACCOUNT = cvar.PartyRole_LARGE_TRADER_REPORTABLE_ACCOUNT
PartyRole_TRADER_MNEMONIC = cvar.PartyRole_TRADER_MNEMONIC
PartyRole_SENDER_LOCATION = cvar.PartyRole_SENDER_LOCATION
PartyRole_SESSION_ID = cvar.PartyRole_SESSION_ID
PartyRole_ACCEPTABLE_COUNTERPARTY = cvar.PartyRole_ACCEPTABLE_COUNTERPARTY
PartyRole_UNACCEPTABLE_COUNTERPARTY = cvar.PartyRole_UNACCEPTABLE_COUNTERPARTY
PartyRole_ENTERING_UNIT = cvar.PartyRole_ENTERING_UNIT
PartyRole_EXECUTING_UNIT = cvar.PartyRole_EXECUTING_UNIT
PartyRole_INTRODUCING_BROKER = cvar.PartyRole_INTRODUCING_BROKER
PartyRole_QUOTE_ORIGINATOR = cvar.PartyRole_QUOTE_ORIGINATOR
PartyRole_REPORT_ORIGINATOR = cvar.PartyRole_REPORT_ORIGINATOR
PartyRole_SYSTEMATIC_INTERNALISER = cvar.PartyRole_SYSTEMATIC_INTERNALISER
PartyRole_MULTILATERAL_TRADING_FACILITY = cvar.PartyRole_MULTILATERAL_TRADING_FACILITY
PartyRole_REGULATED_MARKET = cvar.PartyRole_REGULATED_MARKET
PartyRole_MARKET_MAKER = cvar.PartyRole_MARKET_MAKER
PartyRole_INVESTMENT_FIRM = cvar.PartyRole_INVESTMENT_FIRM
PartyRole_HOST_COMPETENT_AUTHORITY = cvar.PartyRole_HOST_COMPETENT_AUTHORITY
PartyRole_HOME_COMPETENT_AUTHORITY = cvar.PartyRole_HOME_COMPETENT_AUTHORITY
PartyRole_COMPETENT_AUTHORITY_LIQUIDITY = cvar.PartyRole_COMPETENT_AUTHORITY_LIQUIDITY
PartyRole_COMPETENT_AUTHORITY_TRANSACTION_VENUE = cvar.PartyRole_COMPETENT_AUTHORITY_TRANSACTION_VENUE
PartyRole_REPORTING_INTERMEDIARY = cvar.PartyRole_REPORTING_INTERMEDIARY
PartyRole_EXECUTION_VENUE = cvar.PartyRole_EXECUTION_VENUE
PartyRole_MARKET_DATA_ENTRY_ORIGINATOR = cvar.PartyRole_MARKET_DATA_ENTRY_ORIGINATOR
PartyRole_LOCATION_ID = cvar.PartyRole_LOCATION_ID
PartyRole_DESK_ID = cvar.PartyRole_DESK_ID
PartyRole_MARKET_DATA_MARKET = cvar.PartyRole_MARKET_DATA_MARKET
PartyRole_ALLOCATION_ENTITY = cvar.PartyRole_ALLOCATION_ENTITY
PartyRole_PRIME_BROKER = cvar.PartyRole_PRIME_BROKER
PartyRole_STEP_OUT_FIRM = cvar.PartyRole_STEP_OUT_FIRM
PartyRole_BROKER_CLEARING_ID = cvar.PartyRole_BROKER_CLEARING_ID
PartyRole_GIVEUP_CLEARING_FIRM_DEPR = cvar.PartyRole_GIVEUP_CLEARING_FIRM_DEPR
PartyRole_CENTRAL_REGISTRATION_DEPOSITORY = cvar.PartyRole_CENTRAL_REGISTRATION_DEPOSITORY
PartyRole_CLEARING_ACCOUNT = cvar.PartyRole_CLEARING_ACCOUNT
PartyRole_ACCEPTABLE_SETTLING_COUNTERPARTY = cvar.PartyRole_ACCEPTABLE_SETTLING_COUNTERPARTY
PartyRole_UNACCEPTABLE_SETTLING_COUNTERPARTY = cvar.PartyRole_UNACCEPTABLE_SETTLING_COUNTERPARTY
PartyRole_CLS_MEMBER_BANK = cvar.PartyRole_CLS_MEMBER_BANK
PartyRole_IN_CONCERT_GROUP = cvar.PartyRole_IN_CONCERT_GROUP
PartyRole_IN_CONCERT_CONTROLLING_ENTITY = cvar.PartyRole_IN_CONCERT_CONTROLLING_ENTITY
PartyRole_LARGE_POSITIONS_REPORTING_ACCOUNT = cvar.PartyRole_LARGE_POSITIONS_REPORTING_ACCOUNT
PartyRole_SETTLEMENT_FIRM = cvar.PartyRole_SETTLEMENT_FIRM
PartyRole_SETTLEMENT_ACCOUNT = cvar.PartyRole_SETTLEMENT_ACCOUNT
PartyRole_REPORTING_MARKET_CENTER = cvar.PartyRole_REPORTING_MARKET_CENTER
PartyRole_RELATED_REPORTING_MARKET_CENTER = cvar.PartyRole_RELATED_REPORTING_MARKET_CENTER
PartyRole_AWAY_MARKET = cvar.PartyRole_AWAY_MARKET
PartyRole_GIVEUP_TRADING_FIRM = cvar.PartyRole_GIVEUP_TRADING_FIRM
PartyRole_TAKEUP_TRADING_FIRM = cvar.PartyRole_TAKEUP_TRADING_FIRM
PartyRole_TAKEUP_CLEARING_FIRM = cvar.PartyRole_TAKEUP_CLEARING_FIRM
PartyRole_ORIGINATING_MARKET = cvar.PartyRole_ORIGINATING_MARKET
PartyRole_MARGIN_ACCOUNT = cvar.PartyRole_MARGIN_ACCOUNT
PartyRole_COLLATERAL_ASSET_ACCOUNT = cvar.PartyRole_COLLATERAL_ASSET_ACCOUNT
PartyRole_DATA_REPOSITORY = cvar.PartyRole_DATA_REPOSITORY
PartyRole_CALCULATION_AGENT = cvar.PartyRole_CALCULATION_AGENT
PartyRole_EXERCISE_NOTICE_SENDER = cvar.PartyRole_EXERCISE_NOTICE_SENDER
PartyRole_EXERCISE_NOTICE_RECEIVER = cvar.PartyRole_EXERCISE_NOTICE_RECEIVER
PartyRole_RATE_REFERENCE_BANK = cvar.PartyRole_RATE_REFERENCE_BANK
PartyRole_CORRESPONDENT = cvar.PartyRole_CORRESPONDENT
PartyRole_BENEFICIARY_BANK = cvar.PartyRole_BENEFICIARY_BANK
PartyRole_BORROWER = cvar.PartyRole_BORROWER
PartyRole_PRIMARY_OBLIGATOR = cvar.PartyRole_PRIMARY_OBLIGATOR
PartyRole_GUARANTOR = cvar.PartyRole_GUARANTOR
PartyRole_EXCLUDED_REFERENCE_ENTITY = cvar.PartyRole_EXCLUDED_REFERENCE_ENTITY
PartyRole_DETERMINING_PARTY = cvar.PartyRole_DETERMINING_PARTY
PartyRole_HEDGING_PARTY = cvar.PartyRole_HEDGING_PARTY
PartyRole_REPORTING_ENTITY = cvar.PartyRole_REPORTING_ENTITY
PartyRole_SALES_PERSON = cvar.PartyRole_SALES_PERSON
PartyRole_OPERATOR = cvar.PartyRole_OPERATOR
PartyRole_CSD = cvar.PartyRole_CSD
PartyRole_ICSD = cvar.PartyRole_ICSD
PartyRole_TRADING_SUB_ACCOUNT = cvar.PartyRole_TRADING_SUB_ACCOUNT
PartyRole_INVESTMENT_DECISION_MAKER = cvar.PartyRole_INVESTMENT_DECISION_MAKER
PartyRole_PUBLISHING_INTERMEDIARY = cvar.PartyRole_PUBLISHING_INTERMEDIARY
PartyRole_CSD_PARTICIPANT = cvar.PartyRole_CSD_PARTICIPANT
PartyRole_ISSUER = cvar.PartyRole_ISSUER
PartyRole_CONTRA_CUSTOMER_ACCOUNT = cvar.PartyRole_CONTRA_CUSTOMER_ACCOUNT
PartyRole_CONTRA_INVESTMENT_DECISION_MAKER = cvar.PartyRole_CONTRA_INVESTMENT_DECISION_MAKER
Product_LOAN = cvar.Product_LOAN
Product_OTHER = cvar.Product_OTHER
Product_MUNICIPAL = cvar.Product_MUNICIPAL
Product_AGENCY = cvar.Product_AGENCY
Product_CORPORATE = cvar.Product_CORPORATE
Product_CURRENCY = cvar.Product_CURRENCY
Product_COMMODITY = cvar.Product_COMMODITY
Product_GOVERNMENT = cvar.Product_GOVERNMENT
Product_MORTGAGE = cvar.Product_MORTGAGE
Product_INDEX = cvar.Product_INDEX
Product_MONEYMARKET = cvar.Product_MONEYMARKET
Product_EQUITY = cvar.Product_EQUITY
Product_FINANCING = cvar.Product_FINANCING
QuantityType_CONTRACTS = cvar.QuantityType_CONTRACTS
QuantityType_OTHER = cvar.QuantityType_OTHER
QuantityType_CURRENCY = cvar.QuantityType_CURRENCY
QuantityType_ORIGINALFACE = cvar.QuantityType_ORIGINALFACE
QuantityType_CURRENTFACE = cvar.QuantityType_CURRENTFACE
QuantityType_BONDS = cvar.QuantityType_BONDS
QuantityType_SHARES = cvar.QuantityType_SHARES
QuantityType_PAR = cvar.QuantityType_PAR
RoundingDirection_ROUND_TO_NEAREST = cvar.RoundingDirection_ROUND_TO_NEAREST
RoundingDirection_ROUND_DOWN = cvar.RoundingDirection_ROUND_DOWN
RoundingDirection_ROUND_UP = cvar.RoundingDirection_ROUND_UP
DistribPaymentMethod_CREST = cvar.DistribPaymentMethod_CREST
DistribPaymentMethod_NSCC = cvar.DistribPaymentMethod_NSCC
DistribPaymentMethod_EUROCLEAR = cvar.DistribPaymentMethod_EUROCLEAR
DistribPaymentMethod_CLEARSTREAM = cvar.DistribPaymentMethod_CLEARSTREAM
DistribPaymentMethod_CHEQUE = cvar.DistribPaymentMethod_CHEQUE
DistribPaymentMethod_TELEGRAPHIC_TRANSFER = cvar.DistribPaymentMethod_TELEGRAPHIC_TRANSFER
DistribPaymentMethod_FED_WIRE = cvar.DistribPaymentMethod_FED_WIRE
DistribPaymentMethod_DIRECT_CREDIT = cvar.DistribPaymentMethod_DIRECT_CREDIT
DistribPaymentMethod_ACH_CREDIT = cvar.DistribPaymentMethod_ACH_CREDIT
DistribPaymentMethod_BPAY = cvar.DistribPaymentMethod_BPAY
DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS = cvar.DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS
DistribPaymentMethod_REINVEST_IN_FUND = cvar.DistribPaymentMethod_REINVEST_IN_FUND
DistribPaymentMethod_OTHER = cvar.DistribPaymentMethod_OTHER
CancellationRights_NO_WAIVER_AGREEMENT = cvar.CancellationRights_NO_WAIVER_AGREEMENT
CancellationRights_NO_EXECUTION_ONLY = cvar.CancellationRights_NO_EXECUTION_ONLY
CancellationRights_YES = cvar.CancellationRights_YES
CancellationRights_NO_INSTITUTIONAL = cvar.CancellationRights_NO_INSTITUTIONAL
MoneyLaunderingStatus_EXEMPT_AUTHORISED = cvar.MoneyLaunderingStatus_EXEMPT_AUTHORISED
MoneyLaunderingStatus_EXEMPT_MONEY_TYPE = cvar.MoneyLaunderingStatus_EXEMPT_MONEY_TYPE
MoneyLaunderingStatus_EXEMPT_BELOW_LIMIT = cvar.MoneyLaunderingStatus_EXEMPT_BELOW_LIMIT
MoneyLaunderingStatus_PASSED = cvar.MoneyLaunderingStatus_PASSED
MoneyLaunderingStatus_NOT_CHECKED = cvar.MoneyLaunderingStatus_NOT_CHECKED
ExecPriceType_SINGLE_PRICE = cvar.ExecPriceType_SINGLE_PRICE
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT
ExecPriceType_OFFER_PRICE = cvar.ExecPriceType_OFFER_PRICE
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT
ExecPriceType_CREATION_PRICE = cvar.ExecPriceType_CREATION_PRICE
ExecPriceType_BID_PRICE = cvar.ExecPriceType_BID_PRICE
TradeReportTransType_NEW = cvar.TradeReportTransType_NEW
TradeReportTransType_REPLACE = cvar.TradeReportTransType_REPLACE
TradeReportTransType_CANCEL = cvar.TradeReportTransType_CANCEL
TradeReportTransType_RELEASE = cvar.TradeReportTransType_RELEASE
TradeReportTransType_REVERSE = cvar.TradeReportTransType_REVERSE
TradeReportTransType_CANCEL_DUE_TO_BACK_OUT_OF_TRADE = cvar.TradeReportTransType_CANCEL_DUE_TO_BACK_OUT_OF_TRADE
PaymentMethod_BPAY = cvar.PaymentMethod_BPAY
PaymentMethod_ACH_CREDIT = cvar.PaymentMethod_ACH_CREDIT
PaymentMethod_ACH_DEBIT = cvar.PaymentMethod_ACH_DEBIT
PaymentMethod_CREDIT_CARD = cvar.PaymentMethod_CREDIT_CARD
PaymentMethod_DIRECT_CREDIT = cvar.PaymentMethod_DIRECT_CREDIT
PaymentMethod_DIRECT_DEBIT = cvar.PaymentMethod_DIRECT_DEBIT
PaymentMethod_DEBIT_CARD = cvar.PaymentMethod_DEBIT_CARD
PaymentMethod_FED_WIRE = cvar.PaymentMethod_FED_WIRE
PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM = cvar.PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM
PaymentMethod_EUROCLEAR = cvar.PaymentMethod_EUROCLEAR
PaymentMethod_TELEGRAPHIC_TRANSFER = cvar.PaymentMethod_TELEGRAPHIC_TRANSFER
PaymentMethod_CLEARSTREAM = cvar.PaymentMethod_CLEARSTREAM
PaymentMethod_CREST = cvar.PaymentMethod_CREST
PaymentMethod_NSCC = cvar.PaymentMethod_NSCC
PaymentMethod_CHEQUE = cvar.PaymentMethod_CHEQUE
PaymentMethod_CHIPS = cvar.PaymentMethod_CHIPS
PaymentMethod_SWIFT = cvar.PaymentMethod_SWIFT
PaymentMethod_CHAPS = cvar.PaymentMethod_CHAPS
PaymentMethod_SIC = cvar.PaymentMethod_SIC
PaymentMethod_EURO_SIC = cvar.PaymentMethod_EURO_SIC
PaymentMethod_OTHER = cvar.PaymentMethod_OTHER
TaxAdvantageType_PROFIT_SHARING_PLAN = cvar.TaxAdvantageType_PROFIT_SHARING_PLAN
TaxAdvantageType_EMPLOYER_PRIOR_YEAR = cvar.TaxAdvantageType_EMPLOYER_PRIOR_YEAR
TaxAdvantageType_EMPLOYER_CURRENT_YEAR = cvar.TaxAdvantageType_EMPLOYER_CURRENT_YEAR
TaxAdvantageType_NON_FUND_PROTOTYPE_IRA = cvar.TaxAdvantageType_NON_FUND_PROTOTYPE_IRA
TaxAdvantageType_NON_FUND_QUALIFIED_PLAN = cvar.TaxAdvantageType_NON_FUND_QUALIFIED_PLAN
TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN = cvar.TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN
TaxAdvantageType_EMPLOYEE_CURRENT_YEAR = cvar.TaxAdvantageType_EMPLOYEE_CURRENT_YEAR
TaxAdvantageType_IRA_ROLLOVER = cvar.TaxAdvantageType_IRA_ROLLOVER
TaxAdvantageType_MINI_INSURANCE_ISA = cvar.TaxAdvantageType_MINI_INSURANCE_ISA
TaxAdvantageType_IRA = cvar.TaxAdvantageType_IRA
TaxAdvantageType_EMPLOYEE_PRIOR_YEAR = cvar.TaxAdvantageType_EMPLOYEE_PRIOR_YEAR
TaxAdvantageType_ASSET_TRANSFER = cvar.TaxAdvantageType_ASSET_TRANSFER
TaxAdvantageType_SELF_DIRECTED_IRA = cvar.TaxAdvantageType_SELF_DIRECTED_IRA
TaxAdvantageType_CURRENT_YEAR_PAYMENT = cvar.TaxAdvantageType_CURRENT_YEAR_PAYMENT
TaxAdvantageType_US401_K = cvar.TaxAdvantageType_US401_K
TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA = cvar.TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA
TaxAdvantageType_MINI_CASH_ISA = cvar.TaxAdvantageType_MINI_CASH_ISA
TaxAdvantageType_TESSA = cvar.TaxAdvantageType_TESSA
TaxAdvantageType_MAXI_ISA = cvar.TaxAdvantageType_MAXI_ISA
TaxAdvantageType_NONE = cvar.TaxAdvantageType_NONE
TaxAdvantageType_PRIOR_YEAR_PAYMENT = cvar.TaxAdvantageType_PRIOR_YEAR_PAYMENT
TaxAdvantageType_US457 = cvar.TaxAdvantageType_US457
TaxAdvantageType_ROTH_IRA_PROTOTYPE = cvar.TaxAdvantageType_ROTH_IRA_PROTOTYPE
TaxAdvantageType_ROTH_IRA_NON_PROTOTYPE = cvar.TaxAdvantageType_ROTH_IRA_NON_PROTOTYPE
TaxAdvantageType_ROTH_CONVERSION_IRA_PROTOTYPE = cvar.TaxAdvantageType_ROTH_CONVERSION_IRA_PROTOTYPE
TaxAdvantageType_ROTH_CONVERSION_IRA_NON_PROTOTYPE = cvar.TaxAdvantageType_ROTH_CONVERSION_IRA_NON_PROTOTYPE
TaxAdvantageType_EDUCATION_IRA_PROTOTYPE = cvar.TaxAdvantageType_EDUCATION_IRA_PROTOTYPE
TaxAdvantageType_EDUCATION_IRA_NON_PROTOTYPE = cvar.TaxAdvantageType_EDUCATION_IRA_NON_PROTOTYPE
TaxAdvantageType_KEOGH = cvar.TaxAdvantageType_KEOGH
TaxAdvantageType_US403B = cvar.TaxAdvantageType_US403B
TaxAdvantageType_OTHER = cvar.TaxAdvantageType_OTHER
FundRenewWaiv_NO = cvar.FundRenewWaiv_NO
FundRenewWaiv_YES = cvar.FundRenewWaiv_YES
RegistStatus_ACCEPTED = cvar.RegistStatus_ACCEPTED
RegistStatus_REMINDER = cvar.RegistStatus_REMINDER
RegistStatus_REJECTED = cvar.RegistStatus_REJECTED
RegistStatus_HELD = cvar.RegistStatus_HELD
RegistRejReasonCode_INVALID_DISTRIB_INSTNS = cvar.RegistRejReasonCode_INVALID_DISTRIB_INSTNS
RegistRejReasonCode_INVALID_AGENT_CODE = cvar.RegistRejReasonCode_INVALID_AGENT_CODE
RegistRejReasonCode_INVALID_ACCOUNT_NAME = cvar.RegistRejReasonCode_INVALID_ACCOUNT_NAME
RegistRejReasonCode_NO_REG_DETAILS = cvar.RegistRejReasonCode_NO_REG_DETAILS
RegistRejReasonCode_INVALID_PAYMENT_METHOD = cvar.RegistRejReasonCode_INVALID_PAYMENT_METHOD
RegistRejReasonCode_INVALID_PERCENTAGE = cvar.RegistRejReasonCode_INVALID_PERCENTAGE
RegistRejReasonCode_INVALID_OWNERSHIP_TYPE = cvar.RegistRejReasonCode_INVALID_OWNERSHIP_TYPE
RegistRejReasonCode_INVALID_TAX_EXEMPT_TYPE = cvar.RegistRejReasonCode_INVALID_TAX_EXEMPT_TYPE
RegistRejReasonCode_INVALID_COUNTRY = cvar.RegistRejReasonCode_INVALID_COUNTRY
RegistRejReasonCode_INVALID_DATE_OF_BIRTH = cvar.RegistRejReasonCode_INVALID_DATE_OF_BIRTH
RegistRejReasonCode_INVALID_INVESTOR_ID_SOURCE = cvar.RegistRejReasonCode_INVALID_INVESTOR_ID_SOURCE
RegistRejReasonCode_INVALID_INVESTOR_ID = cvar.RegistRejReasonCode_INVALID_INVESTOR_ID
RegistRejReasonCode_INVALID_MAILING_INSTRUCTIONS = cvar.RegistRejReasonCode_INVALID_MAILING_INSTRUCTIONS
RegistRejReasonCode_INVALID_MAILING_DETAILS = cvar.RegistRejReasonCode_INVALID_MAILING_DETAILS
RegistRejReasonCode_INVALID_REG_SEQ_NO = cvar.RegistRejReasonCode_INVALID_REG_SEQ_NO
RegistRejReasonCode_INVALID_ACCOUNT_TYPE = cvar.RegistRejReasonCode_INVALID_ACCOUNT_TYPE
RegistRejReasonCode_INVALID_ACCOUNT_NUM = cvar.RegistRejReasonCode_INVALID_ACCOUNT_NUM
RegistRejReasonCode_INVALID_REG_DETAILS = cvar.RegistRejReasonCode_INVALID_REG_DETAILS
RegistRejReasonCode_OTHER = cvar.RegistRejReasonCode_OTHER
RegistTransType_CANCEL = cvar.RegistTransType_CANCEL
RegistTransType_NEW = cvar.RegistTransType_NEW
RegistTransType_REPLACE = cvar.RegistTransType_REPLACE
OwnershipType_JOINT_INVESTORS = cvar.OwnershipType_JOINT_INVESTORS
OwnershipType_TENANTS_IN_COMMON = cvar.OwnershipType_TENANTS_IN_COMMON
OwnershipType_JOINT_TRUSTEES = cvar.OwnershipType_JOINT_TRUSTEES
ContAmtType_NET_SETTLEMENT_AMOUNT = cvar.ContAmtType_NET_SETTLEMENT_AMOUNT
ContAmtType_COMMISSION_AMOUNT = cvar.ContAmtType_COMMISSION_AMOUNT
ContAmtType_COMMISSION_PERCENT = cvar.ContAmtType_COMMISSION_PERCENT
ContAmtType_INITIAL_CHARGE_AMOUNT = cvar.ContAmtType_INITIAL_CHARGE_AMOUNT
ContAmtType_INITIAL_CHARGE_PERCENT = cvar.ContAmtType_INITIAL_CHARGE_PERCENT
ContAmtType_DISCOUNT_AMOUNT = cvar.ContAmtType_DISCOUNT_AMOUNT
ContAmtType_DISCOUNT_PERCENT = cvar.ContAmtType_DISCOUNT_PERCENT
ContAmtType_DILUTION_LEVY_AMOUNT = cvar.ContAmtType_DILUTION_LEVY_AMOUNT
ContAmtType_DILUTION_LEVY_PERCENT = cvar.ContAmtType_DILUTION_LEVY_PERCENT
ContAmtType_EXIT_CHARGE_AMOUNT = cvar.ContAmtType_EXIT_CHARGE_AMOUNT
ContAmtType_EXIT_CHARGE_PERCENT = cvar.ContAmtType_EXIT_CHARGE_PERCENT
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT
ContAmtType_PROJECTED_FUND_VALUE = cvar.ContAmtType_PROJECTED_FUND_VALUE
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_FUND = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_FUND
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER
OwnerType_COMPANY_TRUSTEE = cvar.OwnerType_COMPANY_TRUSTEE
OwnerType_NOMINEE = cvar.OwnerType_NOMINEE
OwnerType_CORPORATE_BODY = cvar.OwnerType_CORPORATE_BODY
OwnerType_NON_PROFIT_ORGANIZATION = cvar.OwnerType_NON_PROFIT_ORGANIZATION
OwnerType_NETWORKING_SUB_ACCOUNT = cvar.OwnerType_NETWORKING_SUB_ACCOUNT
OwnerType_FIDUCIARIES = cvar.OwnerType_FIDUCIARIES
OwnerType_TRUSTS = cvar.OwnerType_TRUSTS
OwnerType_PENSION_PLAN = cvar.OwnerType_PENSION_PLAN
OwnerType_INDIVIDUAL_TRUSTEE = cvar.OwnerType_INDIVIDUAL_TRUSTEE
OwnerType_PUBLIC_COMPANY = cvar.OwnerType_PUBLIC_COMPANY
OwnerType_PRIVATE_COMPANY = cvar.OwnerType_PRIVATE_COMPANY
OwnerType_INDIVIDUAL_INVESTOR = cvar.OwnerType_INDIVIDUAL_INVESTOR
OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT = cvar.OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT
OwnerType_INSTITUTIONAL_CUSTOMER = cvar.OwnerType_INSTITUTIONAL_CUSTOMER
OwnerType_COMBINED = cvar.OwnerType_COMBINED
OwnerType_MEMBER_FIRM_EMPLOYEE = cvar.OwnerType_MEMBER_FIRM_EMPLOYEE
OwnerType_MARKET_MAKING_ACCOUNT = cvar.OwnerType_MARKET_MAKING_ACCOUNT
OwnerType_PROPRIETARY_ACCOUNT = cvar.OwnerType_PROPRIETARY_ACCOUNT
OwnerType_NONBROKER_DEALER = cvar.OwnerType_NONBROKER_DEALER
OwnerType_UNKNOWN_BENEFICIAL_OWNER_TYPE = cvar.OwnerType_UNKNOWN_BENEFICIAL_OWNER_TYPE
OwnerType_FIRMS_ERROR_ACCOUNT = cvar.OwnerType_FIRMS_ERROR_ACCOUNT
OwnerType_FIRM_AGENCY_AVERAGE_PRICE_ACCOUNT = cvar.OwnerType_FIRM_AGENCY_AVERAGE_PRICE_ACCOUNT
OrderCapacity_RISKLESS_PRINCIPAL = cvar.OrderCapacity_RISKLESS_PRINCIPAL
OrderCapacity_INDIVIDUAL = cvar.OrderCapacity_INDIVIDUAL
OrderCapacity_PRINCIPAL = cvar.OrderCapacity_PRINCIPAL
OrderCapacity_AGENT_FOR_OTHER_MEMBER = cvar.OrderCapacity_AGENT_FOR_OTHER_MEMBER
OrderCapacity_AGENCY = cvar.OrderCapacity_AGENCY
OrderCapacity_PROPRIETARY = cvar.OrderCapacity_PROPRIETARY
OrderCapacity_MIXED_CAPACITY = cvar.OrderCapacity_MIXED_CAPACITY
OrderRestrictions_FOREIGN_ENTITY = cvar.OrderRestrictions_FOREIGN_ENTITY
OrderRestrictions_RISKLESS_ARBITRAGE = cvar.OrderRestrictions_RISKLESS_ARBITRAGE
OrderRestrictions_PROGRAM_TRADE = cvar.OrderRestrictions_PROGRAM_TRADE
OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT = cvar.OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT
OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_UNDERLYING = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_UNDERLYING
OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_SECURITY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_SECURITY
OrderRestrictions_NON_INDEX_ARBITRAGE = cvar.OrderRestrictions_NON_INDEX_ARBITRAGE
OrderRestrictions_INDEX_ARBITRAGE = cvar.OrderRestrictions_INDEX_ARBITRAGE
OrderRestrictions_COMPETING_MARKET_MAKER = cvar.OrderRestrictions_COMPETING_MARKET_MAKER
OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE = cvar.OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE
OrderRestrictions_ISSUER_HOLDING = cvar.OrderRestrictions_ISSUER_HOLDING
OrderRestrictions_ISSUE_PRICE_STABILIZATION = cvar.OrderRestrictions_ISSUE_PRICE_STABILIZATION
OrderRestrictions_NON_ALGORITHMIC = cvar.OrderRestrictions_NON_ALGORITHMIC
OrderRestrictions_ALGORITHMIC = cvar.OrderRestrictions_ALGORITHMIC
OrderRestrictions_CROSS = cvar.OrderRestrictions_CROSS
OrderRestrictions_INSIDER_ACCOUNT = cvar.OrderRestrictions_INSIDER_ACCOUNT
OrderRestrictions_SIGNIFICANT_SHAREHOLDER = cvar.OrderRestrictions_SIGNIFICANT_SHAREHOLDER
OrderRestrictions_NORMAL_COURSE_ISSUER_BID = cvar.OrderRestrictions_NORMAL_COURSE_ISSUER_BID
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY
MassCancelRequestType_CANCEL_ALL_ORDERS = cvar.MassCancelRequestType_CANCEL_ALL_ORDERS
MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_TYPE = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_TYPE
MassCancelRequestType_CANCEL_ORDERS_FOR_ACFI_CODE = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_ACFI_CODE
MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT
MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET
MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_GROUP
MassCancelRequestType_CANCEL_ORDERS_FOR_SECURITY_ISSUER = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_SECURITY_ISSUER
MassCancelRequestType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelRequestType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION
MassCancelResponse_CANCEL_REQUEST_REJECTED = cvar.MassCancelResponse_CANCEL_REQUEST_REJECTED
MassCancelResponse_CANCEL_ALL_ORDERS = cvar.MassCancelResponse_CANCEL_ALL_ORDERS
MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_TYPE = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_TYPE
MassCancelResponse_CANCEL_ORDERS_FOR_ACFI_CODE = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_ACFI_CODE
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET
MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_GROUP
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER
MassCancelResponse_CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY
MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE
MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY
MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED = cvar.MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED
MassCancelRejectReason_INVALID_OR_UNKNOWN_CFI_CODE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_CFI_CODE
MassCancelRejectReason_OTHER = cvar.MassCancelRejectReason_OTHER
MassCancelRejectReason_INVALID_OR_UNKNOWN_MARKET = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_MARKET
MassCancelRejectReason_INVALID_OR_UNKOWN_MARKET_SEGMENT = cvar.MassCancelRejectReason_INVALID_OR_UNKOWN_MARKET_SEGMENT
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP
MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_SECURITY
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
MassCancelRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
QuoteType_INDICATIVE = cvar.QuoteType_INDICATIVE
QuoteType_TRADEABLE = cvar.QuoteType_TRADEABLE
QuoteType_RESTRICTED_TRADEABLE = cvar.QuoteType_RESTRICTED_TRADEABLE
QuoteType_COUNTER = cvar.QuoteType_COUNTER
QuoteType_INITIALLY_TRADEABLE = cvar.QuoteType_INITIALLY_TRADEABLE
CashMargin_MARGIN_OPEN = cvar.CashMargin_MARGIN_OPEN
CashMargin_MARGIN_CLOSE = cvar.CashMargin_MARGIN_CLOSE
CashMargin_CASH = cvar.CashMargin_CASH
Scope_LOCAL_MARKET = cvar.Scope_LOCAL_MARKET
Scope_NATIONAL = cvar.Scope_NATIONAL
Scope_GLOBAL = cvar.Scope_GLOBAL
MDImplicitDelete_YES = cvar.MDImplicitDelete_YES
MDImplicitDelete_NO = cvar.MDImplicitDelete_NO
CrossType_CROSS_AON = cvar.CrossType_CROSS_AON
CrossType_CROSS_IOC = cvar.CrossType_CROSS_IOC
CrossType_CROSS_ONE_SIDE = cvar.CrossType_CROSS_ONE_SIDE
CrossType_CROSS_SAME_PRICE = cvar.CrossType_CROSS_SAME_PRICE
CrossType_BASIS_CROSS = cvar.CrossType_BASIS_CROSS
CrossType_CONTINGENT_CROSS = cvar.CrossType_CONTINGENT_CROSS
CrossType_VWAP_CROSS = cvar.CrossType_VWAP_CROSS
CrossType_STS_CROSS = cvar.CrossType_STS_CROSS
CrossType_CUSTOMER_TO_CUSTOMER = cvar.CrossType_CUSTOMER_TO_CUSTOMER
CrossPrioritization_SELL_SIDE_IS_PRIORITIZED = cvar.CrossPrioritization_SELL_SIDE_IS_PRIORITIZED
CrossPrioritization_NONE = cvar.CrossPrioritization_NONE
CrossPrioritization_BUY_SIDE_IS_PRIORITIZED = cvar.CrossPrioritization_BUY_SIDE_IS_PRIORITIZED
NoSides_ONE_SIDE = cvar.NoSides_ONE_SIDE
NoSides_BOTH_SIDES = cvar.NoSides_BOTH_SIDES
SecurityListRequestType_SECURITY_TYPE_AND = cvar.SecurityListRequestType_SECURITY_TYPE_AND
SecurityListRequestType_PRODUCT = cvar.SecurityListRequestType_PRODUCT
SecurityListRequestType_TRADING_SESSION_ID = cvar.SecurityListRequestType_TRADING_SESSION_ID
SecurityListRequestType_ALL_SECURITIES = cvar.SecurityListRequestType_ALL_SECURITIES
SecurityListRequestType_SYMBOL = cvar.SecurityListRequestType_SYMBOL
SecurityListRequestType_MARKET_ID_OR_MARKET_ID = cvar.SecurityListRequestType_MARKET_ID_OR_MARKET_ID
SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE = cvar.SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE
SecurityRequestResult_VALID_REQUEST = cvar.SecurityRequestResult_VALID_REQUEST
SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST
SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED = cvar.SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED
SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA = cvar.SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA
SecurityRequestResult_NO_INSTRUMENTS_FOUND = cvar.SecurityRequestResult_NO_INSTRUMENTS_FOUND
MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY = cvar.MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY
MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS = cvar.MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS
MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_ONLY = cvar.MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_ONLY
TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADING_SESSION_ID = cvar.TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADING_SESSION_ID
TradSesStatusRejReason_OTHER = cvar.TradSesStatusRejReason_OTHER
TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA
TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA
TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA
TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA = cvar.TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA
TradeRequestType_ALL_TRADES = cvar.TradeRequestType_ALL_TRADES
PreviouslyReported_NO = cvar.PreviouslyReported_NO
PreviouslyReported_YES = cvar.PreviouslyReported_YES
MatchStatus_COMPARED = cvar.MatchStatus_COMPARED
MatchStatus_UNCOMPARED = cvar.MatchStatus_UNCOMPARED
MatchStatus_ADVISORY_OR_ALERT = cvar.MatchStatus_ADVISORY_OR_ALERT
MatchStatus_MISMATCHED = cvar.MatchStatus_MISMATCHED
MatchType_A5_EXACT_MATCH_SUMMARIZED_QUANTITY = cvar.MatchType_A5_EXACT_MATCH_SUMMARIZED_QUANTITY
MatchType_EXACT_MATCH_MINUS_BADGES_TIMES = cvar.MatchType_EXACT_MATCH_MINUS_BADGES_TIMES
MatchType_ACTM6_MATCH = cvar.MatchType_ACTM6_MATCH
MatchType_ACT_DEFAULT_AFTER_M2 = cvar.MatchType_ACT_DEFAULT_AFTER_M2
MatchType_ACT_ACCEPTED_TRADE = cvar.MatchType_ACT_ACCEPTED_TRADE
MatchType_A2_EXACT_MATCH_SUMMARIZED_QUANTITY = cvar.MatchType_A2_EXACT_MATCH_SUMMARIZED_QUANTITY
MatchType_A3_EXACT_MATCH_SUMMARIZED_QUANTITY = cvar.MatchType_A3_EXACT_MATCH_SUMMARIZED_QUANTITY
MatchType_A4_EXACT_MATCH_SUMMARIZED_QUANTITY = cvar.MatchType_A4_EXACT_MATCH_SUMMARIZED_QUANTITY
MatchType_SUMMARIZED_MATCH_MINUS_BADGES_TIMES = cvar.MatchType_SUMMARIZED_MATCH_MINUS_BADGES_TIMES
MatchType_EXACT_MATCH_PLUS4_BADGES = cvar.MatchType_EXACT_MATCH_PLUS4_BADGES
MatchType_EXACT_MATCH_PLUS2_BADGES_EXEC_TIME = cvar.MatchType_EXACT_MATCH_PLUS2_BADGES_EXEC_TIME
MatchType_EXACT_MATCH_PLUS2_BADGES = cvar.MatchType_EXACT_MATCH_PLUS2_BADGES
MatchType_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS = cvar.MatchType_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS
MatchType_OCS_LOCKED_IN = cvar.MatchType_OCS_LOCKED_IN
MatchType_ACT_DEFAULT_TRADE = cvar.MatchType_ACT_DEFAULT_TRADE
MatchType_EXACT_MATCH_PLUS4_BADGES_EXEC_TIME = cvar.MatchType_EXACT_MATCH_PLUS4_BADGES_EXEC_TIME
MatchType_A1_EXACT_MATCH_SUMMARIZED_QUANTITY = cvar.MatchType_A1_EXACT_MATCH_SUMMARIZED_QUANTITY
MatchType_EXACT_MATCH_PLUS_EXEC_TIME = cvar.MatchType_EXACT_MATCH_PLUS_EXEC_TIME
MatchType_ONE_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT = cvar.MatchType_ONE_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT
MatchType_TWO_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT = cvar.MatchType_TWO_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT
MatchType_CONTINUOUS_AUTO_MATCH = cvar.MatchType_CONTINUOUS_AUTO_MATCH
MatchType_CROSS_AUCTION = cvar.MatchType_CROSS_AUCTION
MatchType_COUNTER_ORDER_SELECTION = cvar.MatchType_COUNTER_ORDER_SELECTION
MatchType_CALL_AUCTION = cvar.MatchType_CALL_AUCTION
MatchType_ONE_PARTY_TRADE_REPORT = cvar.MatchType_ONE_PARTY_TRADE_REPORT
MatchType_TWO_PARTY_TRADE_REPORT = cvar.MatchType_TWO_PARTY_TRADE_REPORT
MatchType_CONFIRMED_TRADE_REPORT = cvar.MatchType_CONFIRMED_TRADE_REPORT
MatchType_AUTO_MATCH = cvar.MatchType_AUTO_MATCH
MatchType_ISSUING = cvar.MatchType_ISSUING
MatchType_SYSTEMATIC_INTERNALISER = cvar.MatchType_SYSTEMATIC_INTERNALISER
MatchType_AUTO_MATCH_LAST_LOOK = cvar.MatchType_AUTO_MATCH_LAST_LOOK
MatchType_CROSS_AUCTION_LAST_LOOK = cvar.MatchType_CROSS_AUCTION_LAST_LOOK
OddLot_YES = cvar.OddLot_YES
OddLot_NO = cvar.OddLot_NO
ClearingInstruction_MANUAL_MODE = cvar.ClearingInstruction_MANUAL_MODE
ClearingInstruction_MULTILATERAL_NETTING = cvar.ClearingInstruction_MULTILATERAL_NETTING
ClearingInstruction_AUTOMATIC_POSTING_MODE = cvar.ClearingInstruction_AUTOMATIC_POSTING_MODE
ClearingInstruction_BILATERAL_NETTING_ONLY = cvar.ClearingInstruction_BILATERAL_NETTING_ONLY
ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY = cvar.ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY
ClearingInstruction_AUTOMATIC_GIVE_UP_MODE = cvar.ClearingInstruction_AUTOMATIC_GIVE_UP_MODE
ClearingInstruction_SPECIAL_TRADE = cvar.ClearingInstruction_SPECIAL_TRADE
ClearingInstruction_EX_CLEARING = cvar.ClearingInstruction_EX_CLEARING
ClearingInstruction_PROCESS_NORMALLY = cvar.ClearingInstruction_PROCESS_NORMALLY
ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY = cvar.ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY
ClearingInstruction_EXCLUDE_FROM_ALL_NETTING = cvar.ClearingInstruction_EXCLUDE_FROM_ALL_NETTING
ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR = cvar.ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR
ClearingInstruction_CUSTOMER_TRADE = cvar.ClearingInstruction_CUSTOMER_TRADE
ClearingInstruction_SELF_CLEARING = cvar.ClearingInstruction_SELF_CLEARING
ClearingInstruction_BUY_IN = cvar.ClearingInstruction_BUY_IN
AccountType_HOUSE_TRADER = cvar.AccountType_HOUSE_TRADER
AccountType_HOUSE_TRADER_CROSS_MARGINED = cvar.AccountType_HOUSE_TRADER_CROSS_MARGINED
AccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED = cvar.AccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED
AccountType_FLOOR_TRADER = cvar.AccountType_FLOOR_TRADER
AccountType_CARRIED_NON_CUSTOMER_SIDE = cvar.AccountType_CARRIED_NON_CUSTOMER_SIDE
AccountType_CARRIED_CUSTOMER_SIDE = cvar.AccountType_CARRIED_CUSTOMER_SIDE
AccountType_JOINT_BACK_OFFICE_ACCOUNT = cvar.AccountType_JOINT_BACK_OFFICE_ACCOUNT
AccountType_EQUITIES_SPECIALIST = cvar.AccountType_EQUITIES_SPECIALIST
AccountType_OPTIONS_MARKET_MAKER = cvar.AccountType_OPTIONS_MARKET_MAKER
AccountType_OPTIONS_FIRM_ACCOUNT = cvar.AccountType_OPTIONS_FIRM_ACCOUNT
AccountType_ACCOUNT_CUSTOMER_NON_CUSTOMER_ORDERS = cvar.AccountType_ACCOUNT_CUSTOMER_NON_CUSTOMER_ORDERS
AccountType_ACCOUNT_ORDERS_MULTIPLE_CUSTOMERS = cvar.AccountType_ACCOUNT_ORDERS_MULTIPLE_CUSTOMERS
CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = cvar.CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = cvar.CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER = cvar.CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
CustOrderCapacity_ALL_OTHER = cvar.CustOrderCapacity_ALL_OTHER
CustOrderCapacity_RETAIL_CUSTOMER = cvar.CustOrderCapacity_RETAIL_CUSTOMER
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY
MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT
MassStatusReqType_STATUS_FOR_ORDERS_FOR_ACFI_CODE = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_ACFI_CODE
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_TYPE = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_TYPE
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTY_ID = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTY_ID
MassStatusReqType_STATUS_FOR_ALL_ORDERS = cvar.MassStatusReqType_STATUS_FOR_ALL_ORDERS
MassStatusReqType_STATUS_FOR_SECURITY_ISSUER = cvar.MassStatusReqType_STATUS_FOR_SECURITY_ISSUER
MassStatusReqType_STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY
DayBookingInst_AUTO = cvar.DayBookingInst_AUTO
DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING = cvar.DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING
DayBookingInst_ACCUMULATE = cvar.DayBookingInst_ACCUMULATE
BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER = cvar.BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER
BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL = cvar.BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL
BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT = cvar.BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT
PreallocMethod_PRO_RATA = cvar.PreallocMethod_PRO_RATA
PreallocMethod_DO_NOT_PRO_RATA = cvar.PreallocMethod_DO_NOT_PRO_RATA
TradingSessionSubID_PRE_TRADING = cvar.TradingSessionSubID_PRE_TRADING
TradingSessionSubID_OPENING_OR_OPENING_AUCTION = cvar.TradingSessionSubID_OPENING_OR_OPENING_AUCTION
TradingSessionSubID_CONTINUOUS = cvar.TradingSessionSubID_CONTINUOUS
TradingSessionSubID_CLOSING_OR_CLOSING_AUCTION = cvar.TradingSessionSubID_CLOSING_OR_CLOSING_AUCTION
TradingSessionSubID_POST_TRADING = cvar.TradingSessionSubID_POST_TRADING
TradingSessionSubID_INTRADAY_AUCTION = cvar.TradingSessionSubID_INTRADAY_AUCTION
TradingSessionSubID_QUIESCENT = cvar.TradingSessionSubID_QUIESCENT
TradingSessionSubID_SCHEDULED_INTRADAY_AUCTION = cvar.TradingSessionSubID_SCHEDULED_INTRADAY_AUCTION
TradingSessionSubID_ANY_AUCTION = cvar.TradingSessionSubID_ANY_AUCTION
TradingSessionSubID_UNSCHEDULED_INTRADAY_AUCTION = cvar.TradingSessionSubID_UNSCHEDULED_INTRADAY_AUCTION
TradingSessionSubID_OUT_OF_MAIN_SESSION_TRADING = cvar.TradingSessionSubID_OUT_OF_MAIN_SESSION_TRADING
TradingSessionSubID_PRIVATE_AUCTION = cvar.TradingSessionSubID_PRIVATE_AUCTION
TradingSessionSubID_PUBLIC_AUCTION = cvar.TradingSessionSubID_PUBLIC_AUCTION
TradingSessionSubID_GROUP_AUCTION = cvar.TradingSessionSubID_GROUP_AUCTION
AllocType_BUYSIDE_READY_TO_BOOK = cvar.AllocType_BUYSIDE_READY_TO_BOOK
AllocType_PRELIMINARY = cvar.AllocType_PRELIMINARY
AllocType_SELLSIDE_CALCULATED_USING_PRELIMINARY = cvar.AllocType_SELLSIDE_CALCULATED_USING_PRELIMINARY
AllocType_READY_TO_BOOK = cvar.AllocType_READY_TO_BOOK
AllocType_CALCULATED = cvar.AllocType_CALCULATED
AllocType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
AllocType_WAREHOUSE_INSTRUCTION = cvar.AllocType_WAREHOUSE_INSTRUCTION
AllocType_REQUEST_TO_INTERMEDIARY = cvar.AllocType_REQUEST_TO_INTERMEDIARY
AllocType_ACCEPT = cvar.AllocType_ACCEPT
AllocType_REJECT = cvar.AllocType_REJECT
AllocType_ACCEPT_PENDING = cvar.AllocType_ACCEPT_PENDING
AllocType_INCOMPLETE_GROUP = cvar.AllocType_INCOMPLETE_GROUP
AllocType_COMPLETE_GROUP = cvar.AllocType_COMPLETE_GROUP
AllocType_REVERSAL_PENDING = cvar.AllocType_REVERSAL_PENDING
AllocType_REOPEN_GROUP = cvar.AllocType_REOPEN_GROUP
AllocType_CANCEL_GROUP = cvar.AllocType_CANCEL_GROUP
AllocType_GIVEUP = cvar.AllocType_GIVEUP
AllocType_TAKEUP = cvar.AllocType_TAKEUP
AllocType_REFUSE_TAKEUP = cvar.AllocType_REFUSE_TAKEUP
AllocType_INITIATE_REVERSAL = cvar.AllocType_INITIATE_REVERSAL
AllocType_REVERSE = cvar.AllocType_REVERSE
AllocType_REFUSE_REVERSAL = cvar.AllocType_REFUSE_REVERSAL
AllocType_SUB_ALLOCATION_GIVEUP = cvar.AllocType_SUB_ALLOCATION_GIVEUP
AllocType_APPROVE_GIVEUP = cvar.AllocType_APPROVE_GIVEUP
AllocType_APPROVE_TAKEUP = cvar.AllocType_APPROVE_TAKEUP
AllocType_NOTIONAL_VALUE_AVERAGE_PX_GROUP_ALLOC = cvar.AllocType_NOTIONAL_VALUE_AVERAGE_PX_GROUP_ALLOC
ClearingFeeIndicator_FIRMS106_H_AND106_J = cvar.ClearingFeeIndicator_FIRMS106_H_AND106_J
ClearingFeeIndicator_FIFTH_YEAR_DELEGATE = cvar.ClearingFeeIndicator_FIFTH_YEAR_DELEGATE
ClearingFeeIndicator_FOURTH_YEAR_DELEGATE = cvar.ClearingFeeIndicator_FOURTH_YEAR_DELEGATE
ClearingFeeIndicator_THIRD_YEAR_DELEGATE = cvar.ClearingFeeIndicator_THIRD_YEAR_DELEGATE
ClearingFeeIndicator_SECOND_YEAR_DELEGATE = cvar.ClearingFeeIndicator_SECOND_YEAR_DELEGATE
ClearingFeeIndicator_FIRST_YEAR_DELEGATE = cvar.ClearingFeeIndicator_FIRST_YEAR_DELEGATE
ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES = cvar.ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES
ClearingFeeIndicator_GIM = cvar.ClearingFeeIndicator_GIM
ClearingFeeIndicator_SIXTH_YEAR_DELEGATE = cvar.ClearingFeeIndicator_SIXTH_YEAR_DELEGATE
ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER = cvar.ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER
ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER = cvar.ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER
ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER = cvar.ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER
ClearingFeeIndicator_CBOE_MEMBER = cvar.ClearingFeeIndicator_CBOE_MEMBER
ClearingFeeIndicator_LESSEE106_F_EMPLOYEES = cvar.ClearingFeeIndicator_LESSEE106_F_EMPLOYEES
WorkingIndicator_NO = cvar.WorkingIndicator_NO
WorkingIndicator_YES = cvar.WorkingIndicator_YES
PriorityIndicator_PRIORITY_UNCHANGED = cvar.PriorityIndicator_PRIORITY_UNCHANGED
PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE = cvar.PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE
LegalConfirm_YES = cvar.LegalConfirm_YES
LegalConfirm_NO = cvar.LegalConfirm_NO
QuoteRequestRejectReason_UNKNOWN_SYMBOL = cvar.QuoteRequestRejectReason_UNKNOWN_SYMBOL
QuoteRequestRejectReason_EXCHANGE = cvar.QuoteRequestRejectReason_EXCHANGE
QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT = cvar.QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
QuoteRequestRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteRequestRejectReason_TOO_LATE_TO_ENTER
QuoteRequestRejectReason_INVALID_PRICE = cvar.QuoteRequestRejectReason_INVALID_PRICE
QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE = cvar.QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE
QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY = cvar.QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY
QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT = cvar.QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT
QuoteRequestRejectReason_NO_INVENTORY = cvar.QuoteRequestRejectReason_NO_INVENTORY
QuoteRequestRejectReason_PASS = cvar.QuoteRequestRejectReason_PASS
QuoteRequestRejectReason_OTHER = cvar.QuoteRequestRejectReason_OTHER
QuoteRequestRejectReason_INSUFFICIENT_CREDIT = cvar.QuoteRequestRejectReason_INSUFFICIENT_CREDIT
QuoteRequestRejectReason_EXCEEDED_CLIP_SIZE_LIMIT = cvar.QuoteRequestRejectReason_EXCEEDED_CLIP_SIZE_LIMIT
QuoteRequestRejectReason_EXCEEDED_MAX_NOTIONAL_ORDER_AMT = cvar.QuoteRequestRejectReason_EXCEEDED_MAX_NOTIONAL_ORDER_AMT
QuoteRequestRejectReason_EXCEEDED_DV01_PV01_LIMIT = cvar.QuoteRequestRejectReason_EXCEEDED_DV01_PV01_LIMIT
QuoteRequestRejectReason_EXCEEDED_CS01_LIMIT = cvar.QuoteRequestRejectReason_EXCEEDED_CS01_LIMIT
SettlType_REGULAR = cvar.SettlType_REGULAR
SettlType_CASH = cvar.SettlType_CASH
SettlType_NEXT_DAY = cvar.SettlType_NEXT_DAY
SettlType_T_PLUS2 = cvar.SettlType_T_PLUS2
SettlType_T_PLUS3 = cvar.SettlType_T_PLUS3
SettlType_T_PLUS4 = cvar.SettlType_T_PLUS4
SettlType_FUTURE = cvar.SettlType_FUTURE
SettlType_WHEN_AND_IF_ISSUED = cvar.SettlType_WHEN_AND_IF_ISSUED
SettlType_SELLERS_OPTION = cvar.SettlType_SELLERS_OPTION
SettlType_T_PLUS5 = cvar.SettlType_T_PLUS5
SettlType_BROKEN_DATE = cvar.SettlType_BROKEN_DATE
SettlType_FX_SPOT_NEXT_SETTLEMENT = cvar.SettlType_FX_SPOT_NEXT_SETTLEMENT
OpenCloseSettlFlag_DAILY_OPEN = cvar.OpenCloseSettlFlag_DAILY_OPEN
OpenCloseSettlFlag_SESSION_OPEN = cvar.OpenCloseSettlFlag_SESSION_OPEN
OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY = cvar.OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY
OpenCloseSettlFlag_EXPECTED_ENTRY = cvar.OpenCloseSettlFlag_EXPECTED_ENTRY
OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY
OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE = cvar.OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE
BidTradeType_RISK_TRADE = cvar.BidTradeType_RISK_TRADE
BidTradeType_VWAP_GUARANTEE = cvar.BidTradeType_VWAP_GUARANTEE
BidTradeType_AGENCY = cvar.BidTradeType_AGENCY
BidTradeType_GUARANTEED_CLOSE = cvar.BidTradeType_GUARANTEED_CLOSE
AcctIDSource_BIC = cvar.AcctIDSource_BIC
AcctIDSource_SID_CODE = cvar.AcctIDSource_SID_CODE
AcctIDSource_TFM = cvar.AcctIDSource_TFM
AcctIDSource_OMGEO = cvar.AcctIDSource_OMGEO
AcctIDSource_DTCC_CODE = cvar.AcctIDSource_DTCC_CODE
AcctIDSource_OTHER = cvar.AcctIDSource_OTHER
AcctIDSource_SPSAID = cvar.AcctIDSource_SPSAID
ConfirmStatus_RECEIVED = cvar.ConfirmStatus_RECEIVED
ConfirmStatus_MISMATCHED_ACCOUNT = cvar.ConfirmStatus_MISMATCHED_ACCOUNT
ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS = cvar.ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS
ConfirmStatus_CONFIRMED = cvar.ConfirmStatus_CONFIRMED
ConfirmStatus_REQUEST_REJECTED = cvar.ConfirmStatus_REQUEST_REJECTED
ConfirmTransType_NEW = cvar.ConfirmTransType_NEW
ConfirmTransType_REPLACE = cvar.ConfirmTransType_REPLACE
ConfirmTransType_CANCEL = cvar.ConfirmTransType_CANCEL
DeliveryForm_BOOK_ENTRY = cvar.DeliveryForm_BOOK_ENTRY
DeliveryForm_BEARER = cvar.DeliveryForm_BEARER
LegSwapType_PAR_FOR_PAR = cvar.LegSwapType_PAR_FOR_PAR
LegSwapType_MODIFIED_DURATION = cvar.LegSwapType_MODIFIED_DURATION
LegSwapType_RISK = cvar.LegSwapType_RISK
LegSwapType_PROCEEDS = cvar.LegSwapType_PROCEEDS
QuotePriceType_PERCENT = cvar.QuotePriceType_PERCENT
QuotePriceType_PER_SHARE = cvar.QuotePriceType_PER_SHARE
QuotePriceType_FIXED_AMOUNT = cvar.QuotePriceType_FIXED_AMOUNT
QuotePriceType_DISCOUNT = cvar.QuotePriceType_DISCOUNT
QuotePriceType_PREMIUM = cvar.QuotePriceType_PREMIUM
QuotePriceType_SPREAD = cvar.QuotePriceType_SPREAD
QuotePriceType_TED_PRICE = cvar.QuotePriceType_TED_PRICE
QuotePriceType_TED_YIELD = cvar.QuotePriceType_TED_YIELD
QuotePriceType_YIELD_SPREAD = cvar.QuotePriceType_YIELD_SPREAD
QuotePriceType_YIELD = cvar.QuotePriceType_YIELD
QuotePriceType_PRICE_SPREAD = cvar.QuotePriceType_PRICE_SPREAD
QuotePriceType_PRODUCT_TICKS_IN_HALVES = cvar.QuotePriceType_PRODUCT_TICKS_IN_HALVES
QuotePriceType_PRODUCT_TICKS_IN_FOURTHS = cvar.QuotePriceType_PRODUCT_TICKS_IN_FOURTHS
QuotePriceType_PRODUCT_TICKS_IN_EIGHTHS = cvar.QuotePriceType_PRODUCT_TICKS_IN_EIGHTHS
QuotePriceType_PRODUCT_TICKS_IN_SIXTEENTHS = cvar.QuotePriceType_PRODUCT_TICKS_IN_SIXTEENTHS
QuotePriceType_PRODUCT_TICKS_IN_THIRTY_SECONDS = cvar.QuotePriceType_PRODUCT_TICKS_IN_THIRTY_SECONDS
QuotePriceType_PRODUCT_TICKS_IN_SIXTY_FOURTHS = cvar.QuotePriceType_PRODUCT_TICKS_IN_SIXTY_FOURTHS
QuotePriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTHS = cvar.QuotePriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTHS
QuotePriceType_NORMAL_RATE_REPRESENTATION = cvar.QuotePriceType_NORMAL_RATE_REPRESENTATION
QuotePriceType_INVERSE_RATE_REPRESENTATION = cvar.QuotePriceType_INVERSE_RATE_REPRESENTATION
QuotePriceType_BASIS_POINTS = cvar.QuotePriceType_BASIS_POINTS
QuotePriceType_UP_FRONT_POINTS = cvar.QuotePriceType_UP_FRONT_POINTS
QuotePriceType_INTEREST_RATE = cvar.QuotePriceType_INTEREST_RATE
QuotePriceType_PERCENTAGE_OF_NOTIONAL = cvar.QuotePriceType_PERCENTAGE_OF_NOTIONAL
QuoteRespType_HIT = cvar.QuoteRespType_HIT
QuoteRespType_COUNTER = cvar.QuoteRespType_COUNTER
QuoteRespType_EXPIRED = cvar.QuoteRespType_EXPIRED
QuoteRespType_COVER = cvar.QuoteRespType_COVER
QuoteRespType_DONE_AWAY = cvar.QuoteRespType_DONE_AWAY
QuoteRespType_PASS = cvar.QuoteRespType_PASS
QuoteRespType_END_TRADE = cvar.QuoteRespType_END_TRADE
QuoteRespType_TIMED_OUT = cvar.QuoteRespType_TIMED_OUT
QuoteRespType_TIED = cvar.QuoteRespType_TIED
QuoteRespType_TIED_COVER = cvar.QuoteRespType_TIED_COVER
QuoteRespType_ACCEPT = cvar.QuoteRespType_ACCEPT
QuoteRespType_TERMINATE_CONTRACT = cvar.QuoteRespType_TERMINATE_CONTRACT
PosType_TRANSACTION_QUANTITY = cvar.PosType_TRANSACTION_QUANTITY
PosType_INTRA_SPREAD_QTY = cvar.PosType_INTRA_SPREAD_QTY
PosType_INTER_SPREAD_QTY = cvar.PosType_INTER_SPREAD_QTY
PosType_END_OF_DAY_QTY = cvar.PosType_END_OF_DAY_QTY
PosType_START_OF_DAY_QTY = cvar.PosType_START_OF_DAY_QTY
PosType_OPTION_EXERCISE_QTY = cvar.PosType_OPTION_EXERCISE_QTY
PosType_OPTION_ASSIGNMENT = cvar.PosType_OPTION_ASSIGNMENT
PosType_TRANSACTION_FROM_EXERCISE = cvar.PosType_TRANSACTION_FROM_EXERCISE
PosType_TRANSACTION_FROM_ASSIGNMENT = cvar.PosType_TRANSACTION_FROM_ASSIGNMENT
PosType_PIT_TRADE_QTY = cvar.PosType_PIT_TRADE_QTY
PosType_TRANSFER_TRADE_QTY = cvar.PosType_TRANSFER_TRADE_QTY
PosType_ELECTRONIC_TRADE_QTY = cvar.PosType_ELECTRONIC_TRADE_QTY
PosType_ALLOCATION_TRADE_QTY = cvar.PosType_ALLOCATION_TRADE_QTY
PosType_ADJUSTMENT_QTY = cvar.PosType_ADJUSTMENT_QTY
PosType_AS_OF_TRADE_QTY = cvar.PosType_AS_OF_TRADE_QTY
PosType_DELIVERY_QTY = cvar.PosType_DELIVERY_QTY
PosType_TOTAL_TRANSACTION_QTY = cvar.PosType_TOTAL_TRANSACTION_QTY
PosType_CROSS_MARGIN_QTY = cvar.PosType_CROSS_MARGIN_QTY
PosType_INTEGRAL_SPLIT = cvar.PosType_INTEGRAL_SPLIT
PosType_RECEIVE_QUANTITY = cvar.PosType_RECEIVE_QUANTITY
PosType_CORPORATE_ACTION_ADJUSTMENT = cvar.PosType_CORPORATE_ACTION_ADJUSTMENT
PosType_DELIVERY_NOTICE_QTY = cvar.PosType_DELIVERY_NOTICE_QTY
PosType_EXCHANGE_FOR_PHYSICAL_QTY = cvar.PosType_EXCHANGE_FOR_PHYSICAL_QTY
PosType_PRIVATELY_NEGOTIATED_TRADE_QTY = cvar.PosType_PRIVATELY_NEGOTIATED_TRADE_QTY
PosType_NET_DELTA_QTY = cvar.PosType_NET_DELTA_QTY
PosType_CREDIT_EVENT_ADJUSTMENT = cvar.PosType_CREDIT_EVENT_ADJUSTMENT
PosType_SUCCESSION_EVENT_ADJUSTMENT = cvar.PosType_SUCCESSION_EVENT_ADJUSTMENT
PosType_NET_QTY = cvar.PosType_NET_QTY
PosType_GROSS_QTY = cvar.PosType_GROSS_QTY
PosType_INTRADAY_QTY = cvar.PosType_INTRADAY_QTY
PosType_GROSS_LONG_NON_DELTA_ADJUSTED_SWAPTION_POSITION = cvar.PosType_GROSS_LONG_NON_DELTA_ADJUSTED_SWAPTION_POSITION
PosType_LONG_DELTA_ADJUSTED_PAIRED_SWAPTION_POSITION = cvar.PosType_LONG_DELTA_ADJUSTED_PAIRED_SWAPTION_POSITION
PosType_EXPIRING_QUANTITY = cvar.PosType_EXPIRING_QUANTITY
PosType_QUANTITY_NOT_EXERCISED = cvar.PosType_QUANTITY_NOT_EXERCISED
PosType_REQUESTED_EXERCISE_QUANTITY = cvar.PosType_REQUESTED_EXERCISE_QUANTITY
PosType_CASH_FUTURES_EQUIVALENT_QUANTITY = cvar.PosType_CASH_FUTURES_EQUIVALENT_QUANTITY
PosType_LOAN_OR_BORROWED_QUANTITY = cvar.PosType_LOAN_OR_BORROWED_QUANTITY
PosQtyStatus_SUBMITTED = cvar.PosQtyStatus_SUBMITTED
PosQtyStatus_ACCEPTED = cvar.PosQtyStatus_ACCEPTED
PosQtyStatus_REJECTED = cvar.PosQtyStatus_REJECTED
PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT
PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT
PosAmtType_TRADE_VARIATION_AMOUNT = cvar.PosAmtType_TRADE_VARIATION_AMOUNT
PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT
PosAmtType_PREMIUM_AMOUNT = cvar.PosAmtType_PREMIUM_AMOUNT
PosAmtType_CASH_RESIDUAL_AMOUNT = cvar.PosAmtType_CASH_RESIDUAL_AMOUNT
PosAmtType_CASH_AMOUNT = cvar.PosAmtType_CASH_AMOUNT
PosAmtType_VALUE_ADJUSTED_AMOUNT = cvar.PosAmtType_VALUE_ADJUSTED_AMOUNT
PosAmtType_SETTLEMENT_VALUE = cvar.PosAmtType_SETTLEMENT_VALUE
PosAmtType_INITIAL_TRADE_COUPON_AMOUNT = cvar.PosAmtType_INITIAL_TRADE_COUPON_AMOUNT
PosAmtType_ACCRUED_COUPON_AMOUNT = cvar.PosAmtType_ACCRUED_COUPON_AMOUNT
PosAmtType_COUPON_AMOUNT = cvar.PosAmtType_COUPON_AMOUNT
PosAmtType_INCREMENTAL_ACCRUED_COUPON = cvar.PosAmtType_INCREMENTAL_ACCRUED_COUPON
PosAmtType_COLLATERALIZED_MARK_TO_MARKET = cvar.PosAmtType_COLLATERALIZED_MARK_TO_MARKET
PosAmtType_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET = cvar.PosAmtType_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET
PosAmtType_COMPENSATION_AMOUNT = cvar.PosAmtType_COMPENSATION_AMOUNT
PosAmtType_TOTAL_BANKED_AMOUNT = cvar.PosAmtType_TOTAL_BANKED_AMOUNT
PosAmtType_TOTAL_COLLATERALIZED_AMOUNT = cvar.PosAmtType_TOTAL_COLLATERALIZED_AMOUNT
PosAmtType_LONG_PAIRED_SWAP_NOTIONAL_VALUE = cvar.PosAmtType_LONG_PAIRED_SWAP_NOTIONAL_VALUE
PosAmtType_SHORT_PAIRED_SWAP_NOTIONAL_VALUE = cvar.PosAmtType_SHORT_PAIRED_SWAP_NOTIONAL_VALUE
PosAmtType_START_OF_DAY_ACCRUED_COUPON = cvar.PosAmtType_START_OF_DAY_ACCRUED_COUPON
PosAmtType_NET_PRESENT_VALUE = cvar.PosAmtType_NET_PRESENT_VALUE
PosAmtType_START_OF_DAY_NET_PRESENT_VALUE = cvar.PosAmtType_START_OF_DAY_NET_PRESENT_VALUE
PosAmtType_NET_CASH_FLOW = cvar.PosAmtType_NET_CASH_FLOW
PosAmtType_PRESENT_VALUE_OF_FEES = cvar.PosAmtType_PRESENT_VALUE_OF_FEES
PosAmtType_PRESENT_VALUE_ONE_BASIS_POINTS = cvar.PosAmtType_PRESENT_VALUE_ONE_BASIS_POINTS
PosAmtType_FIVE_YEAR_EQUIVALENT_NOTIONAL = cvar.PosAmtType_FIVE_YEAR_EQUIVALENT_NOTIONAL
PosAmtType_UNDISCOUNTED_MARK_TO_MARKET = cvar.PosAmtType_UNDISCOUNTED_MARK_TO_MARKET
PosAmtType_MARK_TO_MODEL = cvar.PosAmtType_MARK_TO_MODEL
PosAmtType_MARK_TO_MARKET_VARIANCE = cvar.PosAmtType_MARK_TO_MARKET_VARIANCE
PosAmtType_MARK_TO_MODEL_VARIANCE = cvar.PosAmtType_MARK_TO_MODEL_VARIANCE
PosAmtType_UPFRONT_PAYMENT = cvar.PosAmtType_UPFRONT_PAYMENT
PosAmtType_END_VALE = cvar.PosAmtType_END_VALE
PosAmtType_OUTSTANDING_MARGIN_LOAN = cvar.PosAmtType_OUTSTANDING_MARGIN_LOAN
PosAmtType_LOAN_VALUE = cvar.PosAmtType_LOAN_VALUE
PosTransType_EXERCISE = cvar.PosTransType_EXERCISE
PosTransType_DO_NOT_EXERCISE = cvar.PosTransType_DO_NOT_EXERCISE
PosTransType_POSITION_ADJUSTMENT = cvar.PosTransType_POSITION_ADJUSTMENT
PosTransType_POSITION_CHANGE_SUBMISSION = cvar.PosTransType_POSITION_CHANGE_SUBMISSION
PosTransType_PLEDGE = cvar.PosTransType_PLEDGE
PosTransType_LARGE_TRADER_SUBMISSION = cvar.PosTransType_LARGE_TRADER_SUBMISSION
PosTransType_LARGE_POSITIONS_REPORTING_SUBMISSION = cvar.PosTransType_LARGE_POSITIONS_REPORTING_SUBMISSION
PosTransType_LONG_HOLDINGS = cvar.PosTransType_LONG_HOLDINGS
PosTransType_INTERNAL_TRANSFER = cvar.PosTransType_INTERNAL_TRANSFER
PosTransType_TRANSFER_OF_FIRM = cvar.PosTransType_TRANSFER_OF_FIRM
PosTransType_EXTERNAL_TRANSFER = cvar.PosTransType_EXTERNAL_TRANSFER
PosTransType_CORPORATE_ACTION = cvar.PosTransType_CORPORATE_ACTION
PosTransType_NOTIFICATION = cvar.PosTransType_NOTIFICATION
PosTransType_POSITION_CREATION = cvar.PosTransType_POSITION_CREATION
PosTransType_CLOSEOUT = cvar.PosTransType_CLOSEOUT
PosTransType_REOPEN = cvar.PosTransType_REOPEN
PosMaintAction_NEW = cvar.PosMaintAction_NEW
PosMaintAction_REPLACE = cvar.PosMaintAction_REPLACE
PosMaintAction_CANCEL = cvar.PosMaintAction_CANCEL
PosMaintAction_REVERSE = cvar.PosMaintAction_REVERSE
SettlSessID_INTRADAY = cvar.SettlSessID_INTRADAY
SettlSessID_REGULAR_TRADING_HOURS = cvar.SettlSessID_REGULAR_TRADING_HOURS
SettlSessID_ELECTRONIC_TRADING_HOURS = cvar.SettlSessID_ELECTRONIC_TRADING_HOURS
SettlSessID_END_OF_DAY = cvar.SettlSessID_END_OF_DAY
AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION = cvar.AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION
AdjustmentType_DELTA_PLUS = cvar.AdjustmentType_DELTA_PLUS
AdjustmentType_DELTA_MINUS = cvar.AdjustmentType_DELTA_MINUS
AdjustmentType_FINAL = cvar.AdjustmentType_FINAL
AdjustmentType_CUSTOMER_SPECIFIC_POSITION = cvar.AdjustmentType_CUSTOMER_SPECIFIC_POSITION
PosMaintStatus_ACCEPTED = cvar.PosMaintStatus_ACCEPTED
PosMaintStatus_ACCEPTED_WITH_WARNINGS = cvar.PosMaintStatus_ACCEPTED_WITH_WARNINGS
PosMaintStatus_REJECTED = cvar.PosMaintStatus_REJECTED
PosMaintStatus_COMPLETED = cvar.PosMaintStatus_COMPLETED
PosMaintStatus_COMPLETED_WITH_WARNINGS = cvar.PosMaintStatus_COMPLETED_WITH_WARNINGS
PosMaintResult_SUCCESSFUL_COMPLETION = cvar.PosMaintResult_SUCCESSFUL_COMPLETION
PosMaintResult_REJECTED = cvar.PosMaintResult_REJECTED
PosMaintResult_OTHER = cvar.PosMaintResult_OTHER
PosReqType_POSITIONS = cvar.PosReqType_POSITIONS
PosReqType_TRADES = cvar.PosReqType_TRADES
PosReqType_EXERCISES = cvar.PosReqType_EXERCISES
PosReqType_ASSIGNMENTS = cvar.PosReqType_ASSIGNMENTS
PosReqType_SETTLEMENT_ACTIVITY = cvar.PosReqType_SETTLEMENT_ACTIVITY
PosReqType_BACKOUT_MESSAGE = cvar.PosReqType_BACKOUT_MESSAGE
PosReqType_DELTA_POSITIONS = cvar.PosReqType_DELTA_POSITIONS
PosReqType_NET_POSITION = cvar.PosReqType_NET_POSITION
PosReqType_LARGE_POSITIONS_REPORTING = cvar.PosReqType_LARGE_POSITIONS_REPORTING
PosReqType_EXERCISE_POSITION_REPORTING_SUBMISSION = cvar.PosReqType_EXERCISE_POSITION_REPORTING_SUBMISSION
PosReqType_POSITION_LIMIT_REPORTING_SUBMISSING = cvar.PosReqType_POSITION_LIMIT_REPORTING_SUBMISSING
ResponseTransportType_INBAND = cvar.ResponseTransportType_INBAND
ResponseTransportType_OUT_OF_BAND = cvar.ResponseTransportType_OUT_OF_BAND
PosReqResult_VALID_REQUEST = cvar.PosReqResult_VALID_REQUEST
PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST
PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA = cvar.PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA
PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS = cvar.PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS
PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED = cvar.PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED
PosReqResult_OTHER = cvar.PosReqResult_OTHER
PosReqStatus_COMPLETED = cvar.PosReqStatus_COMPLETED
PosReqStatus_COMPLETED_WITH_WARNINGS = cvar.PosReqStatus_COMPLETED_WITH_WARNINGS
PosReqStatus_REJECTED = cvar.PosReqStatus_REJECTED
SettlPriceType_FINAL = cvar.SettlPriceType_FINAL
SettlPriceType_THEORETICAL = cvar.SettlPriceType_THEORETICAL
AssignmentMethod_RANDOM = cvar.AssignmentMethod_RANDOM
AssignmentMethod_PRO_RATA = cvar.AssignmentMethod_PRO_RATA
ExerciseMethod_AUTOMATIC = cvar.ExerciseMethod_AUTOMATIC
ExerciseMethod_MANUAL = cvar.ExerciseMethod_MANUAL
TradeRequestResult_SUCCESSFUL = cvar.TradeRequestResult_SUCCESSFUL
TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT
TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED = cvar.TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED
TradeRequestResult_INVALID_PARTIES = cvar.TradeRequestResult_INVALID_PARTIES
TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED = cvar.TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED
TradeRequestResult_INVALID_DESTINATION_REQUESTED = cvar.TradeRequestResult_INVALID_DESTINATION_REQUESTED
TradeRequestResult_TRADE_REQUEST_TYPE_NOT_SUPPORTED = cvar.TradeRequestResult_TRADE_REQUEST_TYPE_NOT_SUPPORTED
TradeRequestResult_NOT_AUTHORIZED = cvar.TradeRequestResult_NOT_AUTHORIZED
TradeRequestResult_OTHER = cvar.TradeRequestResult_OTHER
TradeRequestStatus_ACCEPTED = cvar.TradeRequestStatus_ACCEPTED
TradeRequestStatus_COMPLETED = cvar.TradeRequestStatus_COMPLETED
TradeRequestStatus_REJECTED = cvar.TradeRequestStatus_REJECTED
TradeReportRejectReason_SUCCESSFUL = cvar.TradeReportRejectReason_SUCCESSFUL
TradeReportRejectReason_INVALID_PARTY_ONFORMATION = cvar.TradeReportRejectReason_INVALID_PARTY_ONFORMATION
TradeReportRejectReason_UNKNOWN_INSTRUMENT = cvar.TradeReportRejectReason_UNKNOWN_INSTRUMENT
TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES = cvar.TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES
TradeReportRejectReason_INVALID_TRADE_TYPE = cvar.TradeReportRejectReason_INVALID_TRADE_TYPE
TradeReportRejectReason_OTHER = cvar.TradeReportRejectReason_OTHER
TradeReportRejectReason_INVALID_PARTY_INFORMATION = cvar.TradeReportRejectReason_INVALID_PARTY_INFORMATION
TradeReportRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.TradeReportRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
TradeReportRejectReason_REFERENCE_PRICE_NOT_AVAILABLE = cvar.TradeReportRejectReason_REFERENCE_PRICE_NOT_AVAILABLE
TradeReportRejectReason_NOTIONAL_VALUE_EXCEEDS_THRESHOLD = cvar.TradeReportRejectReason_NOTIONAL_VALUE_EXCEEDS_THRESHOLD
SideMultiLegReportingType_SINGLE_SECURITY = cvar.SideMultiLegReportingType_SINGLE_SECURITY
SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY = cvar.SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
SideMultiLegReportingType_MULTILEG_SECURITY = cvar.SideMultiLegReportingType_MULTILEG_SECURITY
TrdRegTimestampType_EXECUTION_TIME = cvar.TrdRegTimestampType_EXECUTION_TIME
TrdRegTimestampType_TIME_IN = cvar.TrdRegTimestampType_TIME_IN
TrdRegTimestampType_TIME_OUT = cvar.TrdRegTimestampType_TIME_OUT
TrdRegTimestampType_BROKER_RECEIPT = cvar.TrdRegTimestampType_BROKER_RECEIPT
TrdRegTimestampType_BROKER_EXECUTION = cvar.TrdRegTimestampType_BROKER_EXECUTION
TrdRegTimestampType_DESK_RECEIPT = cvar.TrdRegTimestampType_DESK_RECEIPT
TrdRegTimestampType_SUBMISSION_TO_CLEARING = cvar.TrdRegTimestampType_SUBMISSION_TO_CLEARING
TrdRegTimestampType_TIME_PRIORITY = cvar.TrdRegTimestampType_TIME_PRIORITY
TrdRegTimestampType_ORDERBOOK_ENTRY_TIME = cvar.TrdRegTimestampType_ORDERBOOK_ENTRY_TIME
TrdRegTimestampType_ORDER_SUBMISSION_TIME = cvar.TrdRegTimestampType_ORDER_SUBMISSION_TIME
TrdRegTimestampType_PUBLICLY_REPORTED = cvar.TrdRegTimestampType_PUBLICLY_REPORTED
TrdRegTimestampType_PUBLIC_REPORT_UPDATED = cvar.TrdRegTimestampType_PUBLIC_REPORT_UPDATED
TrdRegTimestampType_NON_PUBLICLY_REPORTED = cvar.TrdRegTimestampType_NON_PUBLICLY_REPORTED
TrdRegTimestampType_NON_PUBLIC_REPORT_UPDATED = cvar.TrdRegTimestampType_NON_PUBLIC_REPORT_UPDATED
TrdRegTimestampType_SUBMITTED_FOR_CONFIRMATION = cvar.TrdRegTimestampType_SUBMITTED_FOR_CONFIRMATION
TrdRegTimestampType_UPDATED_FOR_CONFIRMATION = cvar.TrdRegTimestampType_UPDATED_FOR_CONFIRMATION
TrdRegTimestampType_CONFIRMED = cvar.TrdRegTimestampType_CONFIRMED
TrdRegTimestampType_UPDATED_FOR_CLEARING = cvar.TrdRegTimestampType_UPDATED_FOR_CLEARING
TrdRegTimestampType_CLEARED = cvar.TrdRegTimestampType_CLEARED
TrdRegTimestampType_ALLOCATIONS_SUBMITTED = cvar.TrdRegTimestampType_ALLOCATIONS_SUBMITTED
TrdRegTimestampType_ALLOCATIONS_UPDATED = cvar.TrdRegTimestampType_ALLOCATIONS_UPDATED
TrdRegTimestampType_ALLOCATIONS_COMPLETED = cvar.TrdRegTimestampType_ALLOCATIONS_COMPLETED
TrdRegTimestampType_SUBMITTED_TO_REPOSITORY = cvar.TrdRegTimestampType_SUBMITTED_TO_REPOSITORY
TrdRegTimestampType_POST_TRD_CONTNTN_EVNT = cvar.TrdRegTimestampType_POST_TRD_CONTNTN_EVNT
TrdRegTimestampType_POST_TRADE_VALUATION = cvar.TrdRegTimestampType_POST_TRADE_VALUATION
TrdRegTimestampType_PREVIOUS_TIME_PRIORITY = cvar.TrdRegTimestampType_PREVIOUS_TIME_PRIORITY
TrdRegTimestampType_IDENTIFIER_ASSIGNED = cvar.TrdRegTimestampType_IDENTIFIER_ASSIGNED
TrdRegTimestampType_PREVIOUS_IDENTIFIER_ASSIGNED = cvar.TrdRegTimestampType_PREVIOUS_IDENTIFIER_ASSIGNED
TrdRegTimestampType_ORDER_CANCELLATION_TIME = cvar.TrdRegTimestampType_ORDER_CANCELLATION_TIME
TrdRegTimestampType_ORDER_MODIFICATION_TIME = cvar.TrdRegTimestampType_ORDER_MODIFICATION_TIME
TrdRegTimestampType_ORDER_ROUTING_TIME = cvar.TrdRegTimestampType_ORDER_ROUTING_TIME
TrdRegTimestampType_TRADE_CANCELLATION_TIME = cvar.TrdRegTimestampType_TRADE_CANCELLATION_TIME
TrdRegTimestampType_TRADE_MODIFICATION_TIME = cvar.TrdRegTimestampType_TRADE_MODIFICATION_TIME
TrdRegTimestampType_REFERENCE_TIME_FOR_NBBO = cvar.TrdRegTimestampType_REFERENCE_TIME_FOR_NBBO
ConfirmType_STATUS = cvar.ConfirmType_STATUS
ConfirmType_CONFIRMATION = cvar.ConfirmType_CONFIRMATION
ConfirmType_CONFIRMATION_REQUEST_REJECTED = cvar.ConfirmType_CONFIRMATION_REQUEST_REJECTED
ConfirmRejReason_MISMATCHED_ACCOUNT = cvar.ConfirmRejReason_MISMATCHED_ACCOUNT
ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS = cvar.ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS
ConfirmRejReason_OTHER = cvar.ConfirmRejReason_OTHER
ConfirmRejReason_UNKNOWN_OR_MISSING_INDIVIDUAL_ALLOC_ID = cvar.ConfirmRejReason_UNKNOWN_OR_MISSING_INDIVIDUAL_ALLOC_ID
ConfirmRejReason_TRANSACTION_NOT_RECOGNIZED = cvar.ConfirmRejReason_TRANSACTION_NOT_RECOGNIZED
ConfirmRejReason_DUPLICATE_TRANSACTION = cvar.ConfirmRejReason_DUPLICATE_TRANSACTION
ConfirmRejReason_INCORRECT_OR_MISSING_INSTRUMENT = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_INSTRUMENT
ConfirmRejReason_INCORRECT_OR_MISSING_PRICE = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_PRICE
ConfirmRejReason_INCORRECT_OR_MISSING_COMMISSION = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_COMMISSION
ConfirmRejReason_INCORRECT_OR_MISSING_SETTL_DATE = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_SETTL_DATE
ConfirmRejReason_INCORRECT_OR_MISSING_FUND_ID_OR_FUND_NAME = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_FUND_ID_OR_FUND_NAME
ConfirmRejReason_INCORRECT_OR_MISSING_QUANTITY = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_QUANTITY
ConfirmRejReason_INCORRECT_OR_MISSING_FEES = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_FEES
ConfirmRejReason_INCORRECT_OR_MISSING_TAX = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_TAX
ConfirmRejReason_INCORRECT_OR_MISSING_PARTY = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_PARTY
ConfirmRejReason_INCORRECT_OR_MISSING_SIDE = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_SIDE
ConfirmRejReason_INCORRECT_OR_MISSING_NET_MONEY = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_NET_MONEY
ConfirmRejReason_INCORRECT_OR_MISSING_TRADE_DATE = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_TRADE_DATE
ConfirmRejReason_INCORRECT_OR_MISSING_SETTL_CCY_INSTRUCTIONS = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_SETTL_CCY_INSTRUCTIONS
ConfirmRejReason_INCORRECT_OR_MISSING_CAPACITY = cvar.ConfirmRejReason_INCORRECT_OR_MISSING_CAPACITY
BookingType_REGULAR_BOOKING = cvar.BookingType_REGULAR_BOOKING
BookingType_CFD = cvar.BookingType_CFD
BookingType_TOTAL_RETURN_SWAP = cvar.BookingType_TOTAL_RETURN_SWAP
AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS = cvar.AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS
AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED = cvar.AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED
AllocSettlInstType_FULL_DETAILS_PROVIDED = cvar.AllocSettlInstType_FULL_DETAILS_PROVIDED
AllocSettlInstType_SSIDBI_DS_PROVIDED = cvar.AllocSettlInstType_SSIDBI_DS_PROVIDED
AllocSettlInstType_PHONE_FOR_INSTRUCTIONS = cvar.AllocSettlInstType_PHONE_FOR_INSTRUCTIONS
DlvyInstType_SECURITIES = cvar.DlvyInstType_SECURITIES
DlvyInstType_CASH = cvar.DlvyInstType_CASH
TerminationType_OVERNIGHT = cvar.TerminationType_OVERNIGHT
TerminationType_TERM = cvar.TerminationType_TERM
TerminationType_FLEXIBLE = cvar.TerminationType_FLEXIBLE
TerminationType_OPEN = cvar.TerminationType_OPEN
SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST = cvar.SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST
SettlInstReqRejCode_UNKNOWN_ACCOUNT = cvar.SettlInstReqRejCode_UNKNOWN_ACCOUNT
SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND = cvar.SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND
SettlInstReqRejCode_OTHER = cvar.SettlInstReqRejCode_OTHER
AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY = cvar.AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY
AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
AllocReportType_WAREHOUSE_RECAP = cvar.AllocReportType_WAREHOUSE_RECAP
AllocReportType_REQUEST_TO_INTERMEDIARY = cvar.AllocReportType_REQUEST_TO_INTERMEDIARY
AllocReportType_PRELIMINARY_REQUEST_TO_INTERMEDIARY = cvar.AllocReportType_PRELIMINARY_REQUEST_TO_INTERMEDIARY
AllocReportType_ACCEPT = cvar.AllocReportType_ACCEPT
AllocReportType_REJECT = cvar.AllocReportType_REJECT
AllocReportType_ACCEPT_PENDING = cvar.AllocReportType_ACCEPT_PENDING
AllocReportType_COMPLETE = cvar.AllocReportType_COMPLETE
AllocReportType_REVERSE_PENDING = cvar.AllocReportType_REVERSE_PENDING
AllocReportType_GIVEUP = cvar.AllocReportType_GIVEUP
AllocReportType_TAKEUP = cvar.AllocReportType_TAKEUP
AllocReportType_REVERSAL = cvar.AllocReportType_REVERSAL
AllocReportType_ALLEGED = cvar.AllocReportType_ALLEGED
AllocReportType_SUB_ALLOCATION_GIVEUP = cvar.AllocReportType_SUB_ALLOCATION_GIVEUP
AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE = cvar.AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE
AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS = cvar.AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS
AllocCancReplaceReason_OTHER = cvar.AllocCancReplaceReason_OTHER
AllocCancReplaceReason_CANCELLED_BY_GIVEUP_FIRM = cvar.AllocCancReplaceReason_CANCELLED_BY_GIVEUP_FIRM
AllocAccountType_CARRIED_CUSTOMER_SIDE = cvar.AllocAccountType_CARRIED_CUSTOMER_SIDE
AllocAccountType_CARRIED_NON_CUSTOMER_SIDE = cvar.AllocAccountType_CARRIED_NON_CUSTOMER_SIDE
AllocAccountType_HOUSE_TRADER = cvar.AllocAccountType_HOUSE_TRADER
AllocAccountType_FLOOR_TRADER = cvar.AllocAccountType_FLOOR_TRADER
AllocAccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED = cvar.AllocAccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED
AllocAccountType_HOUSE_TRADER_CROSS_MARGINED = cvar.AllocAccountType_HOUSE_TRADER_CROSS_MARGINED
AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT = cvar.AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT
PartySubIDType_FIRM = cvar.PartySubIDType_FIRM
PartySubIDType_PERSON = cvar.PartySubIDType_PERSON
PartySubIDType_SYSTEM = cvar.PartySubIDType_SYSTEM
PartySubIDType_APPLICATION = cvar.PartySubIDType_APPLICATION
PartySubIDType_FULL_LEGAL_NAME_OF_FIRM = cvar.PartySubIDType_FULL_LEGAL_NAME_OF_FIRM
PartySubIDType_POSTAL_ADDRESS = cvar.PartySubIDType_POSTAL_ADDRESS
PartySubIDType_PHONE_NUMBER = cvar.PartySubIDType_PHONE_NUMBER
PartySubIDType_EMAIL_ADDRESS = cvar.PartySubIDType_EMAIL_ADDRESS
PartySubIDType_CONTACT_NAME = cvar.PartySubIDType_CONTACT_NAME
PartySubIDType_SECURITIES_ACCOUNT_NUMBER = cvar.PartySubIDType_SECURITIES_ACCOUNT_NUMBER
PartySubIDType_REGISTRATION_NUMBER = cvar.PartySubIDType_REGISTRATION_NUMBER
PartySubIDType_REGISTERED_ADDRESS_FOR_CONFIRMATION = cvar.PartySubIDType_REGISTERED_ADDRESS_FOR_CONFIRMATION
PartySubIDType_REGULATORY_STATUS = cvar.PartySubIDType_REGULATORY_STATUS
PartySubIDType_REGISTRATION_NAME = cvar.PartySubIDType_REGISTRATION_NAME
PartySubIDType_CASH_ACCOUNT_NUMBER = cvar.PartySubIDType_CASH_ACCOUNT_NUMBER
PartySubIDType_BIC = cvar.PartySubIDType_BIC
PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE = cvar.PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE
PartySubIDType_REGISTERED_ADDRESS = cvar.PartySubIDType_REGISTERED_ADDRESS
PartySubIDType_FUND_ACCOUNT_NAME = cvar.PartySubIDType_FUND_ACCOUNT_NAME
PartySubIDType_TELEX_NUMBER = cvar.PartySubIDType_TELEX_NUMBER
PartySubIDType_FAX_NUMBER = cvar.PartySubIDType_FAX_NUMBER
PartySubIDType_SECURITIES_ACCOUNT_NAME = cvar.PartySubIDType_SECURITIES_ACCOUNT_NAME
PartySubIDType_CASH_ACCOUNT_NAME = cvar.PartySubIDType_CASH_ACCOUNT_NAME
PartySubIDType_DEPARTMENT = cvar.PartySubIDType_DEPARTMENT
PartySubIDType_LOCATION_DESK = cvar.PartySubIDType_LOCATION_DESK
PartySubIDType_POSITION_ACCOUNT_TYPE = cvar.PartySubIDType_POSITION_ACCOUNT_TYPE
PartySubIDType_SECURITY_LOCATE_ID = cvar.PartySubIDType_SECURITY_LOCATE_ID
PartySubIDType_MARKET_MAKER = cvar.PartySubIDType_MARKET_MAKER
PartySubIDType_ELIGIBLE_COUNTERPARTY = cvar.PartySubIDType_ELIGIBLE_COUNTERPARTY
PartySubIDType_PROFESSIONAL_CLIENT = cvar.PartySubIDType_PROFESSIONAL_CLIENT
PartySubIDType_LOCATION = cvar.PartySubIDType_LOCATION
PartySubIDType_EXECUTION_VENUE = cvar.PartySubIDType_EXECUTION_VENUE
PartySubIDType_CURRENCY_DELIVERY_IDENTIFIER = cvar.PartySubIDType_CURRENCY_DELIVERY_IDENTIFIER
PartySubIDType_ADDRESS_CITY = cvar.PartySubIDType_ADDRESS_CITY
PartySubIDType_ADDRESS_STATE_OR_PROVINCE = cvar.PartySubIDType_ADDRESS_STATE_OR_PROVINCE
PartySubIDType_ADDRESS_POSTAL_CODE = cvar.PartySubIDType_ADDRESS_POSTAL_CODE
PartySubIDType_ADDRESS_STREET = cvar.PartySubIDType_ADDRESS_STREET
PartySubIDType_ADDRESS_ISO_COUNTRY_CODE = cvar.PartySubIDType_ADDRESS_ISO_COUNTRY_CODE
PartySubIDType_ISO_COUNTRY_CODE = cvar.PartySubIDType_ISO_COUNTRY_CODE
PartySubIDType_MARKET_SEGMENT = cvar.PartySubIDType_MARKET_SEGMENT
PartySubIDType_CUSTOMER_ACCOUNT_TYPE = cvar.PartySubIDType_CUSTOMER_ACCOUNT_TYPE
PartySubIDType_OMNIBUS_ACCOUNT = cvar.PartySubIDType_OMNIBUS_ACCOUNT
PartySubIDType_FUNDS_SEGREGATION_TYPE = cvar.PartySubIDType_FUNDS_SEGREGATION_TYPE
PartySubIDType_GUARANTEE_FUND = cvar.PartySubIDType_GUARANTEE_FUND
PartySubIDType_SWAP_DEALER = cvar.PartySubIDType_SWAP_DEALER
PartySubIDType_MAJOR_PARTICIPANT = cvar.PartySubIDType_MAJOR_PARTICIPANT
PartySubIDType_FINANCIAL_ENTITY = cvar.PartySubIDType_FINANCIAL_ENTITY
PartySubIDType_US_PERSON = cvar.PartySubIDType_US_PERSON
PartySubIDType_REPORTING_ENTITY_INDICATOR = cvar.PartySubIDType_REPORTING_ENTITY_INDICATOR
PartySubIDType_ELECTED_CLEARING_REQUIREMENT_EXCEPTION = cvar.PartySubIDType_ELECTED_CLEARING_REQUIREMENT_EXCEPTION
PartySubIDType_BUSINESS_CENTER = cvar.PartySubIDType_BUSINESS_CENTER
PartySubIDType_REFERENCE_TEXT = cvar.PartySubIDType_REFERENCE_TEXT
PartySubIDType_SHORT_MARKING_EXEMPT_ACCOUNT = cvar.PartySubIDType_SHORT_MARKING_EXEMPT_ACCOUNT
PartySubIDType_PARENT_FIRM_IDENTIFIER = cvar.PartySubIDType_PARENT_FIRM_IDENTIFIER
PartySubIDType_PARENT_FIRM_NAME = cvar.PartySubIDType_PARENT_FIRM_NAME
PartySubIDType_DEAL_IDENTIFIER = cvar.PartySubIDType_DEAL_IDENTIFIER
PartySubIDType_SYSTEM_TRADE_ID = cvar.PartySubIDType_SYSTEM_TRADE_ID
PartySubIDType_SYSTEM_TRADE_SUB_ID = cvar.PartySubIDType_SYSTEM_TRADE_SUB_ID
PartySubIDType_FCM_CODE = cvar.PartySubIDType_FCM_CODE
PartySubIDType_DLVRY_TRML_CODE = cvar.PartySubIDType_DLVRY_TRML_CODE
PartySubIDType_VOLNTY_RPT_ENTITY = cvar.PartySubIDType_VOLNTY_RPT_ENTITY
PartySubIDType_RPT_OBLIG_JURSDCTN = cvar.PartySubIDType_RPT_OBLIG_JURSDCTN
PartySubIDType_VOLNTY_RPT_JURSDCTN = cvar.PartySubIDType_VOLNTY_RPT_JURSDCTN
PartySubIDType_COMPANY_ACTIVITIES = cvar.PartySubIDType_COMPANY_ACTIVITIES
PartySubIDType_EE_AREA_DOMICILED = cvar.PartySubIDType_EE_AREA_DOMICILED
PartySubIDType_CONTRACT_LINKED = cvar.PartySubIDType_CONTRACT_LINKED
PartySubIDType_CONTRACT_ABOVE = cvar.PartySubIDType_CONTRACT_ABOVE
PartySubIDType_VOLNTY_RPT_PTY = cvar.PartySubIDType_VOLNTY_RPT_PTY
PartySubIDType_END_USER = cvar.PartySubIDType_END_USER
PartySubIDType_LOCATION_OR_JURISDICTION = cvar.PartySubIDType_LOCATION_OR_JURISDICTION
PartySubIDType_DERIVATIVES_DEALER = cvar.PartySubIDType_DERIVATIVES_DEALER
PartySubIDType_DOMICILE = cvar.PartySubIDType_DOMICILE
PartySubIDType_EXEMPT_FROM_RECOGNITION = cvar.PartySubIDType_EXEMPT_FROM_RECOGNITION
PartySubIDType_PAYER = cvar.PartySubIDType_PAYER
PartySubIDType_RECEIVER = cvar.PartySubIDType_RECEIVER
PartySubIDType_SYSTEMATIC_INTERNALISER = cvar.PartySubIDType_SYSTEMATIC_INTERNALISER
PartySubIDType_PUBLISHING_ENTITY_INDICATOR = cvar.PartySubIDType_PUBLISHING_ENTITY_INDICATOR
PartySubIDType_FIRST_NAME = cvar.PartySubIDType_FIRST_NAME
PartySubIDType_SURNAME = cvar.PartySubIDType_SURNAME
PartySubIDType_DATE_OF_BIRTH = cvar.PartySubIDType_DATE_OF_BIRTH
PartySubIDType_ORDER_TRANSMITTING_FIRM = cvar.PartySubIDType_ORDER_TRANSMITTING_FIRM
PartySubIDType_ORDER_TRANSMITTING_FIRM_BUYER = cvar.PartySubIDType_ORDER_TRANSMITTING_FIRM_BUYER
PartySubIDType_ORDER_TRANSMITTER_SELLER = cvar.PartySubIDType_ORDER_TRANSMITTER_SELLER
PartySubIDType_LEGAL_ENTITY_IDENTIFIER = cvar.PartySubIDType_LEGAL_ENTITY_IDENTIFIER
PartySubIDType_SUB_SECTOR_CLASSIFICATION = cvar.PartySubIDType_SUB_SECTOR_CLASSIFICATION
PartySubIDType_PARTY_SIDE = cvar.PartySubIDType_PARTY_SIDE
PartySubIDType_LEGAL_REGISTRATION_COUNTRY = cvar.PartySubIDType_LEGAL_REGISTRATION_COUNTRY
AllocIntermedReqType_PENDING_ACCEPT = cvar.AllocIntermedReqType_PENDING_ACCEPT
AllocIntermedReqType_PENDING_RELEASE = cvar.AllocIntermedReqType_PENDING_RELEASE
AllocIntermedReqType_PENDING_REVERSAL = cvar.AllocIntermedReqType_PENDING_REVERSAL
AllocIntermedReqType_ACCEPT = cvar.AllocIntermedReqType_ACCEPT
AllocIntermedReqType_BLOCK_LEVEL_REJECT = cvar.AllocIntermedReqType_BLOCK_LEVEL_REJECT
AllocIntermedReqType_ACCOUNT_LEVEL_REJECT = cvar.AllocIntermedReqType_ACCOUNT_LEVEL_REJECT
ApplQueueResolution_NO_ACTION_TAKEN = cvar.ApplQueueResolution_NO_ACTION_TAKEN
ApplQueueResolution_QUEUE_FLUSHED = cvar.ApplQueueResolution_QUEUE_FLUSHED
ApplQueueResolution_OVERLAY_LAST = cvar.ApplQueueResolution_OVERLAY_LAST
ApplQueueResolution_END_SESSION = cvar.ApplQueueResolution_END_SESSION
ApplQueueAction_NO_ACTION_TAKEN = cvar.ApplQueueAction_NO_ACTION_TAKEN
ApplQueueAction_QUEUE_FLUSHED = cvar.ApplQueueAction_QUEUE_FLUSHED
ApplQueueAction_OVERLAY_LAST = cvar.ApplQueueAction_OVERLAY_LAST
ApplQueueAction_END_SESSION = cvar.ApplQueueAction_END_SESSION
AvgPxIndicator_NO_AVERAGE_PRICING = cvar.AvgPxIndicator_NO_AVERAGE_PRICING
AvgPxIndicator_TRADE = cvar.AvgPxIndicator_TRADE
AvgPxIndicator_LAST_TRADE = cvar.AvgPxIndicator_LAST_TRADE
AvgPxIndicator_NOTIONAL_VALUE_AVERAGE_PX_GROUP_TRADE = cvar.AvgPxIndicator_NOTIONAL_VALUE_AVERAGE_PX_GROUP_TRADE
AvgPxIndicator_AVERAGE_PRICED_TRADE = cvar.AvgPxIndicator_AVERAGE_PRICED_TRADE
TradeAllocIndicator_ALLOCATION_NOT_REQUIRED = cvar.TradeAllocIndicator_ALLOCATION_NOT_REQUIRED
TradeAllocIndicator_ALLOCATION_REQUIRED = cvar.TradeAllocIndicator_ALLOCATION_REQUIRED
TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE = cvar.TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE
TradeAllocIndicator_ALLOCATION_GIVE_UP_EXECUTOR = cvar.TradeAllocIndicator_ALLOCATION_GIVE_UP_EXECUTOR
TradeAllocIndicator_ALLOCATION_FROM_EXECUTOR = cvar.TradeAllocIndicator_ALLOCATION_FROM_EXECUTOR
TradeAllocIndicator_ALLOCATION_TO_CLAIM_ACCOUNT = cvar.TradeAllocIndicator_ALLOCATION_TO_CLAIM_ACCOUNT
TradeAllocIndicator_TRADE_SPLIT = cvar.TradeAllocIndicator_TRADE_SPLIT
ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE = cvar.ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE
ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN = cvar.ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN
ExpirationCycle_SPECIFIED_EXPIRATION = cvar.ExpirationCycle_SPECIFIED_EXPIRATION
TrdType_REGULAR_TRADE = cvar.TrdType_REGULAR_TRADE
TrdType_BLOCK_TRADE = cvar.TrdType_BLOCK_TRADE
TrdType_EFP = cvar.TrdType_EFP
TrdType_TRANSFER = cvar.TrdType_TRANSFER
TrdType_LATE_TRADE = cvar.TrdType_LATE_TRADE
TrdType_T_TRADE = cvar.TrdType_T_TRADE
TrdType_WEIGHTED_AVERAGE_PRICE_TRADE = cvar.TrdType_WEIGHTED_AVERAGE_PRICE_TRADE
TrdType_BUNCHED_TRADE = cvar.TrdType_BUNCHED_TRADE
TrdType_LATE_BUNCHED_TRADE = cvar.TrdType_LATE_BUNCHED_TRADE
TrdType_PRIOR_REFERENCE_PRICE_TRADE = cvar.TrdType_PRIOR_REFERENCE_PRICE_TRADE
TrdType_AFTER_HOURS_TRADE = cvar.TrdType_AFTER_HOURS_TRADE
TrdType_EXCHANGE_FOR_RISK = cvar.TrdType_EXCHANGE_FOR_RISK
TrdType_EXCHANGE_FOR_SWAP = cvar.TrdType_EXCHANGE_FOR_SWAP
TrdType_EXCHANGE_OF_FUTURES_FOR = cvar.TrdType_EXCHANGE_OF_FUTURES_FOR
TrdType_EXCHANGE_OF_OPTIONS_FOR_OPTIONS = cvar.TrdType_EXCHANGE_OF_OPTIONS_FOR_OPTIONS
TrdType_TRADING_AT_SETTLEMENT = cvar.TrdType_TRADING_AT_SETTLEMENT
TrdType_ALL_OR_NONE = cvar.TrdType_ALL_OR_NONE
TrdType_FUTURES_LARGE_ORDER_EXECUTION = cvar.TrdType_FUTURES_LARGE_ORDER_EXECUTION
TrdType_EXCHANGE_OF_FUTURES_FOR_FUTURES = cvar.TrdType_EXCHANGE_OF_FUTURES_FOR_FUTURES
TrdType_OPTION_INTERIM_TRADE = cvar.TrdType_OPTION_INTERIM_TRADE
TrdType_OPTION_CABINET_TRADE = cvar.TrdType_OPTION_CABINET_TRADE
TrdType_PRIVATELY_NEGOTIATED_TRADES = cvar.TrdType_PRIVATELY_NEGOTIATED_TRADES
TrdType_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS = cvar.TrdType_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS
TrdType_ERROR_TRADE = cvar.TrdType_ERROR_TRADE
TrdType_SPECIAL_CUM_DIVIDEND = cvar.TrdType_SPECIAL_CUM_DIVIDEND
TrdType_SPECIAL_EX_DIVIDEND = cvar.TrdType_SPECIAL_EX_DIVIDEND
TrdType_SPECIAL_CUM_COUPON = cvar.TrdType_SPECIAL_CUM_COUPON
TrdType_SPECIAL_EX_COUPON = cvar.TrdType_SPECIAL_EX_COUPON
TrdType_CASH_SETTLEMENT = cvar.TrdType_CASH_SETTLEMENT
TrdType_SPECIAL_PRICE = cvar.TrdType_SPECIAL_PRICE
TrdType_GUARANTEED_DELIVERY = cvar.TrdType_GUARANTEED_DELIVERY
TrdType_SPECIAL_CUM_RIGHTS = cvar.TrdType_SPECIAL_CUM_RIGHTS
TrdType_SPECIAL_EX_RIGHTS = cvar.TrdType_SPECIAL_EX_RIGHTS
TrdType_SPECIAL_CUM_CAPITAL_REPAYMENTS = cvar.TrdType_SPECIAL_CUM_CAPITAL_REPAYMENTS
TrdType_SPECIAL_EX_CAPITAL_REPAYMENTS = cvar.TrdType_SPECIAL_EX_CAPITAL_REPAYMENTS
TrdType_SPECIAL_CUM_BONUS = cvar.TrdType_SPECIAL_CUM_BONUS
TrdType_SPECIAL_EX_BONUS = cvar.TrdType_SPECIAL_EX_BONUS
TrdType_LARGE_TRADE = cvar.TrdType_LARGE_TRADE
TrdType_WORKED_PRINCIPAL_TRADE = cvar.TrdType_WORKED_PRINCIPAL_TRADE
TrdType_BLOCK_TRADES = cvar.TrdType_BLOCK_TRADES
TrdType_NAME_CHANGE = cvar.TrdType_NAME_CHANGE
TrdType_PORTFOLIO_TRANSFER = cvar.TrdType_PORTFOLIO_TRANSFER
TrdType_PROROGATION_BUY = cvar.TrdType_PROROGATION_BUY
TrdType_PROROGATION_SELL = cvar.TrdType_PROROGATION_SELL
TrdType_OPTION_EXERCISE = cvar.TrdType_OPTION_EXERCISE
TrdType_DELTA_NEUTRAL_TRANSACTION = cvar.TrdType_DELTA_NEUTRAL_TRANSACTION
TrdType_FINANCING_TRANSACTION = cvar.TrdType_FINANCING_TRANSACTION
TrdType_NON_STANDARD_SETTLEMENT = cvar.TrdType_NON_STANDARD_SETTLEMENT
TrdType_DERIVATIVE_RELATED_TRANSACTION = cvar.TrdType_DERIVATIVE_RELATED_TRANSACTION
TrdType_PORTFOLIO_TRADE = cvar.TrdType_PORTFOLIO_TRADE
TrdType_VOLUME_WEIGHTED_AVERAGE_TRADE = cvar.TrdType_VOLUME_WEIGHTED_AVERAGE_TRADE
TrdType_EXCHANGE_GRANTED_TRADE = cvar.TrdType_EXCHANGE_GRANTED_TRADE
TrdType_REPURCHASE_AGREEMENT = cvar.TrdType_REPURCHASE_AGREEMENT
TrdType_OTC = cvar.TrdType_OTC
TrdType_EXCHANGE_BASIS_FACILITY = cvar.TrdType_EXCHANGE_BASIS_FACILITY
TrdType_OPENING_TRADE = cvar.TrdType_OPENING_TRADE
TrdType_NETTED_TRADE = cvar.TrdType_NETTED_TRADE
TrdType_BLOCK_SWAP_TRADE = cvar.TrdType_BLOCK_SWAP_TRADE
TrdType_CREDIT_EVENT_TRADE = cvar.TrdType_CREDIT_EVENT_TRADE
TrdType_SUCCESSION_EVENT_TRADE = cvar.TrdType_SUCCESSION_EVENT_TRADE
TrdType_GIVE_UP_GIVE_IN_TRADE = cvar.TrdType_GIVE_UP_GIVE_IN_TRADE
TrdType_DARK_TRADE = cvar.TrdType_DARK_TRADE
TrdType_TECHNICAL_TRADE = cvar.TrdType_TECHNICAL_TRADE
TrdType_BENCHMARK = cvar.TrdType_BENCHMARK
TrdType_PACKAGE_TRADE = cvar.TrdType_PACKAGE_TRADE
TrdType_ROLL_TRADE = cvar.TrdType_ROLL_TRADE
TrdSubType_CMTA = cvar.TrdSubType_CMTA
TrdSubType_INTERNAL_TRANSFER_OR_ADJUSTMENT = cvar.TrdSubType_INTERNAL_TRANSFER_OR_ADJUSTMENT
TrdSubType_EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT = cvar.TrdSubType_EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT
TrdSubType_REJECT_FOR_SUBMITTING_SIDE = cvar.TrdSubType_REJECT_FOR_SUBMITTING_SIDE
TrdSubType_ADVISORY_FOR_CONTRA_SIDE = cvar.TrdSubType_ADVISORY_FOR_CONTRA_SIDE
TrdSubType_OFFSET_DUE_TO_AN_ALLOCATION = cvar.TrdSubType_OFFSET_DUE_TO_AN_ALLOCATION
TrdSubType_ONSET_DUE_TO_AN_ALLOCATION = cvar.TrdSubType_ONSET_DUE_TO_AN_ALLOCATION
TrdSubType_DIFFERENTIAL_SPREAD = cvar.TrdSubType_DIFFERENTIAL_SPREAD
TrdSubType_IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT = cvar.TrdSubType_IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT
TrdSubType_TRANSACTION_FROM_EXERCISE = cvar.TrdSubType_TRANSACTION_FROM_EXERCISE
TrdSubType_TRANSACTION_FROM_ASSIGNMENT = cvar.TrdSubType_TRANSACTION_FROM_ASSIGNMENT
TrdSubType_ACATS = cvar.TrdSubType_ACATS
TrdSubType_AI = cvar.TrdSubType_AI
TrdSubType_B = cvar.TrdSubType_B
TrdSubType_K = cvar.TrdSubType_K
TrdSubType_LC = cvar.TrdSubType_LC
TrdSubType_M = cvar.TrdSubType_M
TrdSubType_N = cvar.TrdSubType_N
TrdSubType_NM = cvar.TrdSubType_NM
TrdSubType_NR = cvar.TrdSubType_NR
TrdSubType_P = cvar.TrdSubType_P
TrdSubType_PA = cvar.TrdSubType_PA
TrdSubType_PC = cvar.TrdSubType_PC
TrdSubType_PN = cvar.TrdSubType_PN
TrdSubType_R = cvar.TrdSubType_R
TrdSubType_RO = cvar.TrdSubType_RO
TrdSubType_RT = cvar.TrdSubType_RT
TrdSubType_SW = cvar.TrdSubType_SW
TrdSubType_T = cvar.TrdSubType_T
TrdSubType_WN = cvar.TrdSubType_WN
TrdSubType_WT = cvar.TrdSubType_WT
TrdSubType_OFF_HOURS_TRADE = cvar.TrdSubType_OFF_HOURS_TRADE
TrdSubType_ON_HOURS_TRADE = cvar.TrdSubType_ON_HOURS_TRADE
TrdSubType_OTC_QUOTE = cvar.TrdSubType_OTC_QUOTE
TrdSubType_CONVERTED_SWAP = cvar.TrdSubType_CONVERTED_SWAP
TrdSubType_CROSSED_TRADE = cvar.TrdSubType_CROSSED_TRADE
TrdSubType_INTERIM_PROTECTED_TRADE = cvar.TrdSubType_INTERIM_PROTECTED_TRADE
TrdSubType_LARGE_IN_SCALE = cvar.TrdSubType_LARGE_IN_SCALE
TrdSubType_WASH_TRADE = cvar.TrdSubType_WASH_TRADE
TrdSubType_TRADE_AT_SETTLEMENT = cvar.TrdSubType_TRADE_AT_SETTLEMENT
TrdSubType_AUCTION_TRADE = cvar.TrdSubType_AUCTION_TRADE
TrdSubType_TRADE_AT_MARKER = cvar.TrdSubType_TRADE_AT_MARKER
TrdSubType_CREDIT_DEFAULT = cvar.TrdSubType_CREDIT_DEFAULT
TrdSubType_CREDIT_RESTRUCTURING = cvar.TrdSubType_CREDIT_RESTRUCTURING
TrdSubType_MERGER = cvar.TrdSubType_MERGER
TrdSubType_SPIN_OFF = cvar.TrdSubType_SPIN_OFF
TrdSubType_MULTILATERAL_COMPRESSION = cvar.TrdSubType_MULTILATERAL_COMPRESSION
TrdSubType_BALANCING = cvar.TrdSubType_BALANCING
TrdSubType_BASIS_TRADE_INDEX_CLOSE = cvar.TrdSubType_BASIS_TRADE_INDEX_CLOSE
TrdSubType_TRADE_AT_CASH_OPEN = cvar.TrdSubType_TRADE_AT_CASH_OPEN
TrdSubType_TRD_SUBMIT_VENUE_CLR_SETTL = cvar.TrdSubType_TRD_SUBMIT_VENUE_CLR_SETTL
TrdSubType_BILATERAL_COMPRESSION = cvar.TrdSubType_BILATERAL_COMPRESSION
PegMoveType_FLOATING = cvar.PegMoveType_FLOATING
PegMoveType_FIXED = cvar.PegMoveType_FIXED
PegOffsetType_PRICE = cvar.PegOffsetType_PRICE
PegOffsetType_BASIS_POINTS = cvar.PegOffsetType_BASIS_POINTS
PegOffsetType_TICKS = cvar.PegOffsetType_TICKS
PegOffsetType_PRICE_TIER = cvar.PegOffsetType_PRICE_TIER
PegOffsetType_PERCENTAGE = cvar.PegOffsetType_PERCENTAGE
PegLimitType_OR_BETTER = cvar.PegLimitType_OR_BETTER
PegLimitType_STRICT = cvar.PegLimitType_STRICT
PegLimitType_OR_WORSE = cvar.PegLimitType_OR_WORSE
PegRoundDirection_MORE_AGGRESSIVE = cvar.PegRoundDirection_MORE_AGGRESSIVE
PegRoundDirection_MORE_PASSIVE = cvar.PegRoundDirection_MORE_PASSIVE
PegScope_LOCAL = cvar.PegScope_LOCAL
PegScope_NATIONAL = cvar.PegScope_NATIONAL
PegScope_GLOBAL = cvar.PegScope_GLOBAL
PegScope_NATIONAL_EXCLUDING_LOCAL = cvar.PegScope_NATIONAL_EXCLUDING_LOCAL
DiscretionMoveType_FLOATING = cvar.DiscretionMoveType_FLOATING
DiscretionMoveType_FIXED = cvar.DiscretionMoveType_FIXED
DiscretionOffsetType_PRICE = cvar.DiscretionOffsetType_PRICE
DiscretionOffsetType_BASIS_POINTS = cvar.DiscretionOffsetType_BASIS_POINTS
DiscretionOffsetType_TICKS = cvar.DiscretionOffsetType_TICKS
DiscretionOffsetType_PRICE_TIER = cvar.DiscretionOffsetType_PRICE_TIER
DiscretionLimitType_OR_BETTER = cvar.DiscretionLimitType_OR_BETTER
DiscretionLimitType_STRICT = cvar.DiscretionLimitType_STRICT
DiscretionLimitType_OR_WORSE = cvar.DiscretionLimitType_OR_WORSE
DiscretionRoundDirection_MORE_AGGRESSIVE = cvar.DiscretionRoundDirection_MORE_AGGRESSIVE
DiscretionRoundDirection_MORE_PASSIVE = cvar.DiscretionRoundDirection_MORE_PASSIVE
DiscretionScope_LOCAL = cvar.DiscretionScope_LOCAL
DiscretionScope_NATIONAL = cvar.DiscretionScope_NATIONAL
DiscretionScope_GLOBAL = cvar.DiscretionScope_GLOBAL
DiscretionScope_NATIONAL_EXCLUDING_LOCAL = cvar.DiscretionScope_NATIONAL_EXCLUDING_LOCAL
TargetStrategy_VWAP = cvar.TargetStrategy_VWAP
TargetStrategy_PARTICIPATE = cvar.TargetStrategy_PARTICIPATE
TargetStrategy_MININIZE_MARKET_IMPACT = cvar.TargetStrategy_MININIZE_MARKET_IMPACT
LastLiquidityInd_ADDED_LIQUIDITY = cvar.LastLiquidityInd_ADDED_LIQUIDITY
LastLiquidityInd_REMOVED_LIQUIDITY = cvar.LastLiquidityInd_REMOVED_LIQUIDITY
LastLiquidityInd_LIQUIDITY_ROUTED_OUT = cvar.LastLiquidityInd_LIQUIDITY_ROUTED_OUT
LastLiquidityInd_AUCTION = cvar.LastLiquidityInd_AUCTION
LastLiquidityInd_NEITHER_ADDED_NOR_REMOVED_LIQUIDITY = cvar.LastLiquidityInd_NEITHER_ADDED_NOR_REMOVED_LIQUIDITY
LastLiquidityInd_TRIGGERED_STOP_ORDER = cvar.LastLiquidityInd_TRIGGERED_STOP_ORDER
LastLiquidityInd_TRIGGERED_CONTINGENCY_ORDER = cvar.LastLiquidityInd_TRIGGERED_CONTINGENCY_ORDER
LastLiquidityInd_TRIGGERED_MARKET_ORDER = cvar.LastLiquidityInd_TRIGGERED_MARKET_ORDER
LastLiquidityInd_REMOVED_LIQUIDITY_AFTER_FIRM_ORDER_COMMITMENT = cvar.LastLiquidityInd_REMOVED_LIQUIDITY_AFTER_FIRM_ORDER_COMMITMENT
LastLiquidityInd_AUCTION_EXECUTION_AFTER_FIRM_ORDER_COMMITMENT = cvar.LastLiquidityInd_AUCTION_EXECUTION_AFTER_FIRM_ORDER_COMMITMENT
LastLiquidityInd_UNKNOWN = cvar.LastLiquidityInd_UNKNOWN
LastLiquidityInd_OTHER = cvar.LastLiquidityInd_OTHER
PublishTrdIndicator_YES = cvar.PublishTrdIndicator_YES
PublishTrdIndicator_NO = cvar.PublishTrdIndicator_NO
ShortSaleReason_DEALER_SOLD_SHORT = cvar.ShortSaleReason_DEALER_SOLD_SHORT
ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT
ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT = cvar.ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT
ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT
ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE = cvar.ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE
ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT
QtyType_UNITS = cvar.QtyType_UNITS
QtyType_CONTRACTS = cvar.QtyType_CONTRACTS
QtyType_UNITS_OF_MEASURE_PER_TIME_UNIT = cvar.QtyType_UNITS_OF_MEASURE_PER_TIME_UNIT
TradeReportType_SUBMIT = cvar.TradeReportType_SUBMIT
TradeReportType_ALLEGED = cvar.TradeReportType_ALLEGED
TradeReportType_ACCEPT = cvar.TradeReportType_ACCEPT
TradeReportType_DECLINE = cvar.TradeReportType_DECLINE
TradeReportType_ADDENDUM = cvar.TradeReportType_ADDENDUM
TradeReportType_NO = cvar.TradeReportType_NO
TradeReportType_TRADE_REPORT_CANCEL = cvar.TradeReportType_TRADE_REPORT_CANCEL
TradeReportType_LOCKED_IN = cvar.TradeReportType_LOCKED_IN
TradeReportType_DEFAULTED = cvar.TradeReportType_DEFAULTED
TradeReportType_INVALID_CMTA = cvar.TradeReportType_INVALID_CMTA
TradeReportType_PENDED = cvar.TradeReportType_PENDED
TradeReportType_ALLEGED_NEW = cvar.TradeReportType_ALLEGED_NEW
TradeReportType_ALLEGED_ADDENDUM = cvar.TradeReportType_ALLEGED_ADDENDUM
TradeReportType_ALLEGED_NO = cvar.TradeReportType_ALLEGED_NO
TradeReportType_ALLEGED_TRADE_REPORT_CANCEL = cvar.TradeReportType_ALLEGED_TRADE_REPORT_CANCEL
TradeReportType_ALLEGED_TRADE_BREAK = cvar.TradeReportType_ALLEGED_TRADE_BREAK
TradeReportType_VERIFY = cvar.TradeReportType_VERIFY
TradeReportType_DISPUTE = cvar.TradeReportType_DISPUTE
TradeReportType_NON_MATERIAL_UPDATE = cvar.TradeReportType_NON_MATERIAL_UPDATE
AllocNoOrdersType_NOT_SPECIFIED = cvar.AllocNoOrdersType_NOT_SPECIFIED
AllocNoOrdersType_EXPLICIT_LIST_PROVIDED = cvar.AllocNoOrdersType_EXPLICIT_LIST_PROVIDED
EventType_PUT = cvar.EventType_PUT
EventType_CALL = cvar.EventType_CALL
EventType_TENDER = cvar.EventType_TENDER
EventType_SINKING_FUND_CALL = cvar.EventType_SINKING_FUND_CALL
EventType_OTHER = cvar.EventType_OTHER
EventType_ACTIVATION = cvar.EventType_ACTIVATION
EventType_INACTIVIATION = cvar.EventType_INACTIVIATION
EventType_LAST_ELIGIBLE_TRADE_DATE = cvar.EventType_LAST_ELIGIBLE_TRADE_DATE
EventType_SWAP_START_DATE = cvar.EventType_SWAP_START_DATE
EventType_SWAP_END_DATE = cvar.EventType_SWAP_END_DATE
EventType_SWAP_ROLL_DATE = cvar.EventType_SWAP_ROLL_DATE
EventType_SWAP_NEXT_START_DATE = cvar.EventType_SWAP_NEXT_START_DATE
EventType_SWAP_NEXT_ROLL_DATE = cvar.EventType_SWAP_NEXT_ROLL_DATE
EventType_FIRST_DELIVERY_DATE = cvar.EventType_FIRST_DELIVERY_DATE
EventType_LAST_DELIVERY_DATE = cvar.EventType_LAST_DELIVERY_DATE
EventType_INITIAL_INVENTORY_DUE_DATE = cvar.EventType_INITIAL_INVENTORY_DUE_DATE
EventType_FINAL_INVENTORY_DUE_DATE = cvar.EventType_FINAL_INVENTORY_DUE_DATE
EventType_FIRST_INTENT_DATE = cvar.EventType_FIRST_INTENT_DATE
EventType_LAST_INTENT_DATE = cvar.EventType_LAST_INTENT_DATE
EventType_POSITION_REMOVAL_DATE = cvar.EventType_POSITION_REMOVAL_DATE
EventType_MINIMUM_NOTICE = cvar.EventType_MINIMUM_NOTICE
EventType_DELIVERY_START_TIME = cvar.EventType_DELIVERY_START_TIME
EventType_DELIVERY_END_TIME = cvar.EventType_DELIVERY_END_TIME
EventType_FIRST_NOTICE_DATE = cvar.EventType_FIRST_NOTICE_DATE
EventType_LAST_NOTICE_DATE = cvar.EventType_LAST_NOTICE_DATE
EventType_FIRST_EXERCISE_DATE = cvar.EventType_FIRST_EXERCISE_DATE
EventType_REDEMPTION_DATE = cvar.EventType_REDEMPTION_DATE
EventType_TRD_CNTNTN_EFCTV_DT = cvar.EventType_TRD_CNTNTN_EFCTV_DT
InstrAttribType_FLAT = cvar.InstrAttribType_FLAT
InstrAttribType_ZERO_COUPON = cvar.InstrAttribType_ZERO_COUPON
InstrAttribType_INTEREST_BEARING = cvar.InstrAttribType_INTEREST_BEARING
InstrAttribType_NO_PERIODIC_PAYMENTS = cvar.InstrAttribType_NO_PERIODIC_PAYMENTS
InstrAttribType_VARIABLE_RATE = cvar.InstrAttribType_VARIABLE_RATE
InstrAttribType_LESS_FEE_FOR_PUT = cvar.InstrAttribType_LESS_FEE_FOR_PUT
InstrAttribType_STEPPED_COUPON = cvar.InstrAttribType_STEPPED_COUPON
InstrAttribType_COUPON_PERIOD = cvar.InstrAttribType_COUPON_PERIOD
InstrAttribType_WHEN = cvar.InstrAttribType_WHEN
InstrAttribType_ORIGINAL_ISSUE_DISCOUNT = cvar.InstrAttribType_ORIGINAL_ISSUE_DISCOUNT
InstrAttribType_CALLABLE = cvar.InstrAttribType_CALLABLE
InstrAttribType_ESCROWED_TO_MATURITY = cvar.InstrAttribType_ESCROWED_TO_MATURITY
InstrAttribType_ESCROWED_TO_REDEMPTION_DATE = cvar.InstrAttribType_ESCROWED_TO_REDEMPTION_DATE
InstrAttribType_PRE_REFUNDED = cvar.InstrAttribType_PRE_REFUNDED
InstrAttribType_IN_DEFAULT = cvar.InstrAttribType_IN_DEFAULT
InstrAttribType_UNRATED = cvar.InstrAttribType_UNRATED
InstrAttribType_TAXABLE = cvar.InstrAttribType_TAXABLE
InstrAttribType_INDEXED = cvar.InstrAttribType_INDEXED
InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX = cvar.InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX
InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE = cvar.InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE
InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE = cvar.InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE
InstrAttribType_CALLABLE_WITHOUT_NOTICE = cvar.InstrAttribType_CALLABLE_WITHOUT_NOTICE
InstrAttribType_TEXT = cvar.InstrAttribType_TEXT
InstrAttribType_PRICE_TICK_RULES_FOR_SECURITY = cvar.InstrAttribType_PRICE_TICK_RULES_FOR_SECURITY
InstrAttribType_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY = cvar.InstrAttribType_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY
InstrAttribType_INSTRUMENT_DENOMINATOR = cvar.InstrAttribType_INSTRUMENT_DENOMINATOR
InstrAttribType_INSTRUMENT_NUMERATOR = cvar.InstrAttribType_INSTRUMENT_NUMERATOR
InstrAttribType_INSTRUMENT_PRICE_PRECISION = cvar.InstrAttribType_INSTRUMENT_PRICE_PRECISION
InstrAttribType_INSTRUMENT_STRIKE_PRICE = cvar.InstrAttribType_INSTRUMENT_STRIKE_PRICE
InstrAttribType_TRADEABLE_INDICATOR = cvar.InstrAttribType_TRADEABLE_INDICATOR
InstrAttribType_INSTRUMENT_ELIGIBLE_ANON_ORDERS = cvar.InstrAttribType_INSTRUMENT_ELIGIBLE_ANON_ORDERS
InstrAttribType_MIN_GUARANTEED_FILL_VOLUME = cvar.InstrAttribType_MIN_GUARANTEED_FILL_VOLUME
InstrAttribType_MIN_GUARANTEED_FILL_STATUS = cvar.InstrAttribType_MIN_GUARANTEED_FILL_STATUS
InstrAttribType_TRADE_AT_SETTLEMENT_ELIGIBILITY = cvar.InstrAttribType_TRADE_AT_SETTLEMENT_ELIGIBILITY
InstrAttribType_TEST_INSTRUMENT = cvar.InstrAttribType_TEST_INSTRUMENT
InstrAttribType_DUMMY_INSTRUMENT = cvar.InstrAttribType_DUMMY_INSTRUMENT
InstrAttribType_NEGATIVE_SETTLEMENT_PRICE_ELIGIBILITY = cvar.InstrAttribType_NEGATIVE_SETTLEMENT_PRICE_ELIGIBILITY
InstrAttribType_NEGATIVE_STRIKE_PRICE_ELIGIBILITY = cvar.InstrAttribType_NEGATIVE_STRIKE_PRICE_ELIGIBILITY
InstrAttribType_US_STD_CONTRACT_IND = cvar.InstrAttribType_US_STD_CONTRACT_IND
InstrAttribType_ADMITTED_TO_TRADING_ON_TRADING_VENUE = cvar.InstrAttribType_ADMITTED_TO_TRADING_ON_TRADING_VENUE
InstrAttribType_AVERAGE_DAILY_NOTIONAL_AMOUNT = cvar.InstrAttribType_AVERAGE_DAILY_NOTIONAL_AMOUNT
InstrAttribType_AVERAGE_DAILY_NUMBER_TRADES = cvar.InstrAttribType_AVERAGE_DAILY_NUMBER_TRADES
CPProgram_PROGRAM3A3 = cvar.CPProgram_PROGRAM3A3
CPProgram_PROGRAM42 = cvar.CPProgram_PROGRAM42
CPProgram_OTHER = cvar.CPProgram_OTHER
CPProgram_PROGRAM3A2 = cvar.CPProgram_PROGRAM3A2
CPProgram_PROGRAM3A3_AND3C7 = cvar.CPProgram_PROGRAM3A3_AND3C7
CPProgram_PROGRAM3A4 = cvar.CPProgram_PROGRAM3A4
CPProgram_PROGRAM3A5 = cvar.CPProgram_PROGRAM3A5
CPProgram_PROGRAM3A7 = cvar.CPProgram_PROGRAM3A7
CPProgram_PROGRAM3C7 = cvar.CPProgram_PROGRAM3C7
MiscFeeBasis_ABSOLUTE = cvar.MiscFeeBasis_ABSOLUTE
MiscFeeBasis_PER_UNIT = cvar.MiscFeeBasis_PER_UNIT
MiscFeeBasis_PERCENTAGE = cvar.MiscFeeBasis_PERCENTAGE
LastFragment_YES = cvar.LastFragment_YES
LastFragment_NO = cvar.LastFragment_NO
CollAsgnReason_INITIAL = cvar.CollAsgnReason_INITIAL
CollAsgnReason_SCHEDULED = cvar.CollAsgnReason_SCHEDULED
CollAsgnReason_TIME_WARNING = cvar.CollAsgnReason_TIME_WARNING
CollAsgnReason_MARGIN_DEFICIENCY = cvar.CollAsgnReason_MARGIN_DEFICIENCY
CollAsgnReason_MARGIN_EXCESS = cvar.CollAsgnReason_MARGIN_EXCESS
CollAsgnReason_FORWARD_COLLATERAL_DEMAND = cvar.CollAsgnReason_FORWARD_COLLATERAL_DEMAND
CollAsgnReason_EVENT_OF_DEFAULT = cvar.CollAsgnReason_EVENT_OF_DEFAULT
CollAsgnReason_ADVERSE_TAX_EVENT = cvar.CollAsgnReason_ADVERSE_TAX_EVENT
CollAsgnReason_TRANSFER_DEPOSIT = cvar.CollAsgnReason_TRANSFER_DEPOSIT
CollAsgnReason_TRANSFER_WITHDRAWAL = cvar.CollAsgnReason_TRANSFER_WITHDRAWAL
CollAsgnReason_PLEDGE = cvar.CollAsgnReason_PLEDGE
CollInquiryQualifier_TRADE_DATE = cvar.CollInquiryQualifier_TRADE_DATE
CollInquiryQualifier_GC_INSTRUMENT = cvar.CollInquiryQualifier_GC_INSTRUMENT
CollInquiryQualifier_COLLATERAL_INSTRUMENT = cvar.CollInquiryQualifier_COLLATERAL_INSTRUMENT
CollInquiryQualifier_SUBSTITUTION_ELIGIBLE = cvar.CollInquiryQualifier_SUBSTITUTION_ELIGIBLE
CollInquiryQualifier_NOT_ASSIGNED = cvar.CollInquiryQualifier_NOT_ASSIGNED
CollInquiryQualifier_PARTIALLY_ASSIGNED = cvar.CollInquiryQualifier_PARTIALLY_ASSIGNED
CollInquiryQualifier_FULLY_ASSIGNED = cvar.CollInquiryQualifier_FULLY_ASSIGNED
CollInquiryQualifier_OUTSTANDING_TRADES = cvar.CollInquiryQualifier_OUTSTANDING_TRADES
CollAsgnTransType_NEW = cvar.CollAsgnTransType_NEW
CollAsgnTransType_REPLACE = cvar.CollAsgnTransType_REPLACE
CollAsgnTransType_CANCEL = cvar.CollAsgnTransType_CANCEL
CollAsgnTransType_RELEASE = cvar.CollAsgnTransType_RELEASE
CollAsgnTransType_REVERSE = cvar.CollAsgnTransType_REVERSE
CollAsgnRespType_RECEIVED = cvar.CollAsgnRespType_RECEIVED
CollAsgnRespType_ACCEPTED = cvar.CollAsgnRespType_ACCEPTED
CollAsgnRespType_DECLINED = cvar.CollAsgnRespType_DECLINED
CollAsgnRespType_REJECTED = cvar.CollAsgnRespType_REJECTED
CollAsgnRespType_TRANSACTION_PENDING = cvar.CollAsgnRespType_TRANSACTION_PENDING
CollAsgnRespType_TRANSACTION_COMPLETED_WITH_WARNING = cvar.CollAsgnRespType_TRANSACTION_COMPLETED_WITH_WARNING
CollAsgnRejectReason_UNKNOWN_DEAL = cvar.CollAsgnRejectReason_UNKNOWN_DEAL
CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT = cvar.CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT
CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION = cvar.CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION
CollAsgnRejectReason_INSUFFICIENT_COLLATERAL = cvar.CollAsgnRejectReason_INSUFFICIENT_COLLATERAL
CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL = cvar.CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL
CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION = cvar.CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION
CollAsgnRejectReason_OTHER = cvar.CollAsgnRejectReason_OTHER
CollStatus_UNASSIGNED = cvar.CollStatus_UNASSIGNED
CollStatus_PARTIALLY_ASSIGNED = cvar.CollStatus_PARTIALLY_ASSIGNED
CollStatus_ASSIGNMENT_PROPOSED = cvar.CollStatus_ASSIGNMENT_PROPOSED
CollStatus_ASSIGNED = cvar.CollStatus_ASSIGNED
CollStatus_CHALLENGED = cvar.CollStatus_CHALLENGED
CollStatus_REUSED = cvar.CollStatus_REUSED
LastRptRequested_NO = cvar.LastRptRequested_NO
LastRptRequested_YES = cvar.LastRptRequested_YES
DeliveryType_VERSUS_PAYMENT = cvar.DeliveryType_VERSUS_PAYMENT
DeliveryType_FREE = cvar.DeliveryType_FREE
DeliveryType_TRI_PARTY = cvar.DeliveryType_TRI_PARTY
DeliveryType_HOLD_IN_CUSTODY = cvar.DeliveryType_HOLD_IN_CUSTODY
DeliveryType_DELIVER_BY_VALUE = cvar.DeliveryType_DELIVER_BY_VALUE
UserRequestType_LOG_ON_USER = cvar.UserRequestType_LOG_ON_USER
UserRequestType_LOG_OFF_USER = cvar.UserRequestType_LOG_OFF_USER
UserRequestType_CHANGE_PASSWORD_FOR_USER = cvar.UserRequestType_CHANGE_PASSWORD_FOR_USER
UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS = cvar.UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS
UserRequestType_REQUEST_THROTTLE_LIMIT = cvar.UserRequestType_REQUEST_THROTTLE_LIMIT
UserStatus_LOGGED_IN = cvar.UserStatus_LOGGED_IN
UserStatus_NOT_LOGGED_IN = cvar.UserStatus_NOT_LOGGED_IN
UserStatus_USER_NOT_RECOGNISED = cvar.UserStatus_USER_NOT_RECOGNISED
UserStatus_PASSWORD_INCORRECT = cvar.UserStatus_PASSWORD_INCORRECT
UserStatus_PASSWORD_CHANGED = cvar.UserStatus_PASSWORD_CHANGED
UserStatus_OTHER = cvar.UserStatus_OTHER
UserStatus_FORCED_USER_LOGOUT_BY_EXCHANGE = cvar.UserStatus_FORCED_USER_LOGOUT_BY_EXCHANGE
UserStatus_SESSION_SHUTDOWN_WARNING = cvar.UserStatus_SESSION_SHUTDOWN_WARNING
UserStatus_THROTTLE_PARAMETERS_CHANGED = cvar.UserStatus_THROTTLE_PARAMETERS_CHANGED
StatusValue_CONNECTED = cvar.StatusValue_CONNECTED
StatusValue_NOT_CONNECTED_UNEXPECTED = cvar.StatusValue_NOT_CONNECTED_UNEXPECTED
StatusValue_NOT_CONNECTED_EXPECTED = cvar.StatusValue_NOT_CONNECTED_EXPECTED
StatusValue_IN_PROCESS = cvar.StatusValue_IN_PROCESS
NetworkRequestType_SNAPSHOT = cvar.NetworkRequestType_SNAPSHOT
NetworkRequestType_SUBSCRIBE = cvar.NetworkRequestType_SUBSCRIBE
NetworkRequestType_STOP_SUBSCRIBING = cvar.NetworkRequestType_STOP_SUBSCRIBING
NetworkRequestType_LEVEL_OF_DETAIL = cvar.NetworkRequestType_LEVEL_OF_DETAIL
NetworkStatusResponseType_FULL = cvar.NetworkStatusResponseType_FULL
NetworkStatusResponseType_INCREMENTAL_UPDATE = cvar.NetworkStatusResponseType_INCREMENTAL_UPDATE
TrdRptStatus_ACCEPTED = cvar.TrdRptStatus_ACCEPTED
TrdRptStatus_REJECTED = cvar.TrdRptStatus_REJECTED
TrdRptStatus_ACCEPTED_WITH_ERRORS = cvar.TrdRptStatus_ACCEPTED_WITH_ERRORS
TrdRptStatus_CANCELLED = cvar.TrdRptStatus_CANCELLED
TrdRptStatus_PENDING_NEW = cvar.TrdRptStatus_PENDING_NEW
TrdRptStatus_PENDING_CANCEL = cvar.TrdRptStatus_PENDING_CANCEL
TrdRptStatus_PENDING_REPLACE = cvar.TrdRptStatus_PENDING_REPLACE
TrdRptStatus_TERMINATED = cvar.TrdRptStatus_TERMINATED
TrdRptStatus_PENDING_VERIFICATION = cvar.TrdRptStatus_PENDING_VERIFICATION
TrdRptStatus_DEEMED_VERIFIED = cvar.TrdRptStatus_DEEMED_VERIFIED
TrdRptStatus_VERIFIED = cvar.TrdRptStatus_VERIFIED
TrdRptStatus_DISPUTED = cvar.TrdRptStatus_DISPUTED
AffirmStatus_RECEIVED = cvar.AffirmStatus_RECEIVED
AffirmStatus_CONFIRM_REJECTED = cvar.AffirmStatus_CONFIRM_REJECTED
AffirmStatus_AFFIRMED = cvar.AffirmStatus_AFFIRMED
CollAction_RETAIN = cvar.CollAction_RETAIN
CollAction_ADD = cvar.CollAction_ADD
CollAction_REMOVE = cvar.CollAction_REMOVE
CollInquiryStatus_ACCEPTED = cvar.CollInquiryStatus_ACCEPTED
CollInquiryStatus_ACCEPTED_WITH_WARNINGS = cvar.CollInquiryStatus_ACCEPTED_WITH_WARNINGS
CollInquiryStatus_COMPLETED = cvar.CollInquiryStatus_COMPLETED
CollInquiryStatus_COMPLETED_WITH_WARNINGS = cvar.CollInquiryStatus_COMPLETED_WITH_WARNINGS
CollInquiryStatus_REJECTED = cvar.CollInquiryStatus_REJECTED
CollInquiryResult_SUCCESSFUL = cvar.CollInquiryResult_SUCCESSFUL
CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT
CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE = cvar.CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE
CollInquiryResult_INVALID_PARTIES = cvar.CollInquiryResult_INVALID_PARTIES
CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED = cvar.CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED
CollInquiryResult_INVALID_DESTINATION_REQUESTED = cvar.CollInquiryResult_INVALID_DESTINATION_REQUESTED
CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED = cvar.CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED
CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED = cvar.CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED
CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED = cvar.CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED
CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY = cvar.CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY
CollInquiryResult_OTHER = cvar.CollInquiryResult_OTHER
StrategyParameterType_INT = cvar.StrategyParameterType_INT
StrategyParameterType_LENGTH = cvar.StrategyParameterType_LENGTH
StrategyParameterType_NUM_IN_GROUP = cvar.StrategyParameterType_NUM_IN_GROUP
StrategyParameterType_SEQ_NUM = cvar.StrategyParameterType_SEQ_NUM
StrategyParameterType_TAG_NUM = cvar.StrategyParameterType_TAG_NUM
StrategyParameterType_FLOAT = cvar.StrategyParameterType_FLOAT
StrategyParameterType_QTY = cvar.StrategyParameterType_QTY
StrategyParameterType_PRICE = cvar.StrategyParameterType_PRICE
StrategyParameterType_PRICE_OFFSET = cvar.StrategyParameterType_PRICE_OFFSET
StrategyParameterType_AMT = cvar.StrategyParameterType_AMT
StrategyParameterType_PERCENTAGE = cvar.StrategyParameterType_PERCENTAGE
StrategyParameterType_CHAR = cvar.StrategyParameterType_CHAR
StrategyParameterType_BOOLEAN = cvar.StrategyParameterType_BOOLEAN
StrategyParameterType_STRING = cvar.StrategyParameterType_STRING
StrategyParameterType_MULTIPLE_CHAR_VALUE = cvar.StrategyParameterType_MULTIPLE_CHAR_VALUE
StrategyParameterType_CURRENCY = cvar.StrategyParameterType_CURRENCY
StrategyParameterType_EXCHANGE = cvar.StrategyParameterType_EXCHANGE
StrategyParameterType_MONTH_YEAR = cvar.StrategyParameterType_MONTH_YEAR
StrategyParameterType_UTC_TIMESTAMP = cvar.StrategyParameterType_UTC_TIMESTAMP
StrategyParameterType_UTC_TIME_ONLY = cvar.StrategyParameterType_UTC_TIME_ONLY
StrategyParameterType_LOCAL_MKT_DATE = cvar.StrategyParameterType_LOCAL_MKT_DATE
StrategyParameterType_UTC_DATE_ONLY = cvar.StrategyParameterType_UTC_DATE_ONLY
StrategyParameterType_DATA = cvar.StrategyParameterType_DATA
StrategyParameterType_MULTIPLE_STRING_VALUE = cvar.StrategyParameterType_MULTIPLE_STRING_VALUE
StrategyParameterType_COUNTRY = cvar.StrategyParameterType_COUNTRY
StrategyParameterType_LANGUAGE = cvar.StrategyParameterType_LANGUAGE
StrategyParameterType_TZ_TIME_ONLY = cvar.StrategyParameterType_TZ_TIME_ONLY
StrategyParameterType_TZ_TIMESTAMP = cvar.StrategyParameterType_TZ_TIMESTAMP
StrategyParameterType_TENOR = cvar.StrategyParameterType_TENOR
SecurityStatus_ACTIVE = cvar.SecurityStatus_ACTIVE
SecurityStatus_INACTIVE = cvar.SecurityStatus_INACTIVE
SecurityStatus_ACTIVE_CLOSING_ORDERS_ONLY = cvar.SecurityStatus_ACTIVE_CLOSING_ORDERS_ONLY
SecurityStatus_EXPIRED = cvar.SecurityStatus_EXPIRED
SecurityStatus_DELISTED = cvar.SecurityStatus_DELISTED
SecurityStatus_KNOCKED_OUT = cvar.SecurityStatus_KNOCKED_OUT
SecurityStatus_KNOCK_OUT_REVOKED = cvar.SecurityStatus_KNOCK_OUT_REVOKED
SecurityStatus_PENDING_EXPIRY = cvar.SecurityStatus_PENDING_EXPIRY
SecurityStatus_SUSPENDED = cvar.SecurityStatus_SUSPENDED
SecurityStatus_PUBLISHED = cvar.SecurityStatus_PUBLISHED
SecurityStatus_PENDING_DELETION = cvar.SecurityStatus_PENDING_DELETION
UnderlyingCashType_FIXED = cvar.UnderlyingCashType_FIXED
UnderlyingCashType_DIFF = cvar.UnderlyingCashType_DIFF
UnderlyingSettlementType_T_PLUS1 = cvar.UnderlyingSettlementType_T_PLUS1
UnderlyingSettlementType_T_PLUS3 = cvar.UnderlyingSettlementType_T_PLUS3
UnderlyingSettlementType_T_PLUS4 = cvar.UnderlyingSettlementType_T_PLUS4
SecurityUpdateAction_ADD = cvar.SecurityUpdateAction_ADD
SecurityUpdateAction_DELETE = cvar.SecurityUpdateAction_DELETE
SecurityUpdateAction_MODIFY = cvar.SecurityUpdateAction_MODIFY
ExpType_AUTO_EXERCISE = cvar.ExpType_AUTO_EXERCISE
ExpType_NON_AUTO_EXERCISE = cvar.ExpType_NON_AUTO_EXERCISE
ExpType_FINAL_WILL_BE_EXERCISED = cvar.ExpType_FINAL_WILL_BE_EXERCISED
ExpType_CONTRARY_INTENTION = cvar.ExpType_CONTRARY_INTENTION
ExpType_DIFFERENCE = cvar.ExpType_DIFFERENCE
IndividualAllocType_SUB_ALLOCATE = cvar.IndividualAllocType_SUB_ALLOCATE
IndividualAllocType_THIRD_PARTY_ALLOCATION = cvar.IndividualAllocType_THIRD_PARTY_ALLOCATION
UnitofMeasure_BARRELS = cvar.UnitofMeasure_BARRELS
UnitofMeasure_BILLION_CUBIC_FEET = cvar.UnitofMeasure_BILLION_CUBIC_FEET
UnitofMeasure_BUSHELS = cvar.UnitofMeasure_BUSHELS
UnitofMeasure_POUNDS = cvar.UnitofMeasure_POUNDS
UnitofMeasure_GALLONS = cvar.UnitofMeasure_GALLONS
UnitofMeasure_MILLION_BARRELS = cvar.UnitofMeasure_MILLION_BARRELS
UnitofMeasure_ONE_MILLION_BTU = cvar.UnitofMeasure_ONE_MILLION_BTU
UnitofMeasure_MEGAWATT_HOURS = cvar.UnitofMeasure_MEGAWATT_HOURS
UnitofMeasure_TROY_OUNCES = cvar.UnitofMeasure_TROY_OUNCES
UnitofMeasure_METRIC_TONS = cvar.UnitofMeasure_METRIC_TONS
UnitofMeasure_TONS = cvar.UnitofMeasure_TONS
UnitofMeasure_US_DOLLARS = cvar.UnitofMeasure_US_DOLLARS
TimeUnit_HOUR = cvar.TimeUnit_HOUR
TimeUnit_MINUTE = cvar.TimeUnit_MINUTE
TimeUnit_SECOND = cvar.TimeUnit_SECOND
TimeUnit_DAY = cvar.TimeUnit_DAY
TimeUnit_WEEK = cvar.TimeUnit_WEEK
TimeUnit_MONTH = cvar.TimeUnit_MONTH
TimeUnit_YEAR = cvar.TimeUnit_YEAR
TimeUnit_QUARTER = cvar.TimeUnit_QUARTER
AllocMethod_AUTOMATIC = cvar.AllocMethod_AUTOMATIC
AllocMethod_GUARANTOR = cvar.AllocMethod_GUARANTOR
AllocMethod_MANUAL = cvar.AllocMethod_MANUAL
AllocMethod_BROKER_ASSIGNED = cvar.AllocMethod_BROKER_ASSIGNED
AsOfIndicator_FALSE = cvar.AsOfIndicator_FALSE
AsOfIndicator_TRUE = cvar.AsOfIndicator_TRUE
MDBookType_TOP_OF_BOOK = cvar.MDBookType_TOP_OF_BOOK
MDBookType_PRICE_DEPTH = cvar.MDBookType_PRICE_DEPTH
MDBookType_ORDER_DEPTH = cvar.MDBookType_ORDER_DEPTH
MDOriginType_BOOK = cvar.MDOriginType_BOOK
MDOriginType_OFF_BOOK = cvar.MDOriginType_OFF_BOOK
MDOriginType_CROSS = cvar.MDOriginType_CROSS
MDOriginType_QUOTE_DRIVEN_MARKET = cvar.MDOriginType_QUOTE_DRIVEN_MARKET
MDOriginType_DARK_ORDER_BOOK = cvar.MDOriginType_DARK_ORDER_BOOK
MDOriginType_AUCTION_DRIVEN_MARKET = cvar.MDOriginType_AUCTION_DRIVEN_MARKET
MDOriginType_QUOTE_NEGOTIATION = cvar.MDOriginType_QUOTE_NEGOTIATION
MDOriginType_VOICE_NEGOTIATION = cvar.MDOriginType_VOICE_NEGOTIATION
MDOriginType_HYBRID_MARKET = cvar.MDOriginType_HYBRID_MARKET
CustOrderHandlingInst_ADD_ON_ORDER = cvar.CustOrderHandlingInst_ADD_ON_ORDER
CustOrderHandlingInst_ALL_OR_NONE = cvar.CustOrderHandlingInst_ALL_OR_NONE
CustOrderHandlingInst_CASH_NOT_HELD = cvar.CustOrderHandlingInst_CASH_NOT_HELD
CustOrderHandlingInst_DIRECTED_ORDER = cvar.CustOrderHandlingInst_DIRECTED_ORDER
CustOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION = cvar.CustOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION
CustOrderHandlingInst_FILL_OR_KILL = cvar.CustOrderHandlingInst_FILL_OR_KILL
CustOrderHandlingInst_IMBALANCE_ONLY = cvar.CustOrderHandlingInst_IMBALANCE_ONLY
CustOrderHandlingInst_IMMEDIATE_OR_CANCEL = cvar.CustOrderHandlingInst_IMMEDIATE_OR_CANCEL
CustOrderHandlingInst_LIMIT_ON_OPEN = cvar.CustOrderHandlingInst_LIMIT_ON_OPEN
CustOrderHandlingInst_LIMIT_ON_CLOSE = cvar.CustOrderHandlingInst_LIMIT_ON_CLOSE
CustOrderHandlingInst_MARKET_AT_OPEN = cvar.CustOrderHandlingInst_MARKET_AT_OPEN
CustOrderHandlingInst_MARKET_AT_CLOSE = cvar.CustOrderHandlingInst_MARKET_AT_CLOSE
CustOrderHandlingInst_MARKET_ON_OPEN = cvar.CustOrderHandlingInst_MARKET_ON_OPEN
CustOrderHandlingInst_MARKET_ON_CLOSE = cvar.CustOrderHandlingInst_MARKET_ON_CLOSE
CustOrderHandlingInst_MINIMUM_QUANTITY = cvar.CustOrderHandlingInst_MINIMUM_QUANTITY
CustOrderHandlingInst_NOT_HELD = cvar.CustOrderHandlingInst_NOT_HELD
CustOrderHandlingInst_OVER_THE_DAY = cvar.CustOrderHandlingInst_OVER_THE_DAY
CustOrderHandlingInst_PEGGED = cvar.CustOrderHandlingInst_PEGGED
CustOrderHandlingInst_RESERVE_SIZE_ORDER = cvar.CustOrderHandlingInst_RESERVE_SIZE_ORDER
CustOrderHandlingInst_STOP_STOCK_TRANSACTION = cvar.CustOrderHandlingInst_STOP_STOCK_TRANSACTION
CustOrderHandlingInst_SCALE = cvar.CustOrderHandlingInst_SCALE
CustOrderHandlingInst_TIME_ORDER = cvar.CustOrderHandlingInst_TIME_ORDER
CustOrderHandlingInst_TRAILING_STOP = cvar.CustOrderHandlingInst_TRAILING_STOP
CustOrderHandlingInst_WORK = cvar.CustOrderHandlingInst_WORK
CustOrderHandlingInst_PHONE_SIMPLE = cvar.CustOrderHandlingInst_PHONE_SIMPLE
CustOrderHandlingInst_PHONE_COMPLEX = cvar.CustOrderHandlingInst_PHONE_COMPLEX
CustOrderHandlingInst_FCM_PROVIDED_SCREEN = cvar.CustOrderHandlingInst_FCM_PROVIDED_SCREEN
CustOrderHandlingInst_OTHER_PROVIDED_SCREEN = cvar.CustOrderHandlingInst_OTHER_PROVIDED_SCREEN
CustOrderHandlingInst_CLIENT_PROVIDED_PLATFORM_CONTROLLED_BY_FCM = cvar.CustOrderHandlingInst_CLIENT_PROVIDED_PLATFORM_CONTROLLED_BY_FCM
CustOrderHandlingInst_CLIENT_PROVIDED_PLATFORM_DIRECT_TO_EXCHANGE = cvar.CustOrderHandlingInst_CLIENT_PROVIDED_PLATFORM_DIRECT_TO_EXCHANGE
CustOrderHandlingInst_ALGO_ENGINE = cvar.CustOrderHandlingInst_ALGO_ENGINE
CustOrderHandlingInst_PRICE_AT_EXECUTION = cvar.CustOrderHandlingInst_PRICE_AT_EXECUTION
CustOrderHandlingInst_DESK_ELECTRONIC = cvar.CustOrderHandlingInst_DESK_ELECTRONIC
CustOrderHandlingInst_DESK_PIT = cvar.CustOrderHandlingInst_DESK_PIT
CustOrderHandlingInst_CLIENT_ELECTRONIC = cvar.CustOrderHandlingInst_CLIENT_ELECTRONIC
CustOrderHandlingInst_CLIENT_PIT = cvar.CustOrderHandlingInst_CLIENT_PIT
CustOrderHandlingInst_CONDITIONAL_ORDER = cvar.CustOrderHandlingInst_CONDITIONAL_ORDER
CustOrderHandlingInst_DELIVERY_INSTRUCTIONS_CASH = cvar.CustOrderHandlingInst_DELIVERY_INSTRUCTIONS_CASH
CustOrderHandlingInst_DISCRETIONARY_LIMIT_ORDER = cvar.CustOrderHandlingInst_DISCRETIONARY_LIMIT_ORDER
CustOrderHandlingInst_INTRA_DAY_CROSS = cvar.CustOrderHandlingInst_INTRA_DAY_CROSS
CustOrderHandlingInst_INTERMARKET_SWEEP_ORDER = cvar.CustOrderHandlingInst_INTERMARKET_SWEEP_ORDER
CustOrderHandlingInst_MERGER_RELATED_TRANSFER_POSITION = cvar.CustOrderHandlingInst_MERGER_RELATED_TRANSFER_POSITION
CustOrderHandlingInst_MARKET_TO_LIMIT = cvar.CustOrderHandlingInst_MARKET_TO_LIMIT
CustOrderHandlingInst_DELIVERY_INSTRUCTIONS_NEXT_DAY = cvar.CustOrderHandlingInst_DELIVERY_INSTRUCTIONS_NEXT_DAY
CustOrderHandlingInst_OPTIONS_RELATED_TRANSACTION = cvar.CustOrderHandlingInst_OPTIONS_RELATED_TRANSACTION
CustOrderHandlingInst_DELIVERY_INSTRUCTIONS_SELLERS_OPTION = cvar.CustOrderHandlingInst_DELIVERY_INSTRUCTIONS_SELLERS_OPTION
CustOrderHandlingInst_STAY_ON_OFFERSIDE = cvar.CustOrderHandlingInst_STAY_ON_OFFERSIDE
CustOrderHandlingInst_GO_ALONG = cvar.CustOrderHandlingInst_GO_ALONG
CustOrderHandlingInst_PARTICIPATE_DO_NOT_INITIATE = cvar.CustOrderHandlingInst_PARTICIPATE_DO_NOT_INITIATE
CustOrderHandlingInst_STRICT_SCALE = cvar.CustOrderHandlingInst_STRICT_SCALE
CustOrderHandlingInst_TRY_TO_SCALE = cvar.CustOrderHandlingInst_TRY_TO_SCALE
CustOrderHandlingInst_STAY_ON_BIDSIDE = cvar.CustOrderHandlingInst_STAY_ON_BIDSIDE
CustOrderHandlingInst_NO_CROSS = cvar.CustOrderHandlingInst_NO_CROSS
CustOrderHandlingInst_OK_TO_CROSS = cvar.CustOrderHandlingInst_OK_TO_CROSS
CustOrderHandlingInst_CALL_FIRST = cvar.CustOrderHandlingInst_CALL_FIRST
CustOrderHandlingInst_PERCENT_OF_VOLUME = cvar.CustOrderHandlingInst_PERCENT_OF_VOLUME
CustOrderHandlingInst_REINSTATE_ON_SYSTEM_FAILURE = cvar.CustOrderHandlingInst_REINSTATE_ON_SYSTEM_FAILURE
CustOrderHandlingInst_INSTITUTION_ONLY = cvar.CustOrderHandlingInst_INSTITUTION_ONLY
CustOrderHandlingInst_REINSTATE_ON_TRADING_HALT = cvar.CustOrderHandlingInst_REINSTATE_ON_TRADING_HALT
CustOrderHandlingInst_CANCEL_ON_TRADING_HALF = cvar.CustOrderHandlingInst_CANCEL_ON_TRADING_HALF
CustOrderHandlingInst_LAST_PEG = cvar.CustOrderHandlingInst_LAST_PEG
CustOrderHandlingInst_MID_PRICE_PEG = cvar.CustOrderHandlingInst_MID_PRICE_PEG
CustOrderHandlingInst_NON_NEGOTIABLE = cvar.CustOrderHandlingInst_NON_NEGOTIABLE
CustOrderHandlingInst_OPENING_PEG = cvar.CustOrderHandlingInst_OPENING_PEG
CustOrderHandlingInst_MARKET_PEG = cvar.CustOrderHandlingInst_MARKET_PEG
CustOrderHandlingInst_CANCEL_ON_SYSTEM_FAILURE = cvar.CustOrderHandlingInst_CANCEL_ON_SYSTEM_FAILURE
CustOrderHandlingInst_PRIMARY_PEG = cvar.CustOrderHandlingInst_PRIMARY_PEG
CustOrderHandlingInst_SUSPEND = cvar.CustOrderHandlingInst_SUSPEND
CustOrderHandlingInst_FIXED_PEG_TO_LOCAL_BBO = cvar.CustOrderHandlingInst_FIXED_PEG_TO_LOCAL_BBO
CustOrderHandlingInst_PEG_TO_VWAP = cvar.CustOrderHandlingInst_PEG_TO_VWAP
CustOrderHandlingInst_TRADE_ALONG = cvar.CustOrderHandlingInst_TRADE_ALONG
CustOrderHandlingInst_TRY_TO_STOP = cvar.CustOrderHandlingInst_TRY_TO_STOP
CustOrderHandlingInst_CANCEL_IF_NOT_BEST = cvar.CustOrderHandlingInst_CANCEL_IF_NOT_BEST
CustOrderHandlingInst_STRICT_LIMIT = cvar.CustOrderHandlingInst_STRICT_LIMIT
CustOrderHandlingInst_IGNORE_PRICE_VALIDITY_CHECKS = cvar.CustOrderHandlingInst_IGNORE_PRICE_VALIDITY_CHECKS
CustOrderHandlingInst_PEG_TO_LIMIT_PRICE = cvar.CustOrderHandlingInst_PEG_TO_LIMIT_PRICE
CustOrderHandlingInst_WORK_TO_TARGET_STRATEGY = cvar.CustOrderHandlingInst_WORK_TO_TARGET_STRATEGY
CustOrderHandlingInst_G_ORDER_AND_FCMAP_IOR_FIX = cvar.CustOrderHandlingInst_G_ORDER_AND_FCMAP_IOR_FIX
OrderHandlingInstSource_NASDOATS = cvar.OrderHandlingInstSource_NASDOATS
OrderHandlingInstSource_FINRAOATS = cvar.OrderHandlingInstSource_FINRAOATS
OrderHandlingInstSource_FIA_EXECUTION_SOURCE_CODE = cvar.OrderHandlingInstSource_FIA_EXECUTION_SOURCE_CODE
DeskType_AGENCY = cvar.DeskType_AGENCY
DeskType_ARBITRAGE = cvar.DeskType_ARBITRAGE
DeskType_DERIVATIVES = cvar.DeskType_DERIVATIVES
DeskType_INTERNATIONAL = cvar.DeskType_INTERNATIONAL
DeskType_INSTITUTIONAL = cvar.DeskType_INSTITUTIONAL
DeskType_OTHER = cvar.DeskType_OTHER
DeskType_PREFERRED_TRADING = cvar.DeskType_PREFERRED_TRADING
DeskType_PROPRIETARY = cvar.DeskType_PROPRIETARY
DeskType_PROGRAM_TRADING = cvar.DeskType_PROGRAM_TRADING
DeskType_SALES = cvar.DeskType_SALES
DeskType_TRADING = cvar.DeskType_TRADING
DeskType_BLOCK_TRADING = cvar.DeskType_BLOCK_TRADING
DeskType_CONVERTIBLE_DESK = cvar.DeskType_CONVERTIBLE_DESK
DeskType_CENTRAL_RISK_BOOKS = cvar.DeskType_CENTRAL_RISK_BOOKS
DeskType_EQUITY_CAPITAL_MARKETS = cvar.DeskType_EQUITY_CAPITAL_MARKETS
DeskType_SWAPS = cvar.DeskType_SWAPS
DeskType_TRADING_DESK_SYSTEM = cvar.DeskType_TRADING_DESK_SYSTEM
DeskType_TREASURY = cvar.DeskType_TREASURY
DeskType_FLOOR_BROKER = cvar.DeskType_FLOOR_BROKER
DeskTypeSource_NASDOATS = cvar.DeskTypeSource_NASDOATS
DeskTypeSource_FINRAOATS = cvar.DeskTypeSource_FINRAOATS
DeskOrderHandlingInst_ADD_ON_ORDER = cvar.DeskOrderHandlingInst_ADD_ON_ORDER
DeskOrderHandlingInst_ALL_OR_NONE = cvar.DeskOrderHandlingInst_ALL_OR_NONE
DeskOrderHandlingInst_CASH_NOT_HELD = cvar.DeskOrderHandlingInst_CASH_NOT_HELD
DeskOrderHandlingInst_DIRECTED_ORDER = cvar.DeskOrderHandlingInst_DIRECTED_ORDER
DeskOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION = cvar.DeskOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION
DeskOrderHandlingInst_FILL_OR_KILL = cvar.DeskOrderHandlingInst_FILL_OR_KILL
DeskOrderHandlingInst_IMBALANCE_ONLY = cvar.DeskOrderHandlingInst_IMBALANCE_ONLY
DeskOrderHandlingInst_IMMEDIATE_OR_CANCEL = cvar.DeskOrderHandlingInst_IMMEDIATE_OR_CANCEL
DeskOrderHandlingInst_LIMIT_ON_OPEN = cvar.DeskOrderHandlingInst_LIMIT_ON_OPEN
DeskOrderHandlingInst_LIMIT_ON_CLOSE = cvar.DeskOrderHandlingInst_LIMIT_ON_CLOSE
DeskOrderHandlingInst_MARKET_AT_OPEN = cvar.DeskOrderHandlingInst_MARKET_AT_OPEN
DeskOrderHandlingInst_MARKET_AT_CLOSE = cvar.DeskOrderHandlingInst_MARKET_AT_CLOSE
DeskOrderHandlingInst_MARKET_ON_OPEN = cvar.DeskOrderHandlingInst_MARKET_ON_OPEN
DeskOrderHandlingInst_MARKET_ON_CLOSE = cvar.DeskOrderHandlingInst_MARKET_ON_CLOSE
DeskOrderHandlingInst_MINIMUM_QUANTITY = cvar.DeskOrderHandlingInst_MINIMUM_QUANTITY
DeskOrderHandlingInst_NOT_HELD = cvar.DeskOrderHandlingInst_NOT_HELD
DeskOrderHandlingInst_OVER_THE_DAY = cvar.DeskOrderHandlingInst_OVER_THE_DAY
DeskOrderHandlingInst_PEGGED = cvar.DeskOrderHandlingInst_PEGGED
DeskOrderHandlingInst_RESERVE_SIZE_ORDER = cvar.DeskOrderHandlingInst_RESERVE_SIZE_ORDER
DeskOrderHandlingInst_STOP_STOCK_TRANSACTION = cvar.DeskOrderHandlingInst_STOP_STOCK_TRANSACTION
DeskOrderHandlingInst_SCALE = cvar.DeskOrderHandlingInst_SCALE
DeskOrderHandlingInst_TIME_ORDER = cvar.DeskOrderHandlingInst_TIME_ORDER
DeskOrderHandlingInst_TRAILING_STOP = cvar.DeskOrderHandlingInst_TRAILING_STOP
DeskOrderHandlingInst_WORK = cvar.DeskOrderHandlingInst_WORK
ExecAckStatus_RECEIVED = cvar.ExecAckStatus_RECEIVED
ExecAckStatus_ACCEPTED = cvar.ExecAckStatus_ACCEPTED
ExecAckStatus_DON = cvar.ExecAckStatus_DON
ExecAckStatus_DONT_KNOW = cvar.ExecAckStatus_DONT_KNOW
CollApplType_SPECIFIC_DEPOSIT = cvar.CollApplType_SPECIFIC_DEPOSIT
CollApplType_GENERAL = cvar.CollApplType_GENERAL
UnderlyingFXRateCalc_DIVIDE = cvar.UnderlyingFXRateCalc_DIVIDE
UnderlyingFXRateCalc_MULTIPLY = cvar.UnderlyingFXRateCalc_MULTIPLY
AllocPositionEffect_OPEN = cvar.AllocPositionEffect_OPEN
AllocPositionEffect_CLOSE = cvar.AllocPositionEffect_CLOSE
AllocPositionEffect_ROLLED = cvar.AllocPositionEffect_ROLLED
AllocPositionEffect_FIFO = cvar.AllocPositionEffect_FIFO
DealingCapacity_AGENT = cvar.DealingCapacity_AGENT
DealingCapacity_PRINCIPAL = cvar.DealingCapacity_PRINCIPAL
DealingCapacity_RISKLESS_PRINCIPAL = cvar.DealingCapacity_RISKLESS_PRINCIPAL
InstrmtAssignmentMethod_RANDOM = cvar.InstrmtAssignmentMethod_RANDOM
InstrmtAssignmentMethod_PRO_RATA = cvar.InstrmtAssignmentMethod_PRO_RATA
AggressorIndicator_YES = cvar.AggressorIndicator_YES
AggressorIndicator_NO = cvar.AggressorIndicator_NO
MDQuoteType_INDICATIVE = cvar.MDQuoteType_INDICATIVE
MDQuoteType_TRADEABLE = cvar.MDQuoteType_TRADEABLE
MDQuoteType_RESTRICTED_TRADEABLE = cvar.MDQuoteType_RESTRICTED_TRADEABLE
MDQuoteType_COUNTER = cvar.MDQuoteType_COUNTER
MDQuoteType_INDICATIVE_AND_TRADEABLE = cvar.MDQuoteType_INDICATIVE_AND_TRADEABLE
RefOrderIDSource_SECONDARY_ORDER_ID = cvar.RefOrderIDSource_SECONDARY_ORDER_ID
RefOrderIDSource_ORDER_ID = cvar.RefOrderIDSource_ORDER_ID
RefOrderIDSource_MD_ENTRY_ID = cvar.RefOrderIDSource_MD_ENTRY_ID
RefOrderIDSource_QUOTE_ENTRY_ID = cvar.RefOrderIDSource_QUOTE_ENTRY_ID
RefOrderIDSource_ORIGINAL_ORDER_ID = cvar.RefOrderIDSource_ORIGINAL_ORDER_ID
RefOrderIDSource_QUOTE_ID = cvar.RefOrderIDSource_QUOTE_ID
RefOrderIDSource_QUOTE_REQ_ID = cvar.RefOrderIDSource_QUOTE_REQ_ID
RefOrderIDSource_PREVIOUS_ORDER_IDENTIFIER = cvar.RefOrderIDSource_PREVIOUS_ORDER_IDENTIFIER
RefOrderIDSource_PREVIOUS_QUOTE_IDENTIFIER = cvar.RefOrderIDSource_PREVIOUS_QUOTE_IDENTIFIER
RefOrderIDSource_PARENT_ORDER_IDENTIFIER = cvar.RefOrderIDSource_PARENT_ORDER_IDENTIFIER
RefOrderIDSource_MANUAL_ORDER_IDENTIFIER = cvar.RefOrderIDSource_MANUAL_ORDER_IDENTIFIER
DisplayWhen_IMMEDIATE = cvar.DisplayWhen_IMMEDIATE
DisplayWhen_EXHAUST = cvar.DisplayWhen_EXHAUST
DisplayMethod_INITIAL = cvar.DisplayMethod_INITIAL
DisplayMethod_NEW = cvar.DisplayMethod_NEW
DisplayMethod_RANDOM = cvar.DisplayMethod_RANDOM
DisplayMethod_UNDISCLOSED = cvar.DisplayMethod_UNDISCLOSED
PriceProtectionScope_NONE = cvar.PriceProtectionScope_NONE
PriceProtectionScope_LOCAL = cvar.PriceProtectionScope_LOCAL
PriceProtectionScope_NATIONAL = cvar.PriceProtectionScope_NATIONAL
PriceProtectionScope_GLOBAL = cvar.PriceProtectionScope_GLOBAL
LotType_ODD_LOT = cvar.LotType_ODD_LOT
LotType_ROUND_LOT = cvar.LotType_ROUND_LOT
LotType_BLOCK_LOT = cvar.LotType_BLOCK_LOT
LotType_ROUND_LOT_BASED_UPON = cvar.LotType_ROUND_LOT_BASED_UPON
PegPriceType_LAST_PEG = cvar.PegPriceType_LAST_PEG
PegPriceType_MID_PRICE_PEG = cvar.PegPriceType_MID_PRICE_PEG
PegPriceType_OPENING_PEG = cvar.PegPriceType_OPENING_PEG
PegPriceType_MARKET_PEG = cvar.PegPriceType_MARKET_PEG
PegPriceType_PRIMARY_PEG = cvar.PegPriceType_PRIMARY_PEG
PegPriceType_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = cvar.PegPriceType_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER
PegPriceType_PEG_TO_VWAP = cvar.PegPriceType_PEG_TO_VWAP
PegPriceType_TRAILING_STOP_PEG = cvar.PegPriceType_TRAILING_STOP_PEG
PegPriceType_PEG_TO_LIMIT_PRICE = cvar.PegPriceType_PEG_TO_LIMIT_PRICE
PegPriceType_SHORT_SALE_MIN_PRICE_PEG = cvar.PegPriceType_SHORT_SALE_MIN_PRICE_PEG
TriggerType_PARTIAL_EXECUTION = cvar.TriggerType_PARTIAL_EXECUTION
TriggerType_SPECIFIED_TRADING_SESSION = cvar.TriggerType_SPECIFIED_TRADING_SESSION
TriggerType_NEXT_AUCTION = cvar.TriggerType_NEXT_AUCTION
TriggerType_PRICE_MOVEMENT = cvar.TriggerType_PRICE_MOVEMENT
TriggerType_ON_ORDER_ENTRY_OR_MODIFICATION = cvar.TriggerType_ON_ORDER_ENTRY_OR_MODIFICATION
TriggerAction_ACTIVATE = cvar.TriggerAction_ACTIVATE
TriggerAction_MODIFY = cvar.TriggerAction_MODIFY
TriggerAction_CANCEL = cvar.TriggerAction_CANCEL
TriggerPriceType_BEST_OFFER = cvar.TriggerPriceType_BEST_OFFER
TriggerPriceType_LAST_TRADE = cvar.TriggerPriceType_LAST_TRADE
TriggerPriceType_BEST_BID = cvar.TriggerPriceType_BEST_BID
TriggerPriceType_BEST_BID_OR_LAST_TRADE = cvar.TriggerPriceType_BEST_BID_OR_LAST_TRADE
TriggerPriceType_BEST_OFFER_OR_LAST_TRADE = cvar.TriggerPriceType_BEST_OFFER_OR_LAST_TRADE
TriggerPriceType_BEST_MID = cvar.TriggerPriceType_BEST_MID
TriggerPriceTypeScope_NONE = cvar.TriggerPriceTypeScope_NONE
TriggerPriceTypeScope_LOCAL = cvar.TriggerPriceTypeScope_LOCAL
TriggerPriceTypeScope_NATIONAL = cvar.TriggerPriceTypeScope_NATIONAL
TriggerPriceTypeScope_GLOBAL = cvar.TriggerPriceTypeScope_GLOBAL
TriggerPriceDirection_UP = cvar.TriggerPriceDirection_UP
TriggerPriceDirection_DOWN = cvar.TriggerPriceDirection_DOWN
TriggerOrderType_MARKET = cvar.TriggerOrderType_MARKET
TriggerOrderType_LIMIT = cvar.TriggerOrderType_LIMIT
OrderCategory_ORDER = cvar.OrderCategory_ORDER
OrderCategory_QUOTE = cvar.OrderCategory_QUOTE
OrderCategory_PRIVATELY_NEGOTIATED_TRADE = cvar.OrderCategory_PRIVATELY_NEGOTIATED_TRADE
OrderCategory_MULTILEG_ORDER = cvar.OrderCategory_MULTILEG_ORDER
OrderCategory_LINKED_ORDER = cvar.OrderCategory_LINKED_ORDER
OrderCategory_QUOTE_REQUEST = cvar.OrderCategory_QUOTE_REQUEST
OrderCategory_IMPLIED_ORDER = cvar.OrderCategory_IMPLIED_ORDER
OrderCategory_CROSS_ORDER = cvar.OrderCategory_CROSS_ORDER
OrderCategory_STREAMING_PRICE = cvar.OrderCategory_STREAMING_PRICE
OrderCategory_INTERNAL_CROSS_ORDER = cvar.OrderCategory_INTERNAL_CROSS_ORDER
TradeHandlingInstr_TRADE_CONFIRMATION = cvar.TradeHandlingInstr_TRADE_CONFIRMATION
TradeHandlingInstr_TWO_PARTY_REPORT = cvar.TradeHandlingInstr_TWO_PARTY_REPORT
TradeHandlingInstr_ONE_PARTY_REPORT_FOR_MATCHING = cvar.TradeHandlingInstr_ONE_PARTY_REPORT_FOR_MATCHING
TradeHandlingInstr_ONE_PARTY_REPORT_FOR_PASS_THROUGH = cvar.TradeHandlingInstr_ONE_PARTY_REPORT_FOR_PASS_THROUGH
TradeHandlingInstr_AUTOMATED_FLOOR_ORDER_ROUTING = cvar.TradeHandlingInstr_AUTOMATED_FLOOR_ORDER_ROUTING
TradeHandlingInstr_TWO_PARTY_REPORT_FOR_CLAIM = cvar.TradeHandlingInstr_TWO_PARTY_REPORT_FOR_CLAIM
TradeHandlingInstr_ONE_PARTY_REPORT = cvar.TradeHandlingInstr_ONE_PARTY_REPORT
TradeHandlingInstr_THIRD_PTY_RPT_FOR_PASS_THROUGH = cvar.TradeHandlingInstr_THIRD_PTY_RPT_FOR_PASS_THROUGH
TradeHandlingInstr_ONE_PARTY_REPORT_AUTO_MATCH = cvar.TradeHandlingInstr_ONE_PARTY_REPORT_AUTO_MATCH
ExDestinationIDSource_BIC = cvar.ExDestinationIDSource_BIC
ExDestinationIDSource_GENERAL_IDENTIFIER = cvar.ExDestinationIDSource_GENERAL_IDENTIFIER
ExDestinationIDSource_PROPRIETARY = cvar.ExDestinationIDSource_PROPRIETARY
ExDestinationIDSource_ISO_COUNTRY_CODE = cvar.ExDestinationIDSource_ISO_COUNTRY_CODE
ExDestinationIDSource_MIC = cvar.ExDestinationIDSource_MIC
ExpirationQtyType_AUTO_EXERCISE = cvar.ExpirationQtyType_AUTO_EXERCISE
ExpirationQtyType_NON_AUTO_EXERCISE = cvar.ExpirationQtyType_NON_AUTO_EXERCISE
ExpirationQtyType_FINAL_WILL_BE_EXERCISED = cvar.ExpirationQtyType_FINAL_WILL_BE_EXERCISED
ExpirationQtyType_CONTRARY_INTENTION = cvar.ExpirationQtyType_CONTRARY_INTENTION
ExpirationQtyType_DIFFERENCE = cvar.ExpirationQtyType_DIFFERENCE
UnitOfMeasure_BILLION_CUBIC_FEET = cvar.UnitOfMeasure_BILLION_CUBIC_FEET
UnitOfMeasure_MILLION_BARRELS = cvar.UnitOfMeasure_MILLION_BARRELS
UnitOfMeasure_ONE_MILLION_BTU = cvar.UnitOfMeasure_ONE_MILLION_BTU
UnitOfMeasure_MEGAWATT_HOURS = cvar.UnitOfMeasure_MEGAWATT_HOURS
UnitOfMeasure_BARRELS = cvar.UnitOfMeasure_BARRELS
UnitOfMeasure_BUSHELS = cvar.UnitOfMeasure_BUSHELS
UnitOfMeasure_POUNDS = cvar.UnitOfMeasure_POUNDS
UnitOfMeasure_GALLONS = cvar.UnitOfMeasure_GALLONS
UnitOfMeasure_TROY_OUNCES = cvar.UnitOfMeasure_TROY_OUNCES
UnitOfMeasure_METRIC_TONS = cvar.UnitOfMeasure_METRIC_TONS
UnitOfMeasure_TONS = cvar.UnitOfMeasure_TONS
UnitOfMeasure_US_DOLLARS = cvar.UnitOfMeasure_US_DOLLARS
UnitOfMeasure_CUBIC_METERS = cvar.UnitOfMeasure_CUBIC_METERS
UnitOfMeasure_GIGAJOULES = cvar.UnitOfMeasure_GIGAJOULES
UnitOfMeasure_HEAT_RATE = cvar.UnitOfMeasure_HEAT_RATE
UnitOfMeasure_KILOWATT_HOURS = cvar.UnitOfMeasure_KILOWATT_HOURS
UnitOfMeasure_MEGA_HEAT_RATE = cvar.UnitOfMeasure_MEGA_HEAT_RATE
UnitOfMeasure_THERMS = cvar.UnitOfMeasure_THERMS
UnitOfMeasure_TONS_OF_CARBON_DIOXIDE = cvar.UnitOfMeasure_TONS_OF_CARBON_DIOXIDE
UnitOfMeasure_ALLOWANCES = cvar.UnitOfMeasure_ALLOWANCES
UnitOfMeasure_BOARD_FEET = cvar.UnitOfMeasure_BOARD_FEET
UnitOfMeasure_CURRENCY = cvar.UnitOfMeasure_CURRENCY
UnitOfMeasure_COOLING_DEGREE_DAY = cvar.UnitOfMeasure_COOLING_DEGREE_DAY
UnitOfMeasure_CERTIFIED_EMISSIONS_REDUCTION = cvar.UnitOfMeasure_CERTIFIED_EMISSIONS_REDUCTION
UnitOfMeasure_CRITICAL_PRECIP_DAY = cvar.UnitOfMeasure_CRITICAL_PRECIP_DAY
UnitOfMeasure_CLIMATE_RESERVE_TONNES = cvar.UnitOfMeasure_CLIMATE_RESERVE_TONNES
UnitOfMeasure_HUNDREDWEIGHT = cvar.UnitOfMeasure_HUNDREDWEIGHT
UnitOfMeasure_DAY = cvar.UnitOfMeasure_DAY
UnitOfMeasure_DRY_METRIC_TONS = cvar.UnitOfMeasure_DRY_METRIC_TONS
UnitOfMeasure_ENV_ALLWNC_CERT = cvar.UnitOfMeasure_ENV_ALLWNC_CERT
UnitOfMeasure_ENVIRONMENTAL_CREDIT = cvar.UnitOfMeasure_ENVIRONMENTAL_CREDIT
UnitOfMeasure_ENVIRONMENTAL_OFFSET = cvar.UnitOfMeasure_ENVIRONMENTAL_OFFSET
UnitOfMeasure_GRAMS = cvar.UnitOfMeasure_GRAMS
UnitOfMeasure_GROSS_TONS = cvar.UnitOfMeasure_GROSS_TONS
UnitOfMeasure_HEATING_DEGREE_DAY = cvar.UnitOfMeasure_HEATING_DEGREE_DAY
UnitOfMeasure_INDEX_POINT = cvar.UnitOfMeasure_INDEX_POINT
UnitOfMeasure_KILOGRAMS = cvar.UnitOfMeasure_KILOGRAMS
UnitOfMeasure_KILOLITERS = cvar.UnitOfMeasure_KILOLITERS
UnitOfMeasure_KILOWATT_YEAR = cvar.UnitOfMeasure_KILOWATT_YEAR
UnitOfMeasure_KILOWATT_DAY = cvar.UnitOfMeasure_KILOWATT_DAY
UnitOfMeasure_KILOWATT_HOUR = cvar.UnitOfMeasure_KILOWATT_HOUR
UnitOfMeasure_KILOWATT_MONTH = cvar.UnitOfMeasure_KILOWATT_MONTH
UnitOfMeasure_KILOWATT_MINUTE = cvar.UnitOfMeasure_KILOWATT_MINUTE
UnitOfMeasure_LITERS = cvar.UnitOfMeasure_LITERS
UnitOfMeasure_MEGAWATT_YEAR = cvar.UnitOfMeasure_MEGAWATT_YEAR
UnitOfMeasure_MEGAWATT_DAY = cvar.UnitOfMeasure_MEGAWATT_DAY
UnitOfMeasure_MEGAWATT_HOUR = cvar.UnitOfMeasure_MEGAWATT_HOUR
UnitOfMeasure_MEGAWATT_MONTH = cvar.UnitOfMeasure_MEGAWATT_MONTH
UnitOfMeasure_MEGAWATT_MINUTE = cvar.UnitOfMeasure_MEGAWATT_MINUTE
UnitOfMeasure_PRINCIPAL_WITH_RELATION_TO_DEBT_INSTRUMENT = cvar.UnitOfMeasure_PRINCIPAL_WITH_RELATION_TO_DEBT_INSTRUMENT
UnitOfMeasure_ARE = cvar.UnitOfMeasure_ARE
UnitOfMeasure_ACRE = cvar.UnitOfMeasure_ACRE
UnitOfMeasure_CENTILITER = cvar.UnitOfMeasure_CENTILITER
UnitOfMeasure_CENTIMETER = cvar.UnitOfMeasure_CENTIMETER
UnitOfMeasure_DIESEL_GALLON_EQUIVALENT = cvar.UnitOfMeasure_DIESEL_GALLON_EQUIVALENT
UnitOfMeasure_FOOT = cvar.UnitOfMeasure_FOOT
UnitOfMeasure_GB_GALLON = cvar.UnitOfMeasure_GB_GALLON
UnitOfMeasure_GASOLINE_GALLON_EQUIVALENT = cvar.UnitOfMeasure_GASOLINE_GALLON_EQUIVALENT
UnitOfMeasure_HECTARE = cvar.UnitOfMeasure_HECTARE
UnitOfMeasure_INCH = cvar.UnitOfMeasure_INCH
UnitOfMeasure_KILOMETER = cvar.UnitOfMeasure_KILOMETER
UnitOfMeasure_METER = cvar.UnitOfMeasure_METER
UnitOfMeasure_MILE = cvar.UnitOfMeasure_MILE
UnitOfMeasure_MILLILITER = cvar.UnitOfMeasure_MILLILITER
UnitOfMeasure_MILLIMETER = cvar.UnitOfMeasure_MILLIMETER
UnitOfMeasure_US_OUNCE = cvar.UnitOfMeasure_US_OUNCE
UnitOfMeasure_PIECE = cvar.UnitOfMeasure_PIECE
UnitOfMeasure_US_PINT = cvar.UnitOfMeasure_US_PINT
UnitOfMeasure_GB_PINT = cvar.UnitOfMeasure_GB_PINT
UnitOfMeasure_US_QUART = cvar.UnitOfMeasure_US_QUART
UnitOfMeasure_GB_QUART = cvar.UnitOfMeasure_GB_QUART
UnitOfMeasure_SQUARE_CENTIMETER = cvar.UnitOfMeasure_SQUARE_CENTIMETER
UnitOfMeasure_SQUARE_FOOT = cvar.UnitOfMeasure_SQUARE_FOOT
UnitOfMeasure_SQUARE_INCH = cvar.UnitOfMeasure_SQUARE_INCH
UnitOfMeasure_SQUARE_KILOMETER = cvar.UnitOfMeasure_SQUARE_KILOMETER
UnitOfMeasure_SQUARE_METER = cvar.UnitOfMeasure_SQUARE_METER
UnitOfMeasure_SQUARE_MILE = cvar.UnitOfMeasure_SQUARE_MILE
UnitOfMeasure_SQUARE_MILLIMETER = cvar.UnitOfMeasure_SQUARE_MILLIMETER
UnitOfMeasure_SQUARE_YARD = cvar.UnitOfMeasure_SQUARE_YARD
UnitOfMeasure_YARD = cvar.UnitOfMeasure_YARD
ImpliedMarketIndicator_NOT_IMPLIED = cvar.ImpliedMarketIndicator_NOT_IMPLIED
ImpliedMarketIndicator_IMPLIED_IN = cvar.ImpliedMarketIndicator_IMPLIED_IN
ImpliedMarketIndicator_IMPLIED_OUT = cvar.ImpliedMarketIndicator_IMPLIED_OUT
ImpliedMarketIndicator_BOTH_IMPLIED_IN_AND_IMPLIED_OUT = cvar.ImpliedMarketIndicator_BOTH_IMPLIED_IN_AND_IMPLIED_OUT
SettlObligMode_PRELIMINARY = cvar.SettlObligMode_PRELIMINARY
SettlObligMode_FINAL = cvar.SettlObligMode_FINAL
SettlObligTransType_CANCEL = cvar.SettlObligTransType_CANCEL
SettlObligTransType_NEW = cvar.SettlObligTransType_NEW
SettlObligTransType_REPLACE = cvar.SettlObligTransType_REPLACE
SettlObligTransType_RESTATE = cvar.SettlObligTransType_RESTATE
SettlObligSource_INSTRUCTIONS_OF_BROKER = cvar.SettlObligSource_INSTRUCTIONS_OF_BROKER
SettlObligSource_INSTRUCTIONS_FOR_INSTITUTION = cvar.SettlObligSource_INSTRUCTIONS_FOR_INSTITUTION
SettlObligSource_INVESTOR = cvar.SettlObligSource_INVESTOR
SettlObligSource_BUYERS_SETTLEMENT_INSTRUCTIONS = cvar.SettlObligSource_BUYERS_SETTLEMENT_INSTRUCTIONS
SettlObligSource_SELLERS_SETTLEMENT_INSTRUCTIONS = cvar.SettlObligSource_SELLERS_SETTLEMENT_INSTRUCTIONS
QuoteEntryStatus_ACCEPTED = cvar.QuoteEntryStatus_ACCEPTED
QuoteEntryStatus_REJECTED = cvar.QuoteEntryStatus_REJECTED
QuoteEntryStatus_REMOVED_FROM_MARKET = cvar.QuoteEntryStatus_REMOVED_FROM_MARKET
QuoteEntryStatus_EXPIRED = cvar.QuoteEntryStatus_EXPIRED
QuoteEntryStatus_LOCKED_MARKET_WARNING = cvar.QuoteEntryStatus_LOCKED_MARKET_WARNING
QuoteEntryStatus_CROSS_MARKET_WARNING = cvar.QuoteEntryStatus_CROSS_MARKET_WARNING
QuoteEntryStatus_CANCELED_DUE_TO_LOCK_MARKET = cvar.QuoteEntryStatus_CANCELED_DUE_TO_LOCK_MARKET
QuoteEntryStatus_CANCELED_DUE_TO_CROSS_MARKET = cvar.QuoteEntryStatus_CANCELED_DUE_TO_CROSS_MARKET
QuoteEntryStatus_ACTIVE = cvar.QuoteEntryStatus_ACTIVE
PrivateQuote_YES = cvar.PrivateQuote_YES
PrivateQuote_NO = cvar.PrivateQuote_NO
RespondentType_ALL_MARKET_PARTICIPANTS = cvar.RespondentType_ALL_MARKET_PARTICIPANTS
RespondentType_SPECIFIED_MARKET_PARTICIPANTS = cvar.RespondentType_SPECIFIED_MARKET_PARTICIPANTS
RespondentType_ALL_MARKET_MAKERS = cvar.RespondentType_ALL_MARKET_MAKERS
RespondentType_PRIMARY_MARKET_MAKER = cvar.RespondentType_PRIMARY_MARKET_MAKER
SecurityTradingEvent_ORDER_IMBALANCE = cvar.SecurityTradingEvent_ORDER_IMBALANCE
SecurityTradingEvent_TRADING_RESUMES = cvar.SecurityTradingEvent_TRADING_RESUMES
SecurityTradingEvent_PRICE_VOLATILITY_INTERRUPTION = cvar.SecurityTradingEvent_PRICE_VOLATILITY_INTERRUPTION
SecurityTradingEvent_CHANGE_OF_TRADING_SESSION = cvar.SecurityTradingEvent_CHANGE_OF_TRADING_SESSION
SecurityTradingEvent_CHANGE_OF_TRADING_SUBSESSION = cvar.SecurityTradingEvent_CHANGE_OF_TRADING_SUBSESSION
SecurityTradingEvent_CHANGE_OF_SECURITY_TRADING_STATUS = cvar.SecurityTradingEvent_CHANGE_OF_SECURITY_TRADING_STATUS
SecurityTradingEvent_CHANGE_OF_BOOK_TYPE = cvar.SecurityTradingEvent_CHANGE_OF_BOOK_TYPE
SecurityTradingEvent_CHANGE_OF_MARKET_DEPTH = cvar.SecurityTradingEvent_CHANGE_OF_MARKET_DEPTH
SecurityTradingEvent_CORPORATE_ACTION = cvar.SecurityTradingEvent_CORPORATE_ACTION
StatsType_EXCHANGE_LAST = cvar.StatsType_EXCHANGE_LAST
StatsType_HIGH = cvar.StatsType_HIGH
StatsType_AVERAGE_PRICE = cvar.StatsType_AVERAGE_PRICE
StatsType_TURNOVER = cvar.StatsType_TURNOVER
MDSecSizeType_CUSTOMER = cvar.MDSecSizeType_CUSTOMER
MDSecSizeType_CUSTOMER_PROFESSIONAL = cvar.MDSecSizeType_CUSTOMER_PROFESSIONAL
MDSecSizeType_DO_NOT_TRADE_THROUGH = cvar.MDSecSizeType_DO_NOT_TRADE_THROUGH
SettlMethod_CASH_SETTLEMENT_REQUIRED = cvar.SettlMethod_CASH_SETTLEMENT_REQUIRED
SettlMethod_PHYSICAL_SETTLEMENT_REQUIRED = cvar.SettlMethod_PHYSICAL_SETTLEMENT_REQUIRED
SettlMethod_ELECTION = cvar.SettlMethod_ELECTION
ExerciseStyle_EUROPEAN = cvar.ExerciseStyle_EUROPEAN
ExerciseStyle_AMERICAN = cvar.ExerciseStyle_AMERICAN
ExerciseStyle_BERMUDA = cvar.ExerciseStyle_BERMUDA
ExerciseStyle_OTHER = cvar.ExerciseStyle_OTHER
PriceQuoteMethod_STANDARD = cvar.PriceQuoteMethod_STANDARD
PriceQuoteMethod_INDEX = cvar.PriceQuoteMethod_INDEX
PriceQuoteMethod_INTEREST_RATE_INDEX = cvar.PriceQuoteMethod_INTEREST_RATE_INDEX
PriceQuoteMethod_PERCENT_OF_PAR = cvar.PriceQuoteMethod_PERCENT_OF_PAR
FuturesValuationMethod_PREMIUM_STYLE = cvar.FuturesValuationMethod_PREMIUM_STYLE
FuturesValuationMethod_FUTURES_STYLE_MARK_TO_MARKET = cvar.FuturesValuationMethod_FUTURES_STYLE_MARK_TO_MARKET
FuturesValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT = cvar.FuturesValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT
ListMethod_PRE_LISTED_ONLY = cvar.ListMethod_PRE_LISTED_ONLY
ListMethod_USER_REQUESTED = cvar.ListMethod_USER_REQUESTED
TickRuleType_REGULAR = cvar.TickRuleType_REGULAR
TickRuleType_VARIABLE = cvar.TickRuleType_VARIABLE
TickRuleType_FIXED = cvar.TickRuleType_FIXED
TickRuleType_TRADED_AS_A_SPREAD_LEG = cvar.TickRuleType_TRADED_AS_A_SPREAD_LEG
TickRuleType_SETTLED_AS_A_SPREAD_LEG = cvar.TickRuleType_SETTLED_AS_A_SPREAD_LEG
TickRuleType_REGULAR_TRADING = cvar.TickRuleType_REGULAR_TRADING
TickRuleType_VARIABLE_CABINET = cvar.TickRuleType_VARIABLE_CABINET
TickRuleType_FIXED_CABINET = cvar.TickRuleType_FIXED_CABINET
TickRuleType_TRADED_AS_SPREAD = cvar.TickRuleType_TRADED_AS_SPREAD
MaturityMonthYearIncrementUnits_MONTHS = cvar.MaturityMonthYearIncrementUnits_MONTHS
MaturityMonthYearIncrementUnits_DAYS = cvar.MaturityMonthYearIncrementUnits_DAYS
MaturityMonthYearIncrementUnits_WEEKS = cvar.MaturityMonthYearIncrementUnits_WEEKS
MaturityMonthYearIncrementUnits_YEARS = cvar.MaturityMonthYearIncrementUnits_YEARS
MaturityMonthYearFormat_YEAR_MONTH_ONLY = cvar.MaturityMonthYearFormat_YEAR_MONTH_ONLY
MaturityMonthYearFormat_YEAR_MONTH_DAY = cvar.MaturityMonthYearFormat_YEAR_MONTH_DAY
MaturityMonthYearFormat_YEAR_MONTH_WEEK = cvar.MaturityMonthYearFormat_YEAR_MONTH_WEEK
PriceLimitType_PRICE = cvar.PriceLimitType_PRICE
PriceLimitType_TICKS = cvar.PriceLimitType_TICKS
PriceLimitType_PERCENTAGE = cvar.PriceLimitType_PERCENTAGE
ListUpdateAction_ADD = cvar.ListUpdateAction_ADD
ListUpdateAction_DELETE = cvar.ListUpdateAction_DELETE
ListUpdateAction_MODIFY = cvar.ListUpdateAction_MODIFY
ListUpdateAction_SNAPSHOT = cvar.ListUpdateAction_SNAPSHOT
MarketUpdateAction_ADD = cvar.MarketUpdateAction_ADD
MarketUpdateAction_DELETE = cvar.MarketUpdateAction_DELETE
MarketUpdateAction_MODIFY = cvar.MarketUpdateAction_MODIFY
TradSesEvent_TRADING_RESUMES = cvar.TradSesEvent_TRADING_RESUMES
TradSesEvent_CHANGE_OF_TRADING_SESSION = cvar.TradSesEvent_CHANGE_OF_TRADING_SESSION
TradSesEvent_CHANGE_OF_TRADING_SUBSESSION = cvar.TradSesEvent_CHANGE_OF_TRADING_SUBSESSION
TradSesEvent_CHANGE_OF_TRADING_STATUS = cvar.TradSesEvent_CHANGE_OF_TRADING_STATUS
MassActionType_SUSPEND_ORDERS = cvar.MassActionType_SUSPEND_ORDERS
MassActionType_RELEASE_ORDERS_FROM_SUSPENSION = cvar.MassActionType_RELEASE_ORDERS_FROM_SUSPENSION
MassActionType_CANCEL_ORDERS = cvar.MassActionType_CANCEL_ORDERS
MassActionScope_ALL_ORDERS_FOR_A_SECURITY = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITY
MassActionScope_ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassActionScope_ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassActionScope_ALL_ORDERS_FOR_A_PRODUCT = cvar.MassActionScope_ALL_ORDERS_FOR_A_PRODUCT
MassActionScope_ALL_ORDERS_FOR_ACFI_CODE = cvar.MassActionScope_ALL_ORDERS_FOR_ACFI_CODE
MassActionScope_ALL_ORDERS_FOR_A_SECURITY_TYPE = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITY_TYPE
MassActionScope_ALL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassActionScope_ALL_ORDERS_FOR_A_TRADING_SESSION
MassActionScope_ALL_ORDERS = cvar.MassActionScope_ALL_ORDERS
MassActionScope_ALL_ORDERS_FOR_A_MARKET = cvar.MassActionScope_ALL_ORDERS_FOR_A_MARKET
MassActionScope_ALL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassActionScope_ALL_ORDERS_FOR_A_MARKET_SEGMENT
MassActionScope_ALL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITY_GROUP
MassActionScope_CANCEL_FOR_SECURITY_ISSUER = cvar.MassActionScope_CANCEL_FOR_SECURITY_ISSUER
MassActionScope_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassActionScope_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassActionResponse_REJECTED = cvar.MassActionResponse_REJECTED
MassActionResponse_ACCEPTED = cvar.MassActionResponse_ACCEPTED
MassActionResponse_COMPLETED = cvar.MassActionResponse_COMPLETED
MassActionRejectReason_MASS_ACTION_NOT_SUPPORTED = cvar.MassActionRejectReason_MASS_ACTION_NOT_SUPPORTED
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY
MassActionRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_SECURITY
MassActionRejectReason_INVALID_OR_UNKNOWN_PRODUCT = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_PRODUCT
MassActionRejectReason_INVALID_OR_UNKNOWN_CFI_CODE = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_CFI_CODE
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE
MassActionRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET
MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET_SEGMENT = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET_SEGMENT
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP
MassActionRejectReason_OTHER = cvar.MassActionRejectReason_OTHER
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
MassActionRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
MultilegModel_PREDEFINED_MULTILEG_SECURITY = cvar.MultilegModel_PREDEFINED_MULTILEG_SECURITY
MultilegModel_USER_DEFINED_MULTILEG_SECURITY = cvar.MultilegModel_USER_DEFINED_MULTILEG_SECURITY
MultilegModel_USER_DEFINED = cvar.MultilegModel_USER_DEFINED
MultilegPriceMethod_NET_PRICE = cvar.MultilegPriceMethod_NET_PRICE
MultilegPriceMethod_REVERSED_NET_PRICE = cvar.MultilegPriceMethod_REVERSED_NET_PRICE
MultilegPriceMethod_YIELD_DIFFERENCE = cvar.MultilegPriceMethod_YIELD_DIFFERENCE
MultilegPriceMethod_INDIVIDUAL = cvar.MultilegPriceMethod_INDIVIDUAL
MultilegPriceMethod_CONTRACT_WEIGHTED_AVERAGE_PRICE = cvar.MultilegPriceMethod_CONTRACT_WEIGHTED_AVERAGE_PRICE
MultilegPriceMethod_MULTIPLIED_PRICE = cvar.MultilegPriceMethod_MULTIPLIED_PRICE
ContingencyType_ONE_CANCELS_THE_OTHER = cvar.ContingencyType_ONE_CANCELS_THE_OTHER
ContingencyType_ONE_TRIGGERS_THE_OTHER = cvar.ContingencyType_ONE_TRIGGERS_THE_OTHER
ContingencyType_ONE_UPDATES_THE_OTHER_ABSOLUTE = cvar.ContingencyType_ONE_UPDATES_THE_OTHER_ABSOLUTE
ContingencyType_ONE_UPDATES_THE_OTHER_PROPORTIONAL = cvar.ContingencyType_ONE_UPDATES_THE_OTHER_PROPORTIONAL
ContingencyType_BID_AND_OFFER = cvar.ContingencyType_BID_AND_OFFER
ContingencyType_BID_AND_OFFER_OCO = cvar.ContingencyType_BID_AND_OFFER_OCO
ListRejectReason_BROKER_CREDIT = cvar.ListRejectReason_BROKER_CREDIT
ListRejectReason_EXCHANGE_CLOSED = cvar.ListRejectReason_EXCHANGE_CLOSED
ListRejectReason_TOO_LATE_TO_ENTER = cvar.ListRejectReason_TOO_LATE_TO_ENTER
ListRejectReason_UNKNOWN_ORDER = cvar.ListRejectReason_UNKNOWN_ORDER
ListRejectReason_DUPLICATE_ORDER = cvar.ListRejectReason_DUPLICATE_ORDER
ListRejectReason_UNSUPPORTED_ORDER_CHARACTERISTIC = cvar.ListRejectReason_UNSUPPORTED_ORDER_CHARACTERISTIC
ListRejectReason_OTHER = cvar.ListRejectReason_OTHER
TradePublishIndicator_DO_NOT_PUBLISH_TRADE = cvar.TradePublishIndicator_DO_NOT_PUBLISH_TRADE
TradePublishIndicator_PUBLISH_TRADE = cvar.TradePublishIndicator_PUBLISH_TRADE
TradePublishIndicator_DEFERRED_PUBLICATION = cvar.TradePublishIndicator_DEFERRED_PUBLICATION
TradePublishIndicator_PUBLISHED = cvar.TradePublishIndicator_PUBLISHED
ApplReqType_RETRANSMISSION = cvar.ApplReqType_RETRANSMISSION
ApplReqType_SUBSCRIPTION = cvar.ApplReqType_SUBSCRIPTION
ApplReqType_REQUEST_LAST_SEQ_NUM = cvar.ApplReqType_REQUEST_LAST_SEQ_NUM
ApplReqType_REQUEST_APPLICATIONS = cvar.ApplReqType_REQUEST_APPLICATIONS
ApplReqType_UNSUBSCRIBE = cvar.ApplReqType_UNSUBSCRIBE
ApplReqType_CANCEL_RETRANSMISSION = cvar.ApplReqType_CANCEL_RETRANSMISSION
ApplReqType_CANCEL_RETRANSMISSION_UNSUBSCRIBE = cvar.ApplReqType_CANCEL_RETRANSMISSION_UNSUBSCRIBE
ApplResponseType_REQUEST_SUCCESSFULLY_PROCESSED = cvar.ApplResponseType_REQUEST_SUCCESSFULLY_PROCESSED
ApplResponseType_APPLICATION_DOES_NOT_EXIST = cvar.ApplResponseType_APPLICATION_DOES_NOT_EXIST
ApplResponseType_MESSAGES_NOT_AVAILABLE = cvar.ApplResponseType_MESSAGES_NOT_AVAILABLE
ApplResponseError_APPLICATION_DOES_NOT_EXIST = cvar.ApplResponseError_APPLICATION_DOES_NOT_EXIST
ApplResponseError_MESSAGES_REQUESTED_ARE_NOT_AVAILABLE = cvar.ApplResponseError_MESSAGES_REQUESTED_ARE_NOT_AVAILABLE
ApplResponseError_USER_NOT_AUTHORIZED_FOR_APPLICATION = cvar.ApplResponseError_USER_NOT_AUTHORIZED_FOR_APPLICATION
ApplReportType_APPL_SEQ_NUM_RESET = cvar.ApplReportType_APPL_SEQ_NUM_RESET
ApplReportType_LAST_MESSAGE_SENT = cvar.ApplReportType_LAST_MESSAGE_SENT
ApplReportType_APPLICATION_ALIVE = cvar.ApplReportType_APPLICATION_ALIVE
ApplReportType_RESEND_COMPLETE = cvar.ApplReportType_RESEND_COMPLETE
HaltReasonInt_NEWS_DISSEMINATION = cvar.HaltReasonInt_NEWS_DISSEMINATION
HaltReasonInt_ORDER_INFLUX = cvar.HaltReasonInt_ORDER_INFLUX
HaltReasonInt_ORDER_IMBALANCE = cvar.HaltReasonInt_ORDER_IMBALANCE
HaltReasonInt_ADDITIONAL_INFORMATION = cvar.HaltReasonInt_ADDITIONAL_INFORMATION
HaltReasonInt_NEWS_PENDING = cvar.HaltReasonInt_NEWS_PENDING
HaltReasonInt_EQUIPMENT_CHANGEOVER = cvar.HaltReasonInt_EQUIPMENT_CHANGEOVER
ValuationMethod_PREMIUM_STYLE = cvar.ValuationMethod_PREMIUM_STYLE
ValuationMethod_FUTURES_STYLE_MARK_TO_MARKET = cvar.ValuationMethod_FUTURES_STYLE_MARK_TO_MARKET
ValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT = cvar.ValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT
ValuationMethod_CDS_STYLE_COLLATERALIZATION = cvar.ValuationMethod_CDS_STYLE_COLLATERALIZATION
ValuationMethod_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE = cvar.ValuationMethod_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE
OrderDelayUnit_SECONDS = cvar.OrderDelayUnit_SECONDS
OrderDelayUnit_TENTHS_OF_A_SECOND = cvar.OrderDelayUnit_TENTHS_OF_A_SECOND
OrderDelayUnit_HUNDREDTHS_OF_A_SECOND = cvar.OrderDelayUnit_HUNDREDTHS_OF_A_SECOND
OrderDelayUnit_MILLISECONDS = cvar.OrderDelayUnit_MILLISECONDS
OrderDelayUnit_MICROSECONDS = cvar.OrderDelayUnit_MICROSECONDS
OrderDelayUnit_NANOSECONDS = cvar.OrderDelayUnit_NANOSECONDS
OrderDelayUnit_MINUTES = cvar.OrderDelayUnit_MINUTES
OrderDelayUnit_HOURS = cvar.OrderDelayUnit_HOURS
OrderDelayUnit_DAYS = cvar.OrderDelayUnit_DAYS
OrderDelayUnit_WEEKS = cvar.OrderDelayUnit_WEEKS
OrderDelayUnit_MONTHS = cvar.OrderDelayUnit_MONTHS
OrderDelayUnit_YEARS = cvar.OrderDelayUnit_YEARS
VenueType_ELECTRONIC = cvar.VenueType_ELECTRONIC
VenueType_PIT = cvar.VenueType_PIT
VenueType_EX_PIT = cvar.VenueType_EX_PIT
VenueType_CLEARING_HOUSE = cvar.VenueType_CLEARING_HOUSE
VenueType_REGISTERED_MARKET = cvar.VenueType_REGISTERED_MARKET
VenueType_OFF_MARKET = cvar.VenueType_OFF_MARKET
VenueType_CENTRAL_LIMIT_ORDER_BOOK = cvar.VenueType_CENTRAL_LIMIT_ORDER_BOOK
VenueType_QUOTE_DRIVEN_MARKET = cvar.VenueType_QUOTE_DRIVEN_MARKET
VenueType_DARK_ORDER_BOOK = cvar.VenueType_DARK_ORDER_BOOK
VenueType_AUCTION_DRIVEN_MARKET = cvar.VenueType_AUCTION_DRIVEN_MARKET
VenueType_QUOTE_NEGOTIATION = cvar.VenueType_QUOTE_NEGOTIATION
VenueType_VOICE_NEGOTIATION = cvar.VenueType_VOICE_NEGOTIATION
VenueType_HYBRID_MARKET = cvar.VenueType_HYBRID_MARKET
VenueType_OTHER_MARKET = cvar.VenueType_OTHER_MARKET
RefOrdIDReason_GTC_FROM_PREVIOUS_DAY = cvar.RefOrdIDReason_GTC_FROM_PREVIOUS_DAY
RefOrdIDReason_PARTIAL_FILL_REMAINING = cvar.RefOrdIDReason_PARTIAL_FILL_REMAINING
RefOrdIDReason_ORDER_CHANGED = cvar.RefOrdIDReason_ORDER_CHANGED
OrigCustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = cvar.OrigCustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
OrigCustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = cvar.OrigCustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
OrigCustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER = cvar.OrigCustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
OrigCustOrderCapacity_ALL_OTHER = cvar.OrigCustOrderCapacity_ALL_OTHER
ModelType_UTILITY_PROVIDED_STANDARD_MODEL = cvar.ModelType_UTILITY_PROVIDED_STANDARD_MODEL
ModelType_PROPRIETARY_MODEL = cvar.ModelType_PROPRIETARY_MODEL
ContractMultiplierUnit_SHARES = cvar.ContractMultiplierUnit_SHARES
ContractMultiplierUnit_HOURS = cvar.ContractMultiplierUnit_HOURS
ContractMultiplierUnit_DAYS = cvar.ContractMultiplierUnit_DAYS
FlowScheduleType_NERC_EASTERN_OFF_PEAK = cvar.FlowScheduleType_NERC_EASTERN_OFF_PEAK
FlowScheduleType_NERC_WESTERN_OFF_PEAK = cvar.FlowScheduleType_NERC_WESTERN_OFF_PEAK
FlowScheduleType_NERC_CALENDAR_ALL_DAYS_IN_MONTH = cvar.FlowScheduleType_NERC_CALENDAR_ALL_DAYS_IN_MONTH
FlowScheduleType_NERC_EASTERN_PEAK = cvar.FlowScheduleType_NERC_EASTERN_PEAK
FlowScheduleType_NERC_WESTERN_PEAK = cvar.FlowScheduleType_NERC_WESTERN_PEAK
FlowScheduleType_ALL_TIMES = cvar.FlowScheduleType_ALL_TIMES
FlowScheduleType_ON_PEAK = cvar.FlowScheduleType_ON_PEAK
FlowScheduleType_OFF_PEAK = cvar.FlowScheduleType_OFF_PEAK
FlowScheduleType_BASE = cvar.FlowScheduleType_BASE
FlowScheduleType_BLOCK = cvar.FlowScheduleType_BLOCK
FlowScheduleType_OTHER = cvar.FlowScheduleType_OTHER
RateSource_BLOOMBERG = cvar.RateSource_BLOOMBERG
RateSource_REUTERS = cvar.RateSource_REUTERS
RateSource_TELERATE = cvar.RateSource_TELERATE
RateSource_ISDA_RATE_OPTION = cvar.RateSource_ISDA_RATE_OPTION
RateSource_OTHER = cvar.RateSource_OTHER
RateSourceType_PRIMARY = cvar.RateSourceType_PRIMARY
RateSourceType_SECONDARY = cvar.RateSourceType_SECONDARY
RestructuringType_FULL_RESTRUCTURING = cvar.RestructuringType_FULL_RESTRUCTURING
RestructuringType_MODIFIED_RESTRUCTURING = cvar.RestructuringType_MODIFIED_RESTRUCTURING
RestructuringType_MODIFIED_MOD_RESTRUCTURING = cvar.RestructuringType_MODIFIED_MOD_RESTRUCTURING
RestructuringType_NO_RESTRUCTURING_SPECIFIED = cvar.RestructuringType_NO_RESTRUCTURING_SPECIFIED
Seniority_SENIOR_SECURED = cvar.Seniority_SENIOR_SECURED
Seniority_SENIOR = cvar.Seniority_SENIOR
Seniority_SUBORDINATED = cvar.Seniority_SUBORDINATED
Seniority_JUNIOR = cvar.Seniority_JUNIOR
Seniority_MEZZANINE = cvar.Seniority_MEZZANINE
Seniority_SENIOR_NON_PREFERRED = cvar.Seniority_SENIOR_NON_PREFERRED
SecurityListType_INDUSTRY_CLASSIFICATION = cvar.SecurityListType_INDUSTRY_CLASSIFICATION
SecurityListType_TRADING_LIST = cvar.SecurityListType_TRADING_LIST
SecurityListType_MARKET = cvar.SecurityListType_MARKET
SecurityListType_NEWSPAPER_LIST = cvar.SecurityListType_NEWSPAPER_LIST
SecurityListTypeSource_ICB = cvar.SecurityListTypeSource_ICB
SecurityListTypeSource_NAICS = cvar.SecurityListTypeSource_NAICS
SecurityListTypeSource_GICS = cvar.SecurityListTypeSource_GICS
NewsCategory_COMPANY_NEWS = cvar.NewsCategory_COMPANY_NEWS
NewsCategory_MARKETPLACE_NEWS = cvar.NewsCategory_MARKETPLACE_NEWS
NewsCategory_FINANCIAL_MARKET_NEWS = cvar.NewsCategory_FINANCIAL_MARKET_NEWS
NewsCategory_TECHNICAL_NEWS = cvar.NewsCategory_TECHNICAL_NEWS
NewsCategory_OTHER_NEWS = cvar.NewsCategory_OTHER_NEWS
NewsRefType_REPLACEMENT = cvar.NewsRefType_REPLACEMENT
NewsRefType_OTHER_LANGUAGE = cvar.NewsRefType_OTHER_LANGUAGE
NewsRefType_COMPLIMENTARY = cvar.NewsRefType_COMPLIMENTARY
NewsRefType_WITHDRAWAL = cvar.NewsRefType_WITHDRAWAL
StrikePriceDeterminationMethod_FIXED_STRIKE = cvar.StrikePriceDeterminationMethod_FIXED_STRIKE
StrikePriceDeterminationMethod_STRIKE_SET_AT_EXPIRATION = cvar.StrikePriceDeterminationMethod_STRIKE_SET_AT_EXPIRATION
StrikePriceDeterminationMethod_STRIKE_SET_TO_AVERAGE_ACROSS_LIFE = cvar.StrikePriceDeterminationMethod_STRIKE_SET_TO_AVERAGE_ACROSS_LIFE
StrikePriceDeterminationMethod_STRIKE_SET_TO_OPTIMAL_VALUE = cvar.StrikePriceDeterminationMethod_STRIKE_SET_TO_OPTIMAL_VALUE
StrikePriceBoundaryMethod_LESS_THAN = cvar.StrikePriceBoundaryMethod_LESS_THAN
StrikePriceBoundaryMethod_LESS_THAN_OR_EQUAL = cvar.StrikePriceBoundaryMethod_LESS_THAN_OR_EQUAL
StrikePriceBoundaryMethod_EQUAL = cvar.StrikePriceBoundaryMethod_EQUAL
StrikePriceBoundaryMethod_GREATER_THAN_OR_EQUAL = cvar.StrikePriceBoundaryMethod_GREATER_THAN_OR_EQUAL
StrikePriceBoundaryMethod_GREATER_THAN = cvar.StrikePriceBoundaryMethod_GREATER_THAN
UnderlyingPriceDeterminationMethod_REGULAR = cvar.UnderlyingPriceDeterminationMethod_REGULAR
UnderlyingPriceDeterminationMethod_SPECIAL_REFERENCE = cvar.UnderlyingPriceDeterminationMethod_SPECIAL_REFERENCE
UnderlyingPriceDeterminationMethod_OPTIMAL_VALUE = cvar.UnderlyingPriceDeterminationMethod_OPTIMAL_VALUE
UnderlyingPriceDeterminationMethod_AVERAGE_VALUE = cvar.UnderlyingPriceDeterminationMethod_AVERAGE_VALUE
OptPayoutType_VANILLA = cvar.OptPayoutType_VANILLA
OptPayoutType_CAPPED = cvar.OptPayoutType_CAPPED
OptPayoutType_BINARY = cvar.OptPayoutType_BINARY
OptPayoutType_ASIAN = cvar.OptPayoutType_ASIAN
OptPayoutType_BARRIER = cvar.OptPayoutType_BARRIER
OptPayoutType_DIGITAL_BARRIER = cvar.OptPayoutType_DIGITAL_BARRIER
OptPayoutType_LOOKBACK = cvar.OptPayoutType_LOOKBACK
OptPayoutType_OTHER_PATH_DEPENDENT = cvar.OptPayoutType_OTHER_PATH_DEPENDENT
OptPayoutType_OTHER = cvar.OptPayoutType_OTHER
ComplexEventType_CAPPED = cvar.ComplexEventType_CAPPED
ComplexEventType_TRIGGER = cvar.ComplexEventType_TRIGGER
ComplexEventType_KNOCK_IN_UP = cvar.ComplexEventType_KNOCK_IN_UP
ComplexEventType_KNOCK_IN_DOWN = cvar.ComplexEventType_KNOCK_IN_DOWN
ComplexEventType_KNOCK_OUT_UP = cvar.ComplexEventType_KNOCK_OUT_UP
ComplexEventType_KNOCK_OUT_DOWN = cvar.ComplexEventType_KNOCK_OUT_DOWN
ComplexEventType_UNDERLYING = cvar.ComplexEventType_UNDERLYING
ComplexEventType_RESET_BARRIER = cvar.ComplexEventType_RESET_BARRIER
ComplexEventType_ROLLING_BARRIER = cvar.ComplexEventType_ROLLING_BARRIER
ComplexEventType_ONE_TOUCH = cvar.ComplexEventType_ONE_TOUCH
ComplexEventType_NO_TOUCH = cvar.ComplexEventType_NO_TOUCH
ComplexEventType_DBL_ONE_TOUCH = cvar.ComplexEventType_DBL_ONE_TOUCH
ComplexEventType_DBL_NO_TOUCH = cvar.ComplexEventType_DBL_NO_TOUCH
ComplexEventType_FX_COMPOSITE = cvar.ComplexEventType_FX_COMPOSITE
ComplexEventType_FX_QUANTO = cvar.ComplexEventType_FX_QUANTO
ComplexEventType_FX_CRSS_CCY = cvar.ComplexEventType_FX_CRSS_CCY
ComplexEventType_STRK_SPREAD = cvar.ComplexEventType_STRK_SPREAD
ComplexEventType_CLNDR_SPREAD = cvar.ComplexEventType_CLNDR_SPREAD
ComplexEventType_PX_OBSVTN = cvar.ComplexEventType_PX_OBSVTN
ComplexEventType_PASS_THROUGH = cvar.ComplexEventType_PASS_THROUGH
ComplexEventType_STRK_SCHED = cvar.ComplexEventType_STRK_SCHED
ComplexEventType_EQUITY_VALUATION = cvar.ComplexEventType_EQUITY_VALUATION
ComplexEventType_DIVIDEND_VALUATION = cvar.ComplexEventType_DIVIDEND_VALUATION
ComplexEventPriceBoundaryMethod_LESS_THAN_COMPLEX_EVENT_PRICE = cvar.ComplexEventPriceBoundaryMethod_LESS_THAN_COMPLEX_EVENT_PRICE
ComplexEventPriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE = cvar.ComplexEventPriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE
ComplexEventPriceBoundaryMethod_EQUAL_TO_COMPLEX_EVENT_PRICE = cvar.ComplexEventPriceBoundaryMethod_EQUAL_TO_COMPLEX_EVENT_PRICE
ComplexEventPriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE = cvar.ComplexEventPriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE
ComplexEventPriceBoundaryMethod_GREATER_THAN_COMPLEX_EVENT_PRICE = cvar.ComplexEventPriceBoundaryMethod_GREATER_THAN_COMPLEX_EVENT_PRICE
ComplexEventPriceTimeType_EXPIRATION = cvar.ComplexEventPriceTimeType_EXPIRATION
ComplexEventPriceTimeType_IMMEDIATE = cvar.ComplexEventPriceTimeType_IMMEDIATE
ComplexEventPriceTimeType_SPECIFIED_DATE = cvar.ComplexEventPriceTimeType_SPECIFIED_DATE
ComplexEventPriceTimeType_CLOSE = cvar.ComplexEventPriceTimeType_CLOSE
ComplexEventPriceTimeType_OPEN = cvar.ComplexEventPriceTimeType_OPEN
ComplexEventPriceTimeType_OFFICIAL_SETTL_PRICE = cvar.ComplexEventPriceTimeType_OFFICIAL_SETTL_PRICE
ComplexEventPriceTimeType_DERIVATIVES_CLOSE = cvar.ComplexEventPriceTimeType_DERIVATIVES_CLOSE
ComplexEventPriceTimeType_AS_SPECIFIED_MASTER_CONFIRMATION = cvar.ComplexEventPriceTimeType_AS_SPECIFIED_MASTER_CONFIRMATION
ComplexEventCondition_AND = cvar.ComplexEventCondition_AND
ComplexEventCondition_OR = cvar.ComplexEventCondition_OR
StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER = cvar.StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER
StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER = cvar.StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER
StreamAsgnRejReason_UNKNOWN_CLIENT = cvar.StreamAsgnRejReason_UNKNOWN_CLIENT
StreamAsgnRejReason_EXCEEDS_MAXIMUM_SIZE = cvar.StreamAsgnRejReason_EXCEEDS_MAXIMUM_SIZE
StreamAsgnRejReason_UNKNOWN_OR_INVALID_CURRENCY_PAIR = cvar.StreamAsgnRejReason_UNKNOWN_OR_INVALID_CURRENCY_PAIR
StreamAsgnRejReason_NO_AVAILABLE_STREAM = cvar.StreamAsgnRejReason_NO_AVAILABLE_STREAM
StreamAsgnRejReason_OTHER = cvar.StreamAsgnRejReason_OTHER
StreamAsgnAckType_ASSIGNMENT_ACCEPTED = cvar.StreamAsgnAckType_ASSIGNMENT_ACCEPTED
StreamAsgnAckType_ASSIGNMENT_REJECTED = cvar.StreamAsgnAckType_ASSIGNMENT_REJECTED
StreamAsgnType_ASSIGNMENT = cvar.StreamAsgnType_ASSIGNMENT
StreamAsgnType_REJECTED = cvar.StreamAsgnType_REJECTED
StreamAsgnType_TERMINATE = cvar.StreamAsgnType_TERMINATE
MatchInst_MATCH = cvar.MatchInst_MATCH
MatchInst_DO_NOT_MATCH = cvar.MatchInst_DO_NOT_MATCH
TriggerScope_THIS_ORDER = cvar.TriggerScope_THIS_ORDER
TriggerScope_OTHER_ORDER = cvar.TriggerScope_OTHER_ORDER
TriggerScope_ALL_OTHER_ORDERS_FOR_GIVEN_SECURITY = cvar.TriggerScope_ALL_OTHER_ORDERS_FOR_GIVEN_SECURITY
TriggerScope_ALL_OTHER_ORDERS_FOR_GIVEN_SECURITY_AND_PRICE = cvar.TriggerScope_ALL_OTHER_ORDERS_FOR_GIVEN_SECURITY_AND_PRICE
TriggerScope_ALL_OTHER_ORDERS_FOR_GIVEN_SECURITY_AND_SIDE = cvar.TriggerScope_ALL_OTHER_ORDERS_FOR_GIVEN_SECURITY_AND_SIDE
TriggerScope_ALL_OTHER_ORDERS_FOR_GIVEN_SECURITY_PRICE_AND_SIDE = cvar.TriggerScope_ALL_OTHER_ORDERS_FOR_GIVEN_SECURITY_PRICE_AND_SIDE
LimitAmtType_CREDIT_LIMIT = cvar.LimitAmtType_CREDIT_LIMIT
LimitAmtType_GROSS_POSITION_LIMIT = cvar.LimitAmtType_GROSS_POSITION_LIMIT
LimitAmtType_NET_POSITION_LIMIT = cvar.LimitAmtType_NET_POSITION_LIMIT
LimitAmtType_RISK_EXPOSURE_LIMIT = cvar.LimitAmtType_RISK_EXPOSURE_LIMIT
LimitAmtType_LONG_POSITION_LIMIT = cvar.LimitAmtType_LONG_POSITION_LIMIT
LimitAmtType_SHORT_POSITION_LIMIT = cvar.LimitAmtType_SHORT_POSITION_LIMIT
MarginReqmtInqQualifier_SUMMARY = cvar.MarginReqmtInqQualifier_SUMMARY
MarginReqmtInqQualifier_DETAIL = cvar.MarginReqmtInqQualifier_DETAIL
MarginReqmtInqQualifier_EXCESS_DEFICIT = cvar.MarginReqmtInqQualifier_EXCESS_DEFICIT
MarginReqmtInqQualifier_NET_POSITION = cvar.MarginReqmtInqQualifier_NET_POSITION
MarginReqmtRptType_SUMMARY = cvar.MarginReqmtRptType_SUMMARY
MarginReqmtRptType_DETAIL = cvar.MarginReqmtRptType_DETAIL
MarginReqmtRptType_EXCESS_DEFICIT = cvar.MarginReqmtRptType_EXCESS_DEFICIT
MarginReqmtInqResult_SUCCESSFUL = cvar.MarginReqmtInqResult_SUCCESSFUL
MarginReqmtInqResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.MarginReqmtInqResult_INVALID_OR_UNKNOWN_INSTRUMENT
MarginReqmtInqResult_INVALID_OR_UNKNOWN_MARGIN_CLASS = cvar.MarginReqmtInqResult_INVALID_OR_UNKNOWN_MARGIN_CLASS
MarginReqmtInqResult_INVALID_PARTIES = cvar.MarginReqmtInqResult_INVALID_PARTIES
MarginReqmtInqResult_INVALID_TRANSPORT_TYPE_REQ = cvar.MarginReqmtInqResult_INVALID_TRANSPORT_TYPE_REQ
MarginReqmtInqResult_INVALID_DESTINATION_REQ = cvar.MarginReqmtInqResult_INVALID_DESTINATION_REQ
MarginReqmtInqResult_NO_MARGIN_REQ_FOUND = cvar.MarginReqmtInqResult_NO_MARGIN_REQ_FOUND
MarginReqmtInqResult_MARGIN_REQ_INQUIRY_QUALIFIER_NOT_SUPPORTED = cvar.MarginReqmtInqResult_MARGIN_REQ_INQUIRY_QUALIFIER_NOT_SUPPORTED
MarginReqmtInqResult_UNAUTHORIZED_FOR_MARGIN_REQ_INQUIRY = cvar.MarginReqmtInqResult_UNAUTHORIZED_FOR_MARGIN_REQ_INQUIRY
MarginReqmtInqResult_OTHER = cvar.MarginReqmtInqResult_OTHER
MarginAmtType_ADDITIONAL_MARGIN = cvar.MarginAmtType_ADDITIONAL_MARGIN
MarginAmtType_ADJUSTED_MARGIN = cvar.MarginAmtType_ADJUSTED_MARGIN
MarginAmtType_UNADJUSTED_MARGIN = cvar.MarginAmtType_UNADJUSTED_MARGIN
MarginAmtType_BINARY_ADD_ON_AMOUNT = cvar.MarginAmtType_BINARY_ADD_ON_AMOUNT
MarginAmtType_CASH_BALANCE_AMOUNT = cvar.MarginAmtType_CASH_BALANCE_AMOUNT
MarginAmtType_CONCENTRATION_MARGIN = cvar.MarginAmtType_CONCENTRATION_MARGIN
MarginAmtType_CORE_MARGIN = cvar.MarginAmtType_CORE_MARGIN
MarginAmtType_DELIVERY_MARGIN = cvar.MarginAmtType_DELIVERY_MARGIN
MarginAmtType_DISCRETIONARY_MARGIN = cvar.MarginAmtType_DISCRETIONARY_MARGIN
MarginAmtType_FUTURES_SPREAD_MARGIN = cvar.MarginAmtType_FUTURES_SPREAD_MARGIN
MarginAmtType_INITIAL_MARGIN = cvar.MarginAmtType_INITIAL_MARGIN
MarginAmtType_LIQUIDATING_MARGIN = cvar.MarginAmtType_LIQUIDATING_MARGIN
MarginAmtType_MARGIN_CALL_AMOUNT = cvar.MarginAmtType_MARGIN_CALL_AMOUNT
MarginAmtType_MARGIN_DEFICIT_AMOUNT = cvar.MarginAmtType_MARGIN_DEFICIT_AMOUNT
MarginAmtType_MARGIN_EXCESS_AMOUNT = cvar.MarginAmtType_MARGIN_EXCESS_AMOUNT
MarginAmtType_OPTION_PREMIUM_AMOUNT = cvar.MarginAmtType_OPTION_PREMIUM_AMOUNT
MarginAmtType_PREMIUM_MARGIN = cvar.MarginAmtType_PREMIUM_MARGIN
MarginAmtType_RESERVE_MARGIN = cvar.MarginAmtType_RESERVE_MARGIN
MarginAmtType_SECURITY_COLLATERAL_AMOUNT = cvar.MarginAmtType_SECURITY_COLLATERAL_AMOUNT
MarginAmtType_STRESS_TEST_ADD_ON_AMOUNT = cvar.MarginAmtType_STRESS_TEST_ADD_ON_AMOUNT
MarginAmtType_SUPER_MARGIN = cvar.MarginAmtType_SUPER_MARGIN
MarginAmtType_TOTAL_MARGIN = cvar.MarginAmtType_TOTAL_MARGIN
MarginAmtType_VARIATION_MARGIN = cvar.MarginAmtType_VARIATION_MARGIN
MarginAmtType_SECONDARY_VARIATION_MARGIN = cvar.MarginAmtType_SECONDARY_VARIATION_MARGIN
MarginAmtType_ROLLED_UP_MARGIN_DEFICIT = cvar.MarginAmtType_ROLLED_UP_MARGIN_DEFICIT
MarginAmtType_SPREAD_RESPONSE_MARGIN = cvar.MarginAmtType_SPREAD_RESPONSE_MARGIN
MarginAmtType_SYSTEMIC_RISK_MARGIN = cvar.MarginAmtType_SYSTEMIC_RISK_MARGIN
MarginAmtType_CURVE_RISK_MARGIN = cvar.MarginAmtType_CURVE_RISK_MARGIN
MarginAmtType_INDEX_SPREAD_RISK_MARGIN = cvar.MarginAmtType_INDEX_SPREAD_RISK_MARGIN
MarginAmtType_SECTOR_RISK_MARGIN = cvar.MarginAmtType_SECTOR_RISK_MARGIN
MarginAmtType_JUMP_TO_DEFAULT_RISK_MARGIN = cvar.MarginAmtType_JUMP_TO_DEFAULT_RISK_MARGIN
MarginAmtType_BASIS_RISK_MARGIN = cvar.MarginAmtType_BASIS_RISK_MARGIN
MarginAmtType_INTEREST_RATE_RISK_MARGIN = cvar.MarginAmtType_INTEREST_RATE_RISK_MARGIN
MarginAmtType_JUMP_TO_HEALTH_RISK_MARGIN = cvar.MarginAmtType_JUMP_TO_HEALTH_RISK_MARGIN
MarginAmtType_OTHER_RISK_MARGIN = cvar.MarginAmtType_OTHER_RISK_MARGIN
RelatedInstrumentType_HEDGES_FOR_INSTRUMENT = cvar.RelatedInstrumentType_HEDGES_FOR_INSTRUMENT
RelatedInstrumentType_UNDERLIER = cvar.RelatedInstrumentType_UNDERLIER
RelatedInstrumentType_EQUITY_EQUIVALENT = cvar.RelatedInstrumentType_EQUITY_EQUIVALENT
RelatedInstrumentType_NEAREST_EXCHANGE_TRADED_CONTRACT = cvar.RelatedInstrumentType_NEAREST_EXCHANGE_TRADED_CONTRACT
RelatedInstrumentType_RETAIL_EQUIVALENT = cvar.RelatedInstrumentType_RETAIL_EQUIVALENT
RelatedInstrumentType_LEG = cvar.RelatedInstrumentType_LEG
MarketMakerActivity_NO_PARTICIPATION = cvar.MarketMakerActivity_NO_PARTICIPATION
MarketMakerActivity_BUY_PARTICIPATION = cvar.MarketMakerActivity_BUY_PARTICIPATION
MarketMakerActivity_SELL_PARTICIPATION = cvar.MarketMakerActivity_SELL_PARTICIPATION
MarketMakerActivity_BOTH_BUY_AND_SELL_PARTICIPATION = cvar.MarketMakerActivity_BOTH_BUY_AND_SELL_PARTICIPATION
RequestResult_VALID_REQUEST = cvar.RequestResult_VALID_REQUEST
RequestResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.RequestResult_INVALID_OR_UNSUPPORTED_REQUEST
RequestResult_NO_DATA_FOUND = cvar.RequestResult_NO_DATA_FOUND
RequestResult_NOT_AUTHORIZED = cvar.RequestResult_NOT_AUTHORIZED
RequestResult_DATA_TEMPORARILY_UNAVAILABLE = cvar.RequestResult_DATA_TEMPORARILY_UNAVAILABLE
RequestResult_REQUEST_FOR_DATA_NOT_SUPPORTED = cvar.RequestResult_REQUEST_FOR_DATA_NOT_SUPPORTED
RequestResult_OTHER = cvar.RequestResult_OTHER
PartyRelationship_IS_ALSO = cvar.PartyRelationship_IS_ALSO
PartyRelationship_CLEARS_FOR = cvar.PartyRelationship_CLEARS_FOR
PartyRelationship_CLEARS_THROUGH = cvar.PartyRelationship_CLEARS_THROUGH
PartyRelationship_TRADES_FOR = cvar.PartyRelationship_TRADES_FOR
PartyRelationship_TRADES_THROUGH = cvar.PartyRelationship_TRADES_THROUGH
PartyRelationship_SPONSORS = cvar.PartyRelationship_SPONSORS
PartyRelationship_SPONSORED_THROUGH = cvar.PartyRelationship_SPONSORED_THROUGH
PartyRelationship_PROVIDES_GUARANTEE_FOR = cvar.PartyRelationship_PROVIDES_GUARANTEE_FOR
PartyRelationship_IS_GUARANTEED_BY = cvar.PartyRelationship_IS_GUARANTEED_BY
PartyRelationship_MEMBER_OF = cvar.PartyRelationship_MEMBER_OF
PartyRelationship_HAS_MEMBERS = cvar.PartyRelationship_HAS_MEMBERS
PartyRelationship_PROVIDES_MARKETPLACE_FOR = cvar.PartyRelationship_PROVIDES_MARKETPLACE_FOR
PartyRelationship_PARTICIPANT_OF_MARKETPLACE = cvar.PartyRelationship_PARTICIPANT_OF_MARKETPLACE
PartyRelationship_CARRIES_POSITIONS_FOR = cvar.PartyRelationship_CARRIES_POSITIONS_FOR
PartyRelationship_POSTS_TRADES_TO = cvar.PartyRelationship_POSTS_TRADES_TO
PartyRelationship_ENTERS_TRADES_FOR = cvar.PartyRelationship_ENTERS_TRADES_FOR
PartyRelationship_ENTERS_TRADES_THROUGH = cvar.PartyRelationship_ENTERS_TRADES_THROUGH
PartyRelationship_PROVIDES_QUOTES_TO = cvar.PartyRelationship_PROVIDES_QUOTES_TO
PartyRelationship_REQUESTS_QUOTES_FROM = cvar.PartyRelationship_REQUESTS_QUOTES_FROM
PartyRelationship_INVESTS_FOR = cvar.PartyRelationship_INVESTS_FOR
PartyRelationship_INVESTS_THROUGH = cvar.PartyRelationship_INVESTS_THROUGH
PartyRelationship_BROKERS_TRADES_FOR = cvar.PartyRelationship_BROKERS_TRADES_FOR
PartyRelationship_BROKERS_TRADES_THROUGH = cvar.PartyRelationship_BROKERS_TRADES_THROUGH
PartyRelationship_PROVIDES_TRADING_SERVICES_FOR = cvar.PartyRelationship_PROVIDES_TRADING_SERVICES_FOR
PartyRelationship_USES_TRADING_SERVICES_OF = cvar.PartyRelationship_USES_TRADING_SERVICES_OF
PartyRelationship_APPROVES_OF = cvar.PartyRelationship_APPROVES_OF
PartyRelationship_APPROVED_BY = cvar.PartyRelationship_APPROVED_BY
PartyRelationship_PARENT_FIRM_FOR = cvar.PartyRelationship_PARENT_FIRM_FOR
PartyRelationship_SUBSIDIARY_OF = cvar.PartyRelationship_SUBSIDIARY_OF
PartyRelationship_REGULATORY_OWNER_OF = cvar.PartyRelationship_REGULATORY_OWNER_OF
PartyRelationship_OWNED_BY_REGULATORY = cvar.PartyRelationship_OWNED_BY_REGULATORY
PartyRelationship_CONTROLS = cvar.PartyRelationship_CONTROLS
PartyRelationship_IS_CONTROLLED_BY = cvar.PartyRelationship_IS_CONTROLLED_BY
PartyRelationship_LEGAL_OWNER_OF = cvar.PartyRelationship_LEGAL_OWNER_OF
PartyRelationship_OWNED_BY_LEGAL = cvar.PartyRelationship_OWNED_BY_LEGAL
PartyRelationship_BENEFICIAL_OWNER_OF = cvar.PartyRelationship_BENEFICIAL_OWNER_OF
PartyRelationship_OWNED_BY_BENEFICIAL = cvar.PartyRelationship_OWNED_BY_BENEFICIAL
PartyRelationship_SETTLES_FOR = cvar.PartyRelationship_SETTLES_FOR
PartyRelationship_SETTLES_THROUGH = cvar.PartyRelationship_SETTLES_THROUGH
RiskLimitType_CREDIT_LIMIT = cvar.RiskLimitType_CREDIT_LIMIT
RiskLimitType_GROSS_LIMIT = cvar.RiskLimitType_GROSS_LIMIT
RiskLimitType_NET_LIMIT = cvar.RiskLimitType_NET_LIMIT
RiskLimitType_EXPOSURE = cvar.RiskLimitType_EXPOSURE
RiskLimitType_LONG_LIMIT = cvar.RiskLimitType_LONG_LIMIT
RiskLimitType_SHORT_LIMIT = cvar.RiskLimitType_SHORT_LIMIT
RiskLimitType_CASH_MARGIN = cvar.RiskLimitType_CASH_MARGIN
RiskLimitType_ADDITIONAL_MARGIN = cvar.RiskLimitType_ADDITIONAL_MARGIN
RiskLimitType_TOTAL_MARGIN = cvar.RiskLimitType_TOTAL_MARGIN
RiskLimitType_LIMIT_CONSUMED = cvar.RiskLimitType_LIMIT_CONSUMED
RiskLimitType_CLIP_SIZE = cvar.RiskLimitType_CLIP_SIZE
RiskLimitType_MAX_NOTIONAL_ORDER_SIZE = cvar.RiskLimitType_MAX_NOTIONAL_ORDER_SIZE
RiskLimitType_DV01_PV01_LIMIT = cvar.RiskLimitType_DV01_PV01_LIMIT
RiskLimitType_CS01_LIMIT = cvar.RiskLimitType_CS01_LIMIT
RiskLimitType_VOLUME_LIMIT_PER_TIME_PERIOD = cvar.RiskLimitType_VOLUME_LIMIT_PER_TIME_PERIOD
RiskLimitType_VOL_FILLED_PCT_ORD_VOL_TM_PERIOD = cvar.RiskLimitType_VOL_FILLED_PCT_ORD_VOL_TM_PERIOD
RiskLimitType_NOTL_FILLED_PCT_NOTL_TM_PERIOD = cvar.RiskLimitType_NOTL_FILLED_PCT_NOTL_TM_PERIOD
RiskLimitType_TRANSACTION_EXECUTION_LIMIT_PER_TIME_PERIOD = cvar.RiskLimitType_TRANSACTION_EXECUTION_LIMIT_PER_TIME_PERIOD
InstrumentScopeOperator_INCLUDE = cvar.InstrumentScopeOperator_INCLUDE
InstrumentScopeOperator_EXCLUDE = cvar.InstrumentScopeOperator_EXCLUDE
PartyDetailStatus_ACTIVE = cvar.PartyDetailStatus_ACTIVE
PartyDetailStatus_SUSPENDED = cvar.PartyDetailStatus_SUSPENDED
PartyDetailStatus_HALTED = cvar.PartyDetailStatus_HALTED
PartyDetailRoleQualifier_FIRM_OR_LEGAL_ENTITY = cvar.PartyDetailRoleQualifier_FIRM_OR_LEGAL_ENTITY
PartyDetailRoleQualifier_CURRENT = cvar.PartyDetailRoleQualifier_CURRENT
PartyDetailRoleQualifier_NEW = cvar.PartyDetailRoleQualifier_NEW
PartyDetailRoleQualifier_NATURAL_PERSON = cvar.PartyDetailRoleQualifier_NATURAL_PERSON
PartyDetailRoleQualifier_AGENCY = cvar.PartyDetailRoleQualifier_AGENCY
PartyDetailRoleQualifier_PRINCIPAL = cvar.PartyDetailRoleQualifier_PRINCIPAL
PartyDetailRoleQualifier_RISKLESS_PRINCIPAL = cvar.PartyDetailRoleQualifier_RISKLESS_PRINCIPAL
PartyDetailRoleQualifier_EXCHANGE_ORDER_SUBMITTER = cvar.PartyDetailRoleQualifier_EXCHANGE_ORDER_SUBMITTER
PartyDetailRoleQualifier_PRIMARY_TRD_REPOSITORY = cvar.PartyDetailRoleQualifier_PRIMARY_TRD_REPOSITORY
PartyDetailRoleQualifier_ORIG_TRD_REPOSITORY = cvar.PartyDetailRoleQualifier_ORIG_TRD_REPOSITORY
PartyDetailRoleQualifier_ADDTNL_INTL_TRD_REPOSITORY = cvar.PartyDetailRoleQualifier_ADDTNL_INTL_TRD_REPOSITORY
PartyDetailRoleQualifier_ADDTNL_DOMESTIC_TRD_REPOSITORY = cvar.PartyDetailRoleQualifier_ADDTNL_DOMESTIC_TRD_REPOSITORY
PartyDetailRoleQualifier_REGULAR_TRADER = cvar.PartyDetailRoleQualifier_REGULAR_TRADER
PartyDetailRoleQualifier_HEAD_TRADER = cvar.PartyDetailRoleQualifier_HEAD_TRADER
PartyDetailRoleQualifier_SUPERVISOR = cvar.PartyDetailRoleQualifier_SUPERVISOR
PartyDetailRoleQualifier_ALGORITHM = cvar.PartyDetailRoleQualifier_ALGORITHM
PartyDetailRoleQualifier_RELATED_EXCHANGE = cvar.PartyDetailRoleQualifier_RELATED_EXCHANGE
PartyDetailRoleQualifier_OPTIONS_EXCHANGE = cvar.PartyDetailRoleQualifier_OPTIONS_EXCHANGE
PartyDetailRoleQualifier_SPECIFIED_EXCHANGE = cvar.PartyDetailRoleQualifier_SPECIFIED_EXCHANGE
PartyDetailRoleQualifier_CONSTITUENT_EXCHANGE = cvar.PartyDetailRoleQualifier_CONSTITUENT_EXCHANGE
PartyDetailRoleQualifier_BANK = cvar.PartyDetailRoleQualifier_BANK
PartyDetailRoleQualifier_HUB = cvar.PartyDetailRoleQualifier_HUB
PartyDetailRoleQualifier_TRI_PARTY = cvar.PartyDetailRoleQualifier_TRI_PARTY
PartyDetailRoleQualifier_LENDER = cvar.PartyDetailRoleQualifier_LENDER
PartyDetailRoleQualifier_GENERAL_CLEARING_MEMBER = cvar.PartyDetailRoleQualifier_GENERAL_CLEARING_MEMBER
PartyDetailRoleQualifier_INDIVIDUAL_CLEARING_MEMBER = cvar.PartyDetailRoleQualifier_INDIVIDUAL_CLEARING_MEMBER
PartyDetailRoleQualifier_PREFERRED_MARKET_MAKER = cvar.PartyDetailRoleQualifier_PREFERRED_MARKET_MAKER
PartyDetailRoleQualifier_DIRECTED_MARKET_MAKER = cvar.PartyDetailRoleQualifier_DIRECTED_MARKET_MAKER
PartyDetailRoleQualifier_DESIGNATED_SPONSOR = cvar.PartyDetailRoleQualifier_DESIGNATED_SPONSOR
PartyDetailRoleQualifier_SPECIALIST = cvar.PartyDetailRoleQualifier_SPECIALIST
PartyDetailRoleQualifier_EXEMPT_FROM_TRADE_REPORTING = cvar.PartyDetailRoleQualifier_EXEMPT_FROM_TRADE_REPORTING
TrdAckStatus_ACCEPTED = cvar.TrdAckStatus_ACCEPTED
TrdAckStatus_REJECTED = cvar.TrdAckStatus_REJECTED
TrdAckStatus_RECEIVED = cvar.TrdAckStatus_RECEIVED
SecurityClassificationReason_FEE = cvar.SecurityClassificationReason_FEE
SecurityClassificationReason_CREDIT_CONTROLS = cvar.SecurityClassificationReason_CREDIT_CONTROLS
SecurityClassificationReason_MARGIN = cvar.SecurityClassificationReason_MARGIN
SecurityClassificationReason_ENTITLEMENT_OR_ELIGIBILITY = cvar.SecurityClassificationReason_ENTITLEMENT_OR_ELIGIBILITY
SecurityClassificationReason_MARKET_DATA = cvar.SecurityClassificationReason_MARKET_DATA
SecurityClassificationReason_ACCOUNT_SELECTION = cvar.SecurityClassificationReason_ACCOUNT_SELECTION
SecurityClassificationReason_DELIVERY_PROCESS = cvar.SecurityClassificationReason_DELIVERY_PROCESS
SecurityClassificationReason_SECTOR = cvar.SecurityClassificationReason_SECTOR
PosAmtReason_OPTIONS_SETTLEMENT = cvar.PosAmtReason_OPTIONS_SETTLEMENT
PosAmtReason_PENDING_EROSION_ADJUSTMENT = cvar.PosAmtReason_PENDING_EROSION_ADJUSTMENT
PosAmtReason_FINAL_EROSION_ADJUSTMENT = cvar.PosAmtReason_FINAL_EROSION_ADJUSTMENT
PosAmtReason_TEAR_UP_COUPON_AMOUNT = cvar.PosAmtReason_TEAR_UP_COUPON_AMOUNT
PosAmtReason_PRICE_ALIGNMENT_INTEREST = cvar.PosAmtReason_PRICE_ALIGNMENT_INTEREST
PosAmtReason_DELIVERY_INVOICE_CHARGES = cvar.PosAmtReason_DELIVERY_INVOICE_CHARGES
PosAmtReason_DELIVERY_STORAGE_CHARGES = cvar.PosAmtReason_DELIVERY_STORAGE_CHARGES
SideClearingTradePriceType_TRADE_CLEARING_AT_EXECUTION_PRICE = cvar.SideClearingTradePriceType_TRADE_CLEARING_AT_EXECUTION_PRICE
SideClearingTradePriceType_TRADE_CLEARING_AT_ALTERNATE_CLEARING_PRICE = cvar.SideClearingTradePriceType_TRADE_CLEARING_AT_ALTERNATE_CLEARING_PRICE
SecurityRejectReason_INVALID_INSTRUMENT_REQUESTED = cvar.SecurityRejectReason_INVALID_INSTRUMENT_REQUESTED
SecurityRejectReason_INSTRUMENT_ALREADY_EXISTS = cvar.SecurityRejectReason_INSTRUMENT_ALREADY_EXISTS
SecurityRejectReason_REQUEST_TYPE_NOT_SUPPORTED = cvar.SecurityRejectReason_REQUEST_TYPE_NOT_SUPPORTED
SecurityRejectReason_SYSTEM_UNAVAILABLE_FOR_INSTRUMENT_CREATION = cvar.SecurityRejectReason_SYSTEM_UNAVAILABLE_FOR_INSTRUMENT_CREATION
SecurityRejectReason_INELIGIBLE_INSTRUMENT_GROUP = cvar.SecurityRejectReason_INELIGIBLE_INSTRUMENT_GROUP
SecurityRejectReason_INSTRUMENT_ID_UNAVAILABLE = cvar.SecurityRejectReason_INSTRUMENT_ID_UNAVAILABLE
SecurityRejectReason_INVALID_OR_MISSING_DATA_ON_OPTION_LEG = cvar.SecurityRejectReason_INVALID_OR_MISSING_DATA_ON_OPTION_LEG
SecurityRejectReason_INVALID_OR_MISSING_DATA_ON_FUTURE_LEG = cvar.SecurityRejectReason_INVALID_OR_MISSING_DATA_ON_FUTURE_LEG
SecurityRejectReason_INVALID_OR_MISSING_DATA_ON_FX_LEG = cvar.SecurityRejectReason_INVALID_OR_MISSING_DATA_ON_FX_LEG
SecurityRejectReason_INVALID_LEG_PRICE_SPECIFIED = cvar.SecurityRejectReason_INVALID_LEG_PRICE_SPECIFIED
SecurityRejectReason_INVALID_INSTRUMENT_STRUCTURE_SPECIFIED = cvar.SecurityRejectReason_INVALID_INSTRUMENT_STRUCTURE_SPECIFIED
ThrottleStatus_THROTTLE_LIMIT_NOT_EXCEEDED_NOT_QUEUED = cvar.ThrottleStatus_THROTTLE_LIMIT_NOT_EXCEEDED_NOT_QUEUED
ThrottleStatus_QUEUED_DUE_TO_THROTTLE_LIMIT_EXCEEDED = cvar.ThrottleStatus_QUEUED_DUE_TO_THROTTLE_LIMIT_EXCEEDED
ThrottleAction_QUEUE_INBOUND = cvar.ThrottleAction_QUEUE_INBOUND
ThrottleAction_QUEUE_OUTBOUND = cvar.ThrottleAction_QUEUE_OUTBOUND
ThrottleAction_REJECT = cvar.ThrottleAction_REJECT
ThrottleAction_DISCONNECT = cvar.ThrottleAction_DISCONNECT
ThrottleAction_WARNING = cvar.ThrottleAction_WARNING
ThrottleType_INBOUND_RATE = cvar.ThrottleType_INBOUND_RATE
ThrottleType_OUTSTANDING_REQUESTS = cvar.ThrottleType_OUTSTANDING_REQUESTS
ThrottleInst_REJECT_IF_THROTTLE_LIMIT_EXCEEDED = cvar.ThrottleInst_REJECT_IF_THROTTLE_LIMIT_EXCEEDED
ThrottleInst_QUEUE_IF_THROTTLE_LIMIT_EXCEEDED = cvar.ThrottleInst_QUEUE_IF_THROTTLE_LIMIT_EXCEEDED
ThrottleCountIndicator_OUTSTANDING_REQUESTS_UNCHANGED = cvar.ThrottleCountIndicator_OUTSTANDING_REQUESTS_UNCHANGED
ThrottleCountIndicator_OUTSTANDING_REQUESTS_DECREASED = cvar.ThrottleCountIndicator_OUTSTANDING_REQUESTS_DECREASED
AllocationRollupInstruction_ROLLUP = cvar.AllocationRollupInstruction_ROLLUP
AllocationRollupInstruction_DO_NOT_ROLL_UP = cvar.AllocationRollupInstruction_DO_NOT_ROLL_UP
AllocReversalStatus_COMPLETED = cvar.AllocReversalStatus_COMPLETED
AllocReversalStatus_REFUSED = cvar.AllocReversalStatus_REFUSED
AllocReversalStatus_CANCELLED = cvar.AllocReversalStatus_CANCELLED
ObligationType_BOND = cvar.ObligationType_BOND
ObligationType_CONVERT_BOND = cvar.ObligationType_CONVERT_BOND
ObligationType_MORTGAGE = cvar.ObligationType_MORTGAGE
ObligationType_LOAN = cvar.ObligationType_LOAN
TradePriceNegotiationMethod_PERCENT_PAR = cvar.TradePriceNegotiationMethod_PERCENT_PAR
TradePriceNegotiationMethod_DEAL_SPREAD = cvar.TradePriceNegotiationMethod_DEAL_SPREAD
TradePriceNegotiationMethod_UPFRONT_PNTS = cvar.TradePriceNegotiationMethod_UPFRONT_PNTS
TradePriceNegotiationMethod_UPFRONT_AMT = cvar.TradePriceNegotiationMethod_UPFRONT_AMT
TradePriceNegotiationMethod_PAR_UPFRONT_AMT = cvar.TradePriceNegotiationMethod_PAR_UPFRONT_AMT
TradePriceNegotiationMethod_SPREAD_UPFRONT_AMT = cvar.TradePriceNegotiationMethod_SPREAD_UPFRONT_AMT
TradePriceNegotiationMethod_UPFRONT_PNTS_AMT = cvar.TradePriceNegotiationMethod_UPFRONT_PNTS_AMT
UpfrontPriceType_PERCENTAGE = cvar.UpfrontPriceType_PERCENTAGE
UpfrontPriceType_FIXED_AMOUNT = cvar.UpfrontPriceType_FIXED_AMOUNT
ShortSaleRestriction_NO_RESTRICTIONS = cvar.ShortSaleRestriction_NO_RESTRICTIONS
ShortSaleRestriction_SECURITY_NOT_SHORTABLE = cvar.ShortSaleRestriction_SECURITY_NOT_SHORTABLE
ShortSaleRestriction_SECURITY_NOT_SHORTABLE_AT_OR_BELOW_BEST_BID = cvar.ShortSaleRestriction_SECURITY_NOT_SHORTABLE_AT_OR_BELOW_BEST_BID
ShortSaleRestriction_SECURITY_NOT_SHORTABLE_WITHOUT_PRE_BORROW = cvar.ShortSaleRestriction_SECURITY_NOT_SHORTABLE_WITHOUT_PRE_BORROW
ShortSaleExemptionReason_EXEMPTION_REASON_UNKNOWN = cvar.ShortSaleExemptionReason_EXEMPTION_REASON_UNKNOWN
ShortSaleExemptionReason_INCOMING_SSE = cvar.ShortSaleExemptionReason_INCOMING_SSE
ShortSaleExemptionReason_ABOVE_NATIONAL_BEST_BID = cvar.ShortSaleExemptionReason_ABOVE_NATIONAL_BEST_BID
ShortSaleExemptionReason_DELAYED_DELIVERY = cvar.ShortSaleExemptionReason_DELAYED_DELIVERY
ShortSaleExemptionReason_ODD_LOT = cvar.ShortSaleExemptionReason_ODD_LOT
ShortSaleExemptionReason_DOMESTIC_ARBITRAGE = cvar.ShortSaleExemptionReason_DOMESTIC_ARBITRAGE
ShortSaleExemptionReason_INTERNATIONAL_ARBITRAGE = cvar.ShortSaleExemptionReason_INTERNATIONAL_ARBITRAGE
ShortSaleExemptionReason_UNDERWRITER_OR_SYNDICATE_DISTRIBUTION = cvar.ShortSaleExemptionReason_UNDERWRITER_OR_SYNDICATE_DISTRIBUTION
ShortSaleExemptionReason_RISKLESS_PRINCIPAL = cvar.ShortSaleExemptionReason_RISKLESS_PRINCIPAL
ShortSaleExemptionReason_VWAP = cvar.ShortSaleExemptionReason_VWAP
ApplLevelRecoveryIndicator_NO_APPL_RECOVERY_NEEDED = cvar.ApplLevelRecoveryIndicator_NO_APPL_RECOVERY_NEEDED
ApplLevelRecoveryIndicator_APPL_RECOVERY_NEEDED = cvar.ApplLevelRecoveryIndicator_APPL_RECOVERY_NEEDED
RiskLimitRequestType_DEFINITIONS = cvar.RiskLimitRequestType_DEFINITIONS
RiskLimitRequestType_UTILIZATION = cvar.RiskLimitRequestType_UTILIZATION
RiskLimitRequestType_DEFINITIONS_AND_UTILIZATIONS = cvar.RiskLimitRequestType_DEFINITIONS_AND_UTILIZATIONS
RiskLimitRequestResult_SUCCESSFUL = cvar.RiskLimitRequestResult_SUCCESSFUL
RiskLimitRequestResult_INVALID_PARTY = cvar.RiskLimitRequestResult_INVALID_PARTY
RiskLimitRequestResult_INVALID_RELATED_PARTY = cvar.RiskLimitRequestResult_INVALID_RELATED_PARTY
RiskLimitRequestResult_INVALID_RISK_LIMIT_TYPE = cvar.RiskLimitRequestResult_INVALID_RISK_LIMIT_TYPE
RiskLimitRequestResult_INVALID_RISK_LIMIT_ID = cvar.RiskLimitRequestResult_INVALID_RISK_LIMIT_ID
RiskLimitRequestResult_INVALID_RISK_LIMIT_AMOUNT = cvar.RiskLimitRequestResult_INVALID_RISK_LIMIT_AMOUNT
RiskLimitRequestResult_INVALID_RISK_WARNING_LEVEL_ACTION = cvar.RiskLimitRequestResult_INVALID_RISK_WARNING_LEVEL_ACTION
RiskLimitRequestResult_INVALID_RISK_INSTRUMENT_SCOPE = cvar.RiskLimitRequestResult_INVALID_RISK_INSTRUMENT_SCOPE
RiskLimitRequestResult_RISK_LIMIT_ACTIONS_NOT_SUPPORTED = cvar.RiskLimitRequestResult_RISK_LIMIT_ACTIONS_NOT_SUPPORTED
RiskLimitRequestResult_WARNING_LEVELS_NOT_SUPPORTED = cvar.RiskLimitRequestResult_WARNING_LEVELS_NOT_SUPPORTED
RiskLimitRequestResult_WARNING_LEVEL_ACTIONS_NOT_SUPPORTED = cvar.RiskLimitRequestResult_WARNING_LEVEL_ACTIONS_NOT_SUPPORTED
RiskLimitRequestResult_RISK_INSTRUMENT_SCOPE_NOT_SUPPORTED = cvar.RiskLimitRequestResult_RISK_INSTRUMENT_SCOPE_NOT_SUPPORTED
RiskLimitRequestResult_RISK_LIMIT_NOT_APPROVED_FOR_PARTY = cvar.RiskLimitRequestResult_RISK_LIMIT_NOT_APPROVED_FOR_PARTY
RiskLimitRequestResult_RISK_LIMIT_ALREADY_DEFINED_FOR_PARTY = cvar.RiskLimitRequestResult_RISK_LIMIT_ALREADY_DEFINED_FOR_PARTY
RiskLimitRequestResult_INSTRUMENT_NOT_APPROVED_FOR_PARTY = cvar.RiskLimitRequestResult_INSTRUMENT_NOT_APPROVED_FOR_PARTY
RiskLimitRequestResult_NOT_AUTHORIZED = cvar.RiskLimitRequestResult_NOT_AUTHORIZED
RiskLimitRequestResult_OTHER = cvar.RiskLimitRequestResult_OTHER
RiskLimitAction_QUEUE_INBOUND = cvar.RiskLimitAction_QUEUE_INBOUND
RiskLimitAction_QUEUE_OUTBOUND = cvar.RiskLimitAction_QUEUE_OUTBOUND
RiskLimitAction_REJECT = cvar.RiskLimitAction_REJECT
RiskLimitAction_DISCONNECT = cvar.RiskLimitAction_DISCONNECT
RiskLimitAction_WARNING = cvar.RiskLimitAction_WARNING
RiskLimitAction_PING_CREDIT_CHECK_WITH_REVALIDATION = cvar.RiskLimitAction_PING_CREDIT_CHECK_WITH_REVALIDATION
RiskLimitAction_PING_CREDIT_CHECK_NO_REVALIDATION = cvar.RiskLimitAction_PING_CREDIT_CHECK_NO_REVALIDATION
RiskLimitAction_PUSH_CREDIT_CHECK_WITH_REVALIDATION = cvar.RiskLimitAction_PUSH_CREDIT_CHECK_WITH_REVALIDATION
RiskLimitAction_PUSH_CREDIT_CHECK_NO_REVALIDATION = cvar.RiskLimitAction_PUSH_CREDIT_CHECK_NO_REVALIDATION
RiskLimitAction_SUSPEND = cvar.RiskLimitAction_SUSPEND
RiskLimitAction_HALT_TRADING = cvar.RiskLimitAction_HALT_TRADING
EntitlementType_TRADE = cvar.EntitlementType_TRADE
EntitlementType_MAKE_MARKETS = cvar.EntitlementType_MAKE_MARKETS
EntitlementType_HOLD_POSITIONS = cvar.EntitlementType_HOLD_POSITIONS
EntitlementType_PERFORM_GIVE_UPS = cvar.EntitlementType_PERFORM_GIVE_UPS
EntitlementType_SUBMIT_IO_IS = cvar.EntitlementType_SUBMIT_IO_IS
EntitlementType_SUBSCRIBE_MARKET_DATA = cvar.EntitlementType_SUBSCRIBE_MARKET_DATA
EntitlementType_SHORT_WITH_PRE_BORROW = cvar.EntitlementType_SHORT_WITH_PRE_BORROW
EntitlementType_SUBMIT_QUOTE_REQUESTS = cvar.EntitlementType_SUBMIT_QUOTE_REQUESTS
EntitlementType_RESPOND_TO_QUOTE_REQUESTS = cvar.EntitlementType_RESPOND_TO_QUOTE_REQUESTS
EntitlementAttribDatatype_TENOR = cvar.EntitlementAttribDatatype_TENOR
EntitlementAttribDatatype_PATTERN = cvar.EntitlementAttribDatatype_PATTERN
EntitlementAttribDatatype_RESERVED100_PLUS = cvar.EntitlementAttribDatatype_RESERVED100_PLUS
EntitlementAttribDatatype_RESERVED1000_PLUS = cvar.EntitlementAttribDatatype_RESERVED1000_PLUS
EntitlementAttribDatatype_RESERVED4000_PLUS = cvar.EntitlementAttribDatatype_RESERVED4000_PLUS
EntitlementAttribDatatype_STRING = cvar.EntitlementAttribDatatype_STRING
EntitlementAttribDatatype_MULTIPLE_CHAR_VALUE = cvar.EntitlementAttribDatatype_MULTIPLE_CHAR_VALUE
EntitlementAttribDatatype_CURRENCY = cvar.EntitlementAttribDatatype_CURRENCY
EntitlementAttribDatatype_EXCHANGE = cvar.EntitlementAttribDatatype_EXCHANGE
EntitlementAttribDatatype_MONTH_YEAR = cvar.EntitlementAttribDatatype_MONTH_YEAR
EntitlementAttribDatatype_UTC_TIMESTAMP = cvar.EntitlementAttribDatatype_UTC_TIMESTAMP
EntitlementAttribDatatype_UTC_TIME_ONLY = cvar.EntitlementAttribDatatype_UTC_TIME_ONLY
EntitlementAttribDatatype_LOCAL_MKT_DATE = cvar.EntitlementAttribDatatype_LOCAL_MKT_DATE
EntitlementAttribDatatype_UTC_DATE_ONLY = cvar.EntitlementAttribDatatype_UTC_DATE_ONLY
EntitlementAttribDatatype_DATA = cvar.EntitlementAttribDatatype_DATA
EntitlementAttribDatatype_MULTIPLE_STRING_VALUE = cvar.EntitlementAttribDatatype_MULTIPLE_STRING_VALUE
EntitlementAttribDatatype_COUNTRY = cvar.EntitlementAttribDatatype_COUNTRY
EntitlementAttribDatatype_LANGUAGE = cvar.EntitlementAttribDatatype_LANGUAGE
EntitlementAttribDatatype_TZ_TIME_ONLY = cvar.EntitlementAttribDatatype_TZ_TIME_ONLY
EntitlementAttribDatatype_TZ_TIMESTAMP = cvar.EntitlementAttribDatatype_TZ_TIMESTAMP
EntitlementAttribDatatype_XML_DATA = cvar.EntitlementAttribDatatype_XML_DATA
EntitlementAttribDatatype_CHAR = cvar.EntitlementAttribDatatype_CHAR
EntitlementAttribDatatype_BOOLEAN = cvar.EntitlementAttribDatatype_BOOLEAN
EntitlementAttribDatatype_FLOAT = cvar.EntitlementAttribDatatype_FLOAT
EntitlementAttribDatatype_QTY = cvar.EntitlementAttribDatatype_QTY
EntitlementAttribDatatype_PRICE = cvar.EntitlementAttribDatatype_PRICE
EntitlementAttribDatatype_PRICE_OFFSET = cvar.EntitlementAttribDatatype_PRICE_OFFSET
EntitlementAttribDatatype_AMT = cvar.EntitlementAttribDatatype_AMT
EntitlementAttribDatatype_PERCENTAGE = cvar.EntitlementAttribDatatype_PERCENTAGE
EntitlementAttribDatatype_INT = cvar.EntitlementAttribDatatype_INT
EntitlementAttribDatatype_LENGTH = cvar.EntitlementAttribDatatype_LENGTH
EntitlementAttribDatatype_NUM_IN_GROUP = cvar.EntitlementAttribDatatype_NUM_IN_GROUP
EntitlementAttribDatatype_SEQ_NUM = cvar.EntitlementAttribDatatype_SEQ_NUM
EntitlementAttribDatatype_TAG_NUM = cvar.EntitlementAttribDatatype_TAG_NUM
EntitlementAttribDatatype_DAY_OF_MONTH = cvar.EntitlementAttribDatatype_DAY_OF_MONTH
TradSesControl_AUTOMATIC = cvar.TradSesControl_AUTOMATIC
TradSesControl_MANUAL = cvar.TradSesControl_MANUAL
TradeVolType_NUMBER_OF_UNITS = cvar.TradeVolType_NUMBER_OF_UNITS
TradeVolType_NUMBER_OF_ROUND_LOTS = cvar.TradeVolType_NUMBER_OF_ROUND_LOTS
OrderEventType_ADDED = cvar.OrderEventType_ADDED
OrderEventType_MODIFIED = cvar.OrderEventType_MODIFIED
OrderEventType_DELETED = cvar.OrderEventType_DELETED
OrderEventType_PARTIALLY_FILLED = cvar.OrderEventType_PARTIALLY_FILLED
OrderEventType_FILLED = cvar.OrderEventType_FILLED
OrderEventType_SUSPENDED = cvar.OrderEventType_SUSPENDED
OrderEventType_RELEASED = cvar.OrderEventType_RELEASED
OrderEventType_RESTATED = cvar.OrderEventType_RESTATED
OrderEventType_LOCKED = cvar.OrderEventType_LOCKED
OrderEventType_TRIGGERED = cvar.OrderEventType_TRIGGERED
OrderEventType_ACTIVATED = cvar.OrderEventType_ACTIVATED
OrderEventReason_ADD_ORDER_REQUEST = cvar.OrderEventReason_ADD_ORDER_REQUEST
OrderEventReason_MODIFY_ORDER_REQUEST = cvar.OrderEventReason_MODIFY_ORDER_REQUEST
OrderEventReason_DELETE_ORDER_REQUEST = cvar.OrderEventReason_DELETE_ORDER_REQUEST
OrderEventReason_ORDER_ENTERED_OOB = cvar.OrderEventReason_ORDER_ENTERED_OOB
OrderEventReason_ORDER_MODIFIED_OOB = cvar.OrderEventReason_ORDER_MODIFIED_OOB
OrderEventReason_ORDER_DELETED_OOB = cvar.OrderEventReason_ORDER_DELETED_OOB
OrderEventReason_ORDER_ACTIVATED_OR_TRIGGERED = cvar.OrderEventReason_ORDER_ACTIVATED_OR_TRIGGERED
OrderEventReason_ORDER_EXPIRED = cvar.OrderEventReason_ORDER_EXPIRED
OrderEventReason_RESERVE_ORDER_REFRESHED = cvar.OrderEventReason_RESERVE_ORDER_REFRESHED
OrderEventReason_AWAY_MARKET_BETTER = cvar.OrderEventReason_AWAY_MARKET_BETTER
OrderEventReason_CORPORATE_ACTION = cvar.OrderEventReason_CORPORATE_ACTION
OrderEventReason_START_OF_DAY = cvar.OrderEventReason_START_OF_DAY
OrderEventReason_END_OF_DAY = cvar.OrderEventReason_END_OF_DAY
AuctionType_NONE = cvar.AuctionType_NONE
AuctionType_BLOCK_ORDER_AUCTION = cvar.AuctionType_BLOCK_ORDER_AUCTION
AuctionType_DIRECTED_ORDER_AUCTION = cvar.AuctionType_DIRECTED_ORDER_AUCTION
AuctionType_EXPOSURE_ORDER_AUCTION = cvar.AuctionType_EXPOSURE_ORDER_AUCTION
AuctionType_FLASH_ORDER_AUCTION = cvar.AuctionType_FLASH_ORDER_AUCTION
AuctionType_FACILITATION_ORDER_AUCTION = cvar.AuctionType_FACILITATION_ORDER_AUCTION
AuctionType_SOLICITATION_ORDER_AUCTION = cvar.AuctionType_SOLICITATION_ORDER_AUCTION
AuctionType_PRICE_IMPROVEMENT_MECHANISM = cvar.AuctionType_PRICE_IMPROVEMENT_MECHANISM
AuctionType_DIRECTED_ORDER_PRICE_IMPROVEMENT_MECHANISM = cvar.AuctionType_DIRECTED_ORDER_PRICE_IMPROVEMENT_MECHANISM
AuctionInstruction_AUTOMATED_AUCTION_PERMITTED = cvar.AuctionInstruction_AUTOMATED_AUCTION_PERMITTED
AuctionInstruction_AUTOMATED_AUCTION_NOT_PERMITTED = cvar.AuctionInstruction_AUTOMATED_AUCTION_NOT_PERMITTED
LockType_NOT_LOCKED = cvar.LockType_NOT_LOCKED
LockType_AWAY_MARKET_NETTER = cvar.LockType_AWAY_MARKET_NETTER
LockType_THREE_TICK_LOCKED = cvar.LockType_THREE_TICK_LOCKED
LockType_LOCKED_BY_MARKET_MAKER = cvar.LockType_LOCKED_BY_MARKET_MAKER
LockType_DIRECTED_ORDER_LOCK = cvar.LockType_DIRECTED_ORDER_LOCK
LockType_MULTILEG_LOCK = cvar.LockType_MULTILEG_LOCK
LockType_MARKET_ORDER_LOCK = cvar.LockType_MARKET_ORDER_LOCK
LockType_PRE_ASSIGNMENT_LOCK = cvar.LockType_PRE_ASSIGNMENT_LOCK
ReleaseInstruction_ISO = cvar.ReleaseInstruction_ISO
ReleaseInstruction_NO_AWAY_MARKET_BETTER_CHECK = cvar.ReleaseInstruction_NO_AWAY_MARKET_BETTER_CHECK
DisclosureType_VOLUME = cvar.DisclosureType_VOLUME
DisclosureType_PRICE = cvar.DisclosureType_PRICE
DisclosureType_SIDE = cvar.DisclosureType_SIDE
DisclosureType_AON = cvar.DisclosureType_AON
DisclosureType_GENERAL = cvar.DisclosureType_GENERAL
DisclosureType_CLEARING_ACCOUNT = cvar.DisclosureType_CLEARING_ACCOUNT
DisclosureType_CMTA_ACCOUNT = cvar.DisclosureType_CMTA_ACCOUNT
DisclosureInstruction_NO = cvar.DisclosureInstruction_NO
DisclosureInstruction_YES = cvar.DisclosureInstruction_YES
DisclosureInstruction_USE_DEFAULT_SETTING = cvar.DisclosureInstruction_USE_DEFAULT_SETTING
TradingCapacity_CUSTOMER = cvar.TradingCapacity_CUSTOMER
TradingCapacity_CUSTOMER_PROFESSIONAL = cvar.TradingCapacity_CUSTOMER_PROFESSIONAL
TradingCapacity_BROKER_DEALER = cvar.TradingCapacity_BROKER_DEALER
TradingCapacity_CUSTOMER_BROKER_DEALER = cvar.TradingCapacity_CUSTOMER_BROKER_DEALER
TradingCapacity_PRINCIPAL = cvar.TradingCapacity_PRINCIPAL
TradingCapacity_MARKET_MAKER = cvar.TradingCapacity_MARKET_MAKER
TradingCapacity_AWAY_MARKET_MAKER = cvar.TradingCapacity_AWAY_MARKET_MAKER
TradingCapacity_SYSTEMATIC_INTERNALISER = cvar.TradingCapacity_SYSTEMATIC_INTERNALISER
ClearingAccountType_CUSTOMER = cvar.ClearingAccountType_CUSTOMER
ClearingAccountType_FIRM = cvar.ClearingAccountType_FIRM
ClearingAccountType_MARKET_MAKER = cvar.ClearingAccountType_MARKET_MAKER
RelatedPriceSource_NB_BID = cvar.RelatedPriceSource_NB_BID
RelatedPriceSource_NB_OFFER = cvar.RelatedPriceSource_NB_OFFER
MinQtyMethod_ONCE = cvar.MinQtyMethod_ONCE
MinQtyMethod_MULTIPLE = cvar.MinQtyMethod_MULTIPLE
Triggered_NOT_TRIGGERED = cvar.Triggered_NOT_TRIGGERED
Triggered_TRIGGERED = cvar.Triggered_TRIGGERED
Triggered_STOP_ORDER_TRIGGERED = cvar.Triggered_STOP_ORDER_TRIGGERED
Triggered_OCO_ORDER_TRIGGERED = cvar.Triggered_OCO_ORDER_TRIGGERED
Triggered_OTO_ORDER_TRIGGERED = cvar.Triggered_OTO_ORDER_TRIGGERED
Triggered_OUO_ORDER_TRIGGERED = cvar.Triggered_OUO_ORDER_TRIGGERED
EventTimeUnit_HOUR = cvar.EventTimeUnit_HOUR
EventTimeUnit_MINUTE = cvar.EventTimeUnit_MINUTE
EventTimeUnit_SECOND = cvar.EventTimeUnit_SECOND
EventTimeUnit_DAY = cvar.EventTimeUnit_DAY
EventTimeUnit_WEEK = cvar.EventTimeUnit_WEEK
EventTimeUnit_MONTH = cvar.EventTimeUnit_MONTH
EventTimeUnit_YEAR = cvar.EventTimeUnit_YEAR
OrderOrigination_ORDER_RECEIVED_FROM_CUSTOMER = cvar.OrderOrigination_ORDER_RECEIVED_FROM_CUSTOMER
OrderOrigination_ORDER_RECEIVED_FROM_WITHIN_FIRM = cvar.OrderOrigination_ORDER_RECEIVED_FROM_WITHIN_FIRM
OrderOrigination_ORDER_RECEIVED_FROM_ANOTHER_BROKER_DEALER = cvar.OrderOrigination_ORDER_RECEIVED_FROM_ANOTHER_BROKER_DEALER
OrderOrigination_ORDER_RECEIVED_FROM_CUSTOMER_OR_WITH_FIRM = cvar.OrderOrigination_ORDER_RECEIVED_FROM_CUSTOMER_OR_WITH_FIRM
OrderOrigination_ORDER_RECEIVED_FROM_DIRECT_ACCESS_CUSTOMER = cvar.OrderOrigination_ORDER_RECEIVED_FROM_DIRECT_ACCESS_CUSTOMER
OrderOrigination_ORDER_RECEIVED_FROM_FOREIGN_DEALER_EQUIVALENT = cvar.OrderOrigination_ORDER_RECEIVED_FROM_FOREIGN_DEALER_EQUIVALENT
OrderOrigination_ORDER_RECEIVED_FROM_EXECUTION_ONLY_SERVICE = cvar.OrderOrigination_ORDER_RECEIVED_FROM_EXECUTION_ONLY_SERVICE
ClearedIndicator_NOT_CLEARED = cvar.ClearedIndicator_NOT_CLEARED
ClearedIndicator_CLEARED = cvar.ClearedIndicator_CLEARED
ClearedIndicator_SUBMITTED = cvar.ClearedIndicator_SUBMITTED
ClearedIndicator_REJECTED = cvar.ClearedIndicator_REJECTED
ContractRefPosType_TWO_COMPONENT_INTERCOMMODITY_SPREAD = cvar.ContractRefPosType_TWO_COMPONENT_INTERCOMMODITY_SPREAD
ContractRefPosType_INDEX_OR_BASKET = cvar.ContractRefPosType_INDEX_OR_BASKET
ContractRefPosType_TWO_COMPONENT_LOCATION_BASIS = cvar.ContractRefPosType_TWO_COMPONENT_LOCATION_BASIS
ContractRefPosType_OTHER = cvar.ContractRefPosType_OTHER
PositionCapacity_PRINCIPAL = cvar.PositionCapacity_PRINCIPAL
PositionCapacity_AGENT = cvar.PositionCapacity_AGENT
PositionCapacity_CUSTOMER = cvar.PositionCapacity_CUSTOMER
PositionCapacity_COUNTERPARTY = cvar.PositionCapacity_COUNTERPARTY
TradePriceCondition_SPECIAL_CUM_DIVIDEND = cvar.TradePriceCondition_SPECIAL_CUM_DIVIDEND
TradePriceCondition_SPECIAL_CUM_RIGHTS = cvar.TradePriceCondition_SPECIAL_CUM_RIGHTS
TradePriceCondition_SPECIAL_EX_DIVIDEND = cvar.TradePriceCondition_SPECIAL_EX_DIVIDEND
TradePriceCondition_SPECIAL_EX_RIGHTS = cvar.TradePriceCondition_SPECIAL_EX_RIGHTS
TradePriceCondition_SPECIAL_CUM_COUPON = cvar.TradePriceCondition_SPECIAL_CUM_COUPON
TradePriceCondition_SPECIAL_CUM_CAPITAL_REPAYMENTS = cvar.TradePriceCondition_SPECIAL_CUM_CAPITAL_REPAYMENTS
TradePriceCondition_SPECIAL_EX_COUPON = cvar.TradePriceCondition_SPECIAL_EX_COUPON
TradePriceCondition_SPECIAL_EX_CAPITAL_REPAYMENTS = cvar.TradePriceCondition_SPECIAL_EX_CAPITAL_REPAYMENTS
TradePriceCondition_CASH_SETTLEMENT = cvar.TradePriceCondition_CASH_SETTLEMENT
TradePriceCondition_SPECIAL_CUM_BONUS = cvar.TradePriceCondition_SPECIAL_CUM_BONUS
TradePriceCondition_SPECIAL_PRICE = cvar.TradePriceCondition_SPECIAL_PRICE
TradePriceCondition_SPECIAL_EX_BONUS = cvar.TradePriceCondition_SPECIAL_EX_BONUS
TradePriceCondition_GUARANTEED_DELIVERY = cvar.TradePriceCondition_GUARANTEED_DELIVERY
TradePriceCondition_SPECIAL_DIVIDEND = cvar.TradePriceCondition_SPECIAL_DIVIDEND
TradePriceCondition_PRICE_IMPROVEMENT = cvar.TradePriceCondition_PRICE_IMPROVEMENT
TradePriceCondition_NON_PRICE_FORMING_TRADE = cvar.TradePriceCondition_NON_PRICE_FORMING_TRADE
TradePriceCondition_TRADE_EXEMPTED_FROM_TRADING_OBLIGATION = cvar.TradePriceCondition_TRADE_EXEMPTED_FROM_TRADING_OBLIGATION
TradePriceCondition_PRICE_PENDING = cvar.TradePriceCondition_PRICE_PENDING
TradePriceCondition_PRICE_NOT_APPLICABLE = cvar.TradePriceCondition_PRICE_NOT_APPLICABLE
TradeAllocStatus_PENDING_CLEAR = cvar.TradeAllocStatus_PENDING_CLEAR
TradeAllocStatus_CLAIMED = cvar.TradeAllocStatus_CLAIMED
TradeAllocStatus_CLEARED = cvar.TradeAllocStatus_CLEARED
TradeAllocStatus_REJECTED = cvar.TradeAllocStatus_REJECTED
TradeQtyType_CLEARED_QUANTITY = cvar.TradeQtyType_CLEARED_QUANTITY
TradeQtyType_LONG_SIDE_CLAIMED_QUANTITY = cvar.TradeQtyType_LONG_SIDE_CLAIMED_QUANTITY
TradeQtyType_SHORT_SIDE_CLAIMED_QUANTITY = cvar.TradeQtyType_SHORT_SIDE_CLAIMED_QUANTITY
TradeQtyType_LONG_SIDE_REJECTED_QUANTITY = cvar.TradeQtyType_LONG_SIDE_REJECTED_QUANTITY
TradeQtyType_SHORT_SIDE_REJECTED_QUANTITY = cvar.TradeQtyType_SHORT_SIDE_REJECTED_QUANTITY
TradeQtyType_PENDING_QUANTITY = cvar.TradeQtyType_PENDING_QUANTITY
TradeQtyType_TRANSACTION_QUANTITY = cvar.TradeQtyType_TRANSACTION_QUANTITY
TradeQtyType_REMAINING_QUANTITY = cvar.TradeQtyType_REMAINING_QUANTITY
TradeQtyType_PREVIOUS_REMAINING_QUANTITY = cvar.TradeQtyType_PREVIOUS_REMAINING_QUANTITY
TradeAllocGroupInstruction_ADD = cvar.TradeAllocGroupInstruction_ADD
TradeAllocGroupInstruction_DO_NOT_ADD = cvar.TradeAllocGroupInstruction_DO_NOT_ADD
OffsetInstruction_OFFSET = cvar.OffsetInstruction_OFFSET
OffsetInstruction_ONSET = cvar.OffsetInstruction_ONSET
SideAvgPxIndicator_NO_AVG_PRICING = cvar.SideAvgPxIndicator_NO_AVG_PRICING
SideAvgPxIndicator_TRADE_IS_PART_AVG_PRICE_GRP = cvar.SideAvgPxIndicator_TRADE_IS_PART_AVG_PRICE_GRP
SideAvgPxIndicator_LAST_TRADE_IS_PART_AVG_PRICE_GRP = cvar.SideAvgPxIndicator_LAST_TRADE_IS_PART_AVG_PRICE_GRP
RelatedTradeIDSource_NON_FIX_SOURCE = cvar.RelatedTradeIDSource_NON_FIX_SOURCE
RelatedTradeIDSource_TRADE_ID = cvar.RelatedTradeIDSource_TRADE_ID
RelatedTradeIDSource_SECONDARY_TRADE_ID = cvar.RelatedTradeIDSource_SECONDARY_TRADE_ID
RelatedTradeIDSource_TRADE_REPORT_ID = cvar.RelatedTradeIDSource_TRADE_REPORT_ID
RelatedTradeIDSource_FIRM_TRADE_ID = cvar.RelatedTradeIDSource_FIRM_TRADE_ID
RelatedTradeIDSource_SECONDARY_FIRM_TRADE_ID = cvar.RelatedTradeIDSource_SECONDARY_FIRM_TRADE_ID
RelatedTradeIDSource_REGULATORY_TRADE_ID = cvar.RelatedTradeIDSource_REGULATORY_TRADE_ID
RelatedPositionIDSource_POS_MAINT_RPT_ID = cvar.RelatedPositionIDSource_POS_MAINT_RPT_ID
RelatedPositionIDSource_TRANSFER_ID = cvar.RelatedPositionIDSource_TRANSFER_ID
RelatedPositionIDSource_POSITION_ENTITY_ID = cvar.RelatedPositionIDSource_POSITION_ENTITY_ID
ValueCheckType_PRICE_CHECK = cvar.ValueCheckType_PRICE_CHECK
ValueCheckType_NOTIONAL_VALUE_CHECK = cvar.ValueCheckType_NOTIONAL_VALUE_CHECK
ValueCheckType_QUANTITY_CHECK = cvar.ValueCheckType_QUANTITY_CHECK
ValueCheckAction_DO_NOT_CHECK = cvar.ValueCheckAction_DO_NOT_CHECK
ValueCheckAction_CHECK = cvar.ValueCheckAction_CHECK
ValueCheckAction_BEST_EFFORT = cvar.ValueCheckAction_BEST_EFFORT
PartyDetailRequestResult_SUCCESSFUL = cvar.PartyDetailRequestResult_SUCCESSFUL
PartyDetailRequestResult_INVALID_PARTY = cvar.PartyDetailRequestResult_INVALID_PARTY
PartyDetailRequestResult_INVALID_RELATED_PARTY = cvar.PartyDetailRequestResult_INVALID_RELATED_PARTY
PartyDetailRequestResult_INVALID_PARTY_STATUS = cvar.PartyDetailRequestResult_INVALID_PARTY_STATUS
PartyDetailRequestResult_NOT_AUTHORIZED = cvar.PartyDetailRequestResult_NOT_AUTHORIZED
PartyDetailRequestResult_OTHER = cvar.PartyDetailRequestResult_OTHER
PartyDetailRequestStatus_ACCEPTED = cvar.PartyDetailRequestStatus_ACCEPTED
PartyDetailRequestStatus_ACCEPTED_WITH_CHANGES = cvar.PartyDetailRequestStatus_ACCEPTED_WITH_CHANGES
PartyDetailRequestStatus_REJECTED = cvar.PartyDetailRequestStatus_REJECTED
PartyDetailRequestStatus_ACCEPTANCE_PENDING = cvar.PartyDetailRequestStatus_ACCEPTANCE_PENDING
PartyDetailDefinitionStatus_ACCEPTED = cvar.PartyDetailDefinitionStatus_ACCEPTED
PartyDetailDefinitionStatus_ACCEPTED_WITH_CHANGES = cvar.PartyDetailDefinitionStatus_ACCEPTED_WITH_CHANGES
PartyDetailDefinitionStatus_REJECTED = cvar.PartyDetailDefinitionStatus_REJECTED
EntitlementRequestResult_SUCCESSFUL = cvar.EntitlementRequestResult_SUCCESSFUL
EntitlementRequestResult_INVALID_PARTY = cvar.EntitlementRequestResult_INVALID_PARTY
EntitlementRequestResult_INVALID_RELATED_PARTY = cvar.EntitlementRequestResult_INVALID_RELATED_PARTY
EntitlementRequestResult_INVALID_ENTITLEMENT_TYPE = cvar.EntitlementRequestResult_INVALID_ENTITLEMENT_TYPE
EntitlementRequestResult_INVALID_ENTITLEMENT_ID = cvar.EntitlementRequestResult_INVALID_ENTITLEMENT_ID
EntitlementRequestResult_INVALID_ENTITLEMENT_ATTRIBUTE = cvar.EntitlementRequestResult_INVALID_ENTITLEMENT_ATTRIBUTE
EntitlementRequestResult_INVALID_INSTRUMENT_SCOPE = cvar.EntitlementRequestResult_INVALID_INSTRUMENT_SCOPE
EntitlementRequestResult_INVALID_MARKET_SEGMENT_SCOPE = cvar.EntitlementRequestResult_INVALID_MARKET_SEGMENT_SCOPE
EntitlementRequestResult_INVALID_START_DATE = cvar.EntitlementRequestResult_INVALID_START_DATE
EntitlementRequestResult_INVALID_END_DATE = cvar.EntitlementRequestResult_INVALID_END_DATE
EntitlementRequestResult_INSTRUMENT_SCOPE_NOT_SUPPORTED = cvar.EntitlementRequestResult_INSTRUMENT_SCOPE_NOT_SUPPORTED
EntitlementRequestResult_MARKET_SEGMENT_SCOPE_NOT_SUPPORTED = cvar.EntitlementRequestResult_MARKET_SEGMENT_SCOPE_NOT_SUPPORTED
EntitlementRequestResult_ENTITLEMENT_NOT_APPROVED_FOR_PARTY = cvar.EntitlementRequestResult_ENTITLEMENT_NOT_APPROVED_FOR_PARTY
EntitlementRequestResult_ENTITLEMENT_ALREADY_DEFINED_FOR_PARTY = cvar.EntitlementRequestResult_ENTITLEMENT_ALREADY_DEFINED_FOR_PARTY
EntitlementRequestResult_INSTRUMENT_NOT_APPROVED_FOR_PARTY = cvar.EntitlementRequestResult_INSTRUMENT_NOT_APPROVED_FOR_PARTY
EntitlementRequestResult_NOT_AUTHORIZED = cvar.EntitlementRequestResult_NOT_AUTHORIZED
EntitlementRequestResult_OTHER = cvar.EntitlementRequestResult_OTHER
EntitlementStatus_ACCEPTED = cvar.EntitlementStatus_ACCEPTED
EntitlementStatus_ACCEPTED_WITH_CHANGES = cvar.EntitlementStatus_ACCEPTED_WITH_CHANGES
EntitlementStatus_REJECTED = cvar.EntitlementStatus_REJECTED
EntitlementStatus_PENDING = cvar.EntitlementStatus_PENDING
EntitlementStatus_REQUESTED = cvar.EntitlementStatus_REQUESTED
EntitlementStatus_DEFERRED = cvar.EntitlementStatus_DEFERRED
TradeMatchAckStatus_RECEIVED_NOT_PROCESSED = cvar.TradeMatchAckStatus_RECEIVED_NOT_PROCESSED
TradeMatchAckStatus_ACCEPTED = cvar.TradeMatchAckStatus_ACCEPTED
TradeMatchAckStatus_REJECTED = cvar.TradeMatchAckStatus_REJECTED
TradeMatchRejectReason_SUCCESSFUL = cvar.TradeMatchRejectReason_SUCCESSFUL
TradeMatchRejectReason_INVALID_PARTY_INFORMATION = cvar.TradeMatchRejectReason_INVALID_PARTY_INFORMATION
TradeMatchRejectReason_UNKNOWN_INSTRUMENT = cvar.TradeMatchRejectReason_UNKNOWN_INSTRUMENT
TradeMatchRejectReason_UNAUTHORIZED = cvar.TradeMatchRejectReason_UNAUTHORIZED
TradeMatchRejectReason_INVALID_TRADE_TYPE = cvar.TradeMatchRejectReason_INVALID_TRADE_TYPE
TradeMatchRejectReason_OTHER = cvar.TradeMatchRejectReason_OTHER
PriceMovementType_AMOUNT = cvar.PriceMovementType_AMOUNT
PriceMovementType_PERCENTAGE = cvar.PriceMovementType_PERCENTAGE
RegulatoryTradeIDEvent_INITIAL_BLOCK_TRADE = cvar.RegulatoryTradeIDEvent_INITIAL_BLOCK_TRADE
RegulatoryTradeIDEvent_ALLOCATION = cvar.RegulatoryTradeIDEvent_ALLOCATION
RegulatoryTradeIDEvent_CLEARING = cvar.RegulatoryTradeIDEvent_CLEARING
RegulatoryTradeIDEvent_COMPRESSION = cvar.RegulatoryTradeIDEvent_COMPRESSION
RegulatoryTradeIDEvent_NOVATION = cvar.RegulatoryTradeIDEvent_NOVATION
RegulatoryTradeIDEvent_TERMINATION = cvar.RegulatoryTradeIDEvent_TERMINATION
RegulatoryTradeIDEvent_POST_TRD_VAL = cvar.RegulatoryTradeIDEvent_POST_TRD_VAL
RegulatoryTradeIDSource_UNIQUE_TRANSACTION_IDENTIFIER = cvar.RegulatoryTradeIDSource_UNIQUE_TRANSACTION_IDENTIFIER
RegulatoryTradeIDType_CURRENT = cvar.RegulatoryTradeIDType_CURRENT
RegulatoryTradeIDType_PREVIOUS = cvar.RegulatoryTradeIDType_PREVIOUS
RegulatoryTradeIDType_BLOCK = cvar.RegulatoryTradeIDType_BLOCK
RegulatoryTradeIDType_RELATED = cvar.RegulatoryTradeIDType_RELATED
RegulatoryTradeIDType_CLEARED_BLOCK_TRADE = cvar.RegulatoryTradeIDType_CLEARED_BLOCK_TRADE
RegulatoryTradeIDType_TRADING_VENUE_TRANSACTION_IDENTIFIER = cvar.RegulatoryTradeIDType_TRADING_VENUE_TRANSACTION_IDENTIFIER
ClearingIntention_DO_NOT_INTEND_TO_CLEAR = cvar.ClearingIntention_DO_NOT_INTEND_TO_CLEAR
ClearingIntention_INTEND_TO_CLEAR = cvar.ClearingIntention_INTEND_TO_CLEAR
ConfirmationMethod_NON_ELECTRONIC = cvar.ConfirmationMethod_NON_ELECTRONIC
ConfirmationMethod_ELECTRONIC = cvar.ConfirmationMethod_ELECTRONIC
ConfirmationMethod_UNCONFIRMED = cvar.ConfirmationMethod_UNCONFIRMED
VerificationMethod_NON_ELECTRONIC = cvar.VerificationMethod_NON_ELECTRONIC
VerificationMethod_ELECTRONIC = cvar.VerificationMethod_ELECTRONIC
ClearingRequirementException_NO_EXCEPTION = cvar.ClearingRequirementException_NO_EXCEPTION
ClearingRequirementException_EXCEPTION = cvar.ClearingRequirementException_EXCEPTION
ClearingRequirementException_END_USER_EXCEPTION = cvar.ClearingRequirementException_END_USER_EXCEPTION
ClearingRequirementException_INTER_AFFILIATE_EXCEPTION = cvar.ClearingRequirementException_INTER_AFFILIATE_EXCEPTION
ClearingRequirementException_TREASURY_AFFILIATE_EXCEPTION = cvar.ClearingRequirementException_TREASURY_AFFILIATE_EXCEPTION
ClearingRequirementException_COOPERATIVE_EXCEPTION = cvar.ClearingRequirementException_COOPERATIVE_EXCEPTION
IRSDirection_PAY = cvar.IRSDirection_PAY
IRSDirection_RCV = cvar.IRSDirection_RCV
IRSDirection_NA = cvar.IRSDirection_NA
RegulatoryReportType_RT = cvar.RegulatoryReportType_RT
RegulatoryReportType_PET = cvar.RegulatoryReportType_PET
RegulatoryReportType_SNAPSHOT = cvar.RegulatoryReportType_SNAPSHOT
RegulatoryReportType_CONFIRMATION = cvar.RegulatoryReportType_CONFIRMATION
RegulatoryReportType_RTPET = cvar.RegulatoryReportType_RTPET
RegulatoryReportType_PET_CONFIRMATION = cvar.RegulatoryReportType_PET_CONFIRMATION
RegulatoryReportType_RTPET_CONFIRMATION = cvar.RegulatoryReportType_RTPET_CONFIRMATION
RegulatoryReportType_POST_TRADE = cvar.RegulatoryReportType_POST_TRADE
RegulatoryReportType_VERIFICATION = cvar.RegulatoryReportType_VERIFICATION
RegulatoryReportType_PST_TRD_EVNT = cvar.RegulatoryReportType_PST_TRD_EVNT
RegulatoryReportType_PST_TRD_EVNT_RT_REPORTABLE = cvar.RegulatoryReportType_PST_TRD_EVNT_RT_REPORTABLE
RegulatoryReportType_LMTF = cvar.RegulatoryReportType_LMTF
RegulatoryReportType_DATF = cvar.RegulatoryReportType_DATF
RegulatoryReportType_VOLO = cvar.RegulatoryReportType_VOLO
RegulatoryReportType_FWAF = cvar.RegulatoryReportType_FWAF
RegulatoryReportType_IDAF = cvar.RegulatoryReportType_IDAF
RegulatoryReportType_VOLW = cvar.RegulatoryReportType_VOLW
RegulatoryReportType_FULF = cvar.RegulatoryReportType_FULF
RegulatoryReportType_FULA = cvar.RegulatoryReportType_FULA
RegulatoryReportType_FULV = cvar.RegulatoryReportType_FULV
RegulatoryReportType_FULJ = cvar.RegulatoryReportType_FULJ
RegulatoryReportType_COAF = cvar.RegulatoryReportType_COAF
RegulatoryReportType_ORDER = cvar.RegulatoryReportType_ORDER
RegulatoryReportType_CHILD_ORDER = cvar.RegulatoryReportType_CHILD_ORDER
RegulatoryReportType_ORDER_ROUTE = cvar.RegulatoryReportType_ORDER_ROUTE
RegulatoryReportType_TRADE = cvar.RegulatoryReportType_TRADE
RegulatoryReportType_QUOTE = cvar.RegulatoryReportType_QUOTE
RegulatoryReportType_SUPPLEMENT = cvar.RegulatoryReportType_SUPPLEMENT
RegulatoryReportType_NEW_TRANSACTION = cvar.RegulatoryReportType_NEW_TRANSACTION
RegulatoryReportType_TRANSACTION_CORRECTION = cvar.RegulatoryReportType_TRANSACTION_CORRECTION
RegulatoryReportType_TRANSACTION_MODIFICATION = cvar.RegulatoryReportType_TRANSACTION_MODIFICATION
RegulatoryReportType_COLLATERAL_UPDATE = cvar.RegulatoryReportType_COLLATERAL_UPDATE
RegulatoryReportType_MARGIN_UPDATE = cvar.RegulatoryReportType_MARGIN_UPDATE
RegulatoryReportType_TRANSACTION_REPORTED_IN_ERROR = cvar.RegulatoryReportType_TRANSACTION_REPORTED_IN_ERROR
RegulatoryReportType_TERMINATION_EARLY_TERMINATION = cvar.RegulatoryReportType_TERMINATION_EARLY_TERMINATION
TradeCollateralization_UNCOLLATERALIZED = cvar.TradeCollateralization_UNCOLLATERALIZED
TradeCollateralization_PARTIALLY_COLLATERALIZED = cvar.TradeCollateralization_PARTIALLY_COLLATERALIZED
TradeCollateralization_ONE_WAY_COLLATERALLIZATION = cvar.TradeCollateralization_ONE_WAY_COLLATERALLIZATION
TradeCollateralization_FULLY_COLLATERALIZED = cvar.TradeCollateralization_FULLY_COLLATERALIZED
TradeCollateralization_NET_EXPOSURE = cvar.TradeCollateralization_NET_EXPOSURE
TradeContinuation_NOVATION = cvar.TradeContinuation_NOVATION
TradeContinuation_PARTIAL_NOVATION = cvar.TradeContinuation_PARTIAL_NOVATION
TradeContinuation_TRADE_UNWIND = cvar.TradeContinuation_TRADE_UNWIND
TradeContinuation_PARTIAL_TRADE_UNWIND = cvar.TradeContinuation_PARTIAL_TRADE_UNWIND
TradeContinuation_EXERCISE = cvar.TradeContinuation_EXERCISE
TradeContinuation_NETTING = cvar.TradeContinuation_NETTING
TradeContinuation_FULL_NETTING = cvar.TradeContinuation_FULL_NETTING
TradeContinuation_PARTIAL_NETTING = cvar.TradeContinuation_PARTIAL_NETTING
TradeContinuation_AMENDMENT = cvar.TradeContinuation_AMENDMENT
TradeContinuation_INCREASE = cvar.TradeContinuation_INCREASE
TradeContinuation_CREDIT_EVENT = cvar.TradeContinuation_CREDIT_EVENT
TradeContinuation_STRATEGIC_RESTRUCTURING = cvar.TradeContinuation_STRATEGIC_RESTRUCTURING
TradeContinuation_SUCCESSION_EVENT_REORGANIZATION = cvar.TradeContinuation_SUCCESSION_EVENT_REORGANIZATION
TradeContinuation_SUCCESSION_EVENT_RENAMING = cvar.TradeContinuation_SUCCESSION_EVENT_RENAMING
TradeContinuation_PORTING = cvar.TradeContinuation_PORTING
TradeContinuation_WITHDRAWL = cvar.TradeContinuation_WITHDRAWL
TradeContinuation_VOID = cvar.TradeContinuation_VOID
TradeContinuation_ACCOUNT_TRANSFER = cvar.TradeContinuation_ACCOUNT_TRANSFER
TradeContinuation_GIVE_UP = cvar.TradeContinuation_GIVE_UP
TradeContinuation_TAKE_UP = cvar.TradeContinuation_TAKE_UP
TradeContinuation_AVERAGE_PRICING = cvar.TradeContinuation_AVERAGE_PRICING
TradeContinuation_REVERSAL = cvar.TradeContinuation_REVERSAL
TradeContinuation_ALLOC_TRD_POSTING = cvar.TradeContinuation_ALLOC_TRD_POSTING
TradeContinuation_CASCADE = cvar.TradeContinuation_CASCADE
TradeContinuation_DELIVERY = cvar.TradeContinuation_DELIVERY
TradeContinuation_OPTION_ASGN = cvar.TradeContinuation_OPTION_ASGN
TradeContinuation_EXPIRATION = cvar.TradeContinuation_EXPIRATION
TradeContinuation_MATURITY = cvar.TradeContinuation_MATURITY
TradeContinuation_EQUAL_POS_ADJ = cvar.TradeContinuation_EQUAL_POS_ADJ
TradeContinuation_UNEQUAL_POS_ADJ = cvar.TradeContinuation_UNEQUAL_POS_ADJ
TradeContinuation_CORRECTION = cvar.TradeContinuation_CORRECTION
TradeContinuation_EARLY_TERMINATION = cvar.TradeContinuation_EARLY_TERMINATION
TradeContinuation_RERATE = cvar.TradeContinuation_RERATE
TradeContinuation_OTHER = cvar.TradeContinuation_OTHER
AssetClass_INTEREST_RATE = cvar.AssetClass_INTEREST_RATE
AssetClass_CURRENCY = cvar.AssetClass_CURRENCY
AssetClass_CREDIT = cvar.AssetClass_CREDIT
AssetClass_EQUITY = cvar.AssetClass_EQUITY
AssetClass_COMMODITY = cvar.AssetClass_COMMODITY
AssetClass_OTHER = cvar.AssetClass_OTHER
AssetClass_CASH = cvar.AssetClass_CASH
AssetClass_DEBT = cvar.AssetClass_DEBT
AssetClass_FUND = cvar.AssetClass_FUND
AssetClass_LOAN_FACILITY = cvar.AssetClass_LOAN_FACILITY
AssetClass_INDEX = cvar.AssetClass_INDEX
AssetSubClass_METALS = cvar.AssetSubClass_METALS
AssetSubClass_BULLION = cvar.AssetSubClass_BULLION
AssetSubClass_ENERGY = cvar.AssetSubClass_ENERGY
AssetSubClass_COMMODITY_INDEX = cvar.AssetSubClass_COMMODITY_INDEX
AssetSubClass_AGRICULTURAL = cvar.AssetSubClass_AGRICULTURAL
AssetSubClass_ENVIRONMENTAL = cvar.AssetSubClass_ENVIRONMENTAL
AssetSubClass_FREIGHT = cvar.AssetSubClass_FREIGHT
AssetSubClass_FERTILIZER = cvar.AssetSubClass_FERTILIZER
AssetSubClass_INDUSTRIAL_PRODUCT = cvar.AssetSubClass_INDUSTRIAL_PRODUCT
AssetSubClass_INFLATION = cvar.AssetSubClass_INFLATION
AssetSubClass_PAPER = cvar.AssetSubClass_PAPER
AssetSubClass_POLYPROPYLENE = cvar.AssetSubClass_POLYPROPYLENE
AssetSubClass_OFFICIAL_ECONOMIC_STATISTICS = cvar.AssetSubClass_OFFICIAL_ECONOMIC_STATISTICS
AssetSubClass_SINGLE_NAME = cvar.AssetSubClass_SINGLE_NAME
AssetSubClass_CREDIT_INDEX = cvar.AssetSubClass_CREDIT_INDEX
AssetSubClass_INDEX_TRANCHE = cvar.AssetSubClass_INDEX_TRANCHE
AssetSubClass_CREDIT_BASKET = cvar.AssetSubClass_CREDIT_BASKET
AssetSubClass_BASKET = cvar.AssetSubClass_BASKET
AssetSubClass_FX_CROSS_RATES = cvar.AssetSubClass_FX_CROSS_RATES
AssetSubClass_FX_EMERGING_MARKETS = cvar.AssetSubClass_FX_EMERGING_MARKETS
AssetSubClass_FX_MAJORS = cvar.AssetSubClass_FX_MAJORS
AssetSubClass_GOVERNMENT = cvar.AssetSubClass_GOVERNMENT
AssetSubClass_AGENCY = cvar.AssetSubClass_AGENCY
AssetSubClass_CORPORATE = cvar.AssetSubClass_CORPORATE
AssetSubClass_FINANCING = cvar.AssetSubClass_FINANCING
AssetSubClass_MONEY_MARKET = cvar.AssetSubClass_MONEY_MARKET
AssetSubClass_MORTGAGE = cvar.AssetSubClass_MORTGAGE
AssetSubClass_MUNICIPAL = cvar.AssetSubClass_MUNICIPAL
AssetSubClass_COMMON = cvar.AssetSubClass_COMMON
AssetSubClass_PREFERRED = cvar.AssetSubClass_PREFERRED
AssetSubClass_EQUITY_INDEX = cvar.AssetSubClass_EQUITY_INDEX
AssetSubClass_EQUITY_BASKET = cvar.AssetSubClass_EQUITY_BASKET
AssetSubClass_DIVIDEND_INDEX = cvar.AssetSubClass_DIVIDEND_INDEX
AssetSubClass_STOCK_DIVIDEND = cvar.AssetSubClass_STOCK_DIVIDEND
AssetSubClass_EXCHANGE_TRADED_FUND = cvar.AssetSubClass_EXCHANGE_TRADED_FUND
AssetSubClass_VOLATILITY_INDEX = cvar.AssetSubClass_VOLATILITY_INDEX
AssetSubClass_MUTUAL_FUND = cvar.AssetSubClass_MUTUAL_FUND
AssetSubClass_COLLECTIVE_INVESTMENT_VEHICLE = cvar.AssetSubClass_COLLECTIVE_INVESTMENT_VEHICLE
AssetSubClass_INVESTMENT_PROGRAM = cvar.AssetSubClass_INVESTMENT_PROGRAM
AssetSubClass_SPECIALIZED_ACCOUNT_PROGRAM = cvar.AssetSubClass_SPECIALIZED_ACCOUNT_PROGRAM
AssetSubClass_SINGLE_CURRENCY = cvar.AssetSubClass_SINGLE_CURRENCY
AssetSubClass_CROSS_CURRENCY = cvar.AssetSubClass_CROSS_CURRENCY
AssetSubClass_TERM_LOAN = cvar.AssetSubClass_TERM_LOAN
AssetSubClass_BRIDGE_LOAN = cvar.AssetSubClass_BRIDGE_LOAN
AssetSubClass_LETTER_OF_CREDIT = cvar.AssetSubClass_LETTER_OF_CREDIT
AssetSubClass_EXOTIC = cvar.AssetSubClass_EXOTIC
AssetSubClass_OTHER_C10 = cvar.AssetSubClass_OTHER_C10
AssetSubClass_OTHER = cvar.AssetSubClass_OTHER
SwapClass_BASIS_SWAP = cvar.SwapClass_BASIS_SWAP
SwapClass_INDEX_SWAP = cvar.SwapClass_INDEX_SWAP
SwapClass_BROAD_BASED_SECURITY_SWAP = cvar.SwapClass_BROAD_BASED_SECURITY_SWAP
SwapClass_BASKET_SWAP = cvar.SwapClass_BASKET_SWAP
CouponType_ZERO = cvar.CouponType_ZERO
CouponType_FIXED_RATE = cvar.CouponType_FIXED_RATE
CouponType_FLOATING_RATE = cvar.CouponType_FLOATING_RATE
CouponType_STRUCTURED = cvar.CouponType_STRUCTURED
CouponFrequencyUnit_DAY = cvar.CouponFrequencyUnit_DAY
CouponFrequencyUnit_WEEK = cvar.CouponFrequencyUnit_WEEK
CouponFrequencyUnit_MONTH = cvar.CouponFrequencyUnit_MONTH
CouponFrequencyUnit_YEAR = cvar.CouponFrequencyUnit_YEAR
CouponFrequencyUnit_HOUR = cvar.CouponFrequencyUnit_HOUR
CouponFrequencyUnit_MINUTE = cvar.CouponFrequencyUnit_MINUTE
CouponFrequencyUnit_SECOND = cvar.CouponFrequencyUnit_SECOND
CouponFrequencyUnit_TERM = cvar.CouponFrequencyUnit_TERM
CouponDayCount_ONE_ONE = cvar.CouponDayCount_ONE_ONE
CouponDayCount_THIRTY_THREE_SIXTY_US = cvar.CouponDayCount_THIRTY_THREE_SIXTY_US
CouponDayCount_THIRTY_THREE_SIXTY_SIA = cvar.CouponDayCount_THIRTY_THREE_SIXTY_SIA
CouponDayCount_THIRTY_THREE_SIXTY_M = cvar.CouponDayCount_THIRTY_THREE_SIXTY_M
CouponDayCount_THIRTY_E_THREE_SIXTY = cvar.CouponDayCount_THIRTY_E_THREE_SIXTY
CouponDayCount_THIRTY_E_THREE_SIXTY_ISDA = cvar.CouponDayCount_THIRTY_E_THREE_SIXTY_ISDA
CouponDayCount_ACT_THREE_SIXTY = cvar.CouponDayCount_ACT_THREE_SIXTY
CouponDayCount_ACT_THREE_SIXTY_FIVE_FIXED = cvar.CouponDayCount_ACT_THREE_SIXTY_FIVE_FIXED
CouponDayCount_ACT_ACT_AFB = cvar.CouponDayCount_ACT_ACT_AFB
CouponDayCount_ACT_ACT_ICMA = cvar.CouponDayCount_ACT_ACT_ICMA
CouponDayCount_ACT_ACT_ISMA_ULTIMO = cvar.CouponDayCount_ACT_ACT_ISMA_ULTIMO
CouponDayCount_ACT_ACT_ISDA = cvar.CouponDayCount_ACT_ACT_ISDA
CouponDayCount_BUS_TWO_FIFTY_TWO = cvar.CouponDayCount_BUS_TWO_FIFTY_TWO
CouponDayCount_THIRTY_E_PLUS_THREE_SIXTY = cvar.CouponDayCount_THIRTY_E_PLUS_THREE_SIXTY
CouponDayCount_ACT_THREE_SIXTY_FIVE_L = cvar.CouponDayCount_ACT_THREE_SIXTY_FIVE_L
CouponDayCount_NL_THREE_SIXTY_FIVE = cvar.CouponDayCount_NL_THREE_SIXTY_FIVE
CouponDayCount_NL_THREE_SIXTY = cvar.CouponDayCount_NL_THREE_SIXTY
CouponDayCount_ACT364 = cvar.CouponDayCount_ACT364
CouponDayCount_THIRTY_THREE_SIXTY_FIVE = cvar.CouponDayCount_THIRTY_THREE_SIXTY_FIVE
CouponDayCount_THIRTY_ACTUAL = cvar.CouponDayCount_THIRTY_ACTUAL
CouponDayCount_THIRTY_THREE_SIXTY_ICMA = cvar.CouponDayCount_THIRTY_THREE_SIXTY_ICMA
CouponDayCount_THIRTY_E_TWO_THREE_SIXTY = cvar.CouponDayCount_THIRTY_E_TWO_THREE_SIXTY
CouponDayCount_THIRTY_E_THREE_THREE_SIXTY = cvar.CouponDayCount_THIRTY_E_THREE_THREE_SIXTY
CouponDayCount_OTHER = cvar.CouponDayCount_OTHER
LienSeniority_UNKNOWN = cvar.LienSeniority_UNKNOWN
LienSeniority_FIRST_LIEN = cvar.LienSeniority_FIRST_LIEN
LienSeniority_SECOND_LIEN = cvar.LienSeniority_SECOND_LIEN
LienSeniority_THIRD_LIEN = cvar.LienSeniority_THIRD_LIEN
LoanFacility_BRIDGE_LOAN = cvar.LoanFacility_BRIDGE_LOAN
LoanFacility_LETTER_OF_CREDIT = cvar.LoanFacility_LETTER_OF_CREDIT
LoanFacility_REVOLVING_LOAN = cvar.LoanFacility_REVOLVING_LOAN
LoanFacility_SWINGLINE_FUNDING = cvar.LoanFacility_SWINGLINE_FUNDING
LoanFacility_TERM_LOAN = cvar.LoanFacility_TERM_LOAN
LoanFacility_TRADE_CLAIM = cvar.LoanFacility_TRADE_CLAIM
ReferenceEntityType_ASIAN = cvar.ReferenceEntityType_ASIAN
ReferenceEntityType_AUSTRALIAN_NEW_ZEALAND = cvar.ReferenceEntityType_AUSTRALIAN_NEW_ZEALAND
ReferenceEntityType_EUROPEAN_EMERGING_MARKETS = cvar.ReferenceEntityType_EUROPEAN_EMERGING_MARKETS
ReferenceEntityType_JAPANESE = cvar.ReferenceEntityType_JAPANESE
ReferenceEntityType_NORTH_AMERICAN_HIGH_YIELD = cvar.ReferenceEntityType_NORTH_AMERICAN_HIGH_YIELD
ReferenceEntityType_NORTH_AMERICAN_INSURANCE = cvar.ReferenceEntityType_NORTH_AMERICAN_INSURANCE
ReferenceEntityType_NORTH_AMERICAN_INVESTMENT_GRADE = cvar.ReferenceEntityType_NORTH_AMERICAN_INVESTMENT_GRADE
ReferenceEntityType_SINGAPOREAN = cvar.ReferenceEntityType_SINGAPOREAN
ReferenceEntityType_WESTERN_EUROPEAN = cvar.ReferenceEntityType_WESTERN_EUROPEAN
ReferenceEntityType_WESTERN_EUROPEAN_INSURANCE = cvar.ReferenceEntityType_WESTERN_EUROPEAN_INSURANCE
BlockTrdAllocIndicator_BLOCK_TO_BE_ALLOCATED = cvar.BlockTrdAllocIndicator_BLOCK_TO_BE_ALLOCATED
BlockTrdAllocIndicator_BLOCK_NOT_TO_BE_ALLOCATED = cvar.BlockTrdAllocIndicator_BLOCK_NOT_TO_BE_ALLOCATED
BlockTrdAllocIndicator_ALLOCATED_TRADE = cvar.BlockTrdAllocIndicator_ALLOCATED_TRADE
UnderlyingObligationType_BOND = cvar.UnderlyingObligationType_BOND
UnderlyingObligationType_CONVERTIBLE_BOND = cvar.UnderlyingObligationType_CONVERTIBLE_BOND
UnderlyingObligationType_MORTGAGE = cvar.UnderlyingObligationType_MORTGAGE
UnderlyingObligationType_LOAN = cvar.UnderlyingObligationType_LOAN
CashSettlQuoteMethod_BID = cvar.CashSettlQuoteMethod_BID
CashSettlQuoteMethod_MID = cvar.CashSettlQuoteMethod_MID
CashSettlQuoteMethod_OFFER = cvar.CashSettlQuoteMethod_OFFER
CashSettlValuationMethod_MARKET = cvar.CashSettlValuationMethod_MARKET
CashSettlValuationMethod_HIGHEST = cvar.CashSettlValuationMethod_HIGHEST
CashSettlValuationMethod_AVERAGE_MARKET = cvar.CashSettlValuationMethod_AVERAGE_MARKET
CashSettlValuationMethod_AVERAGE_HIGHEST = cvar.CashSettlValuationMethod_AVERAGE_HIGHEST
CashSettlValuationMethod_BLENDED_MARKET = cvar.CashSettlValuationMethod_BLENDED_MARKET
CashSettlValuationMethod_BLENDED_HIGHEST = cvar.CashSettlValuationMethod_BLENDED_HIGHEST
CashSettlValuationMethod_AVERAGE_BLENDED_MARKET = cvar.CashSettlValuationMethod_AVERAGE_BLENDED_MARKET
CashSettlValuationMethod_AVERAGE_BLENDED_HIGHEST = cvar.CashSettlValuationMethod_AVERAGE_BLENDED_HIGHEST
StreamType_PAYMENT_CASH_SETTLEMENT = cvar.StreamType_PAYMENT_CASH_SETTLEMENT
StreamType_PHYSICAL_DELIVERY = cvar.StreamType_PHYSICAL_DELIVERY
ProvisionType_MANDATORY_EARLY_TERMINATION = cvar.ProvisionType_MANDATORY_EARLY_TERMINATION
ProvisionType_OPTIONAL_EARLY_TERMINATION = cvar.ProvisionType_OPTIONAL_EARLY_TERMINATION
ProvisionType_CANCELABLE = cvar.ProvisionType_CANCELABLE
ProvisionType_EXTENDABLE = cvar.ProvisionType_EXTENDABLE
ProvisionType_MUTUAL_EARLY_TERMINATION = cvar.ProvisionType_MUTUAL_EARLY_TERMINATION
ProvisionType_EVERGREEN = cvar.ProvisionType_EVERGREEN
ProvisionType_CALLABLE = cvar.ProvisionType_CALLABLE
ProvisionType_PUTTABLE = cvar.ProvisionType_PUTTABLE
ProvisionDateTenorUnit_DAY = cvar.ProvisionDateTenorUnit_DAY
ProvisionDateTenorUnit_WEEK = cvar.ProvisionDateTenorUnit_WEEK
ProvisionDateTenorUnit_MONTH = cvar.ProvisionDateTenorUnit_MONTH
ProvisionDateTenorUnit_YEAR = cvar.ProvisionDateTenorUnit_YEAR
ProvisionCalculationAgent_EXERCISING_PARTY = cvar.ProvisionCalculationAgent_EXERCISING_PARTY
ProvisionCalculationAgent_NON_EXERCISING_PARTY = cvar.ProvisionCalculationAgent_NON_EXERCISING_PARTY
ProvisionCalculationAgent_MASTER_AGREEENT = cvar.ProvisionCalculationAgent_MASTER_AGREEENT
ProvisionCalculationAgent_SUPPLEMENT = cvar.ProvisionCalculationAgent_SUPPLEMENT
ProvisionOptionSinglePartyBuyerSide_BUY = cvar.ProvisionOptionSinglePartyBuyerSide_BUY
ProvisionOptionSinglePartyBuyerSide_SELL = cvar.ProvisionOptionSinglePartyBuyerSide_SELL
ProvisionCashSettlMethod_CASH_PRICE = cvar.ProvisionCashSettlMethod_CASH_PRICE
ProvisionCashSettlMethod_CASH_PRICE_ALTERNATE = cvar.ProvisionCashSettlMethod_CASH_PRICE_ALTERNATE
ProvisionCashSettlMethod_PAR_YIELD_CURVE_ADJUSTED = cvar.ProvisionCashSettlMethod_PAR_YIELD_CURVE_ADJUSTED
ProvisionCashSettlMethod_ZERO_COUPON_YIELD_CURVE_ADJUSTED = cvar.ProvisionCashSettlMethod_ZERO_COUPON_YIELD_CURVE_ADJUSTED
ProvisionCashSettlMethod_PAR_YIELD_CURVE_UNADJUSTED = cvar.ProvisionCashSettlMethod_PAR_YIELD_CURVE_UNADJUSTED
ProvisionCashSettlMethod_CROSS_CURRENCY = cvar.ProvisionCashSettlMethod_CROSS_CURRENCY
ProvisionCashSettlMethod_COLLATERALIZED_PRICE = cvar.ProvisionCashSettlMethod_COLLATERALIZED_PRICE
ProvisionCashSettlQuoteType_BID = cvar.ProvisionCashSettlQuoteType_BID
ProvisionCashSettlQuoteType_MID = cvar.ProvisionCashSettlQuoteType_MID
ProvisionCashSettlQuoteType_OFFER = cvar.ProvisionCashSettlQuoteType_OFFER
ProvisionCashSettlQuoteType_EXERCISING_PARTY_PAYS = cvar.ProvisionCashSettlQuoteType_EXERCISING_PARTY_PAYS
ProvisionOptionExerciseEarliestDateOffsetUnit_DAY = cvar.ProvisionOptionExerciseEarliestDateOffsetUnit_DAY
ProvisionOptionExerciseEarliestDateOffsetUnit_WEEK = cvar.ProvisionOptionExerciseEarliestDateOffsetUnit_WEEK
ProvisionOptionExerciseEarliestDateOffsetUnit_MONTH = cvar.ProvisionOptionExerciseEarliestDateOffsetUnit_MONTH
ProvisionOptionExerciseEarliestDateOffsetUnit_YEAR = cvar.ProvisionOptionExerciseEarliestDateOffsetUnit_YEAR
ProvisionOptionExerciseFixedDateType_UNADJUSTED = cvar.ProvisionOptionExerciseFixedDateType_UNADJUSTED
ProvisionOptionExerciseFixedDateType_ADJUSTED = cvar.ProvisionOptionExerciseFixedDateType_ADJUSTED
ProvisionCashSettlPaymentDateType_UNADJUSTED = cvar.ProvisionCashSettlPaymentDateType_UNADJUSTED
ProvisionCashSettlPaymentDateType_ADJUSTED = cvar.ProvisionCashSettlPaymentDateType_ADJUSTED
ProtectionTermEventUnit_DAY = cvar.ProtectionTermEventUnit_DAY
ProtectionTermEventUnit_WEEK = cvar.ProtectionTermEventUnit_WEEK
ProtectionTermEventUnit_MONTH = cvar.ProtectionTermEventUnit_MONTH
ProtectionTermEventUnit_YEAR = cvar.ProtectionTermEventUnit_YEAR
ProtectionTermEventDayType_BUSINESS = cvar.ProtectionTermEventDayType_BUSINESS
ProtectionTermEventDayType_CALENDAR = cvar.ProtectionTermEventDayType_CALENDAR
ProtectionTermEventDayType_COMMODITY_BUSINESS = cvar.ProtectionTermEventDayType_COMMODITY_BUSINESS
ProtectionTermEventDayType_CURRENCY_BUSINESS = cvar.ProtectionTermEventDayType_CURRENCY_BUSINESS
ProtectionTermEventDayType_EXCHANGE_BUSINESS = cvar.ProtectionTermEventDayType_EXCHANGE_BUSINESS
ProtectionTermEventDayType_SCHEDULED_TRADING_DAY = cvar.ProtectionTermEventDayType_SCHEDULED_TRADING_DAY
ProtectionTermEventQualifier_RESTRUCTURING_MULTIPLE_HOLDING_OBLIGATIONS = cvar.ProtectionTermEventQualifier_RESTRUCTURING_MULTIPLE_HOLDING_OBLIGATIONS
ProtectionTermEventQualifier_RESTRUCTURING_MULTIPLE_CREDIT_EVENT_NOTICES = cvar.ProtectionTermEventQualifier_RESTRUCTURING_MULTIPLE_CREDIT_EVENT_NOTICES
ProtectionTermEventQualifier_FLOATING_RATE_INTEREST_SHORTFALL = cvar.ProtectionTermEventQualifier_FLOATING_RATE_INTEREST_SHORTFALL
PaymentType_BROKERAGE = cvar.PaymentType_BROKERAGE
PaymentType_UPFRONT_FEE = cvar.PaymentType_UPFRONT_FEE
PaymentType_INDEPENDENT_AMOUNT_COLLATERAL = cvar.PaymentType_INDEPENDENT_AMOUNT_COLLATERAL
PaymentType_PRINCIPAL_EXCHANGE = cvar.PaymentType_PRINCIPAL_EXCHANGE
PaymentType_NOVATION_TERMINATION = cvar.PaymentType_NOVATION_TERMINATION
PaymentType_EARLY_TERMINATION_PROVISION = cvar.PaymentType_EARLY_TERMINATION_PROVISION
PaymentType_CANCELABLE_PROVISION = cvar.PaymentType_CANCELABLE_PROVISION
PaymentType_EXTENDIBLE_PROVISION = cvar.PaymentType_EXTENDIBLE_PROVISION
PaymentType_CAP_RATE_PROVISION = cvar.PaymentType_CAP_RATE_PROVISION
PaymentType_FLOOR_RATE_PROVISION = cvar.PaymentType_FLOOR_RATE_PROVISION
PaymentType_OPTION_PREMIUM = cvar.PaymentType_OPTION_PREMIUM
PaymentType_SETTLEMENT_PAYMENT = cvar.PaymentType_SETTLEMENT_PAYMENT
PaymentType_CASH_SETTL = cvar.PaymentType_CASH_SETTL
PaymentType_SECURITY_LENDING = cvar.PaymentType_SECURITY_LENDING
PaymentType_REBATE = cvar.PaymentType_REBATE
PaymentType_OTHER = cvar.PaymentType_OTHER
PaymentPaySide_BUY = cvar.PaymentPaySide_BUY
PaymentPaySide_SELL = cvar.PaymentPaySide_SELL
PaymentSettlStyle_STANDARD = cvar.PaymentSettlStyle_STANDARD
PaymentSettlStyle_NET = cvar.PaymentSettlStyle_NET
PaymentSettlStyle_STANDARDF_NET = cvar.PaymentSettlStyle_STANDARDF_NET
PaymentStreamType_PERIODIC = cvar.PaymentStreamType_PERIODIC
PaymentStreamType_INITIAL = cvar.PaymentStreamType_INITIAL
PaymentStreamType_SINGLE = cvar.PaymentStreamType_SINGLE
PaymentStreamType_DIVIDEND = cvar.PaymentStreamType_DIVIDEND
PaymentStreamType_INTEREST = cvar.PaymentStreamType_INTEREST
PaymentStreamType_DIVIDEND_RETURN = cvar.PaymentStreamType_DIVIDEND_RETURN
PaymentStreamType_PRICE_RETURN = cvar.PaymentStreamType_PRICE_RETURN
PaymentStreamType_TOTAL_RETURN = cvar.PaymentStreamType_TOTAL_RETURN
PaymentStreamType_VARIANCE = cvar.PaymentStreamType_VARIANCE
PaymentStreamType_CORRELATION = cvar.PaymentStreamType_CORRELATION
PaymentStreamDiscountType_STANDARD = cvar.PaymentStreamDiscountType_STANDARD
PaymentStreamDiscountType_FRA = cvar.PaymentStreamDiscountType_FRA
PaymentStreamCompoundingMethod_NONE = cvar.PaymentStreamCompoundingMethod_NONE
PaymentStreamCompoundingMethod_FLAT = cvar.PaymentStreamCompoundingMethod_FLAT
PaymentStreamCompoundingMethod_STRAIGHT = cvar.PaymentStreamCompoundingMethod_STRAIGHT
PaymentStreamCompoundingMethod_SPREAD_EXCLUSIVE = cvar.PaymentStreamCompoundingMethod_SPREAD_EXCLUSIVE
PaymentStreamPaymentFrequencyUnit_DAY = cvar.PaymentStreamPaymentFrequencyUnit_DAY
PaymentStreamPaymentFrequencyUnit_WEEK = cvar.PaymentStreamPaymentFrequencyUnit_WEEK
PaymentStreamPaymentFrequencyUnit_MONTH = cvar.PaymentStreamPaymentFrequencyUnit_MONTH
PaymentStreamPaymentFrequencyUnit_YEAR = cvar.PaymentStreamPaymentFrequencyUnit_YEAR
PaymentStreamPaymentFrequencyUnit_TERM = cvar.PaymentStreamPaymentFrequencyUnit_TERM
PaymentStreamPaymentDateOffsetUnit_DAY = cvar.PaymentStreamPaymentDateOffsetUnit_DAY
PaymentStreamPaymentDateOffsetUnit_WEEK = cvar.PaymentStreamPaymentDateOffsetUnit_WEEK
PaymentStreamPaymentDateOffsetUnit_MONTH = cvar.PaymentStreamPaymentDateOffsetUnit_MONTH
PaymentStreamPaymentDateOffsetUnit_YEAR = cvar.PaymentStreamPaymentDateOffsetUnit_YEAR
PaymentStreamResetWeeklyRollConvention_MONDAY = cvar.PaymentStreamResetWeeklyRollConvention_MONDAY
PaymentStreamResetWeeklyRollConvention_TUESDAY = cvar.PaymentStreamResetWeeklyRollConvention_TUESDAY
PaymentStreamResetWeeklyRollConvention_WEDNESDAY = cvar.PaymentStreamResetWeeklyRollConvention_WEDNESDAY
PaymentStreamResetWeeklyRollConvention_THURSDAY = cvar.PaymentStreamResetWeeklyRollConvention_THURSDAY
PaymentStreamResetWeeklyRollConvention_FRIDAY = cvar.PaymentStreamResetWeeklyRollConvention_FRIDAY
PaymentStreamResetWeeklyRollConvention_SATURDAY = cvar.PaymentStreamResetWeeklyRollConvention_SATURDAY
PaymentStreamResetWeeklyRollConvention_SUNDAY = cvar.PaymentStreamResetWeeklyRollConvention_SUNDAY
PaymentStreamRateIndexSource_BLOOMBERG = cvar.PaymentStreamRateIndexSource_BLOOMBERG
PaymentStreamRateIndexSource_REUTERS = cvar.PaymentStreamRateIndexSource_REUTERS
PaymentStreamRateIndexSource_TELERATE = cvar.PaymentStreamRateIndexSource_TELERATE
PaymentStreamRateIndexSource_OTHER = cvar.PaymentStreamRateIndexSource_OTHER
PaymentStreamRateIndexCurveUnit_DAY = cvar.PaymentStreamRateIndexCurveUnit_DAY
PaymentStreamRateIndexCurveUnit_WEEK = cvar.PaymentStreamRateIndexCurveUnit_WEEK
PaymentStreamRateIndexCurveUnit_MONTH = cvar.PaymentStreamRateIndexCurveUnit_MONTH
PaymentStreamRateIndexCurveUnit_YEAR = cvar.PaymentStreamRateIndexCurveUnit_YEAR
PaymentStreamRateSpreadPositionType_SHORT = cvar.PaymentStreamRateSpreadPositionType_SHORT
PaymentStreamRateSpreadPositionType_LONG = cvar.PaymentStreamRateSpreadPositionType_LONG
PaymentStreamRateTreatment_BOND_EQUIVALENT_YIELD = cvar.PaymentStreamRateTreatment_BOND_EQUIVALENT_YIELD
PaymentStreamRateTreatment_MONEY_MARKET_YIELD = cvar.PaymentStreamRateTreatment_MONEY_MARKET_YIELD
PaymentStreamCapRateBuySide_BUYER = cvar.PaymentStreamCapRateBuySide_BUYER
PaymentStreamCapRateBuySide_SELLER = cvar.PaymentStreamCapRateBuySide_SELLER
PaymentStreamFloorRateBuySide_BUYER = cvar.PaymentStreamFloorRateBuySide_BUYER
PaymentStreamFloorRateBuySide_SELLER = cvar.PaymentStreamFloorRateBuySide_SELLER
PaymentStreamAveragingMethod_UNWEIGHTED = cvar.PaymentStreamAveragingMethod_UNWEIGHTED
PaymentStreamAveragingMethod_WEIGHTED = cvar.PaymentStreamAveragingMethod_WEIGHTED
PaymentStreamNegativeRateTreatment_ZERO_INTEREST_RATE_METHOD = cvar.PaymentStreamNegativeRateTreatment_ZERO_INTEREST_RATE_METHOD
PaymentStreamNegativeRateTreatment_NEGATIVE_INTEREST_RATE_METHOD = cvar.PaymentStreamNegativeRateTreatment_NEGATIVE_INTEREST_RATE_METHOD
PaymentStreamInflationLagUnit_DAY = cvar.PaymentStreamInflationLagUnit_DAY
PaymentStreamInflationLagUnit_WEEK = cvar.PaymentStreamInflationLagUnit_WEEK
PaymentStreamInflationLagUnit_MONTH = cvar.PaymentStreamInflationLagUnit_MONTH
PaymentStreamInflationLagUnit_YEAR = cvar.PaymentStreamInflationLagUnit_YEAR
PaymentStreamInflationLagDayType_BUSINESS = cvar.PaymentStreamInflationLagDayType_BUSINESS
PaymentStreamInflationLagDayType_CALENDAR = cvar.PaymentStreamInflationLagDayType_CALENDAR
PaymentStreamInflationLagDayType_COMMODITY_BUSINESS = cvar.PaymentStreamInflationLagDayType_COMMODITY_BUSINESS
PaymentStreamInflationLagDayType_CURRENCY_BUSINESS = cvar.PaymentStreamInflationLagDayType_CURRENCY_BUSINESS
PaymentStreamInflationLagDayType_EXCHANGE_BUSINESS = cvar.PaymentStreamInflationLagDayType_EXCHANGE_BUSINESS
PaymentStreamInflationLagDayType_SCHEDULED_TRADING_DAY = cvar.PaymentStreamInflationLagDayType_SCHEDULED_TRADING_DAY
PaymentStreamInflationInterpolationMethod_NONE = cvar.PaymentStreamInflationInterpolationMethod_NONE
PaymentStreamInflationInterpolationMethod_LINEAR_ZERO_YIELD = cvar.PaymentStreamInflationInterpolationMethod_LINEAR_ZERO_YIELD
PaymentStreamFRADiscounting_NONE = cvar.PaymentStreamFRADiscounting_NONE
PaymentStreamFRADiscounting_ISDA = cvar.PaymentStreamFRADiscounting_ISDA
PaymentStreamFRADiscounting_AFMA = cvar.PaymentStreamFRADiscounting_AFMA
NonDeliverableFixingDateType_UNADJUSTED = cvar.NonDeliverableFixingDateType_UNADJUSTED
NonDeliverableFixingDateType_ADJUSTED = cvar.NonDeliverableFixingDateType_ADJUSTED
PaymentScheduleType_NOTIONAL = cvar.PaymentScheduleType_NOTIONAL
PaymentScheduleType_CASH_FLOW = cvar.PaymentScheduleType_CASH_FLOW
PaymentScheduleType_FX_LINKED_NOTIONAL = cvar.PaymentScheduleType_FX_LINKED_NOTIONAL
PaymentScheduleType_FIXED_RATE = cvar.PaymentScheduleType_FIXED_RATE
PaymentScheduleType_FUTURE_VALUE_NOTIONAL = cvar.PaymentScheduleType_FUTURE_VALUE_NOTIONAL
PaymentScheduleType_KNOWN_AMOUNT = cvar.PaymentScheduleType_KNOWN_AMOUNT
PaymentScheduleType_FLOATING_RATE_MULTIPLIER = cvar.PaymentScheduleType_FLOATING_RATE_MULTIPLIER
PaymentScheduleType_SPREAD = cvar.PaymentScheduleType_SPREAD
PaymentScheduleType_CAP_RATE = cvar.PaymentScheduleType_CAP_RATE
PaymentScheduleType_FLOOR_RATE = cvar.PaymentScheduleType_FLOOR_RATE
PaymentScheduleType_NON_DELIVERABLE_SETTL_PAYMENT_DATES = cvar.PaymentScheduleType_NON_DELIVERABLE_SETTL_PAYMENT_DATES
PaymentScheduleType_NON_DELIVERABLE_SETTL_CALCULATION_DATES = cvar.PaymentScheduleType_NON_DELIVERABLE_SETTL_CALCULATION_DATES
PaymentScheduleType_NON_DELIVERABLE_FX_FIXING_DATES = cvar.PaymentScheduleType_NON_DELIVERABLE_FX_FIXING_DATES
PaymentScheduleType_SETTL_PERIOD_NOTNL = cvar.PaymentScheduleType_SETTL_PERIOD_NOTNL
PaymentScheduleType_SETTL_PERIOD_PX = cvar.PaymentScheduleType_SETTL_PERIOD_PX
PaymentScheduleType_CALC_PERIOD = cvar.PaymentScheduleType_CALC_PERIOD
PaymentScheduleType_DIVIDEND_ACCRUAL_RATE_MULTIPLIER = cvar.PaymentScheduleType_DIVIDEND_ACCRUAL_RATE_MULTIPLIER
PaymentScheduleType_DIVIDEND_ACCRUAL_RATE_SPREAD = cvar.PaymentScheduleType_DIVIDEND_ACCRUAL_RATE_SPREAD
PaymentScheduleType_DIVIDEND_ACCRUAL_CAP_RATE = cvar.PaymentScheduleType_DIVIDEND_ACCRUAL_CAP_RATE
PaymentScheduleType_DIVIDEND_ACCRUAL_FLOOR_RATE = cvar.PaymentScheduleType_DIVIDEND_ACCRUAL_FLOOR_RATE
PaymentScheduleType_COMPOUNDING_RATE_MULTIPLIER = cvar.PaymentScheduleType_COMPOUNDING_RATE_MULTIPLIER
PaymentScheduleType_COMPOUNDING_RATE_SPREAD = cvar.PaymentScheduleType_COMPOUNDING_RATE_SPREAD
PaymentScheduleType_COMPOUNDING_CAP_RATE = cvar.PaymentScheduleType_COMPOUNDING_CAP_RATE
PaymentScheduleType_COMPOUNDING_FLOOR_RATE = cvar.PaymentScheduleType_COMPOUNDING_FLOOR_RATE
PaymentScheduleStepRelativeTo_INITIAL = cvar.PaymentScheduleStepRelativeTo_INITIAL
PaymentScheduleStepRelativeTo_PREVIOUS = cvar.PaymentScheduleStepRelativeTo_PREVIOUS
PaymentStubType_INITIAL = cvar.PaymentStubType_INITIAL
PaymentStubType_FINAL = cvar.PaymentStubType_FINAL
PaymentStubType_COMPOUNDING_INITIAL = cvar.PaymentStubType_COMPOUNDING_INITIAL
PaymentStubType_COMPOUNDING_FINAL = cvar.PaymentStubType_COMPOUNDING_FINAL
PaymentStubLength_SHORT = cvar.PaymentStubLength_SHORT
PaymentStubLength_LONG = cvar.PaymentStubLength_LONG
PaymentStreamPaymentDateOffsetDayType_BUSINESS = cvar.PaymentStreamPaymentDateOffsetDayType_BUSINESS
PaymentStreamPaymentDateOffsetDayType_CALENDAR = cvar.PaymentStreamPaymentDateOffsetDayType_CALENDAR
PaymentStreamPaymentDateOffsetDayType_COMMODITY_BUSINESS = cvar.PaymentStreamPaymentDateOffsetDayType_COMMODITY_BUSINESS
PaymentStreamPaymentDateOffsetDayType_CURRENCY_BUSINESS = cvar.PaymentStreamPaymentDateOffsetDayType_CURRENCY_BUSINESS
PaymentStreamPaymentDateOffsetDayType_EXCHANGE_BUSINESS = cvar.PaymentStreamPaymentDateOffsetDayType_EXCHANGE_BUSINESS
PaymentStreamPaymentDateOffsetDayType_SCHEDULED_TRADING_DAY = cvar.PaymentStreamPaymentDateOffsetDayType_SCHEDULED_TRADING_DAY
BusinessDayConvention_NOT_APPLICABLE = cvar.BusinessDayConvention_NOT_APPLICABLE
BusinessDayConvention_NONE = cvar.BusinessDayConvention_NONE
BusinessDayConvention_FOLLOWING_DAY = cvar.BusinessDayConvention_FOLLOWING_DAY
BusinessDayConvention_FLOATING_RATE_NOTE = cvar.BusinessDayConvention_FLOATING_RATE_NOTE
BusinessDayConvention_MODIFIED_FOLLOWING_DAY = cvar.BusinessDayConvention_MODIFIED_FOLLOWING_DAY
BusinessDayConvention_PRECEDING_DAY = cvar.BusinessDayConvention_PRECEDING_DAY
BusinessDayConvention_MODIFIED_PRECEDING_DAY = cvar.BusinessDayConvention_MODIFIED_PRECEDING_DAY
BusinessDayConvention_NEAREST_DAY = cvar.BusinessDayConvention_NEAREST_DAY
DateRollConvention_FIRST_DAY = cvar.DateRollConvention_FIRST_DAY
DateRollConvention_SECOND_DAY = cvar.DateRollConvention_SECOND_DAY
DateRollConvention_THIRD_DAY = cvar.DateRollConvention_THIRD_DAY
DateRollConvention_FOURTH_DAY = cvar.DateRollConvention_FOURTH_DAY
DateRollConvention_FIFTH_DAY = cvar.DateRollConvention_FIFTH_DAY
DateRollConvention_SIXTH_DAY = cvar.DateRollConvention_SIXTH_DAY
DateRollConvention_SEVENTH_DAY = cvar.DateRollConvention_SEVENTH_DAY
DateRollConvention_EIGHTH_DAY = cvar.DateRollConvention_EIGHTH_DAY
DateRollConvention_NINTH_DAY = cvar.DateRollConvention_NINTH_DAY
DateRollConvention_TENTH_DAY = cvar.DateRollConvention_TENTH_DAY
DateRollConvention_ELEVENTH_DAY = cvar.DateRollConvention_ELEVENTH_DAY
DateRollConvention_TWELVTH_DAY = cvar.DateRollConvention_TWELVTH_DAY
DateRollConvention_THIRTEENTH_DAY = cvar.DateRollConvention_THIRTEENTH_DAY
DateRollConvention_FORTEENTH_DAY = cvar.DateRollConvention_FORTEENTH_DAY
DateRollConvention_FIFTEENTH_DAY = cvar.DateRollConvention_FIFTEENTH_DAY
DateRollConvention_SIXTEENTH_DAY = cvar.DateRollConvention_SIXTEENTH_DAY
DateRollConvention_SEVENTEENTH_DAY = cvar.DateRollConvention_SEVENTEENTH_DAY
DateRollConvention_EIGHTEENTH_DAY = cvar.DateRollConvention_EIGHTEENTH_DAY
DateRollConvention_NINETEENTH_DAY = cvar.DateRollConvention_NINETEENTH_DAY
DateRollConvention_TWENTIETH_DAY = cvar.DateRollConvention_TWENTIETH_DAY
DateRollConvention_TWENTY_FIRST_DAY = cvar.DateRollConvention_TWENTY_FIRST_DAY
DateRollConvention_TWENTY_SECOND_DAY = cvar.DateRollConvention_TWENTY_SECOND_DAY
DateRollConvention_TWENTY_THIRD_DAY = cvar.DateRollConvention_TWENTY_THIRD_DAY
DateRollConvention_TWENTY_FOURTH_DAY = cvar.DateRollConvention_TWENTY_FOURTH_DAY
DateRollConvention_TWENTY_FIFTH_DAY = cvar.DateRollConvention_TWENTY_FIFTH_DAY
DateRollConvention_TWENTY_SIXTH_DAY = cvar.DateRollConvention_TWENTY_SIXTH_DAY
DateRollConvention_TWENTY_SEVENTH_DAY = cvar.DateRollConvention_TWENTY_SEVENTH_DAY
DateRollConvention_TWENTY_EIGTH_DA28Y = cvar.DateRollConvention_TWENTY_EIGTH_DA28Y
DateRollConvention_TWENTY_NINTH_DAY = cvar.DateRollConvention_TWENTY_NINTH_DAY
DateRollConvention_THIRTIETH_DAY = cvar.DateRollConvention_THIRTIETH_DAY
DateRollConvention_EOM = cvar.DateRollConvention_EOM
DateRollConvention_FRN = cvar.DateRollConvention_FRN
DateRollConvention_IMM = cvar.DateRollConvention_IMM
DateRollConvention_IMMCAD = cvar.DateRollConvention_IMMCAD
DateRollConvention_IMMAUD = cvar.DateRollConvention_IMMAUD
DateRollConvention_IMMNZD = cvar.DateRollConvention_IMMNZD
DateRollConvention_SFE = cvar.DateRollConvention_SFE
DateRollConvention_NONE = cvar.DateRollConvention_NONE
DateRollConvention_TBILL = cvar.DateRollConvention_TBILL
DateRollConvention_MON = cvar.DateRollConvention_MON
DateRollConvention_TUE = cvar.DateRollConvention_TUE
DateRollConvention_WED = cvar.DateRollConvention_WED
DateRollConvention_THU = cvar.DateRollConvention_THU
DateRollConvention_FRI = cvar.DateRollConvention_FRI
DateRollConvention_SAT = cvar.DateRollConvention_SAT
DateRollConvention_SUN = cvar.DateRollConvention_SUN
AttachmentEncodingType_BASE64 = cvar.AttachmentEncodingType_BASE64
AttachmentEncodingType_RAW_BINARY = cvar.AttachmentEncodingType_RAW_BINARY
NegotiationMethod_AUTO_SPOT = cvar.NegotiationMethod_AUTO_SPOT
NegotiationMethod_NEGOTIATED_SPOT = cvar.NegotiationMethod_NEGOTIATED_SPOT
NegotiationMethod_PHONE_SPOT = cvar.NegotiationMethod_PHONE_SPOT
ComplexEventPeriodType_ASIAN_OUT = cvar.ComplexEventPeriodType_ASIAN_OUT
ComplexEventPeriodType_ASIAN_IN = cvar.ComplexEventPeriodType_ASIAN_IN
ComplexEventPeriodType_BARRIER_CAP = cvar.ComplexEventPeriodType_BARRIER_CAP
ComplexEventPeriodType_BARRIER_FLOOR = cvar.ComplexEventPeriodType_BARRIER_FLOOR
ComplexEventPeriodType_KNOCK_OUT = cvar.ComplexEventPeriodType_KNOCK_OUT
ComplexEventPeriodType_KNOCK_IN = cvar.ComplexEventPeriodType_KNOCK_IN
ComplexEventDateOffsetDayType_BUSINESS = cvar.ComplexEventDateOffsetDayType_BUSINESS
ComplexEventDateOffsetDayType_CALENDAR = cvar.ComplexEventDateOffsetDayType_CALENDAR
ComplexEventDateOffsetDayType_COMMODITY_BUSINESS = cvar.ComplexEventDateOffsetDayType_COMMODITY_BUSINESS
ComplexEventDateOffsetDayType_CURRENCY_BUSINESS = cvar.ComplexEventDateOffsetDayType_CURRENCY_BUSINESS
ComplexEventDateOffsetDayType_EXCHANGE_BUSINESS = cvar.ComplexEventDateOffsetDayType_EXCHANGE_BUSINESS
ComplexEventDateOffsetDayType_SCHEDULED_TRADING_DAY = cvar.ComplexEventDateOffsetDayType_SCHEDULED_TRADING_DAY
ComplexOptPayoutTime_CLOSE = cvar.ComplexOptPayoutTime_CLOSE
ComplexOptPayoutTime_OPEN = cvar.ComplexOptPayoutTime_OPEN
ComplexOptPayoutTime_OFFICIAL_SETTL = cvar.ComplexOptPayoutTime_OFFICIAL_SETTL
ComplexOptPayoutTime_VALUATION_TIME = cvar.ComplexOptPayoutTime_VALUATION_TIME
ComplexOptPayoutTime_EXCAHGNE_SETTL_TIME = cvar.ComplexOptPayoutTime_EXCAHGNE_SETTL_TIME
ComplexOptPayoutTime_DERIVATIVES_CLOSE = cvar.ComplexOptPayoutTime_DERIVATIVES_CLOSE
ComplexOptPayoutTime_AS_SPECIFIED = cvar.ComplexOptPayoutTime_AS_SPECIFIED
ComplexEventQuoteBasis_CURRENCY1_PER_CURRENCY2 = cvar.ComplexEventQuoteBasis_CURRENCY1_PER_CURRENCY2
ComplexEventQuoteBasis_CURRENCY2_PER_CURRENCY1 = cvar.ComplexEventQuoteBasis_CURRENCY2_PER_CURRENCY1
ComplexEventCreditEventNotifyingParty_SELLER_NOTIFIES = cvar.ComplexEventCreditEventNotifyingParty_SELLER_NOTIFIES
ComplexEventCreditEventNotifyingParty_BUYER_NOTIFIES = cvar.ComplexEventCreditEventNotifyingParty_BUYER_NOTIFIES
ComplexEventCreditEventNotifyingParty_SELLER_OR_BUYER_NOTIFIES = cvar.ComplexEventCreditEventNotifyingParty_SELLER_OR_BUYER_NOTIFIES
DeliveryScheduleType_NOTIONAL = cvar.DeliveryScheduleType_NOTIONAL
DeliveryScheduleType_DELIVERY = cvar.DeliveryScheduleType_DELIVERY
DeliveryScheduleType_PHYSICAL_SETTL_PERIODS = cvar.DeliveryScheduleType_PHYSICAL_SETTL_PERIODS
DeliveryScheduleToleranceType_ABSOLUTE = cvar.DeliveryScheduleToleranceType_ABSOLUTE
DeliveryScheduleToleranceType_PERCENTAGE = cvar.DeliveryScheduleToleranceType_PERCENTAGE
DeliveryScheduleSettlFlowType_ALL_TIMES = cvar.DeliveryScheduleSettlFlowType_ALL_TIMES
DeliveryScheduleSettlFlowType_ON_PEAK = cvar.DeliveryScheduleSettlFlowType_ON_PEAK
DeliveryScheduleSettlFlowType_OFF_PEAK = cvar.DeliveryScheduleSettlFlowType_OFF_PEAK
DeliveryScheduleSettlFlowType_BASE = cvar.DeliveryScheduleSettlFlowType_BASE
DeliveryScheduleSettlFlowType_BLOCK_HOURS = cvar.DeliveryScheduleSettlFlowType_BLOCK_HOURS
DeliveryScheduleSettlFlowType_OTHER = cvar.DeliveryScheduleSettlFlowType_OTHER
DeliveryScheduleSettlHolidaysProcessingInstruction_DO_NOT_INCLUDE_HOLIDAYS = cvar.DeliveryScheduleSettlHolidaysProcessingInstruction_DO_NOT_INCLUDE_HOLIDAYS
DeliveryScheduleSettlHolidaysProcessingInstruction_INCLUDE_HOLIDAYS = cvar.DeliveryScheduleSettlHolidaysProcessingInstruction_INCLUDE_HOLIDAYS
DeliveryScheduleSettlDay_MONDAY = cvar.DeliveryScheduleSettlDay_MONDAY
DeliveryScheduleSettlDay_TUESDAY = cvar.DeliveryScheduleSettlDay_TUESDAY
DeliveryScheduleSettlDay_WEDNESDAY = cvar.DeliveryScheduleSettlDay_WEDNESDAY
DeliveryScheduleSettlDay_THURSDAY = cvar.DeliveryScheduleSettlDay_THURSDAY
DeliveryScheduleSettlDay_FRIDAY = cvar.DeliveryScheduleSettlDay_FRIDAY
DeliveryScheduleSettlDay_SATURDAY = cvar.DeliveryScheduleSettlDay_SATURDAY
DeliveryScheduleSettlDay_SUNDAY = cvar.DeliveryScheduleSettlDay_SUNDAY
DeliveryScheduleSettlDay_ALL_WEEKDAYS = cvar.DeliveryScheduleSettlDay_ALL_WEEKDAYS
DeliveryScheduleSettlDay_ALL_DAYS = cvar.DeliveryScheduleSettlDay_ALL_DAYS
DeliveryScheduleSettlDay_ALL_WEEKENDS = cvar.DeliveryScheduleSettlDay_ALL_WEEKENDS
DeliveryScheduleSettlTimeType_HOUR = cvar.DeliveryScheduleSettlTimeType_HOUR
DeliveryScheduleSettlTimeType_TIMESTAMP = cvar.DeliveryScheduleSettlTimeType_TIMESTAMP
DeliveryStreamType_PERIODIC = cvar.DeliveryStreamType_PERIODIC
DeliveryStreamType_INITIAL = cvar.DeliveryStreamType_INITIAL
DeliveryStreamType_SINGLE = cvar.DeliveryStreamType_SINGLE
DeliveryStreamDeliveryRestriction_FIRM = cvar.DeliveryStreamDeliveryRestriction_FIRM
DeliveryStreamDeliveryRestriction_NON_FIRM = cvar.DeliveryStreamDeliveryRestriction_NON_FIRM
DeliveryStreamDeliveryRestriction_FORCE_MAJEURE = cvar.DeliveryStreamDeliveryRestriction_FORCE_MAJEURE
DeliveryStreamDeliveryRestriction_SYSTEM_FIRM = cvar.DeliveryStreamDeliveryRestriction_SYSTEM_FIRM
DeliveryStreamDeliveryRestriction_UNIT_FIRM = cvar.DeliveryStreamDeliveryRestriction_UNIT_FIRM
DeliveryStreamTitleTransferCondition_TRANSFERS = cvar.DeliveryStreamTitleTransferCondition_TRANSFERS
DeliveryStreamTitleTransferCondition_DOES_NOT_TRANSFER = cvar.DeliveryStreamTitleTransferCondition_DOES_NOT_TRANSFER
DeliveryStreamToleranceOptionSide_BUYER = cvar.DeliveryStreamToleranceOptionSide_BUYER
DeliveryStreamToleranceOptionSide_SELLER = cvar.DeliveryStreamToleranceOptionSide_SELLER
DeliveryStreamElectingPartySide_BUYER = cvar.DeliveryStreamElectingPartySide_BUYER
DeliveryStreamElectingPartySide_SELLER = cvar.DeliveryStreamElectingPartySide_SELLER
SwapSubClass_AMORTIZING = cvar.SwapSubClass_AMORTIZING
SwapSubClass_COMPOUNDING = cvar.SwapSubClass_COMPOUNDING
SwapSubClass_CONSTANT_NOTIONAL_SCHEDULE = cvar.SwapSubClass_CONSTANT_NOTIONAL_SCHEDULE
SwapSubClass_ACCRETING_NOTIONAL_SCHEDULE = cvar.SwapSubClass_ACCRETING_NOTIONAL_SCHEDULE
SwapSubClass_CUSTOM_NOTIONAL_SCHEDULE = cvar.SwapSubClass_CUSTOM_NOTIONAL_SCHEDULE
StrategyType_STRADDLE = cvar.StrategyType_STRADDLE
StrategyType_STRANGLE = cvar.StrategyType_STRANGLE
StrategyType_BUTTERFLY = cvar.StrategyType_BUTTERFLY
StrategyType_CONDOR = cvar.StrategyType_CONDOR
StrategyType_CALLABLE_INVERSIBLE_SNOWBALL = cvar.StrategyType_CALLABLE_INVERSIBLE_SNOWBALL
StrategyType_OTHER = cvar.StrategyType_OTHER
SettlDisruptionProvision_NEGOTIATION = cvar.SettlDisruptionProvision_NEGOTIATION
SettlDisruptionProvision_CANCELLATION = cvar.SettlDisruptionProvision_CANCELLATION
MarketDisruptionProvision_NOT_APPLICABLE = cvar.MarketDisruptionProvision_NOT_APPLICABLE
MarketDisruptionProvision_APPLICABLE = cvar.MarketDisruptionProvision_APPLICABLE
MarketDisruptionProvision_AS_IN_MASTER_AGREEMENT = cvar.MarketDisruptionProvision_AS_IN_MASTER_AGREEMENT
MarketDisruptionProvision_AS_IN_CONFIRMATION = cvar.MarketDisruptionProvision_AS_IN_CONFIRMATION
MarketDisruptionFallbackProvision_MASTER_AGREEMENT = cvar.MarketDisruptionFallbackProvision_MASTER_AGREEMENT
MarketDisruptionFallbackProvision_CONFIRMATION = cvar.MarketDisruptionFallbackProvision_CONFIRMATION
MarketDisruptionFallbackUnderlierType_BASKET = cvar.MarketDisruptionFallbackUnderlierType_BASKET
MarketDisruptionFallbackUnderlierType_BOND = cvar.MarketDisruptionFallbackUnderlierType_BOND
MarketDisruptionFallbackUnderlierType_CASH = cvar.MarketDisruptionFallbackUnderlierType_CASH
MarketDisruptionFallbackUnderlierType_COMMODITY = cvar.MarketDisruptionFallbackUnderlierType_COMMODITY
MarketDisruptionFallbackUnderlierType_CONVERTIBLE_BOND = cvar.MarketDisruptionFallbackUnderlierType_CONVERTIBLE_BOND
MarketDisruptionFallbackUnderlierType_EQUITY = cvar.MarketDisruptionFallbackUnderlierType_EQUITY
MarketDisruptionFallbackUnderlierType_EXCHANGE_TRADED_FUND = cvar.MarketDisruptionFallbackUnderlierType_EXCHANGE_TRADED_FUND
MarketDisruptionFallbackUnderlierType_FUTURE = cvar.MarketDisruptionFallbackUnderlierType_FUTURE
MarketDisruptionFallbackUnderlierType_INDEX = cvar.MarketDisruptionFallbackUnderlierType_INDEX
MarketDisruptionFallbackUnderlierType_LOAN = cvar.MarketDisruptionFallbackUnderlierType_LOAN
MarketDisruptionFallbackUnderlierType_MORTGAGE = cvar.MarketDisruptionFallbackUnderlierType_MORTGAGE
MarketDisruptionFallbackUnderlierType_MUTUAL_FUND = cvar.MarketDisruptionFallbackUnderlierType_MUTUAL_FUND
ExerciseConfirmationMethod_NOT_REQUIRED = cvar.ExerciseConfirmationMethod_NOT_REQUIRED
ExerciseConfirmationMethod_NON_ELECTRONIC = cvar.ExerciseConfirmationMethod_NON_ELECTRONIC
ExerciseConfirmationMethod_ELECTRONIC = cvar.ExerciseConfirmationMethod_ELECTRONIC
ExerciseConfirmationMethod_UNKNOWN = cvar.ExerciseConfirmationMethod_UNKNOWN
OptionExerciseDateType_UNADJUSTED = cvar.OptionExerciseDateType_UNADJUSTED
OptionExerciseDateType_ADJUSTED = cvar.OptionExerciseDateType_ADJUSTED
PaymentDateOffsetDayType_BUSINESS = cvar.PaymentDateOffsetDayType_BUSINESS
PaymentDateOffsetDayType_CALENDAR = cvar.PaymentDateOffsetDayType_CALENDAR
PaymentDateOffsetDayType_COMMODITY = cvar.PaymentDateOffsetDayType_COMMODITY
PaymentDateOffsetDayType_CURRENCY = cvar.PaymentDateOffsetDayType_CURRENCY
PaymentDateOffsetDayType_EXCHANGE = cvar.PaymentDateOffsetDayType_EXCHANGE
PaymentDateOffsetDayType_SCHEDULED = cvar.PaymentDateOffsetDayType_SCHEDULED
PaymentForwardStartType_PREPAID = cvar.PaymentForwardStartType_PREPAID
PaymentForwardStartType_POSTPAID = cvar.PaymentForwardStartType_POSTPAID
PaymentForwardStartType_VARIABLE = cvar.PaymentForwardStartType_VARIABLE
PaymentForwardStartType_FIXED = cvar.PaymentForwardStartType_FIXED
PaymentStreamSettlLevel_AVERAGE = cvar.PaymentStreamSettlLevel_AVERAGE
PaymentStreamSettlLevel_MAXIMUM = cvar.PaymentStreamSettlLevel_MAXIMUM
PaymentStreamSettlLevel_MINIMUM = cvar.PaymentStreamSettlLevel_MINIMUM
PaymentStreamSettlLevel_CUMULATIVE = cvar.PaymentStreamSettlLevel_CUMULATIVE
PaymentStreamRateSpreadType_ABSOLUTE = cvar.PaymentStreamRateSpreadType_ABSOLUTE
PaymentStreamRateSpreadType_PERCENTAGE = cvar.PaymentStreamRateSpreadType_PERCENTAGE
PaymentStreamPricingDayDistribution_ALL = cvar.PaymentStreamPricingDayDistribution_ALL
PaymentStreamPricingDayDistribution_FIRST = cvar.PaymentStreamPricingDayDistribution_FIRST
PaymentStreamPricingDayDistribution_LAST = cvar.PaymentStreamPricingDayDistribution_LAST
PaymentStreamPricingDayDistribution_PENULTIMATE = cvar.PaymentStreamPricingDayDistribution_PENULTIMATE
PaymentStreamPricingDayOfWeek_EVERY_DAY = cvar.PaymentStreamPricingDayOfWeek_EVERY_DAY
PaymentStreamPricingDayOfWeek_MONDAY = cvar.PaymentStreamPricingDayOfWeek_MONDAY
PaymentStreamPricingDayOfWeek_TUESDAY = cvar.PaymentStreamPricingDayOfWeek_TUESDAY
PaymentStreamPricingDayOfWeek_WEDNESDAY = cvar.PaymentStreamPricingDayOfWeek_WEDNESDAY
PaymentStreamPricingDayOfWeek_THURSDAY = cvar.PaymentStreamPricingDayOfWeek_THURSDAY
PaymentStreamPricingDayOfWeek_FRIDAY = cvar.PaymentStreamPricingDayOfWeek_FRIDAY
PaymentStreamPricingDayOfWeek_SATURDAY = cvar.PaymentStreamPricingDayOfWeek_SATURDAY
PaymentStreamPricingDayOfWeek_SUNDAY = cvar.PaymentStreamPricingDayOfWeek_SUNDAY
StreamCommodityNearbySettlDayUnit_WEEK = cvar.StreamCommodityNearbySettlDayUnit_WEEK
StreamCommodityNearbySettlDayUnit_MONTH = cvar.StreamCommodityNearbySettlDayUnit_MONTH
StreamCommoditySettlDateRollUnit_DAY = cvar.StreamCommoditySettlDateRollUnit_DAY
StreamCommodityDataSourceIDType_CITY = cvar.StreamCommodityDataSourceIDType_CITY
StreamCommodityDataSourceIDType_AIRPORT = cvar.StreamCommodityDataSourceIDType_AIRPORT
StreamCommodityDataSourceIDType_WEATHER_STATION = cvar.StreamCommodityDataSourceIDType_WEATHER_STATION
StreamCommodityDataSourceIDType_WEATHER_INDEX = cvar.StreamCommodityDataSourceIDType_WEATHER_INDEX
StreamNotionalCommodityFrequency_TERM = cvar.StreamNotionalCommodityFrequency_TERM
StreamNotionalCommodityFrequency_PER_BUSINESS_DAY = cvar.StreamNotionalCommodityFrequency_PER_BUSINESS_DAY
StreamNotionalCommodityFrequency_PER_CALCULATION_PERIOD = cvar.StreamNotionalCommodityFrequency_PER_CALCULATION_PERIOD
StreamNotionalCommodityFrequency_PER_SETTL_PERIOD = cvar.StreamNotionalCommodityFrequency_PER_SETTL_PERIOD
StreamNotionalCommodityFrequency_PER_CALENDAR_DAY = cvar.StreamNotionalCommodityFrequency_PER_CALENDAR_DAY
StreamNotionalCommodityFrequency_PER_HOUR = cvar.StreamNotionalCommodityFrequency_PER_HOUR
StreamNotionalCommodityFrequency_PER_MONTH = cvar.StreamNotionalCommodityFrequency_PER_MONTH
RiskLimitReportStatus_ACCEPTED = cvar.RiskLimitReportStatus_ACCEPTED
RiskLimitReportStatus_REJECTED = cvar.RiskLimitReportStatus_REJECTED
RiskLimitReportRejectReason_UNK_RISK_LMT_RPRT_ID = cvar.RiskLimitReportRejectReason_UNK_RISK_LMT_RPRT_ID
RiskLimitReportRejectReason_UNK_PTY = cvar.RiskLimitReportRejectReason_UNK_PTY
RiskLimitReportRejectReason_OTHER = cvar.RiskLimitReportRejectReason_OTHER
RiskLimitCheckTransType_NEW = cvar.RiskLimitCheckTransType_NEW
RiskLimitCheckTransType_CANCEL = cvar.RiskLimitCheckTransType_CANCEL
RiskLimitCheckTransType_REPLACE = cvar.RiskLimitCheckTransType_REPLACE
RiskLimitCheckType_SUBMIT = cvar.RiskLimitCheckType_SUBMIT
RiskLimitCheckType_LIMIT_CONSUMED = cvar.RiskLimitCheckType_LIMIT_CONSUMED
RiskLimitCheckRequestType_ALL_OR_NONE = cvar.RiskLimitCheckRequestType_ALL_OR_NONE
RiskLimitCheckRequestType_PARTIAL = cvar.RiskLimitCheckRequestType_PARTIAL
RiskLimitCheckRequestStatus_APPROVED = cvar.RiskLimitCheckRequestStatus_APPROVED
RiskLimitCheckRequestStatus_PARTIALLY_APPROVED = cvar.RiskLimitCheckRequestStatus_PARTIALLY_APPROVED
RiskLimitCheckRequestStatus_REJECTED = cvar.RiskLimitCheckRequestStatus_REJECTED
RiskLimitCheckRequestStatus_APPROVAL_PENDING = cvar.RiskLimitCheckRequestStatus_APPROVAL_PENDING
RiskLimitCheckRequestStatus_CANCELLED = cvar.RiskLimitCheckRequestStatus_CANCELLED
RiskLimitCheckRequestResult_SUCCESSFUL = cvar.RiskLimitCheckRequestResult_SUCCESSFUL
RiskLimitCheckRequestResult_INVALID_PARTY = cvar.RiskLimitCheckRequestResult_INVALID_PARTY
RiskLimitCheckRequestResult_REQ_EXCEEDS_CREDIT_LIMIT = cvar.RiskLimitCheckRequestResult_REQ_EXCEEDS_CREDIT_LIMIT
RiskLimitCheckRequestResult_REQ_EXCEEDS_CLIP_SIZE_LIMIT = cvar.RiskLimitCheckRequestResult_REQ_EXCEEDS_CLIP_SIZE_LIMIT
RiskLimitCheckRequestResult_REQ_EXCEEDS_MAX_NOTIONAL = cvar.RiskLimitCheckRequestResult_REQ_EXCEEDS_MAX_NOTIONAL
RiskLimitCheckRequestResult_OTHER = cvar.RiskLimitCheckRequestResult_OTHER
PartyActionType_SUSPEND = cvar.PartyActionType_SUSPEND
PartyActionType_HALT_TRADING = cvar.PartyActionType_HALT_TRADING
PartyActionType_REINSTATE = cvar.PartyActionType_REINSTATE
PartyActionResponse_ACCEPTED = cvar.PartyActionResponse_ACCEPTED
PartyActionResponse_COMPLETED = cvar.PartyActionResponse_COMPLETED
PartyActionResponse_REJECTED = cvar.PartyActionResponse_REJECTED
PartyActionRejectReason_INVALID_PARTY = cvar.PartyActionRejectReason_INVALID_PARTY
PartyActionRejectReason_UNK_REQ_PARTY = cvar.PartyActionRejectReason_UNK_REQ_PARTY
PartyActionRejectReason_NOT_AUTHORIZED = cvar.PartyActionRejectReason_NOT_AUTHORIZED
PartyActionRejectReason_OTHER = cvar.PartyActionRejectReason_OTHER
RefRiskLimitCheckIDType_RISK_LIMIT_REQUEST_ID = cvar.RefRiskLimitCheckIDType_RISK_LIMIT_REQUEST_ID
RefRiskLimitCheckIDType_RISK_LIMIT_CHECK_ID = cvar.RefRiskLimitCheckIDType_RISK_LIMIT_CHECK_ID
RefRiskLimitCheckIDType_OUT_OF_BAND_ID = cvar.RefRiskLimitCheckIDType_OUT_OF_BAND_ID
RiskLimitCheckModelType_NONE = cvar.RiskLimitCheckModelType_NONE
RiskLimitCheckModelType_PLUS_ONE_MODEL = cvar.RiskLimitCheckModelType_PLUS_ONE_MODEL
RiskLimitCheckModelType_PING_MODEL = cvar.RiskLimitCheckModelType_PING_MODEL
RiskLimitCheckModelType_PUSH_MODEL = cvar.RiskLimitCheckModelType_PUSH_MODEL
RiskLimitCheckStatus_ACCEPTED = cvar.RiskLimitCheckStatus_ACCEPTED
RiskLimitCheckStatus_REJECTED = cvar.RiskLimitCheckStatus_REJECTED
RiskLimitCheckStatus_CLAIM_REQUIRED = cvar.RiskLimitCheckStatus_CLAIM_REQUIRED
RiskLimitCheckStatus_PRE_DEFINED_LIMIT_CHECK_SUCCEEDED = cvar.RiskLimitCheckStatus_PRE_DEFINED_LIMIT_CHECK_SUCCEEDED
RiskLimitCheckStatus_PRE_DEFINED_LIMIT_CHECK_FAILED = cvar.RiskLimitCheckStatus_PRE_DEFINED_LIMIT_CHECK_FAILED
RiskLimitCheckStatus_PRE_DEFINED_AUTO_ACCEPT_RULE_INVOKED = cvar.RiskLimitCheckStatus_PRE_DEFINED_AUTO_ACCEPT_RULE_INVOKED
RiskLimitCheckStatus_PRE_DEFINED_AUTO_REJECT_RULE_INVOKED = cvar.RiskLimitCheckStatus_PRE_DEFINED_AUTO_REJECT_RULE_INVOKED
RiskLimitCheckStatus_ACCEPTED_BY_CLEARING_FIRM = cvar.RiskLimitCheckStatus_ACCEPTED_BY_CLEARING_FIRM
RiskLimitCheckStatus_REJECTED_BY_CLEARING_FIRM = cvar.RiskLimitCheckStatus_REJECTED_BY_CLEARING_FIRM
RiskLimitCheckStatus_PENDING = cvar.RiskLimitCheckStatus_PENDING
RiskLimitCheckStatus_ACCEPTED_BY_CREDIT_HUB = cvar.RiskLimitCheckStatus_ACCEPTED_BY_CREDIT_HUB
RiskLimitCheckStatus_REJECTED_BY_CREDIT_HUB = cvar.RiskLimitCheckStatus_REJECTED_BY_CREDIT_HUB
RiskLimitCheckStatus_PENDING_CREDIT_HUB_CHECK = cvar.RiskLimitCheckStatus_PENDING_CREDIT_HUB_CHECK
RiskLimitCheckStatus_ACCEPTED_BY_EXEC_VENUE = cvar.RiskLimitCheckStatus_ACCEPTED_BY_EXEC_VENUE
RiskLimitCheckStatus_REJECTED_BY_EXEC_VENUE = cvar.RiskLimitCheckStatus_REJECTED_BY_EXEC_VENUE
RegulatoryTransactionType_NONE = cvar.RegulatoryTransactionType_NONE
RegulatoryTransactionType_SEF_REQUIRED_TRANSACTION = cvar.RegulatoryTransactionType_SEF_REQUIRED_TRANSACTION
RegulatoryTransactionType_SEF_PERMITTED_TRANSACTION = cvar.RegulatoryTransactionType_SEF_PERMITTED_TRANSACTION
BatchProcessMode_UPDATE = cvar.BatchProcessMode_UPDATE
BatchProcessMode_SNAPSHOT = cvar.BatchProcessMode_SNAPSHOT
DeliveryStreamDeliveryPointSource_PROPRIETARY = cvar.DeliveryStreamDeliveryPointSource_PROPRIETARY
DeliveryStreamDeliveryPointSource_EIC = cvar.DeliveryStreamDeliveryPointSource_EIC
TaxonomyType_ISIN_OR_ALT_INSTRMT_ID = cvar.TaxonomyType_ISIN_OR_ALT_INSTRMT_ID
TaxonomyType_INTERIM_TAXONOMY = cvar.TaxonomyType_INTERIM_TAXONOMY
RegulatoryTradeIDScope_CLEARING_MEMBER = cvar.RegulatoryTradeIDScope_CLEARING_MEMBER
RegulatoryTradeIDScope_CLIENT = cvar.RegulatoryTradeIDScope_CLIENT
EntitlementSubType_ORDER_ENTRY = cvar.EntitlementSubType_ORDER_ENTRY
EntitlementSubType_H_IT_LIFT = cvar.EntitlementSubType_H_IT_LIFT
EntitlementSubType_VIEW_INDICATIVE_PX = cvar.EntitlementSubType_VIEW_INDICATIVE_PX
EntitlementSubType_VIEW_EXECUTABLE_PX = cvar.EntitlementSubType_VIEW_EXECUTABLE_PX
EntitlementSubType_SINGLE_QUOTE = cvar.EntitlementSubType_SINGLE_QUOTE
EntitlementSubType_STREAMING_QUOTES = cvar.EntitlementSubType_STREAMING_QUOTES
EntitlementSubType_SINGLE_BROKER = cvar.EntitlementSubType_SINGLE_BROKER
EntitlementSubType_MULTI_BROKERS = cvar.EntitlementSubType_MULTI_BROKERS
QuoteModelType_QUOTE_ENTRY = cvar.QuoteModelType_QUOTE_ENTRY
QuoteModelType_QUOTE_MODIFICATION = cvar.QuoteModelType_QUOTE_MODIFICATION
ExecMethod_UNSPECIFIED = cvar.ExecMethod_UNSPECIFIED
ExecMethod_MANUAL = cvar.ExecMethod_MANUAL
ExecMethod_AUTOMATED = cvar.ExecMethod_AUTOMATED
ExecMethod_VOICE_BROKERED = cvar.ExecMethod_VOICE_BROKERED
TradeContingency_DOES_NOT_APPLY = cvar.TradeContingency_DOES_NOT_APPLY
TradeContingency_CONTINGENT_TRADE = cvar.TradeContingency_CONTINGENT_TRADE
TradeContingency_NON_CONTINGENT_TRADE = cvar.TradeContingency_NON_CONTINGENT_TRADE
PaymentSubType_INITIAL = cvar.PaymentSubType_INITIAL
PaymentSubType_INTERMEDIATE = cvar.PaymentSubType_INTERMEDIATE
PaymentSubType_FINAL = cvar.PaymentSubType_FINAL
PaymentSubType_PREPAID = cvar.PaymentSubType_PREPAID
PaymentSubType_POSTPAID = cvar.PaymentSubType_POSTPAID
PaymentSubType_VARIABLE = cvar.PaymentSubType_VARIABLE
PaymentSubType_FIXED = cvar.PaymentSubType_FIXED
PaymentSubType_SWAP = cvar.PaymentSubType_SWAP
PaymentSubType_CONDITIONAL = cvar.PaymentSubType_CONDITIONAL
PaymentSubType_FIXED_RATE = cvar.PaymentSubType_FIXED_RATE
PaymentSubType_FLOATING_RATE = cvar.PaymentSubType_FLOATING_RATE
MassOrderRequestStatus_ACCEPTED = cvar.MassOrderRequestStatus_ACCEPTED
MassOrderRequestStatus_ACCEPTED_WITH_ADDITIONAL_EVENTS = cvar.MassOrderRequestStatus_ACCEPTED_WITH_ADDITIONAL_EVENTS
MassOrderRequestStatus_REJECTED = cvar.MassOrderRequestStatus_REJECTED
MassOrderRequestResult_SUCCESSFUL = cvar.MassOrderRequestResult_SUCCESSFUL
MassOrderRequestResult_RESPONSE_LEVEL_NOT_SUPPORTED = cvar.MassOrderRequestResult_RESPONSE_LEVEL_NOT_SUPPORTED
MassOrderRequestResult_INVALID_MARKET = cvar.MassOrderRequestResult_INVALID_MARKET
MassOrderRequestResult_INVALID_MARKET_SEGMENT = cvar.MassOrderRequestResult_INVALID_MARKET_SEGMENT
MassOrderRequestResult_OTHER = cvar.MassOrderRequestResult_OTHER
OrderResponseLevel_NO_ACK = cvar.OrderResponseLevel_NO_ACK
OrderResponseLevel_MINIMUM_ACK = cvar.OrderResponseLevel_MINIMUM_ACK
OrderResponseLevel_ACK_EACH = cvar.OrderResponseLevel_ACK_EACH
OrderResponseLevel_SUMMARY_ACK = cvar.OrderResponseLevel_SUMMARY_ACK
OrderEntryAction_ADD = cvar.OrderEntryAction_ADD
OrderEntryAction_MODIFY = cvar.OrderEntryAction_MODIFY
OrderEntryAction_DELETE = cvar.OrderEntryAction_DELETE
OrderEntryAction_SUSPEND = cvar.OrderEntryAction_SUSPEND
OrderEntryAction_RELEASE = cvar.OrderEntryAction_RELEASE
ExecTypeReason_ORD_ADDED_ON_REQUEST = cvar.ExecTypeReason_ORD_ADDED_ON_REQUEST
ExecTypeReason_ORD_REPLACED_ON_REQUEST = cvar.ExecTypeReason_ORD_REPLACED_ON_REQUEST
ExecTypeReason_ORD_CXLD_ON_REQUEST = cvar.ExecTypeReason_ORD_CXLD_ON_REQUEST
ExecTypeReason_UNSOLICITED_ORD_CXL = cvar.ExecTypeReason_UNSOLICITED_ORD_CXL
ExecTypeReason_NON_RESTING_ORD_ADDED_ON_REQUEST = cvar.ExecTypeReason_NON_RESTING_ORD_ADDED_ON_REQUEST
ExecTypeReason_ORD_REPLACED_WITH_NON_RESTING_ORD_ON_REQUEST = cvar.ExecTypeReason_ORD_REPLACED_WITH_NON_RESTING_ORD_ON_REQUEST
ExecTypeReason_TRIGGER_ORD_REPLACED_ON_REQUEST = cvar.ExecTypeReason_TRIGGER_ORD_REPLACED_ON_REQUEST
ExecTypeReason_SUSPENDED_ORD_REPLACED_ON_REQUEST = cvar.ExecTypeReason_SUSPENDED_ORD_REPLACED_ON_REQUEST
ExecTypeReason_SUSPENDED_ORD_CXLD_ON_REQUEST = cvar.ExecTypeReason_SUSPENDED_ORD_CXLD_ON_REQUEST
ExecTypeReason_ORD_CXL_PENDING = cvar.ExecTypeReason_ORD_CXL_PENDING
ExecTypeReason_PENDING_CXL_EXECUTED = cvar.ExecTypeReason_PENDING_CXL_EXECUTED
ExecTypeReason_RESTING_ORD_TRIGGERED = cvar.ExecTypeReason_RESTING_ORD_TRIGGERED
ExecTypeReason_SUSPENDED_ORD_ACTIVATED = cvar.ExecTypeReason_SUSPENDED_ORD_ACTIVATED
ExecTypeReason_ACTIVE_ORD_SUSPENDED = cvar.ExecTypeReason_ACTIVE_ORD_SUSPENDED
ExecTypeReason_ORD_EXPIRED = cvar.ExecTypeReason_ORD_EXPIRED
TransferTransType_NEW = cvar.TransferTransType_NEW
TransferTransType_REPLACE = cvar.TransferTransType_REPLACE
TransferTransType_CANCEL = cvar.TransferTransType_CANCEL
TransferType_REQUEST_TRANSFER = cvar.TransferType_REQUEST_TRANSFER
TransferType_ACCEPT_TRANSFER = cvar.TransferType_ACCEPT_TRANSFER
TransferType_DECLINE_TRANSFER = cvar.TransferType_DECLINE_TRANSFER
TransferScope_INTER_FIRM_TRANSFER = cvar.TransferScope_INTER_FIRM_TRANSFER
TransferScope_INTRA_FIRM_TRANSFER = cvar.TransferScope_INTRA_FIRM_TRANSFER
TransferScope_CMTA = cvar.TransferScope_CMTA
TransferStatus_RECEIVED = cvar.TransferStatus_RECEIVED
TransferStatus_REJECTED_BY_INTERMEDIARY = cvar.TransferStatus_REJECTED_BY_INTERMEDIARY
TransferStatus_ACCEPT_PENDING = cvar.TransferStatus_ACCEPT_PENDING
TransferStatus_ACCEPTED = cvar.TransferStatus_ACCEPTED
TransferStatus_DECLINED = cvar.TransferStatus_DECLINED
TransferStatus_CANCELLED = cvar.TransferStatus_CANCELLED
TransferRejectReason_SUCCESS = cvar.TransferRejectReason_SUCCESS
TransferRejectReason_INVALID_PARTY = cvar.TransferRejectReason_INVALID_PARTY
TransferRejectReason_UNKNOWN_INSTRUMENT = cvar.TransferRejectReason_UNKNOWN_INSTRUMENT
TransferRejectReason_UNAUTHORIZED_TO_SUBMIT_XFER = cvar.TransferRejectReason_UNAUTHORIZED_TO_SUBMIT_XFER
TransferRejectReason_UNKNOWN_POSITION = cvar.TransferRejectReason_UNKNOWN_POSITION
TransferRejectReason_OTHER = cvar.TransferRejectReason_OTHER
TransferReportType_SUBMIT = cvar.TransferReportType_SUBMIT
TransferReportType_ALLEGED = cvar.TransferReportType_ALLEGED
MDStatisticType_COUNT = cvar.MDStatisticType_COUNT
MDStatisticType_AVERAGE_VOLUME = cvar.MDStatisticType_AVERAGE_VOLUME
MDStatisticType_TOTAL_VOLUME = cvar.MDStatisticType_TOTAL_VOLUME
MDStatisticType_DISTRIBUTION = cvar.MDStatisticType_DISTRIBUTION
MDStatisticType_RATIO = cvar.MDStatisticType_RATIO
MDStatisticType_LIQUIDITY = cvar.MDStatisticType_LIQUIDITY
MDStatisticType_VWAP = cvar.MDStatisticType_VWAP
MDStatisticType_VOLATILITY = cvar.MDStatisticType_VOLATILITY
MDStatisticType_DURATION = cvar.MDStatisticType_DURATION
MDStatisticType_TICK = cvar.MDStatisticType_TICK
MDStatisticType_AVERAGE_VALUE = cvar.MDStatisticType_AVERAGE_VALUE
MDStatisticType_TOTAL_VALUE = cvar.MDStatisticType_TOTAL_VALUE
MDStatisticType_HIGH = cvar.MDStatisticType_HIGH
MDStatisticType_LOW = cvar.MDStatisticType_LOW
MDStatisticType_MIDPOINT = cvar.MDStatisticType_MIDPOINT
MDStatisticType_FIRST = cvar.MDStatisticType_FIRST
MDStatisticType_LAST = cvar.MDStatisticType_LAST
MDStatisticType_FINAL = cvar.MDStatisticType_FINAL
MDStatisticType_EXCHANGE_BEST = cvar.MDStatisticType_EXCHANGE_BEST
MDStatisticType_EXCHANGE_BEST_WITH_VOLUME = cvar.MDStatisticType_EXCHANGE_BEST_WITH_VOLUME
MDStatisticType_CONSOLIDATED_BEST = cvar.MDStatisticType_CONSOLIDATED_BEST
MDStatisticType_CONSOLIDATED_BEST_WITH_VOLUME = cvar.MDStatisticType_CONSOLIDATED_BEST_WITH_VOLUME
MDStatisticType_TWAP = cvar.MDStatisticType_TWAP
MDStatisticType_AVERAGE_DURATION = cvar.MDStatisticType_AVERAGE_DURATION
MDStatisticType_AVERAGE_PRICE = cvar.MDStatisticType_AVERAGE_PRICE
MDStatisticType_TOTAL_FEES = cvar.MDStatisticType_TOTAL_FEES
MDStatisticType_TOTAL_BENEFITS = cvar.MDStatisticType_TOTAL_BENEFITS
MDStatisticType_MEDIAN_VALUE = cvar.MDStatisticType_MEDIAN_VALUE
MDStatisticType_AVERAGE_LIQUIDITY = cvar.MDStatisticType_AVERAGE_LIQUIDITY
MDStatisticType_MEDIAN_DURATION = cvar.MDStatisticType_MEDIAN_DURATION
MDStatisticScope_BID_PRICES = cvar.MDStatisticScope_BID_PRICES
MDStatisticScope_OFFER_PRICES = cvar.MDStatisticScope_OFFER_PRICES
MDStatisticScope_BID_DEPTH = cvar.MDStatisticScope_BID_DEPTH
MDStatisticScope_OFFER_DEPTH = cvar.MDStatisticScope_OFFER_DEPTH
MDStatisticScope_ORDERS = cvar.MDStatisticScope_ORDERS
MDStatisticScope_QUOTES = cvar.MDStatisticScope_QUOTES
MDStatisticScope_ORDERS_AND_QUOTES = cvar.MDStatisticScope_ORDERS_AND_QUOTES
MDStatisticScope_TRADES = cvar.MDStatisticScope_TRADES
MDStatisticScope_TRADE_PRICES = cvar.MDStatisticScope_TRADE_PRICES
MDStatisticScope_AUCTION_PRICES = cvar.MDStatisticScope_AUCTION_PRICES
MDStatisticScope_OPENING_PRICES = cvar.MDStatisticScope_OPENING_PRICES
MDStatisticScope_CLOSING_PRICES = cvar.MDStatisticScope_CLOSING_PRICES
MDStatisticScope_SETTLEMENT_PRICES = cvar.MDStatisticScope_SETTLEMENT_PRICES
MDStatisticScope_UNDERLYING_PRICES = cvar.MDStatisticScope_UNDERLYING_PRICES
MDStatisticScope_OPEN_INTEREST = cvar.MDStatisticScope_OPEN_INTEREST
MDStatisticScope_INDEX_VALUES = cvar.MDStatisticScope_INDEX_VALUES
MDStatisticScope_MARGIN_RATES = cvar.MDStatisticScope_MARGIN_RATES
MDStatisticScope_OUTAGES = cvar.MDStatisticScope_OUTAGES
MDStatisticScope_SCHEDULED_AUCTIONS = cvar.MDStatisticScope_SCHEDULED_AUCTIONS
MDStatisticScope_REFERENCE_PRICES = cvar.MDStatisticScope_REFERENCE_PRICES
MDStatisticScope_TRADE_VALUE = cvar.MDStatisticScope_TRADE_VALUE
MDStatisticScope_MARKET_DATA_FEE_ITEMS = cvar.MDStatisticScope_MARKET_DATA_FEE_ITEMS
MDStatisticScope_REBATES = cvar.MDStatisticScope_REBATES
MDStatisticScope_DISCOUNTS = cvar.MDStatisticScope_DISCOUNTS
MDStatisticScope_PAYMENTS = cvar.MDStatisticScope_PAYMENTS
MDStatisticScope_TAXES = cvar.MDStatisticScope_TAXES
MDStatisticScope_LEVIES = cvar.MDStatisticScope_LEVIES
MDStatisticScope_BENEFITS = cvar.MDStatisticScope_BENEFITS
MDStatisticScope_FEES = cvar.MDStatisticScope_FEES
MDStatisticScope_ORDERS_RF_QS = cvar.MDStatisticScope_ORDERS_RF_QS
MDStatisticScope_MARKET_MAKERS = cvar.MDStatisticScope_MARKET_MAKERS
MDStatisticScope_TRADING_INTERRUPTIONS = cvar.MDStatisticScope_TRADING_INTERRUPTIONS
MDStatisticScope_TRADING_SUSPENSIONS = cvar.MDStatisticScope_TRADING_SUSPENSIONS
MDStatisticScope_NO_QUOTES = cvar.MDStatisticScope_NO_QUOTES
MDStatisticScope_REQUEST_FOR_QUOTES = cvar.MDStatisticScope_REQUEST_FOR_QUOTES
MDStatisticScope_TRADE_VOLUME = cvar.MDStatisticScope_TRADE_VOLUME
MDStatisticSubScope_VISIBLE = cvar.MDStatisticSubScope_VISIBLE
MDStatisticSubScope_HIDDEN = cvar.MDStatisticSubScope_HIDDEN
MDStatisticSubScope_INDICATIVE = cvar.MDStatisticSubScope_INDICATIVE
MDStatisticSubScope_TRADEABLE = cvar.MDStatisticSubScope_TRADEABLE
MDStatisticSubScope_PASSIVE = cvar.MDStatisticSubScope_PASSIVE
MDStatisticSubScope_MARKET_CONSENSUS = cvar.MDStatisticSubScope_MARKET_CONSENSUS
MDStatisticSubScope_POWER = cvar.MDStatisticSubScope_POWER
MDStatisticSubScope_HARDWARE_ERROR = cvar.MDStatisticSubScope_HARDWARE_ERROR
MDStatisticSubScope_SOFTWARE_ERROR = cvar.MDStatisticSubScope_SOFTWARE_ERROR
MDStatisticSubScope_NETWORK_ERROR = cvar.MDStatisticSubScope_NETWORK_ERROR
MDStatisticSubScope_FAILED = cvar.MDStatisticSubScope_FAILED
MDStatisticSubScope_EXECUTED = cvar.MDStatisticSubScope_EXECUTED
MDStatisticSubScope_ENTERED = cvar.MDStatisticSubScope_ENTERED
MDStatisticSubScope_MODIFIED = cvar.MDStatisticSubScope_MODIFIED
MDStatisticSubScope_CANCELLED = cvar.MDStatisticSubScope_CANCELLED
MDStatisticSubScope_MARKET_DATA_ACCESS = cvar.MDStatisticSubScope_MARKET_DATA_ACCESS
MDStatisticSubScope_TERMINAL_ACCESS = cvar.MDStatisticSubScope_TERMINAL_ACCESS
MDStatisticSubScope_VOLUME = cvar.MDStatisticSubScope_VOLUME
MDStatisticSubScope_CLEARED = cvar.MDStatisticSubScope_CLEARED
MDStatisticSubScope_SETTLED = cvar.MDStatisticSubScope_SETTLED
MDStatisticSubScope_OTHER = cvar.MDStatisticSubScope_OTHER
MDStatisticSubScope_MONETARY = cvar.MDStatisticSubScope_MONETARY
MDStatisticSubScope_NON_MONETARY = cvar.MDStatisticSubScope_NON_MONETARY
MDStatisticSubScope_GROSS = cvar.MDStatisticSubScope_GROSS
MDStatisticSubScope_LARGE_IN_SCALE = cvar.MDStatisticSubScope_LARGE_IN_SCALE
MDStatisticSubScope_NEITHER_HIDDEN_NOR_LARGE_IN_SCALE = cvar.MDStatisticSubScope_NEITHER_HIDDEN_NOR_LARGE_IN_SCALE
MDStatisticSubScope_CORPORATE_ACTION = cvar.MDStatisticSubScope_CORPORATE_ACTION
MDStatisticSubScope_VENUE_DECISION = cvar.MDStatisticSubScope_VENUE_DECISION
MDStatisticSubScope_MINIMUM_TIME_PERIOD = cvar.MDStatisticSubScope_MINIMUM_TIME_PERIOD
MDStatisticSubScope_OPEN = cvar.MDStatisticSubScope_OPEN
MDStatisticSubScope_NOT_EXECUTED = cvar.MDStatisticSubScope_NOT_EXECUTED
MDStatisticSubScope_AGGRESSIVE = cvar.MDStatisticSubScope_AGGRESSIVE
MDStatisticSubScope_DIRECTED = cvar.MDStatisticSubScope_DIRECTED
MDStatisticScopeType_ENTRY_RATE = cvar.MDStatisticScopeType_ENTRY_RATE
MDStatisticScopeType_MODIFICATION_RATE = cvar.MDStatisticScopeType_MODIFICATION_RATE
MDStatisticScopeType_CANCEL_RATE = cvar.MDStatisticScopeType_CANCEL_RATE
MDStatisticScopeType_DOWNWARD_MOVE = cvar.MDStatisticScopeType_DOWNWARD_MOVE
MDStatisticScopeType_UPWARD_MOVE = cvar.MDStatisticScopeType_UPWARD_MOVE
MDStatisticIntervalType_SLIDING_WINDOW = cvar.MDStatisticIntervalType_SLIDING_WINDOW
MDStatisticIntervalType_SLIDING_WINDOW_PEAK = cvar.MDStatisticIntervalType_SLIDING_WINDOW_PEAK
MDStatisticIntervalType_FIXED_DATE_RANGE = cvar.MDStatisticIntervalType_FIXED_DATE_RANGE
MDStatisticIntervalType_FIXED_TIME_RANGE = cvar.MDStatisticIntervalType_FIXED_TIME_RANGE
MDStatisticIntervalType_CURRENT_TIME_UNIT = cvar.MDStatisticIntervalType_CURRENT_TIME_UNIT
MDStatisticIntervalType_PREVIOUS_TIME_UNIT = cvar.MDStatisticIntervalType_PREVIOUS_TIME_UNIT
MDStatisticIntervalType_MAXIMUM_RANGE = cvar.MDStatisticIntervalType_MAXIMUM_RANGE
MDStatisticIntervalType_MAXIMUM_RANGE_UP_TO_PREVIOUS_TIME_UNIT = cvar.MDStatisticIntervalType_MAXIMUM_RANGE_UP_TO_PREVIOUS_TIME_UNIT
MDStatisticRatioType_BUYERS_TO_SELLERS = cvar.MDStatisticRatioType_BUYERS_TO_SELLERS
MDStatisticRatioType_UPTICKS_TO_DOWNTICKS = cvar.MDStatisticRatioType_UPTICKS_TO_DOWNTICKS
MDStatisticRatioType_MARKET_MAKER_TO_NON_MARKET_MAKER = cvar.MDStatisticRatioType_MARKET_MAKER_TO_NON_MARKET_MAKER
MDStatisticRatioType_AUTOMATED_TO_NON_AUTOMATED = cvar.MDStatisticRatioType_AUTOMATED_TO_NON_AUTOMATED
MDStatisticRatioType_ORDERS_TO_TRADES = cvar.MDStatisticRatioType_ORDERS_TO_TRADES
MDStatisticRatioType_QUOTES_TO_TRADES = cvar.MDStatisticRatioType_QUOTES_TO_TRADES
MDStatisticRatioType_ORDERS_AND_QUOTES_TO_TRADES = cvar.MDStatisticRatioType_ORDERS_AND_QUOTES_TO_TRADES
MDStatisticRatioType_FAILED_TO_TOTAL_TRADED_VALUE = cvar.MDStatisticRatioType_FAILED_TO_TOTAL_TRADED_VALUE
MDStatisticRatioType_BENEFITS_TO_TOTAL_TRADED_VALUE = cvar.MDStatisticRatioType_BENEFITS_TO_TOTAL_TRADED_VALUE
MDStatisticRatioType_FEES_TO_TOTAL_TRADED_VALUE = cvar.MDStatisticRatioType_FEES_TO_TOTAL_TRADED_VALUE
MDStatisticRatioType_TRADE_VOLUME_TO_TOTAL_TRADED_VOLUME = cvar.MDStatisticRatioType_TRADE_VOLUME_TO_TOTAL_TRADED_VOLUME
MDStatisticRatioType_ORDERS_TO_TOTAL_NUMBER_ORDERS = cvar.MDStatisticRatioType_ORDERS_TO_TOTAL_NUMBER_ORDERS
MDStatisticRequestResult_SUCCESSFUL = cvar.MDStatisticRequestResult_SUCCESSFUL
MDStatisticRequestResult_INVALID_OR_UNKNOWN_MARKET = cvar.MDStatisticRequestResult_INVALID_OR_UNKNOWN_MARKET
MDStatisticRequestResult_INVALID_OR_UNKNOWN_MARKET_SEGMENT = cvar.MDStatisticRequestResult_INVALID_OR_UNKNOWN_MARKET_SEGMENT
MDStatisticRequestResult_INVALID_OR_UNKNOWN_SECURITY_LIST = cvar.MDStatisticRequestResult_INVALID_OR_UNKNOWN_SECURITY_LIST
MDStatisticRequestResult_INVALID_OR_UNKNOWN_INSTRUMENTS = cvar.MDStatisticRequestResult_INVALID_OR_UNKNOWN_INSTRUMENTS
MDStatisticRequestResult_INVALID_PARTIES = cvar.MDStatisticRequestResult_INVALID_PARTIES
MDStatisticRequestResult_TRADE_DATE_OUT_OF_SUPPORTED_RANGE = cvar.MDStatisticRequestResult_TRADE_DATE_OUT_OF_SUPPORTED_RANGE
MDStatisticRequestResult_UNSUPPORTED_STATISTIC_TYPE = cvar.MDStatisticRequestResult_UNSUPPORTED_STATISTIC_TYPE
MDStatisticRequestResult_UNSUPPORTED_SCOPE_OR_SUB_SCOPE = cvar.MDStatisticRequestResult_UNSUPPORTED_SCOPE_OR_SUB_SCOPE
MDStatisticRequestResult_UNSUPPORTED_SCOPE_TYPE = cvar.MDStatisticRequestResult_UNSUPPORTED_SCOPE_TYPE
MDStatisticRequestResult_MARKET_DEPTH_NOT_SUPPORTED = cvar.MDStatisticRequestResult_MARKET_DEPTH_NOT_SUPPORTED
MDStatisticRequestResult_FREQUENCY_NOT_SUPPORTED = cvar.MDStatisticRequestResult_FREQUENCY_NOT_SUPPORTED
MDStatisticRequestResult_UNSUPPORTED_STATISTIC_INTERVAL = cvar.MDStatisticRequestResult_UNSUPPORTED_STATISTIC_INTERVAL
MDStatisticRequestResult_UNSUPPORTED_STATISTIC_DATE_RANGE = cvar.MDStatisticRequestResult_UNSUPPORTED_STATISTIC_DATE_RANGE
MDStatisticRequestResult_UNSUPPORTED_STATISTIC_TIME_RANGE = cvar.MDStatisticRequestResult_UNSUPPORTED_STATISTIC_TIME_RANGE
MDStatisticRequestResult_UNSUPPORTED_RATIO_TYPE = cvar.MDStatisticRequestResult_UNSUPPORTED_RATIO_TYPE
MDStatisticRequestResult_INVALID_OR_UNKNOWN_TRADE_INPUT_SOURCE = cvar.MDStatisticRequestResult_INVALID_OR_UNKNOWN_TRADE_INPUT_SOURCE
MDStatisticRequestResult_INVALID_OR_UNKNOWN_TRADING_SESSION = cvar.MDStatisticRequestResult_INVALID_OR_UNKNOWN_TRADING_SESSION
MDStatisticRequestResult_UNAUTHORIZED_FOR_STATISTIC_REQUEST = cvar.MDStatisticRequestResult_UNAUTHORIZED_FOR_STATISTIC_REQUEST
MDStatisticRequestResult_OTHER = cvar.MDStatisticRequestResult_OTHER
MDStatisticStatus_ACTIVE = cvar.MDStatisticStatus_ACTIVE
MDStatisticStatus_INACTIVE = cvar.MDStatisticStatus_INACTIVE
MDStatisticValueType_ABSOLUTE = cvar.MDStatisticValueType_ABSOLUTE
MDStatisticValueType_PERCENTAGE = cvar.MDStatisticValueType_PERCENTAGE
AssetGroup_FINANCIALS = cvar.AssetGroup_FINANCIALS
AssetGroup_COMMODITIES = cvar.AssetGroup_COMMODITIES
AssetGroup_ALTERNATIVE_INVESTMENTS = cvar.AssetGroup_ALTERNATIVE_INVESTMENTS
CollRptRejectReason_UNKNOWN_TRADE = cvar.CollRptRejectReason_UNKNOWN_TRADE
CollRptRejectReason_UNKNOWN_INSTRUMENT = cvar.CollRptRejectReason_UNKNOWN_INSTRUMENT
CollRptRejectReason_UNKNOWN_COUNTERPARTY = cvar.CollRptRejectReason_UNKNOWN_COUNTERPARTY
CollRptRejectReason_UNKNOWN_POSITION = cvar.CollRptRejectReason_UNKNOWN_POSITION
CollRptRejectReason_UNACCEPTABLE_COLLATERAL = cvar.CollRptRejectReason_UNACCEPTABLE_COLLATERAL
CollRptRejectReason_OTHER = cvar.CollRptRejectReason_OTHER
CollRptStatus_ACCEPTED = cvar.CollRptStatus_ACCEPTED
CollRptStatus_RECEIVED = cvar.CollRptStatus_RECEIVED
CollRptStatus_REJECTED = cvar.CollRptStatus_REJECTED
RelativeValueType_ASW_SPREAD = cvar.RelativeValueType_ASW_SPREAD
RelativeValueType_OIS = cvar.RelativeValueType_OIS
RelativeValueType_Z_SPREAD = cvar.RelativeValueType_Z_SPREAD
RelativeValueType_DISCOUNT_MARGIN = cvar.RelativeValueType_DISCOUNT_MARGIN
RelativeValueType_I_SPREAD = cvar.RelativeValueType_I_SPREAD
RelativeValueType_OAS = cvar.RelativeValueType_OAS
RelativeValueType_G_SPREAD = cvar.RelativeValueType_G_SPREAD
RelativeValueType_CDS_BASIS = cvar.RelativeValueType_CDS_BASIS
RelativeValueType_CDS_INTERPOLATED_BASIS = cvar.RelativeValueType_CDS_INTERPOLATED_BASIS
RelativeValueType_DV01 = cvar.RelativeValueType_DV01
RelativeValueType_PV01 = cvar.RelativeValueType_PV01
RelativeValueType_CS01 = cvar.RelativeValueType_CS01
RelativeValueSide_BID = cvar.RelativeValueSide_BID
RelativeValueSide_MID = cvar.RelativeValueSide_MID
RelativeValueSide_OFFER = cvar.RelativeValueSide_OFFER
MDReportEvent_START_INSTRUMENT_REF_DATA = cvar.MDReportEvent_START_INSTRUMENT_REF_DATA
MDReportEvent_END_INSTRUMENT_REF_DATA = cvar.MDReportEvent_END_INSTRUMENT_REF_DATA
MDReportEvent_START_OFF_MARKET_TRADES = cvar.MDReportEvent_START_OFF_MARKET_TRADES
MDReportEvent_END_OFF_MARKET_TRADES = cvar.MDReportEvent_END_OFF_MARKET_TRADES
MDReportEvent_START_ORDER_BOOK_TRADES = cvar.MDReportEvent_START_ORDER_BOOK_TRADES
MDReportEvent_END_ORDER_BOOK_TRADES = cvar.MDReportEvent_END_ORDER_BOOK_TRADES
MDReportEvent_START_OPEN_INTEREST = cvar.MDReportEvent_START_OPEN_INTEREST
MDReportEvent_END_OPEN_INTEREST = cvar.MDReportEvent_END_OPEN_INTEREST
MDReportEvent_START_SETTLEMENT_PRICES = cvar.MDReportEvent_START_SETTLEMENT_PRICES
MDReportEvent_END_SETTLEMENT_PRICES = cvar.MDReportEvent_END_SETTLEMENT_PRICES
MDReportEvent_START_STATS_REF_DATA = cvar.MDReportEvent_START_STATS_REF_DATA
MDReportEvent_END_STATS_REF_DATA = cvar.MDReportEvent_END_STATS_REF_DATA
MDReportEvent_START_STATISTICS = cvar.MDReportEvent_START_STATISTICS
MDReportEvent_END_STATISTICS = cvar.MDReportEvent_END_STATISTICS
MarketSegmentStatus_ACTIVE = cvar.MarketSegmentStatus_ACTIVE
MarketSegmentStatus_INACTIVE = cvar.MarketSegmentStatus_INACTIVE
MarketSegmentStatus_PUBLISHED = cvar.MarketSegmentStatus_PUBLISHED
MarketSegmentType_POOL = cvar.MarketSegmentType_POOL
MarketSegmentType_RETAIL = cvar.MarketSegmentType_RETAIL
MarketSegmentType_WHOLESALE = cvar.MarketSegmentType_WHOLESALE
MarketSegmentSubType_INTER_PRODUCT_SPREAD = cvar.MarketSegmentSubType_INTER_PRODUCT_SPREAD
MarketSegmentRelationship_MARKET_SEGMENT_POOL_MEMBER = cvar.MarketSegmentRelationship_MARKET_SEGMENT_POOL_MEMBER
MarketSegmentRelationship_RETAIL_SEGMENT = cvar.MarketSegmentRelationship_RETAIL_SEGMENT
MarketSegmentRelationship_WHOLESALE_SEGMENT = cvar.MarketSegmentRelationship_WHOLESALE_SEGMENT
QuoteSideIndicator_NO = cvar.QuoteSideIndicator_NO
QuoteSideIndicator_YES = cvar.QuoteSideIndicator_YES
CustomerPriority_NO_PRIORITY = cvar.CustomerPriority_NO_PRIORITY
CustomerPriority_UNCONDITIONAL_PRIORITY = cvar.CustomerPriority_UNCONDITIONAL_PRIORITY
SettlSubMethod_SHARES = cvar.SettlSubMethod_SHARES
SettlSubMethod_DERIVATIVES = cvar.SettlSubMethod_DERIVATIVES
SettlSubMethod_PAYMENT_VS_PAYMENT = cvar.SettlSubMethod_PAYMENT_VS_PAYMENT
SettlSubMethod_NOTIONAL = cvar.SettlSubMethod_NOTIONAL
SettlSubMethod_CASCADE = cvar.SettlSubMethod_CASCADE
SettlSubMethod_REPURCHASE = cvar.SettlSubMethod_REPURCHASE
SettlSubMethod_OTHER = cvar.SettlSubMethod_OTHER
CalculationMethod_AUTOMATIC = cvar.CalculationMethod_AUTOMATIC
CalculationMethod_MANUAL = cvar.CalculationMethod_MANUAL
CollateralAmountType_MARKET_VALUATION = cvar.CollateralAmountType_MARKET_VALUATION
CollateralAmountType_PORTFOLIO_VALUE = cvar.CollateralAmountType_PORTFOLIO_VALUE
CollateralAmountType_VALUE_CONFIRMED = cvar.CollateralAmountType_VALUE_CONFIRMED
CollateralAmountType_COLLATERAL_CREDIT_VALUE = cvar.CollateralAmountType_COLLATERAL_CREDIT_VALUE
CollateralAmountType_ADDITIONAL_COLLATERAL_VALUE = cvar.CollateralAmountType_ADDITIONAL_COLLATERAL_VALUE
CollateralAmountType_ESTIMATED_MARKET_VALUATION = cvar.CollateralAmountType_ESTIMATED_MARKET_VALUATION
CommissionAmountType_UNSPECIFIED = cvar.CommissionAmountType_UNSPECIFIED
CommissionAmountType_ACCEPTANCE = cvar.CommissionAmountType_ACCEPTANCE
CommissionAmountType_BROKER = cvar.CommissionAmountType_BROKER
CommissionAmountType_CLEARING_BROKER = cvar.CommissionAmountType_CLEARING_BROKER
CommissionAmountType_RETAIL = cvar.CommissionAmountType_RETAIL
CommissionAmountType_SALES_COMMISSION = cvar.CommissionAmountType_SALES_COMMISSION
CommissionAmountType_LOCAL_COMMISSION = cvar.CommissionAmountType_LOCAL_COMMISSION
CommissionAmountType_RESEARCH_PAYMENT = cvar.CommissionAmountType_RESEARCH_PAYMENT
CashSettlPriceDefault_CLOSE = cvar.CashSettlPriceDefault_CLOSE
CashSettlPriceDefault_HEDGE = cvar.CashSettlPriceDefault_HEDGE
ComplexEventPVFinalPriceElectionFallback_CLOSE = cvar.ComplexEventPVFinalPriceElectionFallback_CLOSE
ComplexEventPVFinalPriceElectionFallback_HEDGE_ELECTION = cvar.ComplexEventPVFinalPriceElectionFallback_HEDGE_ELECTION
DividendEntitlementEvent_EX_DATE = cvar.DividendEntitlementEvent_EX_DATE
DividendEntitlementEvent_RECORD_DATE = cvar.DividendEntitlementEvent_RECORD_DATE
DividendAmountType_RECORD_AMOUNT = cvar.DividendAmountType_RECORD_AMOUNT
DividendAmountType_EX_AMOUNT = cvar.DividendAmountType_EX_AMOUNT
DividendAmountType_PAID_AMOUNT = cvar.DividendAmountType_PAID_AMOUNT
DividendAmountType_PER_MASTER_CONFIRM = cvar.DividendAmountType_PER_MASTER_CONFIRM
NonCashDividendTreatment_POTENTIAL_ADJUSTMENT = cvar.NonCashDividendTreatment_POTENTIAL_ADJUSTMENT
NonCashDividendTreatment_CASH_EQUIVALENT = cvar.NonCashDividendTreatment_CASH_EQUIVALENT
DividendComposition_EQUITY_AMOUNT_RECEIVER = cvar.DividendComposition_EQUITY_AMOUNT_RECEIVER
DividendComposition_CALCULATION_AGENT = cvar.DividendComposition_CALCULATION_AGENT
StrikeIndexQuote_BID = cvar.StrikeIndexQuote_BID
StrikeIndexQuote_MID = cvar.StrikeIndexQuote_MID
StrikeIndexQuote_OFFER = cvar.StrikeIndexQuote_OFFER
ExtraordinaryEventAdjustmentMethod_CALCULATION_AGENT = cvar.ExtraordinaryEventAdjustmentMethod_CALCULATION_AGENT
ExtraordinaryEventAdjustmentMethod_OPTIONS_EXCHANGE = cvar.ExtraordinaryEventAdjustmentMethod_OPTIONS_EXCHANGE
PaymentStreamInterpolationPeriod_INITIAL = cvar.PaymentStreamInterpolationPeriod_INITIAL
PaymentStreamInterpolationPeriod_INITIAL_AND_FINAL = cvar.PaymentStreamInterpolationPeriod_INITIAL_AND_FINAL
PaymentStreamInterpolationPeriod_FINAL = cvar.PaymentStreamInterpolationPeriod_FINAL
PaymentStreamInterpolationPeriod_ANY_PERIOD = cvar.PaymentStreamInterpolationPeriod_ANY_PERIOD
PaymentStreamLinkStrikePriceType_VOLATILITY = cvar.PaymentStreamLinkStrikePriceType_VOLATILITY
PaymentStreamLinkStrikePriceType_VARIANCE = cvar.PaymentStreamLinkStrikePriceType_VARIANCE
PaymentStreamRealizedVarianceMethod_PREVIOUS = cvar.PaymentStreamRealizedVarianceMethod_PREVIOUS
PaymentStreamRealizedVarianceMethod_LAST = cvar.PaymentStreamRealizedVarianceMethod_LAST
PaymentStreamRealizedVarianceMethod_BOTH = cvar.PaymentStreamRealizedVarianceMethod_BOTH
ProvisionBreakFeeElection_FLAT_FEE = cvar.ProvisionBreakFeeElection_FLAT_FEE
ProvisionBreakFeeElection_AMORTIZED_FEE = cvar.ProvisionBreakFeeElection_AMORTIZED_FEE
ProvisionBreakFeeElection_FUNDING_FEE = cvar.ProvisionBreakFeeElection_FUNDING_FEE
ProvisionBreakFeeElection_FLAT_AND_FUNDING_FEE = cvar.ProvisionBreakFeeElection_FLAT_AND_FUNDING_FEE
ProvisionBreakFeeElection_AMORTIZED_AND_FUNDING_FEE = cvar.ProvisionBreakFeeElection_AMORTIZED_AND_FUNDING_FEE
ReturnRateDateMode_PRICE_VALUATION = cvar.ReturnRateDateMode_PRICE_VALUATION
ReturnRateDateMode_DIVIDEND_VALUATION = cvar.ReturnRateDateMode_DIVIDEND_VALUATION
ReturnRatePriceSequence_INITIAL = cvar.ReturnRatePriceSequence_INITIAL
ReturnRatePriceSequence_INTERIM = cvar.ReturnRatePriceSequence_INTERIM
ReturnRatePriceSequence_FINAL = cvar.ReturnRatePriceSequence_FINAL
ReturnRateQuoteTimeType_OPEN = cvar.ReturnRateQuoteTimeType_OPEN
ReturnRateQuoteTimeType_OFFICIAL_SETTL_PX = cvar.ReturnRateQuoteTimeType_OFFICIAL_SETTL_PX
ReturnRateQuoteTimeType_XETRA = cvar.ReturnRateQuoteTimeType_XETRA
ReturnRateQuoteTimeType_CLOSE = cvar.ReturnRateQuoteTimeType_CLOSE
ReturnRateQuoteTimeType_DERIVATIVES_CLOSE = cvar.ReturnRateQuoteTimeType_DERIVATIVES_CLOSE
ReturnRateQuoteTimeType_HIGH = cvar.ReturnRateQuoteTimeType_HIGH
ReturnRateQuoteTimeType_LOW = cvar.ReturnRateQuoteTimeType_LOW
ReturnRateQuoteTimeType_AS_SPECIFIED_IN_MASTER_CONFIRMATION = cvar.ReturnRateQuoteTimeType_AS_SPECIFIED_IN_MASTER_CONFIRMATION
ReturnRateValuationPriceOption_NONE = cvar.ReturnRateValuationPriceOption_NONE
ReturnRateValuationPriceOption_FUTURES_PRICE = cvar.ReturnRateValuationPriceOption_FUTURES_PRICE
ReturnRateValuationPriceOption_OPTIONS_PRICE = cvar.ReturnRateValuationPriceOption_OPTIONS_PRICE
ReturnRatePriceBasis_GROSS = cvar.ReturnRatePriceBasis_GROSS
ReturnRatePriceBasis_NET = cvar.ReturnRatePriceBasis_NET
ReturnRatePriceBasis_ACCRUED = cvar.ReturnRatePriceBasis_ACCRUED
ReturnRatePriceBasis_CLEAN_NET = cvar.ReturnRatePriceBasis_CLEAN_NET
ReturnRatePriceType_ABSOLUTE_TERMS = cvar.ReturnRatePriceType_ABSOLUTE_TERMS
ReturnRatePriceType_PERCENTAGE_OF_NOTIONAL = cvar.ReturnRatePriceType_PERCENTAGE_OF_NOTIONAL
StreamNotionalAdjustments_EXECUTION = cvar.StreamNotionalAdjustments_EXECUTION
StreamNotionalAdjustments_PORTFOLIO_REBALANCING = cvar.StreamNotionalAdjustments_PORTFOLIO_REBALANCING
StreamNotionalAdjustments_STANDARD = cvar.StreamNotionalAdjustments_STANDARD
UnderlyingNotionalAdjustments_EXECUTION = cvar.UnderlyingNotionalAdjustments_EXECUTION
UnderlyingNotionalAdjustments_PORTFOLIO_REBALANCING = cvar.UnderlyingNotionalAdjustments_PORTFOLIO_REBALANCING
UnderlyingNotionalAdjustments_STANDARD = cvar.UnderlyingNotionalAdjustments_STANDARD
RemunerationIndicator_NO_REMUNERATION_PAID = cvar.RemunerationIndicator_NO_REMUNERATION_PAID
RemunerationIndicator_REMUNERATION_PAID = cvar.RemunerationIndicator_REMUNERATION_PAID
PartyRiskLimitStatus_DISABLED = cvar.PartyRiskLimitStatus_DISABLED
PartyRiskLimitStatus_ENABLED = cvar.PartyRiskLimitStatus_ENABLED
AlgorithmicTradeIndicator_NON_ALGORITHMIC_TRADE = cvar.AlgorithmicTradeIndicator_NON_ALGORITHMIC_TRADE
AlgorithmicTradeIndicator_ALGORITHMIC_TRADE = cvar.AlgorithmicTradeIndicator_ALGORITHMIC_TRADE
TrdRegPublicationType_PRE_TRADE_TRANSPARENCY_WAIVER = cvar.TrdRegPublicationType_PRE_TRADE_TRANSPARENCY_WAIVER
TrdRegPublicationType_POST_TRADE_DEFERRAL = cvar.TrdRegPublicationType_POST_TRADE_DEFERRAL
TrdRegPublicationType_EXEMPT_FROM_PUBLICATION = cvar.TrdRegPublicationType_EXEMPT_FROM_PUBLICATION
TrdRegPublicationType_ORDER_LEVEL_PUBLICATION_TO_SUBSCRIBERS = cvar.TrdRegPublicationType_ORDER_LEVEL_PUBLICATION_TO_SUBSCRIBERS
TrdRegPublicationType_PRICE_LEVEL_PUBLICATION_TO_SUBSCRIBERS = cvar.TrdRegPublicationType_PRICE_LEVEL_PUBLICATION_TO_SUBSCRIBERS
TrdRegPublicationType_ORDER_LEVEL_PUBLICATION_TO_THE_PUBLIC = cvar.TrdRegPublicationType_ORDER_LEVEL_PUBLICATION_TO_THE_PUBLIC
TrdRegPublicationType_PUBLICATION_INTERNAL_TO_EXECUTION_VENUE = cvar.TrdRegPublicationType_PUBLICATION_INTERNAL_TO_EXECUTION_VENUE
TrdRegPublicationReason_NO_BOOK_ORDER_DUE_TO_AVERAGE_SPREAD_PRICE = cvar.TrdRegPublicationReason_NO_BOOK_ORDER_DUE_TO_AVERAGE_SPREAD_PRICE
TrdRegPublicationReason_NO_BOOK_ORDER_DUE_TO_REF_PRICE = cvar.TrdRegPublicationReason_NO_BOOK_ORDER_DUE_TO_REF_PRICE
TrdRegPublicationReason_NO_BOOK_ORDER_DUE_TO_OTHER_CONDITIONS = cvar.TrdRegPublicationReason_NO_BOOK_ORDER_DUE_TO_OTHER_CONDITIONS
TrdRegPublicationReason_NO_PUBLIC_PRICE_DUE_TO_REF_PRICE = cvar.TrdRegPublicationReason_NO_PUBLIC_PRICE_DUE_TO_REF_PRICE
TrdRegPublicationReason_NO_PUBLIC_PRICE_DUE_TO_ILLIQUID = cvar.TrdRegPublicationReason_NO_PUBLIC_PRICE_DUE_TO_ILLIQUID
TrdRegPublicationReason_NO_PUBLIC_PRICE_DUE_TO_ORDER_SIZE = cvar.TrdRegPublicationReason_NO_PUBLIC_PRICE_DUE_TO_ORDER_SIZE
TrdRegPublicationReason_DEFERRAL_DUE_TO_LARGE_IN_SCALE = cvar.TrdRegPublicationReason_DEFERRAL_DUE_TO_LARGE_IN_SCALE
TrdRegPublicationReason_DEFERRAL_DUE_TO_ILLIQUID = cvar.TrdRegPublicationReason_DEFERRAL_DUE_TO_ILLIQUID
TrdRegPublicationReason_DEFERRAL_DUE_TO_SIZE_SPECIFIC = cvar.TrdRegPublicationReason_DEFERRAL_DUE_TO_SIZE_SPECIFIC
TrdRegPublicationReason_NO_PUBLIC_PRICE_DUE_TO_LARGE_IN_SCALE = cvar.TrdRegPublicationReason_NO_PUBLIC_PRICE_DUE_TO_LARGE_IN_SCALE
TrdRegPublicationReason_NO_PUBLIC_PRICE_SIZE_DUE_TO_ORDER_HIDDEN = cvar.TrdRegPublicationReason_NO_PUBLIC_PRICE_SIZE_DUE_TO_ORDER_HIDDEN
TrdRegPublicationReason_EXEMPTED_DUE_TO_SECURITIES_FINANCING_TRANSACTION = cvar.TrdRegPublicationReason_EXEMPTED_DUE_TO_SECURITIES_FINANCING_TRANSACTION
TrdRegPublicationReason_EXEMPTED_DUE_TO_ESCB_POLICY_TRANSACTION = cvar.TrdRegPublicationReason_EXEMPTED_DUE_TO_ESCB_POLICY_TRANSACTION
TrdRegPublicationReason_EXCEPTION_DUE_TO_REPORT_BY_PAPER = cvar.TrdRegPublicationReason_EXCEPTION_DUE_TO_REPORT_BY_PAPER
TrdRegPublicationReason_EXCEPTION_DUE_TO_TRADE_EXECUTED_WITH_NON_REPORTING_PARTY = cvar.TrdRegPublicationReason_EXCEPTION_DUE_TO_TRADE_EXECUTED_WITH_NON_REPORTING_PARTY
TrdRegPublicationReason_EXCEPTION_DUE_TO_INTRA_FIRM_ORDER = cvar.TrdRegPublicationReason_EXCEPTION_DUE_TO_INTRA_FIRM_ORDER
TrdRegPublicationReason_REPORTED_OUTSIDE_REPORTING_HOURS = cvar.TrdRegPublicationReason_REPORTED_OUTSIDE_REPORTING_HOURS
CrossedIndicator_NO_CROSS = cvar.CrossedIndicator_NO_CROSS
CrossedIndicator_CROSS_REJECTED = cvar.CrossedIndicator_CROSS_REJECTED
CrossedIndicator_CROSS_ACCEPTED = cvar.CrossedIndicator_CROSS_ACCEPTED
OrderAttributeType_AGGREGATED_ORDER = cvar.OrderAttributeType_AGGREGATED_ORDER
OrderAttributeType_PENDING_ALLOCATION = cvar.OrderAttributeType_PENDING_ALLOCATION
OrderAttributeType_LIQUIDITY_PROVISION_ACTIVITY_ORDER = cvar.OrderAttributeType_LIQUIDITY_PROVISION_ACTIVITY_ORDER
OrderAttributeType_RISK_REDUCTION_ORDER = cvar.OrderAttributeType_RISK_REDUCTION_ORDER
OrderAttributeType_ALGORITHMIC_ORDER = cvar.OrderAttributeType_ALGORITHMIC_ORDER
OrderAttributeType_SYSTEMATIC_INTERNALISER_ORDER = cvar.OrderAttributeType_SYSTEMATIC_INTERNALISER_ORDER
OrderAttributeType_ALL_EXECUTIONS_SUBMITTED_TO_APA = cvar.OrderAttributeType_ALL_EXECUTIONS_SUBMITTED_TO_APA
OrderAttributeType_ORDER_EXECUTION_INSTRUCTED_BY_CLIENT = cvar.OrderAttributeType_ORDER_EXECUTION_INSTRUCTED_BY_CLIENT
OrderAttributeType_LARGE_IN_SCALE = cvar.OrderAttributeType_LARGE_IN_SCALE
OrderAttributeType_HIDDEN = cvar.OrderAttributeType_HIDDEN
OrderAttributeType_SUBJECT_TO_EUSTO = cvar.OrderAttributeType_SUBJECT_TO_EUSTO
OrderAttributeType_SUBJECT_TO_UKSTO = cvar.OrderAttributeType_SUBJECT_TO_UKSTO
OrderAttributeType_REPRESENTATIVE_ORDER = cvar.OrderAttributeType_REPRESENTATIVE_ORDER
OrderAttributeType_LINKAGE_TYPE = cvar.OrderAttributeType_LINKAGE_TYPE
OrderAttributeType_EXEMPT_FROM_STO = cvar.OrderAttributeType_EXEMPT_FROM_STO
TradeReportingIndicator_NOT_REPORTED = cvar.TradeReportingIndicator_NOT_REPORTED
TradeReportingIndicator_ON_BOOK = cvar.TradeReportingIndicator_ON_BOOK
TradeReportingIndicator_SI_SELLER = cvar.TradeReportingIndicator_SI_SELLER
TradeReportingIndicator_SI_BUYER = cvar.TradeReportingIndicator_SI_BUYER
TradeReportingIndicator_NON_SI_SELLER = cvar.TradeReportingIndicator_NON_SI_SELLER
TradeReportingIndicator_SUB_DELEGATION_BY_FIRM = cvar.TradeReportingIndicator_SUB_DELEGATION_BY_FIRM
TradeReportingIndicator_REPORTABLE = cvar.TradeReportingIndicator_REPORTABLE
TradeReportingIndicator_NON_SI_BUYER = cvar.TradeReportingIndicator_NON_SI_BUYER
TradeReportingIndicator_OFF_BOOK = cvar.TradeReportingIndicator_OFF_BOOK
TradeReportingIndicator_NOT_REPORTABLE = cvar.TradeReportingIndicator_NOT_REPORTABLE
MassActionReason_NONE = cvar.MassActionReason_NONE
MassActionReason_TRADING_RISK_CONTROL = cvar.MassActionReason_TRADING_RISK_CONTROL
MassActionReason_CLEARING_RISK_CONTROL = cvar.MassActionReason_CLEARING_RISK_CONTROL
MassActionReason_MARKET_MAKER_PROTECTION = cvar.MassActionReason_MARKET_MAKER_PROTECTION
MassActionReason_STOP_TRADING = cvar.MassActionReason_STOP_TRADING
MassActionReason_EMERGENCY_ACTION = cvar.MassActionReason_EMERGENCY_ACTION
MassActionReason_SESSION_LOSS_LOGOUT = cvar.MassActionReason_SESSION_LOSS_LOGOUT
MassActionReason_DUPLICATE_LOGIN = cvar.MassActionReason_DUPLICATE_LOGIN
MassActionReason_PRODUCT_NOT_TRADED = cvar.MassActionReason_PRODUCT_NOT_TRADED
MassActionReason_INSTRUMENT_NOT_TRADED = cvar.MassActionReason_INSTRUMENT_NOT_TRADED
MassActionReason_COMPLE_INSTRUMENT_DELETED = cvar.MassActionReason_COMPLE_INSTRUMENT_DELETED
MassActionReason_CIRCUIT_BREAKER_ACTIVATED = cvar.MassActionReason_CIRCUIT_BREAKER_ACTIVATED
MassActionReason_OTHER = cvar.MassActionReason_OTHER
NotAffectedReason_ORDER_SUSPENDED = cvar.NotAffectedReason_ORDER_SUSPENDED
NotAffectedReason_INSTRUMENT_SUSPENDED = cvar.NotAffectedReason_INSTRUMENT_SUSPENDED
OrderOwnershipIndicator_NO_CHANGE = cvar.OrderOwnershipIndicator_NO_CHANGE
OrderOwnershipIndicator_EXECUTING_PARTY_CHANGE = cvar.OrderOwnershipIndicator_EXECUTING_PARTY_CHANGE
OrderOwnershipIndicator_ENTERING_PARTY_CHANGE = cvar.OrderOwnershipIndicator_ENTERING_PARTY_CHANGE
OrderOwnershipIndicator_SPECIFIED_PARTY_CHANGE = cvar.OrderOwnershipIndicator_SPECIFIED_PARTY_CHANGE
InTheMoneyCondition_STANDARD_ITM = cvar.InTheMoneyCondition_STANDARD_ITM
InTheMoneyCondition_ATMITM = cvar.InTheMoneyCondition_ATMITM
InTheMoneyCondition_ATM_CALL_ITM = cvar.InTheMoneyCondition_ATM_CALL_ITM
InTheMoneyCondition_ATM_PUT_ITM = cvar.InTheMoneyCondition_ATM_PUT_ITM
ExDestinationType_NO_RESTRICTION = cvar.ExDestinationType_NO_RESTRICTION
ExDestinationType_TRADED_ONLY_ON_TRADING_VENUE = cvar.ExDestinationType_TRADED_ONLY_ON_TRADING_VENUE
ExDestinationType_TRADED_ONLY_ON_SI = cvar.ExDestinationType_TRADED_ONLY_ON_SI
ExDestinationType_TRADED_ON_TRADING_VENUE_OR_SI = cvar.ExDestinationType_TRADED_ON_TRADING_VENUE_OR_SI
MarketCondition_NORMAL = cvar.MarketCondition_NORMAL
MarketCondition_STRESSED = cvar.MarketCondition_STRESSED
MarketCondition_EXCEPTIONAL = cvar.MarketCondition_EXCEPTIONAL
QuoteAttributeType_QUOTE_ABOVE_STANDARD_MARKET_SIZE = cvar.QuoteAttributeType_QUOTE_ABOVE_STANDARD_MARKET_SIZE
QuoteAttributeType_QUOTE_ABOVE_SPECIFIC_INSTRUMENT_SIZE = cvar.QuoteAttributeType_QUOTE_ABOVE_SPECIFIC_INSTRUMENT_SIZE
QuoteAttributeType_QUOTE_APPLICABLE_FOR_LIQUIDTY_PROVISION_ACTIVITY = cvar.QuoteAttributeType_QUOTE_APPLICABLE_FOR_LIQUIDTY_PROVISION_ACTIVITY
QuoteAttributeType_QUOTE_ISSUER_STATUS = cvar.QuoteAttributeType_QUOTE_ISSUER_STATUS
QuoteAttributeType_BID_OR_ASK_REQUEST = cvar.QuoteAttributeType_BID_OR_ASK_REQUEST
PriceQualifier_ACCRUED_INTEREST_IS_FACTORED = cvar.PriceQualifier_ACCRUED_INTEREST_IS_FACTORED
PriceQualifier_TAX_IS_FACTORED = cvar.PriceQualifier_TAX_IS_FACTORED
PriceQualifier_BOND_AMORTIZATION_IS_FACTORED = cvar.PriceQualifier_BOND_AMORTIZATION_IS_FACTORED
MDValueTier_RANGE1 = cvar.MDValueTier_RANGE1
MDValueTier_RANGE2 = cvar.MDValueTier_RANGE2
MDValueTier_RANGE3 = cvar.MDValueTier_RANGE3
MiscFeeQualifier_CONTRIBUTES = cvar.MiscFeeQualifier_CONTRIBUTES
MiscFeeQualifier_DOES_NOT_CONTRIBUTE = cvar.MiscFeeQualifier_DOES_NOT_CONTRIBUTE
CommissionAmountSubType_RESEARCH_PAYMENT_ACCOUNT = cvar.CommissionAmountSubType_RESEARCH_PAYMENT_ACCOUNT
CommissionAmountSubType_COMMISSION_SHARING_AGREEMENT = cvar.CommissionAmountSubType_COMMISSION_SHARING_AGREEMENT
CommissionAmountSubType_OTHER_TYPE_RESEARCH_PAYMENT = cvar.CommissionAmountSubType_OTHER_TYPE_RESEARCH_PAYMENT
CommodityFinalPriceType_ARGUS_MC_CLOSKEY = cvar.CommodityFinalPriceType_ARGUS_MC_CLOSKEY
CommodityFinalPriceType_BALTIC = cvar.CommodityFinalPriceType_BALTIC
CommodityFinalPriceType_EXCHANGE = cvar.CommodityFinalPriceType_EXCHANGE
CommodityFinalPriceType_GLOBAL_COAL = cvar.CommodityFinalPriceType_GLOBAL_COAL
CommodityFinalPriceType_IHS_MC_CLOSKEY = cvar.CommodityFinalPriceType_IHS_MC_CLOSKEY
CommodityFinalPriceType_PLATTS = cvar.CommodityFinalPriceType_PLATTS
CommodityFinalPriceType_OTHER = cvar.CommodityFinalPriceType_OTHER
ReferenceDataDateType_ADMIT_TO_TRADE_REQUEST_DATE = cvar.ReferenceDataDateType_ADMIT_TO_TRADE_REQUEST_DATE
ReferenceDataDateType_ADMIT_TO_TRADE_APPROVAL_DATE = cvar.ReferenceDataDateType_ADMIT_TO_TRADE_APPROVAL_DATE
ReferenceDataDateType_ADMIT_TO_TRADE_OR_FIRST_TRADE_DATE = cvar.ReferenceDataDateType_ADMIT_TO_TRADE_OR_FIRST_TRADE_DATE
ReferenceDataDateType_TERMINATION_DATE = cvar.ReferenceDataDateType_TERMINATION_DATE
ReturnTrigger_DIVIDEND = cvar.ReturnTrigger_DIVIDEND
ReturnTrigger_VARIANCE = cvar.ReturnTrigger_VARIANCE
ReturnTrigger_VOLATILITY = cvar.ReturnTrigger_VOLATILITY
ReturnTrigger_TOTAL_RETURN = cvar.ReturnTrigger_TOTAL_RETURN
ReturnTrigger_CONTRACT_FOR_DIFFERENCE = cvar.ReturnTrigger_CONTRACT_FOR_DIFFERENCE
ReturnTrigger_CREDIT_DEFAULT = cvar.ReturnTrigger_CREDIT_DEFAULT
ReturnTrigger_SPREAD_BET = cvar.ReturnTrigger_SPREAD_BET
ReturnTrigger_PRICE = cvar.ReturnTrigger_PRICE
ReturnTrigger_FORWARD_PRICE_UNDERLYING_INSTRUMENT = cvar.ReturnTrigger_FORWARD_PRICE_UNDERLYING_INSTRUMENT
ReturnTrigger_OTHER = cvar.ReturnTrigger_OTHER
AveragePriceType_TIME_WEIGHTED_AVERAGE_PRICE = cvar.AveragePriceType_TIME_WEIGHTED_AVERAGE_PRICE
AveragePriceType_VOLUME_WEIGHTED_AVERAGE_PRICE = cvar.AveragePriceType_VOLUME_WEIGHTED_AVERAGE_PRICE
AveragePriceType_PERCENT_OF_VOLUME_AVERAGE_PRICE = cvar.AveragePriceType_PERCENT_OF_VOLUME_AVERAGE_PRICE
AveragePriceType_LIMIT_ORDER_AVERAGE_PRICE = cvar.AveragePriceType_LIMIT_ORDER_AVERAGE_PRICE
AllocGroupStatus_ADDED = cvar.AllocGroupStatus_ADDED
AllocGroupStatus_CANCELED = cvar.AllocGroupStatus_CANCELED
AllocGroupStatus_REPLACED = cvar.AllocGroupStatus_REPLACED
AllocGroupStatus_CHANGED = cvar.AllocGroupStatus_CHANGED
AllocGroupStatus_PENDING = cvar.AllocGroupStatus_PENDING
AllocRequestStatus_ACCEPTED = cvar.AllocRequestStatus_ACCEPTED
AllocRequestStatus_REJECTED = cvar.AllocRequestStatus_REJECTED
MatchExceptionType_NO_MATCHING_CONFIRMATION = cvar.MatchExceptionType_NO_MATCHING_CONFIRMATION
MatchExceptionType_NO_MATCHING_ALLOCATION = cvar.MatchExceptionType_NO_MATCHING_ALLOCATION
MatchExceptionType_ALLOCATION_DATA_ELEMENT_MISSING = cvar.MatchExceptionType_ALLOCATION_DATA_ELEMENT_MISSING
MatchExceptionType_CONFIRMATION_DATA_ELEMENT_MISSING = cvar.MatchExceptionType_CONFIRMATION_DATA_ELEMENT_MISSING
MatchExceptionType_DATA_DIFFERENCE_NOT_WITHIN_TOLERANCE = cvar.MatchExceptionType_DATA_DIFFERENCE_NOT_WITHIN_TOLERANCE
MatchExceptionType_MATCH_WITHIN_TOLERANCE = cvar.MatchExceptionType_MATCH_WITHIN_TOLERANCE
MatchExceptionType_OTHER = cvar.MatchExceptionType_OTHER
MatchExceptionElementType_ACCRUED_INTEREST = cvar.MatchExceptionElementType_ACCRUED_INTEREST
MatchExceptionElementType_DEAL_PRICE = cvar.MatchExceptionElementType_DEAL_PRICE
MatchExceptionElementType_TRADE_DATE = cvar.MatchExceptionElementType_TRADE_DATE
MatchExceptionElementType_SETTLEMENT_DATE = cvar.MatchExceptionElementType_SETTLEMENT_DATE
MatchExceptionElementType_SIDE_INDICATOR = cvar.MatchExceptionElementType_SIDE_INDICATOR
MatchExceptionElementType_TRADED_CURRENCY = cvar.MatchExceptionElementType_TRADED_CURRENCY
MatchExceptionElementType_ACCOUNT_ID = cvar.MatchExceptionElementType_ACCOUNT_ID
MatchExceptionElementType_EXECUTING_BROKER_ID = cvar.MatchExceptionElementType_EXECUTING_BROKER_ID
MatchExceptionElementType_SETTLEMENT_CURRENCY_AND_AMOUNT = cvar.MatchExceptionElementType_SETTLEMENT_CURRENCY_AND_AMOUNT
MatchExceptionElementType_INVESTMENT_MANAGER_ID = cvar.MatchExceptionElementType_INVESTMENT_MANAGER_ID
MatchExceptionElementType_NET_AMOUNT = cvar.MatchExceptionElementType_NET_AMOUNT
MatchExceptionElementType_PLACE_OF_SETTLEMENT = cvar.MatchExceptionElementType_PLACE_OF_SETTLEMENT
MatchExceptionElementType_COMMISSIONS = cvar.MatchExceptionElementType_COMMISSIONS
MatchExceptionElementType_SECURITY_IDENTIFIER = cvar.MatchExceptionElementType_SECURITY_IDENTIFIER
MatchExceptionElementType_QUALITY_ALLOCATED = cvar.MatchExceptionElementType_QUALITY_ALLOCATED
MatchExceptionElementType_PRINCIPAL = cvar.MatchExceptionElementType_PRINCIPAL
MatchExceptionElementType_FEES = cvar.MatchExceptionElementType_FEES
MatchExceptionElementType_TAX = cvar.MatchExceptionElementType_TAX
MatchExceptionToleranceValueType_FIXED_AMOUNT = cvar.MatchExceptionToleranceValueType_FIXED_AMOUNT
MatchExceptionToleranceValueType_PERCENTAGE = cvar.MatchExceptionToleranceValueType_PERCENTAGE
MatchingDataPointIndicator_MANDATORY = cvar.MatchingDataPointIndicator_MANDATORY
MatchingDataPointIndicator_OPTIONAL = cvar.MatchingDataPointIndicator_OPTIONAL
TradeAggregationTransType_NEW = cvar.TradeAggregationTransType_NEW
TradeAggregationTransType_CANCEL = cvar.TradeAggregationTransType_CANCEL
TradeAggregationTransType_REPLACE = cvar.TradeAggregationTransType_REPLACE
TradeAggregationRequestStatus_ACCEPTED = cvar.TradeAggregationRequestStatus_ACCEPTED
TradeAggregationRequestStatus_REJECTED = cvar.TradeAggregationRequestStatus_REJECTED
TradeAggregationRejectReason_UNKNOWN_ORDERS = cvar.TradeAggregationRejectReason_UNKNOWN_ORDERS
TradeAggregationRejectReason_UNKNOWN_EXECUTION_FILLS = cvar.TradeAggregationRejectReason_UNKNOWN_EXECUTION_FILLS
TradeAggregationRejectReason_OTHER = cvar.TradeAggregationRejectReason_OTHER
OffshoreIndicator_REGULAR = cvar.OffshoreIndicator_REGULAR
OffshoreIndicator_OFFSHORE = cvar.OffshoreIndicator_OFFSHORE
OffshoreIndicator_ONSHORE = cvar.OffshoreIndicator_ONSHORE
PayReportTransType_NEW = cvar.PayReportTransType_NEW
PayReportTransType_REPLACE = cvar.PayReportTransType_REPLACE
PayReportTransType_STATUS = cvar.PayReportTransType_STATUS
PayReportStatus_RECEIVED = cvar.PayReportStatus_RECEIVED
PayReportStatus_ACCEPTED = cvar.PayReportStatus_ACCEPTED
PayReportStatus_REJECTED = cvar.PayReportStatus_REJECTED
PayReportStatus_DISPUTED = cvar.PayReportStatus_DISPUTED
PayRequestTransType_NEW = cvar.PayRequestTransType_NEW
PayRequestTransType_CANCEL = cvar.PayRequestTransType_CANCEL
PayRequestStatus_RECEIVED = cvar.PayRequestStatus_RECEIVED
PayRequestStatus_ACCEPTED = cvar.PayRequestStatus_ACCEPTED
PayRequestStatus_REJECTED = cvar.PayRequestStatus_REJECTED
PayRequestStatus_DISPUTED = cvar.PayRequestStatus_DISPUTED
PostTradePaymentDebitOrCredit_DEBIT_PAY = cvar.PostTradePaymentDebitOrCredit_DEBIT_PAY
PostTradePaymentDebitOrCredit_CREDIT_RECEIVE = cvar.PostTradePaymentDebitOrCredit_CREDIT_RECEIVE
PostTradePaymentStatus_NEW = cvar.PostTradePaymentStatus_NEW
PostTradePaymentStatus_INITIATED = cvar.PostTradePaymentStatus_INITIATED
PostTradePaymentStatus_PENDING = cvar.PostTradePaymentStatus_PENDING
PostTradePaymentStatus_CONFIRMED = cvar.PostTradePaymentStatus_CONFIRMED
PostTradePaymentStatus_REJECTED = cvar.PostTradePaymentStatus_REJECTED
DuplicateClOrdIDIndicator_NO = cvar.DuplicateClOrdIDIndicator_NO
DuplicateClOrdIDIndicator_YES = cvar.DuplicateClOrdIDIndicator_YES
EventInitiatorType_CUSTOMER_OR_CLIENT = cvar.EventInitiatorType_CUSTOMER_OR_CLIENT
EventInitiatorType_EXCHANGE_OR_EXECUTION_VENUE = cvar.EventInitiatorType_EXCHANGE_OR_EXECUTION_VENUE
EventInitiatorType_FIRM_OR_BROKER = cvar.EventInitiatorType_FIRM_OR_BROKER
NBBOEntryType_BID = cvar.NBBOEntryType_BID
NBBOEntryType_OFFER = cvar.NBBOEntryType_OFFER
NBBOEntryType_MID_PRICE = cvar.NBBOEntryType_MID_PRICE
NBBOSource_NOT_APPLICABLE = cvar.NBBOSource_NOT_APPLICABLE
NBBOSource_DIRECT = cvar.NBBOSource_DIRECT
NBBOSource_SIP = cvar.NBBOSource_SIP
NBBOSource_HYBRID = cvar.NBBOSource_HYBRID
SingleQuoteIndicator_NO = cvar.SingleQuoteIndicator_NO
SingleQuoteIndicator_YES = cvar.SingleQuoteIndicator_YES
TrdRegTimestampManualIndicator_NO = cvar.TrdRegTimestampManualIndicator_NO
TrdRegTimestampManualIndicator_YES = cvar.TrdRegTimestampManualIndicator_YES
CollateralReinvestmentType_MONEY_MARKET_FUND = cvar.CollateralReinvestmentType_MONEY_MARKET_FUND
CollateralReinvestmentType_OTHER_COMINGLED_POOL = cvar.CollateralReinvestmentType_OTHER_COMINGLED_POOL
CollateralReinvestmentType_REPO_MARKET = cvar.CollateralReinvestmentType_REPO_MARKET
CollateralReinvestmentType_DIRECT_PURCHASE_OF_SECURITIES = cvar.CollateralReinvestmentType_DIRECT_PURCHASE_OF_SECURITIES
CollateralReinvestmentType_OTHER_INVESTMENTS = cvar.CollateralReinvestmentType_OTHER_INVESTMENTS
FundingSource_REPO = cvar.FundingSource_REPO
FundingSource_CASH = cvar.FundingSource_CASH
FundingSource_FREE_CEDITS = cvar.FundingSource_FREE_CEDITS
FundingSource_CUSTOMER_SHORT_SALES = cvar.FundingSource_CUSTOMER_SHORT_SALES
FundingSource_BROKER_SHORT_SALES = cvar.FundingSource_BROKER_SHORT_SALES
FundingSource_UNSECURED_BORROWING = cvar.FundingSource_UNSECURED_BORROWING
FundingSource_OTHER = cvar.FundingSource_OTHER
MarginDirection_POSTED = cvar.MarginDirection_POSTED
MarginDirection_RECEIVED = cvar.MarginDirection_RECEIVED
TransactionAttributeType_EXCLUSIVE_ARRANGEMENT = cvar.TransactionAttributeType_EXCLUSIVE_ARRANGEMENT
TransactionAttributeType_COLLATERAL_REUSE = cvar.TransactionAttributeType_COLLATERAL_REUSE
TransactionAttributeType_COLLATERAL_ARRANGMENT_TYPE = cvar.TransactionAttributeType_COLLATERAL_ARRANGMENT_TYPE
RoutingArrangmentIndicator_NO_ROUTING_ARRANGMENT_IN_PLACE = cvar.RoutingArrangmentIndicator_NO_ROUTING_ARRANGMENT_IN_PLACE
RoutingArrangmentIndicator_ROUTING_ARRANGEMENT_IN_PLACE = cvar.RoutingArrangmentIndicator_ROUTING_ARRANGEMENT_IN_PLACE
RelatedOrderIDSource_NON_FIX_SOURCE = cvar.RelatedOrderIDSource_NON_FIX_SOURCE
RelatedOrderIDSource_SYSTEM_ORDER_IDENTIFIER = cvar.RelatedOrderIDSource_SYSTEM_ORDER_IDENTIFIER
RelatedOrderIDSource_CLIENT_ORDER_IDENTIFIER = cvar.RelatedOrderIDSource_CLIENT_ORDER_IDENTIFIER
RelatedOrderIDSource_SECONDARY_ORDER_IDENTIFIER = cvar.RelatedOrderIDSource_SECONDARY_ORDER_IDENTIFIER
RelatedOrderIDSource_SECONDARY_CLIENT_ORDER_IDENTIFIER = cvar.RelatedOrderIDSource_SECONDARY_CLIENT_ORDER_IDENTIFIER
OrderRelationship_NOT_SPECIFIED = cvar.OrderRelationship_NOT_SPECIFIED
OrderRelationship_ORDER_AGGREGATION = cvar.OrderRelationship_ORDER_AGGREGATION
OrderRelationship_ORDER_SPLIT = cvar.OrderRelationship_ORDER_SPLIT
CurrencyCodeSource_CUSIP = cvar.CurrencyCodeSource_CUSIP
CurrencyCodeSource_SEDOL = cvar.CurrencyCodeSource_SEDOL
CurrencyCodeSource_ISIN_NUMBER = cvar.CurrencyCodeSource_ISIN_NUMBER
CurrencyCodeSource_ISO_CURRENCY_CODE = cvar.CurrencyCodeSource_ISO_CURRENCY_CODE
CurrencyCodeSource_FINANCIAL_INSTRUMENT_GLOBAL_IDENTIFIER = cvar.CurrencyCodeSource_FINANCIAL_INSTRUMENT_GLOBAL_IDENTIFIER
CurrencyCodeSource_DIGITAL_TOKEN_IDENTIFIER = cvar.CurrencyCodeSource_DIGITAL_TOKEN_IDENTIFIER
MultiJurisdictionReportingIndicator_NOT_MULTI_JRSDCTN_ELIGIBLE = cvar.MultiJurisdictionReportingIndicator_NOT_MULTI_JRSDCTN_ELIGIBLE
MultiJurisdictionReportingIndicator_MULTI_JRSDCTN_ELIGIBLE = cvar.MultiJurisdictionReportingIndicator_MULTI_JRSDCTN_ELIGIBLE
SelfMatchPreventionInstruction_CANCEL_AGGRESSIVE = cvar.SelfMatchPreventionInstruction_CANCEL_AGGRESSIVE
SelfMatchPreventionInstruction_CANCEL_PASSIVE = cvar.SelfMatchPreventionInstruction_CANCEL_PASSIVE
SelfMatchPreventionInstruction_CANCEL_AGGRESSIVE_PASSIVE = cvar.SelfMatchPreventionInstruction_CANCEL_AGGRESSIVE_PASSIVE

class Dictionary(object):
    r"""Proxy of C++ FIX::Dictionary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, name) -> Dictionary

        Parameters
        ----------
        name: std::string const &

        __init__(self) -> Dictionary
        """
        _quickfix.Dictionary_swiginit(self, _quickfix.new_Dictionary(*args))
    __swig_destroy__ = _quickfix.delete_Dictionary

    def getName(self):
        r"""getName(self) -> std::string"""
        return _quickfix.Dictionary_getName(self)
    getName = _swig_new_instance_method(_quickfix.Dictionary_getName)

    def size(self):
        r"""size(self) -> size_t"""
        return _quickfix.Dictionary_size(self)
    size = _swig_new_instance_method(_quickfix.Dictionary_size)

    def getString(self, arg2, capitalize=False):
        r"""
        getString(self, arg2, capitalize=False) -> std::string

        Parameters
        ----------
        arg2: std::string const &
        capitalize: bool

        """
        return _quickfix.Dictionary_getString(self, arg2, capitalize)
    getString = _swig_new_instance_method(_quickfix.Dictionary_getString)

    def getInt(self, arg2):
        r"""
        getInt(self, arg2) -> int

        Parameters
        ----------
        arg2: std::string const &

        """
        return _quickfix.Dictionary_getInt(self, arg2)
    getInt = _swig_new_instance_method(_quickfix.Dictionary_getInt)

    def getDouble(self, arg2):
        r"""
        getDouble(self, arg2) -> double

        Parameters
        ----------
        arg2: std::string const &

        """
        return _quickfix.Dictionary_getDouble(self, arg2)
    getDouble = _swig_new_instance_method(_quickfix.Dictionary_getDouble)

    def getBool(self, arg2):
        r"""
        getBool(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::string const &

        """
        return _quickfix.Dictionary_getBool(self, arg2)
    getBool = _swig_new_instance_method(_quickfix.Dictionary_getBool)

    def getDay(self, arg2):
        r"""
        getDay(self, arg2) -> int

        Parameters
        ----------
        arg2: std::string const &

        """
        return _quickfix.Dictionary_getDay(self, arg2)
    getDay = _swig_new_instance_method(_quickfix.Dictionary_getDay)

    def setString(self, arg2, arg3):
        r"""
        setString(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string const &
        arg3: std::string const &

        """
        return _quickfix.Dictionary_setString(self, arg2, arg3)
    setString = _swig_new_instance_method(_quickfix.Dictionary_setString)

    def setInt(self, arg2, arg3):
        r"""
        setInt(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string const &
        arg3: int

        """
        return _quickfix.Dictionary_setInt(self, arg2, arg3)
    setInt = _swig_new_instance_method(_quickfix.Dictionary_setInt)

    def setDouble(self, arg2, arg3):
        r"""
        setDouble(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string const &
        arg3: double

        """
        return _quickfix.Dictionary_setDouble(self, arg2, arg3)
    setDouble = _swig_new_instance_method(_quickfix.Dictionary_setDouble)

    def setBool(self, arg2, arg3):
        r"""
        setBool(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string const &
        arg3: bool

        """
        return _quickfix.Dictionary_setBool(self, arg2, arg3)
    setBool = _swig_new_instance_method(_quickfix.Dictionary_setBool)

    def setDay(self, arg2, arg3):
        r"""
        setDay(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string const &
        arg3: int

        """
        return _quickfix.Dictionary_setDay(self, arg2, arg3)
    setDay = _swig_new_instance_method(_quickfix.Dictionary_setDay)

    def has(self, arg2):
        r"""
        has(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::string const &

        """
        return _quickfix.Dictionary_has(self, arg2)
    has = _swig_new_instance_method(_quickfix.Dictionary_has)

    def merge(self, arg2):
        r"""
        merge(self, arg2)

        Parameters
        ----------
        arg2: FIX::Dictionary const &

        """
        return _quickfix.Dictionary_merge(self, arg2)
    merge = _swig_new_instance_method(_quickfix.Dictionary_merge)

    def begin(self):
        r"""begin(self) -> FIX::Dictionary::iterator"""
        return _quickfix.Dictionary_begin(self)
    begin = _swig_new_instance_method(_quickfix.Dictionary_begin)

    def end(self):
        r"""end(self) -> FIX::Dictionary::iterator"""
        return _quickfix.Dictionary_end(self)
    end = _swig_new_instance_method(_quickfix.Dictionary_end)

# Register Dictionary in _quickfix:
_quickfix.Dictionary_swigregister(Dictionary)
class SessionSettings(object):
    r"""Proxy of C++ FIX::SessionSettings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> SessionSettings
        __init__(self, stream, resolveEnvVars=False) -> SessionSettings

        Parameters
        ----------
        stream: std::istream &
        resolveEnvVars: bool

        __init__(self, file, resolveEnvVars=False) -> SessionSettings

        Parameters
        ----------
        file: std::string const &
        resolveEnvVars: bool

        """
        _quickfix.SessionSettings_swiginit(self, _quickfix.new_SessionSettings(*args))

    def has(self, arg2):
        r"""
        has(self, arg2) -> bool const

        Parameters
        ----------
        arg2: FIX::SessionID const &

        """
        return _quickfix.SessionSettings_has(self, arg2)
    has = _swig_new_instance_method(_quickfix.SessionSettings_has)

    def get(self, *args):
        r"""
        get(self, arg2) -> Dictionary

        Parameters
        ----------
        arg2: FIX::SessionID const &

        get(self) -> Dictionary
        """
        return _quickfix.SessionSettings_get(self, *args)
    get = _swig_new_instance_method(_quickfix.SessionSettings_get)

    def set(self, *args):
        r"""
        set(self, arg2, arg3)

        Parameters
        ----------
        arg2: FIX::SessionID const &
        arg3: FIX::Dictionary

        set(self, defaults)

        Parameters
        ----------
        defaults: FIX::Dictionary const &

        """
        return _quickfix.SessionSettings_set(self, *args)
    set = _swig_new_instance_method(_quickfix.SessionSettings_set)

    def size(self):
        r"""size(self) -> size_t"""
        return _quickfix.SessionSettings_size(self)
    size = _swig_new_instance_method(_quickfix.SessionSettings_size)

    def getSessions(self):
        r"""getSessions(self) -> SessionIDSet"""
        return _quickfix.SessionSettings_getSessions(self)
    getSessions = _swig_new_instance_method(_quickfix.SessionSettings_getSessions)

    def setFromString(self, str):
        r"""
        setFromString(self, str)

        Parameters
        ----------
        str: std::string const &

        """
        return _quickfix.SessionSettings_setFromString(self, str)
    setFromString = _swig_new_instance_method(_quickfix.SessionSettings_setFromString)
    __swig_destroy__ = _quickfix.delete_SessionSettings

# Register SessionSettings in _quickfix:
_quickfix.SessionSettings_swigregister(SessionSettings)
BEGINSTRING = cvar.BEGINSTRING
SENDERCOMPID = cvar.SENDERCOMPID
TARGETCOMPID = cvar.TARGETCOMPID
SESSION_QUALIFIER = cvar.SESSION_QUALIFIER
DEFAULT_APPLVERID = cvar.DEFAULT_APPLVERID
CONNECTION_TYPE = cvar.CONNECTION_TYPE
USE_DATA_DICTIONARY = cvar.USE_DATA_DICTIONARY
SEND_RESETSEQNUMFLAG = cvar.SEND_RESETSEQNUMFLAG
SEND_REDUNDANT_RESENDREQUESTS = cvar.SEND_REDUNDANT_RESENDREQUESTS
SEND_NEXT_EXPECTED_MSG_SEQ_NUM = cvar.SEND_NEXT_EXPECTED_MSG_SEQ_NUM
DATA_DICTIONARY = cvar.DATA_DICTIONARY
TRANSPORT_DATA_DICTIONARY = cvar.TRANSPORT_DATA_DICTIONARY
APP_DATA_DICTIONARY = cvar.APP_DATA_DICTIONARY
USE_LOCAL_TIME = cvar.USE_LOCAL_TIME
START_TIME = cvar.START_TIME
END_TIME = cvar.END_TIME
START_DAY = cvar.START_DAY
END_DAY = cvar.END_DAY
NON_STOP_SESSION = cvar.NON_STOP_SESSION
LOGON_TIME = cvar.LOGON_TIME
LOGOUT_TIME = cvar.LOGOUT_TIME
LOGON_DAY = cvar.LOGON_DAY
LOGOUT_DAY = cvar.LOGOUT_DAY
CHECK_COMPID = cvar.CHECK_COMPID
CHECK_LATENCY = cvar.CHECK_LATENCY
MAX_LATENCY = cvar.MAX_LATENCY
HEARTBTINT = cvar.HEARTBTINT
SOCKET_ACCEPT_PORT = cvar.SOCKET_ACCEPT_PORT
SOCKET_REUSE_ADDRESS = cvar.SOCKET_REUSE_ADDRESS
SOCKET_CONNECT_HOST = cvar.SOCKET_CONNECT_HOST
SOCKET_CONNECT_PORT = cvar.SOCKET_CONNECT_PORT
SOCKET_CONNECT_SOURCE_HOST = cvar.SOCKET_CONNECT_SOURCE_HOST
SOCKET_CONNECT_SOURCE_PORT = cvar.SOCKET_CONNECT_SOURCE_PORT
SOCKET_NODELAY = cvar.SOCKET_NODELAY
SOCKET_SEND_BUFFER_SIZE = cvar.SOCKET_SEND_BUFFER_SIZE
SOCKET_RECEIVE_BUFFER_SIZE = cvar.SOCKET_RECEIVE_BUFFER_SIZE
HOST_SELECTION_POLICY = cvar.HOST_SELECTION_POLICY
HOST_SELECTION_POLICY_PRIORITY_START_OVER_INTERVAL = cvar.HOST_SELECTION_POLICY_PRIORITY_START_OVER_INTERVAL
RECONNECT_INTERVAL = cvar.RECONNECT_INTERVAL
VALIDATE_LENGTH_AND_CHECKSUM = cvar.VALIDATE_LENGTH_AND_CHECKSUM
VALIDATE_FIELDS_OUT_OF_ORDER = cvar.VALIDATE_FIELDS_OUT_OF_ORDER
VALIDATE_FIELDS_HAVE_VALUES = cvar.VALIDATE_FIELDS_HAVE_VALUES
VALIDATE_USER_DEFINED_FIELDS = cvar.VALIDATE_USER_DEFINED_FIELDS
ALLOW_UNKNOWN_MSG_FIELDS = cvar.ALLOW_UNKNOWN_MSG_FIELDS
PRESERVE_MESSAGE_FIELDS_ORDER = cvar.PRESERVE_MESSAGE_FIELDS_ORDER
LOGON_TIMEOUT = cvar.LOGON_TIMEOUT
LOGOUT_TIMEOUT = cvar.LOGOUT_TIMEOUT
FILE_STORE_PATH = cvar.FILE_STORE_PATH
MYSQL_STORE_USECONNECTIONPOOL = cvar.MYSQL_STORE_USECONNECTIONPOOL
MYSQL_STORE_DATABASE = cvar.MYSQL_STORE_DATABASE
MYSQL_STORE_USER = cvar.MYSQL_STORE_USER
MYSQL_STORE_PASSWORD = cvar.MYSQL_STORE_PASSWORD
MYSQL_STORE_HOST = cvar.MYSQL_STORE_HOST
MYSQL_STORE_PORT = cvar.MYSQL_STORE_PORT
POSTGRESQL_STORE_USECONNECTIONPOOL = cvar.POSTGRESQL_STORE_USECONNECTIONPOOL
POSTGRESQL_STORE_DATABASE = cvar.POSTGRESQL_STORE_DATABASE
POSTGRESQL_STORE_USER = cvar.POSTGRESQL_STORE_USER
POSTGRESQL_STORE_PASSWORD = cvar.POSTGRESQL_STORE_PASSWORD
POSTGRESQL_STORE_HOST = cvar.POSTGRESQL_STORE_HOST
POSTGRESQL_STORE_PORT = cvar.POSTGRESQL_STORE_PORT
ODBC_STORE_USER = cvar.ODBC_STORE_USER
ODBC_STORE_PASSWORD = cvar.ODBC_STORE_PASSWORD
ODBC_STORE_CONNECTION_STRING = cvar.ODBC_STORE_CONNECTION_STRING
FILE_LOG_PATH = cvar.FILE_LOG_PATH
FILE_LOG_BACKUP_PATH = cvar.FILE_LOG_BACKUP_PATH
SCREEN_LOG_SHOW_INCOMING = cvar.SCREEN_LOG_SHOW_INCOMING
SCREEN_LOG_SHOW_OUTGOING = cvar.SCREEN_LOG_SHOW_OUTGOING
SCREEN_LOG_SHOW_EVENTS = cvar.SCREEN_LOG_SHOW_EVENTS
MYSQL_LOG_USECONNECTIONPOOL = cvar.MYSQL_LOG_USECONNECTIONPOOL
MYSQL_LOG_DATABASE = cvar.MYSQL_LOG_DATABASE
MYSQL_LOG_USER = cvar.MYSQL_LOG_USER
MYSQL_LOG_PASSWORD = cvar.MYSQL_LOG_PASSWORD
MYSQL_LOG_HOST = cvar.MYSQL_LOG_HOST
MYSQL_LOG_PORT = cvar.MYSQL_LOG_PORT
MYSQL_LOG_INCOMING_TABLE = cvar.MYSQL_LOG_INCOMING_TABLE
MYSQL_LOG_OUTGOING_TABLE = cvar.MYSQL_LOG_OUTGOING_TABLE
MYSQL_LOG_EVENT_TABLE = cvar.MYSQL_LOG_EVENT_TABLE
POSTGRESQL_LOG_USECONNECTIONPOOL = cvar.POSTGRESQL_LOG_USECONNECTIONPOOL
POSTGRESQL_LOG_DATABASE = cvar.POSTGRESQL_LOG_DATABASE
POSTGRESQL_LOG_USER = cvar.POSTGRESQL_LOG_USER
POSTGRESQL_LOG_PASSWORD = cvar.POSTGRESQL_LOG_PASSWORD
POSTGRESQL_LOG_HOST = cvar.POSTGRESQL_LOG_HOST
POSTGRESQL_LOG_PORT = cvar.POSTGRESQL_LOG_PORT
POSTGRESQL_LOG_INCOMING_TABLE = cvar.POSTGRESQL_LOG_INCOMING_TABLE
POSTGRESQL_LOG_OUTGOING_TABLE = cvar.POSTGRESQL_LOG_OUTGOING_TABLE
POSTGRESQL_LOG_EVENT_TABLE = cvar.POSTGRESQL_LOG_EVENT_TABLE
ODBC_LOG_USER = cvar.ODBC_LOG_USER
ODBC_LOG_PASSWORD = cvar.ODBC_LOG_PASSWORD
ODBC_LOG_CONNECTION_STRING = cvar.ODBC_LOG_CONNECTION_STRING
ODBC_LOG_INCOMING_TABLE = cvar.ODBC_LOG_INCOMING_TABLE
ODBC_LOG_OUTGOING_TABLE = cvar.ODBC_LOG_OUTGOING_TABLE
ODBC_LOG_EVENT_TABLE = cvar.ODBC_LOG_EVENT_TABLE
RESET_ON_LOGON = cvar.RESET_ON_LOGON
RESET_ON_LOGOUT = cvar.RESET_ON_LOGOUT
RESET_ON_DISCONNECT = cvar.RESET_ON_DISCONNECT
REFRESH_ON_LOGON = cvar.REFRESH_ON_LOGON
MILLISECONDS_IN_TIMESTAMP = cvar.MILLISECONDS_IN_TIMESTAMP
TIMESTAMP_PRECISION = cvar.TIMESTAMP_PRECISION
HTTP_ACCEPT_PORT = cvar.HTTP_ACCEPT_PORT
PERSIST_MESSAGES = cvar.PERSIST_MESSAGES
SERVER_CERTIFICATE_FILE = cvar.SERVER_CERTIFICATE_FILE
SERVER_CERTIFICATE_KEY_FILE = cvar.SERVER_CERTIFICATE_KEY_FILE
CLIENT_CERTIFICATE_FILE = cvar.CLIENT_CERTIFICATE_FILE
CLIENT_CERTIFICATE_KEY_FILE = cvar.CLIENT_CERTIFICATE_KEY_FILE
CERTIFICATE_AUTHORITIES_FILE = cvar.CERTIFICATE_AUTHORITIES_FILE
CERTIFICATE_AUTHORITIES_DIRECTORY = cvar.CERTIFICATE_AUTHORITIES_DIRECTORY
CERTIFICATE_REVOCATION_LIST_FILE = cvar.CERTIFICATE_REVOCATION_LIST_FILE
CERTIFICATE_REVOCATION_LIST_DIRECTORY = cvar.CERTIFICATE_REVOCATION_LIST_DIRECTORY
CERTIFICATE_VERIFY_LEVEL = cvar.CERTIFICATE_VERIFY_LEVEL
ALLOWED_REMOTE_ADDRESSES = cvar.ALLOWED_REMOTE_ADDRESSES
SSL_PROTOCOL = cvar.SSL_PROTOCOL
SSL_CIPHER_SUITE = cvar.SSL_CIPHER_SUITE
TLS_CIPHER_SUITES = cvar.TLS_CIPHER_SUITES

def __rshift__(*args):
    r"""
    __rshift__(arg1, arg2) -> std::istream

    Parameters
    ----------
    arg1: std::istream &
    arg2: FIX::SessionID &

    __rshift__(arg1, arg2) -> std::istream &

    Parameters
    ----------
    arg1: std::istream &
    arg2: FIX::SessionSettings &

    """
    return _quickfix.__rshift__(*args)
__rshift__ = _quickfix.__rshift__

def __lshift__(*args):
    r"""
    __lshift__(stream, field) -> std::ostream

    Parameters
    ----------
    stream: std::ostream &
    field: FIX::FieldBase const &

    __lshift__(stream, message) -> std::ostream

    Parameters
    ----------
    stream: std::ostream &
    message: FIX::Message const &

    __lshift__(arg1, arg2) -> std::ostream

    Parameters
    ----------
    arg1: std::ostream &
    arg2: FIX::SessionID const &

    __lshift__(arg1, arg2) -> std::ostream &

    Parameters
    ----------
    arg1: std::ostream &
    arg2: FIX::SessionSettings const &

    """
    return _quickfix.__lshift__(*args)
__lshift__ = _quickfix.__lshift__

class Session(object):
    r"""Proxy of C++ FIX::Session class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, timestamper, arg3, arg4, arg5, arg6, arg7, heartBtInt, pLogFactory):
        r"""
        __init__(self, timestamper, arg3, arg4, arg5, arg6, arg7, heartBtInt, pLogFactory) -> Session

        Parameters
        ----------
        timestamper: std::function< FIX::UtcTimeStamp () >
        arg3: Application &
        arg4: MessageStoreFactory &
        arg5: FIX::SessionID const &
        arg6: DataDictionaryProvider const &
        arg7: TimeRange const &
        heartBtInt: int
        pLogFactory: LogFactory *

        """
        _quickfix.Session_swiginit(self, _quickfix.new_Session(timestamper, arg3, arg4, arg5, arg6, arg7, heartBtInt, pLogFactory))
    __swig_destroy__ = _quickfix.delete_Session

    def logon(self):
        r"""logon(self)"""
        return _quickfix.Session_logon(self)
    logon = _swig_new_instance_method(_quickfix.Session_logon)

    def logout(self, *args):
        r"""
        logout(self, reason="")

        Parameters
        ----------
        reason: std::string const &

        """
        return _quickfix.Session_logout(self, *args)
    logout = _swig_new_instance_method(_quickfix.Session_logout)

    def isEnabled(self):
        r"""isEnabled(self) -> bool"""
        return _quickfix.Session_isEnabled(self)
    isEnabled = _swig_new_instance_method(_quickfix.Session_isEnabled)

    def sentLogon(self):
        r"""sentLogon(self) -> bool"""
        return _quickfix.Session_sentLogon(self)
    sentLogon = _swig_new_instance_method(_quickfix.Session_sentLogon)

    def sentLogout(self):
        r"""sentLogout(self) -> bool"""
        return _quickfix.Session_sentLogout(self)
    sentLogout = _swig_new_instance_method(_quickfix.Session_sentLogout)

    def receivedLogon(self):
        r"""receivedLogon(self) -> bool"""
        return _quickfix.Session_receivedLogon(self)
    receivedLogon = _swig_new_instance_method(_quickfix.Session_receivedLogon)

    def isLoggedOn(self):
        r"""isLoggedOn(self) -> bool"""
        return _quickfix.Session_isLoggedOn(self)
    isLoggedOn = _swig_new_instance_method(_quickfix.Session_isLoggedOn)

    def reset(self):
        r"""reset(self)"""
        return _quickfix.Session_reset(self)
    reset = _swig_new_instance_method(_quickfix.Session_reset)

    def refresh(self):
        r"""refresh(self)"""
        return _quickfix.Session_refresh(self)
    refresh = _swig_new_instance_method(_quickfix.Session_refresh)

    def setNextSenderMsgSeqNum(self, num):
        r"""
        setNextSenderMsgSeqNum(self, num)

        Parameters
        ----------
        num: FIX::SEQNUM

        """
        return _quickfix.Session_setNextSenderMsgSeqNum(self, num)
    setNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.Session_setNextSenderMsgSeqNum)

    def setNextTargetMsgSeqNum(self, num):
        r"""
        setNextTargetMsgSeqNum(self, num)

        Parameters
        ----------
        num: FIX::SEQNUM

        """
        return _quickfix.Session_setNextTargetMsgSeqNum(self, num)
    setNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.Session_setNextTargetMsgSeqNum)

    def getSessionID(self):
        r"""getSessionID(self) -> SessionID"""
        return _quickfix.Session_getSessionID(self)
    getSessionID = _swig_new_instance_method(_quickfix.Session_getSessionID)

    def setDataDictionaryProvider(self, dataDictionaryProvider):
        r"""
        setDataDictionaryProvider(self, dataDictionaryProvider)

        Parameters
        ----------
        dataDictionaryProvider: DataDictionaryProvider const &

        """
        return _quickfix.Session_setDataDictionaryProvider(self, dataDictionaryProvider)
    setDataDictionaryProvider = _swig_new_instance_method(_quickfix.Session_setDataDictionaryProvider)

    def getDataDictionaryProvider(self):
        r"""getDataDictionaryProvider(self) -> DataDictionaryProvider const &"""
        return _quickfix.Session_getDataDictionaryProvider(self)
    getDataDictionaryProvider = _swig_new_instance_method(_quickfix.Session_getDataDictionaryProvider)

    @staticmethod
    def sendToTarget(*args):
        r"""
        sendToTarget(message, qualifier="") -> bool

        Parameters
        ----------
        message: FIX::Message &
        qualifier: std::string const &

        sendToTarget(message, sessionID) -> bool

        Parameters
        ----------
        message: FIX::Message &
        sessionID: FIX::SessionID const &

        sendToTarget(arg1, senderCompID, targetCompID, qualifier="") -> bool

        Parameters
        ----------
        arg1: FIX::Message &
        senderCompID: FIX::SenderCompID const &
        targetCompID: FIX::TargetCompID const &
        qualifier: std::string const &

        sendToTarget(message, senderCompID, targetCompID, qualifier="") -> bool

        Parameters
        ----------
        message: FIX::Message &
        senderCompID: std::string const &
        targetCompID: std::string const &
        qualifier: std::string const &

        """
        return _quickfix.Session_sendToTarget(*args)
    sendToTarget = _swig_new_static_method(_quickfix.Session_sendToTarget)

    @staticmethod
    def getSessions():
        r"""getSessions() -> SessionIDSet"""
        return _quickfix.Session_getSessions()
    getSessions = _swig_new_static_method(_quickfix.Session_getSessions)

    @staticmethod
    def doesSessionExist(arg1):
        r"""
        doesSessionExist(arg1) -> bool

        Parameters
        ----------
        arg1: FIX::SessionID const &

        """
        return _quickfix.Session_doesSessionExist(arg1)
    doesSessionExist = _swig_new_static_method(_quickfix.Session_doesSessionExist)

    @staticmethod
    def lookupSession(*args):
        r"""
        lookupSession(arg1) -> Session

        Parameters
        ----------
        arg1: FIX::SessionID const &

        lookupSession(arg1, reverse=False) -> Session

        Parameters
        ----------
        arg1: std::string const &
        reverse: bool

        """
        return _quickfix.Session_lookupSession(*args)
    lookupSession = _swig_new_static_method(_quickfix.Session_lookupSession)

    @staticmethod
    def isSessionRegistered(arg1):
        r"""
        isSessionRegistered(arg1) -> bool

        Parameters
        ----------
        arg1: FIX::SessionID const &

        """
        return _quickfix.Session_isSessionRegistered(arg1)
    isSessionRegistered = _swig_new_static_method(_quickfix.Session_isSessionRegistered)

    @staticmethod
    def registerSession(arg1):
        r"""
        registerSession(arg1) -> Session

        Parameters
        ----------
        arg1: FIX::SessionID const &

        """
        return _quickfix.Session_registerSession(arg1)
    registerSession = _swig_new_static_method(_quickfix.Session_registerSession)

    @staticmethod
    def unregisterSession(arg1):
        r"""
        unregisterSession(arg1)

        Parameters
        ----------
        arg1: FIX::SessionID const &

        """
        return _quickfix.Session_unregisterSession(arg1)
    unregisterSession = _swig_new_static_method(_quickfix.Session_unregisterSession)

    @staticmethod
    def numSessions():
        r"""numSessions() -> size_t"""
        return _quickfix.Session_numSessions()
    numSessions = _swig_new_static_method(_quickfix.Session_numSessions)

    def isSessionTime(self, now):
        r"""
        isSessionTime(self, now) -> bool

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        return _quickfix.Session_isSessionTime(self, now)
    isSessionTime = _swig_new_instance_method(_quickfix.Session_isSessionTime)

    def isLogonTime(self, now):
        r"""
        isLogonTime(self, now) -> bool

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        return _quickfix.Session_isLogonTime(self, now)
    isLogonTime = _swig_new_instance_method(_quickfix.Session_isLogonTime)

    def isInitiator(self):
        r"""isInitiator(self) -> bool"""
        return _quickfix.Session_isInitiator(self)
    isInitiator = _swig_new_instance_method(_quickfix.Session_isInitiator)

    def isAcceptor(self):
        r"""isAcceptor(self) -> bool"""
        return _quickfix.Session_isAcceptor(self)
    isAcceptor = _swig_new_instance_method(_quickfix.Session_isAcceptor)

    def getLogonTime(self):
        r"""getLogonTime(self) -> TimeRange const &"""
        return _quickfix.Session_getLogonTime(self)
    getLogonTime = _swig_new_instance_method(_quickfix.Session_getLogonTime)

    def setLogonTime(self, value):
        r"""
        setLogonTime(self, value)

        Parameters
        ----------
        value: TimeRange const &

        """
        return _quickfix.Session_setLogonTime(self, value)
    setLogonTime = _swig_new_instance_method(_quickfix.Session_setLogonTime)

    def getSenderDefaultApplVerID(self):
        r"""getSenderDefaultApplVerID(self) -> std::string const &"""
        return _quickfix.Session_getSenderDefaultApplVerID(self)
    getSenderDefaultApplVerID = _swig_new_instance_method(_quickfix.Session_getSenderDefaultApplVerID)

    def setSenderDefaultApplVerID(self, senderDefaultApplVerID):
        r"""
        setSenderDefaultApplVerID(self, senderDefaultApplVerID)

        Parameters
        ----------
        senderDefaultApplVerID: std::string const &

        """
        return _quickfix.Session_setSenderDefaultApplVerID(self, senderDefaultApplVerID)
    setSenderDefaultApplVerID = _swig_new_instance_method(_quickfix.Session_setSenderDefaultApplVerID)

    def getTargetDefaultApplVerID(self):
        r"""getTargetDefaultApplVerID(self) -> std::string const &"""
        return _quickfix.Session_getTargetDefaultApplVerID(self)
    getTargetDefaultApplVerID = _swig_new_instance_method(_quickfix.Session_getTargetDefaultApplVerID)

    def setTargetDefaultApplVerID(self, targetDefaultApplVerID):
        r"""
        setTargetDefaultApplVerID(self, targetDefaultApplVerID)

        Parameters
        ----------
        targetDefaultApplVerID: std::string const &

        """
        return _quickfix.Session_setTargetDefaultApplVerID(self, targetDefaultApplVerID)
    setTargetDefaultApplVerID = _swig_new_instance_method(_quickfix.Session_setTargetDefaultApplVerID)

    def getSendRedundantResendRequests(self):
        r"""getSendRedundantResendRequests(self) -> bool"""
        return _quickfix.Session_getSendRedundantResendRequests(self)
    getSendRedundantResendRequests = _swig_new_instance_method(_quickfix.Session_getSendRedundantResendRequests)

    def setSendRedundantResendRequests(self, value):
        r"""
        setSendRedundantResendRequests(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setSendRedundantResendRequests(self, value)
    setSendRedundantResendRequests = _swig_new_instance_method(_quickfix.Session_setSendRedundantResendRequests)

    def getCheckCompId(self):
        r"""getCheckCompId(self) -> bool"""
        return _quickfix.Session_getCheckCompId(self)
    getCheckCompId = _swig_new_instance_method(_quickfix.Session_getCheckCompId)

    def setCheckCompId(self, value):
        r"""
        setCheckCompId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setCheckCompId(self, value)
    setCheckCompId = _swig_new_instance_method(_quickfix.Session_setCheckCompId)

    def getCheckLatency(self):
        r"""getCheckLatency(self) -> bool"""
        return _quickfix.Session_getCheckLatency(self)
    getCheckLatency = _swig_new_instance_method(_quickfix.Session_getCheckLatency)

    def setCheckLatency(self, value):
        r"""
        setCheckLatency(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setCheckLatency(self, value)
    setCheckLatency = _swig_new_instance_method(_quickfix.Session_setCheckLatency)

    def getMaxLatency(self):
        r"""getMaxLatency(self) -> int"""
        return _quickfix.Session_getMaxLatency(self)
    getMaxLatency = _swig_new_instance_method(_quickfix.Session_getMaxLatency)

    def setMaxLatency(self, value):
        r"""
        setMaxLatency(self, value)

        Parameters
        ----------
        value: int

        """
        return _quickfix.Session_setMaxLatency(self, value)
    setMaxLatency = _swig_new_instance_method(_quickfix.Session_setMaxLatency)

    def getLogonTimeout(self):
        r"""getLogonTimeout(self) -> int"""
        return _quickfix.Session_getLogonTimeout(self)
    getLogonTimeout = _swig_new_instance_method(_quickfix.Session_getLogonTimeout)

    def setLogonTimeout(self, value):
        r"""
        setLogonTimeout(self, value)

        Parameters
        ----------
        value: int

        """
        return _quickfix.Session_setLogonTimeout(self, value)
    setLogonTimeout = _swig_new_instance_method(_quickfix.Session_setLogonTimeout)

    def getLogoutTimeout(self):
        r"""getLogoutTimeout(self) -> int"""
        return _quickfix.Session_getLogoutTimeout(self)
    getLogoutTimeout = _swig_new_instance_method(_quickfix.Session_getLogoutTimeout)

    def setLogoutTimeout(self, value):
        r"""
        setLogoutTimeout(self, value)

        Parameters
        ----------
        value: int

        """
        return _quickfix.Session_setLogoutTimeout(self, value)
    setLogoutTimeout = _swig_new_instance_method(_quickfix.Session_setLogoutTimeout)

    def getResetOnLogon(self):
        r"""getResetOnLogon(self) -> bool"""
        return _quickfix.Session_getResetOnLogon(self)
    getResetOnLogon = _swig_new_instance_method(_quickfix.Session_getResetOnLogon)

    def setResetOnLogon(self, value):
        r"""
        setResetOnLogon(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setResetOnLogon(self, value)
    setResetOnLogon = _swig_new_instance_method(_quickfix.Session_setResetOnLogon)

    def getResetOnLogout(self):
        r"""getResetOnLogout(self) -> bool"""
        return _quickfix.Session_getResetOnLogout(self)
    getResetOnLogout = _swig_new_instance_method(_quickfix.Session_getResetOnLogout)

    def setResetOnLogout(self, value):
        r"""
        setResetOnLogout(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setResetOnLogout(self, value)
    setResetOnLogout = _swig_new_instance_method(_quickfix.Session_setResetOnLogout)

    def getResetOnDisconnect(self):
        r"""getResetOnDisconnect(self) -> bool"""
        return _quickfix.Session_getResetOnDisconnect(self)
    getResetOnDisconnect = _swig_new_instance_method(_quickfix.Session_getResetOnDisconnect)

    def setResetOnDisconnect(self, value):
        r"""
        setResetOnDisconnect(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setResetOnDisconnect(self, value)
    setResetOnDisconnect = _swig_new_instance_method(_quickfix.Session_setResetOnDisconnect)

    def getRefreshOnLogon(self):
        r"""getRefreshOnLogon(self) -> bool"""
        return _quickfix.Session_getRefreshOnLogon(self)
    getRefreshOnLogon = _swig_new_instance_method(_quickfix.Session_getRefreshOnLogon)

    def setRefreshOnLogon(self, value):
        r"""
        setRefreshOnLogon(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setRefreshOnLogon(self, value)
    setRefreshOnLogon = _swig_new_instance_method(_quickfix.Session_setRefreshOnLogon)

    def getMillisecondsInTimeStamp(self):
        r"""getMillisecondsInTimeStamp(self) -> bool"""
        return _quickfix.Session_getMillisecondsInTimeStamp(self)
    getMillisecondsInTimeStamp = _swig_new_instance_method(_quickfix.Session_getMillisecondsInTimeStamp)

    def setMillisecondsInTimeStamp(self, value):
        r"""
        setMillisecondsInTimeStamp(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setMillisecondsInTimeStamp(self, value)
    setMillisecondsInTimeStamp = _swig_new_instance_method(_quickfix.Session_setMillisecondsInTimeStamp)

    def getTimestampPrecision(self):
        r"""getTimestampPrecision(self) -> int"""
        return _quickfix.Session_getTimestampPrecision(self)
    getTimestampPrecision = _swig_new_instance_method(_quickfix.Session_getTimestampPrecision)

    def setTimestampPrecision(self, precision):
        r"""
        setTimestampPrecision(self, precision)

        Parameters
        ----------
        precision: int

        """
        return _quickfix.Session_setTimestampPrecision(self, precision)
    setTimestampPrecision = _swig_new_instance_method(_quickfix.Session_setTimestampPrecision)

    def getSupportedTimestampPrecision(self):
        r"""getSupportedTimestampPrecision(self) -> int"""
        return _quickfix.Session_getSupportedTimestampPrecision(self)
    getSupportedTimestampPrecision = _swig_new_instance_method(_quickfix.Session_getSupportedTimestampPrecision)

    @staticmethod
    def supportsSubSecondTimestamps(beginString):
        r"""
        supportsSubSecondTimestamps(beginString) -> bool

        Parameters
        ----------
        beginString: std::string const &

        """
        return _quickfix.Session_supportsSubSecondTimestamps(beginString)
    supportsSubSecondTimestamps = _swig_new_static_method(_quickfix.Session_supportsSubSecondTimestamps)

    def getPersistMessages(self):
        r"""getPersistMessages(self) -> bool"""
        return _quickfix.Session_getPersistMessages(self)
    getPersistMessages = _swig_new_instance_method(_quickfix.Session_getPersistMessages)

    def setPersistMessages(self, value):
        r"""
        setPersistMessages(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setPersistMessages(self, value)
    setPersistMessages = _swig_new_instance_method(_quickfix.Session_setPersistMessages)

    def getValidateLengthAndChecksum(self):
        r"""getValidateLengthAndChecksum(self) -> bool"""
        return _quickfix.Session_getValidateLengthAndChecksum(self)
    getValidateLengthAndChecksum = _swig_new_instance_method(_quickfix.Session_getValidateLengthAndChecksum)

    def setValidateLengthAndChecksum(self, value):
        r"""
        setValidateLengthAndChecksum(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setValidateLengthAndChecksum(self, value)
    setValidateLengthAndChecksum = _swig_new_instance_method(_quickfix.Session_setValidateLengthAndChecksum)

    def getSendNextExpectedMsgSeqNum(self):
        r"""getSendNextExpectedMsgSeqNum(self) -> bool"""
        return _quickfix.Session_getSendNextExpectedMsgSeqNum(self)
    getSendNextExpectedMsgSeqNum = _swig_new_instance_method(_quickfix.Session_getSendNextExpectedMsgSeqNum)

    def setSendNextExpectedMsgSeqNum(self, value):
        r"""
        setSendNextExpectedMsgSeqNum(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setSendNextExpectedMsgSeqNum(self, value)
    setSendNextExpectedMsgSeqNum = _swig_new_instance_method(_quickfix.Session_setSendNextExpectedMsgSeqNum)

    def getIsNonStopSession(self):
        r"""getIsNonStopSession(self) -> bool"""
        return _quickfix.Session_getIsNonStopSession(self)
    getIsNonStopSession = _swig_new_instance_method(_quickfix.Session_getIsNonStopSession)

    def setIsNonStopSession(self, value):
        r"""
        setIsNonStopSession(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.Session_setIsNonStopSession(self, value)
    setIsNonStopSession = _swig_new_instance_method(_quickfix.Session_setIsNonStopSession)

    def getAllowedRemoteAddresses(self):
        r"""getAllowedRemoteAddresses(self) -> std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &"""
        return _quickfix.Session_getAllowedRemoteAddresses(self)
    getAllowedRemoteAddresses = _swig_new_instance_method(_quickfix.Session_getAllowedRemoteAddresses)

    def setAllowedRemoteAddresses(self, value):
        r"""
        setAllowedRemoteAddresses(self, value)

        Parameters
        ----------
        value: std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &

        """
        return _quickfix.Session_setAllowedRemoteAddresses(self, value)
    setAllowedRemoteAddresses = _swig_new_instance_method(_quickfix.Session_setAllowedRemoteAddresses)

    def inAllowedRemoteAddresses(self, value):
        r"""
        inAllowedRemoteAddresses(self, value) -> bool

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.Session_inAllowedRemoteAddresses(self, value)
    inAllowedRemoteAddresses = _swig_new_instance_method(_quickfix.Session_inAllowedRemoteAddresses)

    def setResponder(self, pR):
        r"""
        setResponder(self, pR)

        Parameters
        ----------
        pR: Responder *

        """
        return _quickfix.Session_setResponder(self, pR)
    setResponder = _swig_new_instance_method(_quickfix.Session_setResponder)

    def send(self, arg2):
        r"""
        send(self, arg2) -> bool

        Parameters
        ----------
        arg2: FIX::Message &

        """
        return _quickfix.Session_send(self, arg2)
    send = _swig_new_instance_method(_quickfix.Session_send)

    def next(self, *args):
        r"""
        next(self, now)

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        next(self, arg2, now, queued=False)

        Parameters
        ----------
        arg2: std::string const &
        now: FIX::UtcTimeStamp const &
        queued: bool

        next(self, arg2, now, queued=False)

        Parameters
        ----------
        arg2: FIX::Message const &
        now: FIX::UtcTimeStamp const &
        queued: bool

        """
        return _quickfix.Session_next(self, *args)
    next = _swig_new_instance_method(_quickfix.Session_next)

    def disconnect(self):
        r"""disconnect(self)"""
        return _quickfix.Session_disconnect(self)
    disconnect = _swig_new_instance_method(_quickfix.Session_disconnect)

    def getExpectedSenderNum(self):
        r"""getExpectedSenderNum(self) -> FIX::SEQNUM"""
        return _quickfix.Session_getExpectedSenderNum(self)
    getExpectedSenderNum = _swig_new_instance_method(_quickfix.Session_getExpectedSenderNum)

    def getExpectedTargetNum(self):
        r"""getExpectedTargetNum(self) -> FIX::SEQNUM"""
        return _quickfix.Session_getExpectedTargetNum(self)
    getExpectedTargetNum = _swig_new_instance_method(_quickfix.Session_getExpectedTargetNum)

    def getLog(self):
        r"""getLog(self) -> Log *"""
        return _quickfix.Session_getLog(self)
    getLog = _swig_new_instance_method(_quickfix.Session_getLog)

    def getStore(self):
        r"""getStore(self) -> MessageStore const *"""
        return _quickfix.Session_getStore(self)
    getStore = _swig_new_instance_method(_quickfix.Session_getStore)

# Register Session in _quickfix:
_quickfix.Session_swigregister(Session)
class LogFactory(object):
    r"""Proxy of C++ FIX::LogFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_LogFactory

    def create(self, *args):
        r"""
        create(self) -> Log
        create(self, arg0) -> Log

        Parameters
        ----------
        arg0: FIX::SessionID const &

        """
        return _quickfix.LogFactory_create(self, *args)
    create = _swig_new_instance_method(_quickfix.LogFactory_create)

    def destroy(self, arg0):
        r"""
        destroy(self, arg0)

        Parameters
        ----------
        arg0: FIX::Log *

        """
        return _quickfix.LogFactory_destroy(self, arg0)
    destroy = _swig_new_instance_method(_quickfix.LogFactory_destroy)

    def __init__(self):
        r"""
        __init__(self) -> LogFactory

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == LogFactory:
            _self = None
        else:
            _self = self
        _quickfix.LogFactory_swiginit(self, _quickfix.new_LogFactory(_self, ))
    def __disown__(self):
        self.this.disown()
        _quickfix.disown_LogFactory(self)
        return weakref.proxy(self)

# Register LogFactory in _quickfix:
_quickfix.LogFactory_swigregister(LogFactory)
class ScreenLogFactory(LogFactory):
    r"""Proxy of C++ FIX::ScreenLogFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, settings) -> ScreenLogFactory

        Parameters
        ----------
        settings: FIX::SessionSettings

        __init__(self, incoming, outgoing, event) -> ScreenLogFactory

        Parameters
        ----------
        incoming: bool
        outgoing: bool
        event: bool

        """
        _quickfix.ScreenLogFactory_swiginit(self, _quickfix.new_ScreenLogFactory(*args))

    def create(self, *args):
        r"""
        create(self) -> Log
        create(self, arg2) -> Log

        Parameters
        ----------
        arg2: FIX::SessionID const &

        """
        return _quickfix.ScreenLogFactory_create(self, *args)
    create = _swig_new_instance_method(_quickfix.ScreenLogFactory_create)

    def destroy(self, log):
        r"""
        destroy(self, log)

        Parameters
        ----------
        log: FIX::Log *

        """
        return _quickfix.ScreenLogFactory_destroy(self, log)
    destroy = _swig_new_instance_method(_quickfix.ScreenLogFactory_destroy)
    __swig_destroy__ = _quickfix.delete_ScreenLogFactory

# Register ScreenLogFactory in _quickfix:
_quickfix.ScreenLogFactory_swigregister(ScreenLogFactory)
class Log(object):
    r"""Proxy of C++ FIX::Log class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Log

    def clear(self):
        r"""clear(self)"""
        return _quickfix.Log_clear(self)
    clear = _swig_new_instance_method(_quickfix.Log_clear)

    def backup(self):
        r"""backup(self)"""
        return _quickfix.Log_backup(self)
    backup = _swig_new_instance_method(_quickfix.Log_backup)

    def onIncoming(self, arg0):
        r"""
        onIncoming(self, arg0)

        Parameters
        ----------
        arg0: std::string const &

        """
        return _quickfix.Log_onIncoming(self, arg0)
    onIncoming = _swig_new_instance_method(_quickfix.Log_onIncoming)

    def onOutgoing(self, arg0):
        r"""
        onOutgoing(self, arg0)

        Parameters
        ----------
        arg0: std::string const &

        """
        return _quickfix.Log_onOutgoing(self, arg0)
    onOutgoing = _swig_new_instance_method(_quickfix.Log_onOutgoing)

    def onEvent(self, arg0):
        r"""
        onEvent(self, arg0)

        Parameters
        ----------
        arg0: std::string const &

        """
        return _quickfix.Log_onEvent(self, arg0)
    onEvent = _swig_new_instance_method(_quickfix.Log_onEvent)

    def __init__(self):
        r"""
        __init__(self) -> Log

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == Log:
            _self = None
        else:
            _self = self
        _quickfix.Log_swiginit(self, _quickfix.new_Log(_self, ))
    def __disown__(self):
        self.this.disown()
        _quickfix.disown_Log(self)
        return weakref.proxy(self)

# Register Log in _quickfix:
_quickfix.Log_swigregister(Log)
class NullLog(Log):
    r"""Proxy of C++ FIX::NullLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self):
        r"""clear(self)"""
        return _quickfix.NullLog_clear(self)
    clear = _swig_new_instance_method(_quickfix.NullLog_clear)

    def backup(self):
        r"""backup(self)"""
        return _quickfix.NullLog_backup(self)
    backup = _swig_new_instance_method(_quickfix.NullLog_backup)

    def onIncoming(self, arg2):
        r"""
        onIncoming(self, arg2)

        Parameters
        ----------
        arg2: std::string const &

        """
        return _quickfix.NullLog_onIncoming(self, arg2)
    onIncoming = _swig_new_instance_method(_quickfix.NullLog_onIncoming)

    def onOutgoing(self, arg2):
        r"""
        onOutgoing(self, arg2)

        Parameters
        ----------
        arg2: std::string const &

        """
        return _quickfix.NullLog_onOutgoing(self, arg2)
    onOutgoing = _swig_new_instance_method(_quickfix.NullLog_onOutgoing)

    def onEvent(self, arg2):
        r"""
        onEvent(self, arg2)

        Parameters
        ----------
        arg2: std::string const &

        """
        return _quickfix.NullLog_onEvent(self, arg2)
    onEvent = _swig_new_instance_method(_quickfix.NullLog_onEvent)

    def __init__(self):
        r"""__init__(self) -> NullLog"""
        _quickfix.NullLog_swiginit(self, _quickfix.new_NullLog())
    __swig_destroy__ = _quickfix.delete_NullLog

# Register NullLog in _quickfix:
_quickfix.NullLog_swigregister(NullLog)
class ScreenLog(Log):
    r"""Proxy of C++ FIX::ScreenLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, incoming, outgoing, event) -> ScreenLog

        Parameters
        ----------
        incoming: bool
        outgoing: bool
        event: bool

        __init__(self, sessionID, incoming, outgoing, event) -> ScreenLog

        Parameters
        ----------
        sessionID: FIX::SessionID const &
        incoming: bool
        outgoing: bool
        event: bool

        """
        _quickfix.ScreenLog_swiginit(self, _quickfix.new_ScreenLog(*args))

    def clear(self):
        r"""clear(self)"""
        return _quickfix.ScreenLog_clear(self)
    clear = _swig_new_instance_method(_quickfix.ScreenLog_clear)

    def backup(self):
        r"""backup(self)"""
        return _quickfix.ScreenLog_backup(self)
    backup = _swig_new_instance_method(_quickfix.ScreenLog_backup)

    def onIncoming(self, value):
        r"""
        onIncoming(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.ScreenLog_onIncoming(self, value)
    onIncoming = _swig_new_instance_method(_quickfix.ScreenLog_onIncoming)

    def onOutgoing(self, value):
        r"""
        onOutgoing(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.ScreenLog_onOutgoing(self, value)
    onOutgoing = _swig_new_instance_method(_quickfix.ScreenLog_onOutgoing)

    def onEvent(self, value):
        r"""
        onEvent(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.ScreenLog_onEvent(self, value)
    onEvent = _swig_new_instance_method(_quickfix.ScreenLog_onEvent)
    __swig_destroy__ = _quickfix.delete_ScreenLog

# Register ScreenLog in _quickfix:
_quickfix.ScreenLog_swigregister(ScreenLog)
class FileLogFactory(LogFactory):
    r"""Proxy of C++ FIX::FileLogFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, settings) -> FileLogFactory

        Parameters
        ----------
        settings: FIX::SessionSettings const &

        __init__(self, path) -> FileLogFactory

        Parameters
        ----------
        path: std::string const &

        __init__(self, path, backupPath) -> FileLogFactory

        Parameters
        ----------
        path: std::string const &
        backupPath: std::string const &

        """
        _quickfix.FileLogFactory_swiginit(self, _quickfix.new_FileLogFactory(*args))

    def create(self, *args):
        r"""
        create(self) -> Log
        create(self, arg2) -> Log

        Parameters
        ----------
        arg2: FIX::SessionID const &

        """
        return _quickfix.FileLogFactory_create(self, *args)
    create = _swig_new_instance_method(_quickfix.FileLogFactory_create)

    def destroy(self, log):
        r"""
        destroy(self, log)

        Parameters
        ----------
        log: FIX::Log *

        """
        return _quickfix.FileLogFactory_destroy(self, log)
    destroy = _swig_new_instance_method(_quickfix.FileLogFactory_destroy)
    __swig_destroy__ = _quickfix.delete_FileLogFactory

# Register FileLogFactory in _quickfix:
_quickfix.FileLogFactory_swigregister(FileLogFactory)
class FileLog(Log):
    r"""Proxy of C++ FIX::FileLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, path) -> FileLog

        Parameters
        ----------
        path: std::string const &

        __init__(self, path, backupPath) -> FileLog

        Parameters
        ----------
        path: std::string const &
        backupPath: std::string const &

        __init__(self, path, sessionID) -> FileLog

        Parameters
        ----------
        path: std::string const &
        sessionID: FIX::SessionID const &

        __init__(self, path, backupPath, sessionID) -> FileLog

        Parameters
        ----------
        path: std::string const &
        backupPath: std::string const &
        sessionID: FIX::SessionID const &

        """
        _quickfix.FileLog_swiginit(self, _quickfix.new_FileLog(*args))
    __swig_destroy__ = _quickfix.delete_FileLog

    def clear(self):
        r"""clear(self)"""
        return _quickfix.FileLog_clear(self)
    clear = _swig_new_instance_method(_quickfix.FileLog_clear)

    def backup(self):
        r"""backup(self)"""
        return _quickfix.FileLog_backup(self)
    backup = _swig_new_instance_method(_quickfix.FileLog_backup)

    def onIncoming(self, value):
        r"""
        onIncoming(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.FileLog_onIncoming(self, value)
    onIncoming = _swig_new_instance_method(_quickfix.FileLog_onIncoming)

    def onOutgoing(self, value):
        r"""
        onOutgoing(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.FileLog_onOutgoing(self, value)
    onOutgoing = _swig_new_instance_method(_quickfix.FileLog_onOutgoing)

    def onEvent(self, value):
        r"""
        onEvent(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.FileLog_onEvent(self, value)
    onEvent = _swig_new_instance_method(_quickfix.FileLog_onEvent)

# Register FileLog in _quickfix:
_quickfix.FileLog_swigregister(FileLog)
class MessageStoreFactory(object):
    r"""Proxy of C++ FIX::MessageStoreFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_MessageStoreFactory

    def create(self, now, arg3):
        r"""
        create(self, now, arg3) -> MessageStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &
        arg3: FIX::SessionID const &

        """
        return _quickfix.MessageStoreFactory_create(self, now, arg3)
    create = _swig_new_instance_method(_quickfix.MessageStoreFactory_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::MessageStore *

        """
        return _quickfix.MessageStoreFactory_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.MessageStoreFactory_destroy)

# Register MessageStoreFactory in _quickfix:
_quickfix.MessageStoreFactory_swigregister(MessageStoreFactory)
class MemoryStoreFactory(MessageStoreFactory):
    r"""Proxy of C++ FIX::MemoryStoreFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def create(self, now, arg3):
        r"""
        create(self, now, arg3) -> MessageStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &
        arg3: FIX::SessionID const &

        """
        return _quickfix.MemoryStoreFactory_create(self, now, arg3)
    create = _swig_new_instance_method(_quickfix.MemoryStoreFactory_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::MessageStore *

        """
        return _quickfix.MemoryStoreFactory_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.MemoryStoreFactory_destroy)

    def __init__(self):
        r"""__init__(self) -> MemoryStoreFactory"""
        _quickfix.MemoryStoreFactory_swiginit(self, _quickfix.new_MemoryStoreFactory())
    __swig_destroy__ = _quickfix.delete_MemoryStoreFactory

# Register MemoryStoreFactory in _quickfix:
_quickfix.MemoryStoreFactory_swigregister(MemoryStoreFactory)
class MessageStore(object):
    r"""Proxy of C++ FIX::MessageStore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_MessageStore

    def set(self, arg2, arg3):
        r"""
        set(self, arg2, arg3) -> bool

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: std::string const &

        """
        return _quickfix.MessageStore_set(self, arg2, arg3)
    set = _swig_new_instance_method(_quickfix.MessageStore_set)

    def get(self, arg2, arg3, arg4):
        r"""
        get(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: FIX::SEQNUM
        arg4: std::vector< std::string,std::allocator< std::string > > &

        """
        return _quickfix.MessageStore_get(self, arg2, arg3, arg4)
    get = _swig_new_instance_method(_quickfix.MessageStore_get)

    def getNextSenderMsgSeqNum(self):
        r"""getNextSenderMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.MessageStore_getNextSenderMsgSeqNum(self)
    getNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStore_getNextSenderMsgSeqNum)

    def getNextTargetMsgSeqNum(self):
        r"""getNextTargetMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.MessageStore_getNextTargetMsgSeqNum(self)
    getNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStore_getNextTargetMsgSeqNum)

    def setNextSenderMsgSeqNum(self, arg2):
        r"""
        setNextSenderMsgSeqNum(self, arg2)

        Parameters
        ----------
        arg2: FIX::SEQNUM

        """
        return _quickfix.MessageStore_setNextSenderMsgSeqNum(self, arg2)
    setNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStore_setNextSenderMsgSeqNum)

    def setNextTargetMsgSeqNum(self, arg2):
        r"""
        setNextTargetMsgSeqNum(self, arg2)

        Parameters
        ----------
        arg2: FIX::SEQNUM

        """
        return _quickfix.MessageStore_setNextTargetMsgSeqNum(self, arg2)
    setNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStore_setNextTargetMsgSeqNum)

    def incrNextSenderMsgSeqNum(self):
        r"""incrNextSenderMsgSeqNum(self)"""
        return _quickfix.MessageStore_incrNextSenderMsgSeqNum(self)
    incrNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStore_incrNextSenderMsgSeqNum)

    def incrNextTargetMsgSeqNum(self):
        r"""incrNextTargetMsgSeqNum(self)"""
        return _quickfix.MessageStore_incrNextTargetMsgSeqNum(self)
    incrNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStore_incrNextTargetMsgSeqNum)

    def getCreationTime(self):
        r"""getCreationTime(self) -> UtcTimeStamp"""
        return _quickfix.MessageStore_getCreationTime(self)
    getCreationTime = _swig_new_instance_method(_quickfix.MessageStore_getCreationTime)

    def reset(self, now):
        r"""
        reset(self, now)

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        return _quickfix.MessageStore_reset(self, now)
    reset = _swig_new_instance_method(_quickfix.MessageStore_reset)

    def refresh(self):
        r"""refresh(self)"""
        return _quickfix.MessageStore_refresh(self)
    refresh = _swig_new_instance_method(_quickfix.MessageStore_refresh)

# Register MessageStore in _quickfix:
_quickfix.MessageStore_swigregister(MessageStore)
class MemoryStore(MessageStore):
    r"""Proxy of C++ FIX::MemoryStore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, now):
        r"""
        __init__(self, now) -> MemoryStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        _quickfix.MemoryStore_swiginit(self, _quickfix.new_MemoryStore(now))

    def set(self, arg2, arg3):
        r"""
        set(self, arg2, arg3) -> bool

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: std::string const &

        """
        return _quickfix.MemoryStore_set(self, arg2, arg3)
    set = _swig_new_instance_method(_quickfix.MemoryStore_set)

    def get(self, arg2, arg3, arg4):
        r"""
        get(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: FIX::SEQNUM
        arg4: std::vector< std::string,std::allocator< std::string > > &

        """
        return _quickfix.MemoryStore_get(self, arg2, arg3, arg4)
    get = _swig_new_instance_method(_quickfix.MemoryStore_get)

    def getNextSenderMsgSeqNum(self):
        r"""getNextSenderMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.MemoryStore_getNextSenderMsgSeqNum(self)
    getNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MemoryStore_getNextSenderMsgSeqNum)

    def getNextTargetMsgSeqNum(self):
        r"""getNextTargetMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.MemoryStore_getNextTargetMsgSeqNum(self)
    getNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MemoryStore_getNextTargetMsgSeqNum)

    def setNextSenderMsgSeqNum(self, value):
        r"""
        setNextSenderMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.MemoryStore_setNextSenderMsgSeqNum(self, value)
    setNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MemoryStore_setNextSenderMsgSeqNum)

    def setNextTargetMsgSeqNum(self, value):
        r"""
        setNextTargetMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.MemoryStore_setNextTargetMsgSeqNum(self, value)
    setNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MemoryStore_setNextTargetMsgSeqNum)

    def incrNextSenderMsgSeqNum(self):
        r"""incrNextSenderMsgSeqNum(self)"""
        return _quickfix.MemoryStore_incrNextSenderMsgSeqNum(self)
    incrNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MemoryStore_incrNextSenderMsgSeqNum)

    def incrNextTargetMsgSeqNum(self):
        r"""incrNextTargetMsgSeqNum(self)"""
        return _quickfix.MemoryStore_incrNextTargetMsgSeqNum(self)
    incrNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MemoryStore_incrNextTargetMsgSeqNum)

    def setCreationTime(self, creationTime):
        r"""
        setCreationTime(self, creationTime)

        Parameters
        ----------
        creationTime: FIX::UtcTimeStamp const &

        """
        return _quickfix.MemoryStore_setCreationTime(self, creationTime)
    setCreationTime = _swig_new_instance_method(_quickfix.MemoryStore_setCreationTime)

    def getCreationTime(self):
        r"""getCreationTime(self) -> UtcTimeStamp"""
        return _quickfix.MemoryStore_getCreationTime(self)
    getCreationTime = _swig_new_instance_method(_quickfix.MemoryStore_getCreationTime)

    def reset(self, now):
        r"""
        reset(self, now)

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        return _quickfix.MemoryStore_reset(self, now)
    reset = _swig_new_instance_method(_quickfix.MemoryStore_reset)

    def refresh(self):
        r"""refresh(self)"""
        return _quickfix.MemoryStore_refresh(self)
    refresh = _swig_new_instance_method(_quickfix.MemoryStore_refresh)
    __swig_destroy__ = _quickfix.delete_MemoryStore

# Register MemoryStore in _quickfix:
_quickfix.MemoryStore_swigregister(MemoryStore)
class MessageStoreFactoryExceptionWrapper(object):
    r"""Proxy of C++ FIX::MessageStoreFactoryExceptionWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pFactory):
        r"""
        __init__(self, pFactory) -> MessageStoreFactoryExceptionWrapper

        Parameters
        ----------
        pFactory: FIX::MessageStoreFactory *

        """
        _quickfix.MessageStoreFactoryExceptionWrapper_swiginit(self, _quickfix.new_MessageStoreFactoryExceptionWrapper(pFactory))

    def create(self, now, arg3, arg4, arg5):
        r"""
        create(self, now, arg3, arg4, arg5) -> MessageStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &
        arg3: FIX::SessionID const &
        arg4: bool &
        arg5: FIX::ConfigError &

        """
        return _quickfix.MessageStoreFactoryExceptionWrapper_create(self, now, arg3, arg4, arg5)
    create = _swig_new_instance_method(_quickfix.MessageStoreFactoryExceptionWrapper_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::MessageStore *

        """
        return _quickfix.MessageStoreFactoryExceptionWrapper_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.MessageStoreFactoryExceptionWrapper_destroy)
    __swig_destroy__ = _quickfix.delete_MessageStoreFactoryExceptionWrapper

# Register MessageStoreFactoryExceptionWrapper in _quickfix:
_quickfix.MessageStoreFactoryExceptionWrapper_swigregister(MessageStoreFactoryExceptionWrapper)
class MessageStoreExceptionWrapper(object):
    r"""Proxy of C++ FIX::MessageStoreExceptionWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pStore):
        r"""
        __init__(self, pStore) -> MessageStoreExceptionWrapper

        Parameters
        ----------
        pStore: FIX::MessageStore *

        """
        _quickfix.MessageStoreExceptionWrapper_swiginit(self, _quickfix.new_MessageStoreExceptionWrapper(pStore))
    __swig_destroy__ = _quickfix.delete_MessageStoreExceptionWrapper

    def set(self, arg2, arg3, arg4, arg5):
        r"""
        set(self, arg2, arg3, arg4, arg5) -> bool

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: std::string const &
        arg4: bool &
        arg5: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_set(self, arg2, arg3, arg4, arg5)
    set = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_set)

    def get(self, arg2, arg3, arg4, arg5, arg6):
        r"""
        get(self, arg2, arg3, arg4, arg5, arg6)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: FIX::SEQNUM
        arg4: std::vector< std::string,std::allocator< std::string > > &
        arg5: bool &
        arg6: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_get(self, arg2, arg3, arg4, arg5, arg6)
    get = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_get)

    def getNextSenderMsgSeqNum(self, arg2, arg3):
        r"""
        getNextSenderMsgSeqNum(self, arg2, arg3) -> FIX::SEQNUM

        Parameters
        ----------
        arg2: bool &
        arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_getNextSenderMsgSeqNum(self, arg2, arg3)
    getNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_getNextSenderMsgSeqNum)

    def getNextTargetMsgSeqNum(self, arg2, arg3):
        r"""
        getNextTargetMsgSeqNum(self, arg2, arg3) -> FIX::SEQNUM

        Parameters
        ----------
        arg2: bool &
        arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_getNextTargetMsgSeqNum(self, arg2, arg3)
    getNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_getNextTargetMsgSeqNum)

    def setNextSenderMsgSeqNum(self, arg2, arg3, arg4):
        r"""
        setNextSenderMsgSeqNum(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: bool &
        arg4: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_setNextSenderMsgSeqNum(self, arg2, arg3, arg4)
    setNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_setNextSenderMsgSeqNum)

    def setNextTargetMsgSeqNum(self, arg2, arg3, arg4):
        r"""
        setNextTargetMsgSeqNum(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: bool &
        arg4: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_setNextTargetMsgSeqNum(self, arg2, arg3, arg4)
    setNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_setNextTargetMsgSeqNum)

    def incrNextSenderMsgSeqNum(self, arg2, arg3):
        r"""
        incrNextSenderMsgSeqNum(self, arg2, arg3)

        Parameters
        ----------
        arg2: bool &
        arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum(self, arg2, arg3)
    incrNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum)

    def incrNextTargetMsgSeqNum(self, arg2, arg3):
        r"""
        incrNextTargetMsgSeqNum(self, arg2, arg3)

        Parameters
        ----------
        arg2: bool &
        arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum(self, arg2, arg3)
    incrNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum)

    def getCreationTime(self, arg2, arg3):
        r"""
        getCreationTime(self, arg2, arg3) -> UtcTimeStamp

        Parameters
        ----------
        arg2: bool &
        arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_getCreationTime(self, arg2, arg3)
    getCreationTime = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_getCreationTime)

    def reset(self, arg2, arg3, arg4):
        r"""
        reset(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::UtcTimeStamp const &
        arg3: bool &
        arg4: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_reset(self, arg2, arg3, arg4)
    reset = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_reset)

    def refresh(self, arg2, arg3):
        r"""
        refresh(self, arg2, arg3)

        Parameters
        ----------
        arg2: bool &
        arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_refresh(self, arg2, arg3)
    refresh = _swig_new_instance_method(_quickfix.MessageStoreExceptionWrapper_refresh)

# Register MessageStoreExceptionWrapper in _quickfix:
_quickfix.MessageStoreExceptionWrapper_swigregister(MessageStoreExceptionWrapper)
class FileStoreFactory(MessageStoreFactory):
    r"""Proxy of C++ FIX::FileStoreFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, settings) -> FileStoreFactory

        Parameters
        ----------
        settings: FIX::SessionSettings const &

        __init__(self, path) -> FileStoreFactory

        Parameters
        ----------
        path: std::string const &

        """
        _quickfix.FileStoreFactory_swiginit(self, _quickfix.new_FileStoreFactory(*args))

    def create(self, arg2, arg3):
        r"""
        create(self, arg2, arg3) -> MessageStore

        Parameters
        ----------
        arg2: FIX::UtcTimeStamp const &
        arg3: FIX::SessionID const &

        """
        return _quickfix.FileStoreFactory_create(self, arg2, arg3)
    create = _swig_new_instance_method(_quickfix.FileStoreFactory_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::MessageStore *

        """
        return _quickfix.FileStoreFactory_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.FileStoreFactory_destroy)
    __swig_destroy__ = _quickfix.delete_FileStoreFactory

# Register FileStoreFactory in _quickfix:
_quickfix.FileStoreFactory_swigregister(FileStoreFactory)
class FileStore(MessageStore):
    r"""Proxy of C++ FIX::FileStore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, now, arg3, sessionID):
        r"""
        __init__(self, now, arg3, sessionID) -> FileStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &
        arg3: std::string
        sessionID: FIX::SessionID const &

        """
        _quickfix.FileStore_swiginit(self, _quickfix.new_FileStore(now, arg3, sessionID))
    __swig_destroy__ = _quickfix.delete_FileStore

    def set(self, arg2, arg3):
        r"""
        set(self, arg2, arg3) -> bool

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: std::string const &

        """
        return _quickfix.FileStore_set(self, arg2, arg3)
    set = _swig_new_instance_method(_quickfix.FileStore_set)

    def get(self, arg2, arg3, arg4):
        r"""
        get(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: FIX::SEQNUM
        arg4: std::vector< std::string,std::allocator< std::string > > &

        """
        return _quickfix.FileStore_get(self, arg2, arg3, arg4)
    get = _swig_new_instance_method(_quickfix.FileStore_get)

    def getNextSenderMsgSeqNum(self):
        r"""getNextSenderMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.FileStore_getNextSenderMsgSeqNum(self)
    getNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.FileStore_getNextSenderMsgSeqNum)

    def getNextTargetMsgSeqNum(self):
        r"""getNextTargetMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.FileStore_getNextTargetMsgSeqNum(self)
    getNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.FileStore_getNextTargetMsgSeqNum)

    def setNextSenderMsgSeqNum(self, value):
        r"""
        setNextSenderMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.FileStore_setNextSenderMsgSeqNum(self, value)
    setNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.FileStore_setNextSenderMsgSeqNum)

    def setNextTargetMsgSeqNum(self, value):
        r"""
        setNextTargetMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.FileStore_setNextTargetMsgSeqNum(self, value)
    setNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.FileStore_setNextTargetMsgSeqNum)

    def incrNextSenderMsgSeqNum(self):
        r"""incrNextSenderMsgSeqNum(self)"""
        return _quickfix.FileStore_incrNextSenderMsgSeqNum(self)
    incrNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.FileStore_incrNextSenderMsgSeqNum)

    def incrNextTargetMsgSeqNum(self):
        r"""incrNextTargetMsgSeqNum(self)"""
        return _quickfix.FileStore_incrNextTargetMsgSeqNum(self)
    incrNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.FileStore_incrNextTargetMsgSeqNum)

    def getCreationTime(self):
        r"""getCreationTime(self) -> UtcTimeStamp"""
        return _quickfix.FileStore_getCreationTime(self)
    getCreationTime = _swig_new_instance_method(_quickfix.FileStore_getCreationTime)

    def reset(self, now):
        r"""
        reset(self, now)

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        return _quickfix.FileStore_reset(self, now)
    reset = _swig_new_instance_method(_quickfix.FileStore_reset)

    def refresh(self):
        r"""refresh(self)"""
        return _quickfix.FileStore_refresh(self)
    refresh = _swig_new_instance_method(_quickfix.FileStore_refresh)

# Register FileStore in _quickfix:
_quickfix.FileStore_swigregister(FileStore)
class Application(object):
    r"""Proxy of C++ FIX::Application class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Application

    def onCreate(self, arg0):
        r"""
        onCreate(self, arg0)

        Parameters
        ----------
        arg0: FIX::SessionID const &

        """
        return _quickfix.Application_onCreate(self, arg0)
    onCreate = _swig_new_instance_method(_quickfix.Application_onCreate)

    def onLogon(self, arg0):
        r"""
        onLogon(self, arg0)

        Parameters
        ----------
        arg0: FIX::SessionID const &

        """
        return _quickfix.Application_onLogon(self, arg0)
    onLogon = _swig_new_instance_method(_quickfix.Application_onLogon)

    def onLogout(self, arg0):
        r"""
        onLogout(self, arg0)

        Parameters
        ----------
        arg0: FIX::SessionID const &

        """
        return _quickfix.Application_onLogout(self, arg0)
    onLogout = _swig_new_instance_method(_quickfix.Application_onLogout)

    def toAdmin(self, arg0, arg1):
        r"""
        toAdmin(self, arg0, arg1)

        Parameters
        ----------
        arg0: FIX::Message &
        arg1: FIX::SessionID const &

        """
        return _quickfix.Application_toAdmin(self, arg0, arg1)
    toAdmin = _swig_new_instance_method(_quickfix.Application_toAdmin)

    def toApp(self, arg0, arg1):
        r"""
        toApp(self, arg0, arg1)

        Parameters
        ----------
        arg0: FIX::Message &
        arg1: FIX::SessionID const &

        """
        return _quickfix.Application_toApp(self, arg0, arg1)
    toApp = _swig_new_instance_method(_quickfix.Application_toApp)

    def fromAdmin(self, arg0, arg1):
        r"""
        fromAdmin(self, arg0, arg1)

        Parameters
        ----------
        arg0: FIX::Message const &
        arg1: FIX::SessionID const &

        """
        return _quickfix.Application_fromAdmin(self, arg0, arg1)
    fromAdmin = _swig_new_instance_method(_quickfix.Application_fromAdmin)

    def fromApp(self, arg0, arg1):
        r"""
        fromApp(self, arg0, arg1)

        Parameters
        ----------
        arg0: FIX::Message const &
        arg1: FIX::SessionID const &

        """
        return _quickfix.Application_fromApp(self, arg0, arg1)
    fromApp = _swig_new_instance_method(_quickfix.Application_fromApp)

    def __init__(self):
        r"""
        __init__(self) -> Application

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == Application:
            _self = None
        else:
            _self = self
        _quickfix.Application_swiginit(self, _quickfix.new_Application(_self, ))
    def __disown__(self):
        self.this.disown()
        _quickfix.disown_Application(self)
        return weakref.proxy(self)

# Register Application in _quickfix:
_quickfix.Application_swigregister(Application)
class SynchronizedApplication(Application):
    r"""Proxy of C++ FIX::SynchronizedApplication class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, app):
        r"""
        __init__(self, app) -> SynchronizedApplication

        Parameters
        ----------
        app: FIX::Application &

        """
        _quickfix.SynchronizedApplication_swiginit(self, _quickfix.new_SynchronizedApplication(app))

    def onCreate(self, sessionID):
        r"""
        onCreate(self, sessionID)

        Parameters
        ----------
        sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_onCreate(self, sessionID)
    onCreate = _swig_new_instance_method(_quickfix.SynchronizedApplication_onCreate)

    def onLogon(self, sessionID):
        r"""
        onLogon(self, sessionID)

        Parameters
        ----------
        sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_onLogon(self, sessionID)
    onLogon = _swig_new_instance_method(_quickfix.SynchronizedApplication_onLogon)

    def onLogout(self, sessionID):
        r"""
        onLogout(self, sessionID)

        Parameters
        ----------
        sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_onLogout(self, sessionID)
    onLogout = _swig_new_instance_method(_quickfix.SynchronizedApplication_onLogout)

    def toAdmin(self, message, sessionID):
        r"""
        toAdmin(self, message, sessionID)

        Parameters
        ----------
        message: FIX::Message &
        sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_toAdmin(self, message, sessionID)
    toAdmin = _swig_new_instance_method(_quickfix.SynchronizedApplication_toAdmin)

    def toApp(self, message, sessionID):
        r"""
        toApp(self, message, sessionID)

        Parameters
        ----------
        message: FIX::Message &
        sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_toApp(self, message, sessionID)
    toApp = _swig_new_instance_method(_quickfix.SynchronizedApplication_toApp)

    def fromAdmin(self, message, sessionID):
        r"""
        fromAdmin(self, message, sessionID)

        Parameters
        ----------
        message: FIX::Message const &
        sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_fromAdmin(self, message, sessionID)
    fromAdmin = _swig_new_instance_method(_quickfix.SynchronizedApplication_fromAdmin)

    def fromApp(self, message, sessionID):
        r"""
        fromApp(self, message, sessionID)

        Parameters
        ----------
        message: FIX::Message const &
        sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_fromApp(self, message, sessionID)
    fromApp = _swig_new_instance_method(_quickfix.SynchronizedApplication_fromApp)
    m_mutex = property(_quickfix.SynchronizedApplication_m_mutex_get, _quickfix.SynchronizedApplication_m_mutex_set, doc=r"""m_mutex""")

    def app(self):
        r"""app(self) -> Application"""
        return _quickfix.SynchronizedApplication_app(self)
    app = _swig_new_instance_method(_quickfix.SynchronizedApplication_app)
    m_app = property(_quickfix.SynchronizedApplication_m_app_get, _quickfix.SynchronizedApplication_m_app_set, doc=r"""m_app""")
    __swig_destroy__ = _quickfix.delete_SynchronizedApplication

# Register SynchronizedApplication in _quickfix:
_quickfix.SynchronizedApplication_swigregister(SynchronizedApplication)
class NullApplication(Application):
    r"""Proxy of C++ FIX::NullApplication class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> NullApplication"""
        _quickfix.NullApplication_swiginit(self, _quickfix.new_NullApplication())
    __swig_destroy__ = _quickfix.delete_NullApplication

# Register NullApplication in _quickfix:
_quickfix.NullApplication_swigregister(NullApplication)
class Initiator(object):
    r"""Proxy of C++ FIX::Initiator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Initiator

    def start(self):
        r"""start(self)"""
        return _quickfix.Initiator_start(self)
    start = _swig_new_instance_method(_quickfix.Initiator_start)

    def block(self):
        r"""block(self)"""
        return _quickfix.Initiator_block(self)
    block = _swig_new_instance_method(_quickfix.Initiator_block)

    def poll(self):
        r"""poll(self) -> bool"""
        return _quickfix.Initiator_poll(self)
    poll = _swig_new_instance_method(_quickfix.Initiator_poll)

    def stop(self, force=False):
        r"""
        stop(self, force=False)

        Parameters
        ----------
        force: bool

        """
        return _quickfix.Initiator_stop(self, force)
    stop = _swig_new_instance_method(_quickfix.Initiator_stop)

    def isLoggedOn(self):
        r"""isLoggedOn(self) -> bool"""
        return _quickfix.Initiator_isLoggedOn(self)
    isLoggedOn = _swig_new_instance_method(_quickfix.Initiator_isLoggedOn)

    def getSessions(self):
        r"""getSessions(self) -> SessionIDSet"""
        return _quickfix.Initiator_getSessions(self)
    getSessions = _swig_new_instance_method(_quickfix.Initiator_getSessions)

    def getSession(self, *args):
        r"""
        getSession(self, sessionID, arg3) -> Session

        Parameters
        ----------
        sessionID: FIX::SessionID const &
        arg3: Responder &

        getSession(self, sessionID) -> Session

        Parameters
        ----------
        sessionID: FIX::SessionID const &

        """
        return _quickfix.Initiator_getSession(self, *args)
    getSession = _swig_new_instance_method(_quickfix.Initiator_getSession)

    def getSessionSettings(self, sessionID):
        r"""
        getSessionSettings(self, sessionID) -> Dictionary

        Parameters
        ----------
        sessionID: FIX::SessionID const &

        """
        return _quickfix.Initiator_getSessionSettings(self, sessionID)
    getSessionSettings = _swig_new_instance_method(_quickfix.Initiator_getSessionSettings)

    def has(self, id):
        r"""
        has(self, id) -> bool

        Parameters
        ----------
        id: FIX::SessionID const &

        """
        return _quickfix.Initiator_has(self, id)
    has = _swig_new_instance_method(_quickfix.Initiator_has)

    def isStopped(self):
        r"""isStopped(self) -> bool"""
        return _quickfix.Initiator_isStopped(self)
    isStopped = _swig_new_instance_method(_quickfix.Initiator_isStopped)

    def getApplication(self):
        r"""getApplication(self) -> Application"""
        return _quickfix.Initiator_getApplication(self)
    getApplication = _swig_new_instance_method(_quickfix.Initiator_getApplication)

    def getMessageStoreFactory(self):
        r"""getMessageStoreFactory(self) -> MessageStoreFactory"""
        return _quickfix.Initiator_getMessageStoreFactory(self)
    getMessageStoreFactory = _swig_new_instance_method(_quickfix.Initiator_getMessageStoreFactory)

    def getLog(self):
        r"""getLog(self) -> Log"""
        return _quickfix.Initiator_getLog(self)
    getLog = _swig_new_instance_method(_quickfix.Initiator_getLog)

# Register Initiator in _quickfix:
_quickfix.Initiator_swigregister(Initiator)
class SocketInitiatorBase(Initiator):
    r"""Proxy of C++ FIX::SocketInitiator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        SocketInitiator(arg1, arg2, arg3) -> SocketInitiatorBase

        Parameters
        ----------
        arg1: FIX::Application &
        arg2: FIX::MessageStoreFactory &
        arg3: FIX::SessionSettings const &

        __init__(self, arg2, arg3, arg4, arg5) -> SocketInitiatorBase

        Parameters
        ----------
        arg2: FIX::Application &
        arg3: FIX::MessageStoreFactory &
        arg4: FIX::SessionSettings const &
        arg5: FIX::LogFactory &

        """
        _quickfix.SocketInitiatorBase_swiginit(self, _quickfix.new_SocketInitiatorBase(*args))
    __swig_destroy__ = _quickfix.delete_SocketInitiatorBase

# Register SocketInitiatorBase in _quickfix:
_quickfix.SocketInitiatorBase_swigregister(SocketInitiatorBase)
class Acceptor(object):
    r"""Proxy of C++ FIX::Acceptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Acceptor

    def getLog(self):
        r"""getLog(self) -> Log"""
        return _quickfix.Acceptor_getLog(self)
    getLog = _swig_new_instance_method(_quickfix.Acceptor_getLog)

    def start(self):
        r"""start(self)"""
        return _quickfix.Acceptor_start(self)
    start = _swig_new_instance_method(_quickfix.Acceptor_start)

    def block(self):
        r"""block(self)"""
        return _quickfix.Acceptor_block(self)
    block = _swig_new_instance_method(_quickfix.Acceptor_block)

    def poll(self):
        r"""poll(self) -> bool"""
        return _quickfix.Acceptor_poll(self)
    poll = _swig_new_instance_method(_quickfix.Acceptor_poll)

    def stop(self, force=False):
        r"""
        stop(self, force=False)

        Parameters
        ----------
        force: bool

        """
        return _quickfix.Acceptor_stop(self, force)
    stop = _swig_new_instance_method(_quickfix.Acceptor_stop)

    def isLoggedOn(self):
        r"""isLoggedOn(self) -> bool"""
        return _quickfix.Acceptor_isLoggedOn(self)
    isLoggedOn = _swig_new_instance_method(_quickfix.Acceptor_isLoggedOn)

    def getSessions(self):
        r"""getSessions(self) -> SessionIDSet"""
        return _quickfix.Acceptor_getSessions(self)
    getSessions = _swig_new_instance_method(_quickfix.Acceptor_getSessions)

    def getSession(self, *args):
        r"""
        getSession(self, msg, arg3) -> Session

        Parameters
        ----------
        msg: std::string const &
        arg3: Responder &

        getSession(self, sessionID) -> Session

        Parameters
        ----------
        sessionID: FIX::SessionID const &

        """
        return _quickfix.Acceptor_getSession(self, *args)
    getSession = _swig_new_instance_method(_quickfix.Acceptor_getSession)

    def getSessionSettings(self, sessionID):
        r"""
        getSessionSettings(self, sessionID) -> Dictionary

        Parameters
        ----------
        sessionID: FIX::SessionID const &

        """
        return _quickfix.Acceptor_getSessionSettings(self, sessionID)
    getSessionSettings = _swig_new_instance_method(_quickfix.Acceptor_getSessionSettings)

    def has(self, id):
        r"""
        has(self, id) -> bool

        Parameters
        ----------
        id: FIX::SessionID const &

        """
        return _quickfix.Acceptor_has(self, id)
    has = _swig_new_instance_method(_quickfix.Acceptor_has)

    def isStopped(self):
        r"""isStopped(self) -> bool"""
        return _quickfix.Acceptor_isStopped(self)
    isStopped = _swig_new_instance_method(_quickfix.Acceptor_isStopped)

    def getApplication(self):
        r"""getApplication(self) -> Application"""
        return _quickfix.Acceptor_getApplication(self)
    getApplication = _swig_new_instance_method(_quickfix.Acceptor_getApplication)

    def getMessageStoreFactory(self):
        r"""getMessageStoreFactory(self) -> MessageStoreFactory"""
        return _quickfix.Acceptor_getMessageStoreFactory(self)
    getMessageStoreFactory = _swig_new_instance_method(_quickfix.Acceptor_getMessageStoreFactory)

# Register Acceptor in _quickfix:
_quickfix.Acceptor_swigregister(Acceptor)
class SocketAcceptorBase(Acceptor):
    r"""Proxy of C++ FIX::SocketAcceptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        SocketAcceptor(arg1, arg2, arg3) -> SocketAcceptorBase

        Parameters
        ----------
        arg1: FIX::Application &
        arg2: FIX::MessageStoreFactory &
        arg3: FIX::SessionSettings const &

        __init__(self, arg2, arg3, arg4, arg5) -> SocketAcceptorBase

        Parameters
        ----------
        arg2: FIX::Application &
        arg3: FIX::MessageStoreFactory &
        arg4: FIX::SessionSettings const &
        arg5: FIX::LogFactory &

        """
        _quickfix.SocketAcceptorBase_swiginit(self, _quickfix.new_SocketAcceptorBase(*args))
    __swig_destroy__ = _quickfix.delete_SocketAcceptorBase

    def sessionToPort(self):
        r"""sessionToPort(self) -> FIX::SocketAcceptor::SessionToPort const &"""
        return _quickfix.SocketAcceptorBase_sessionToPort(self)
    sessionToPort = _swig_new_instance_method(_quickfix.SocketAcceptorBase_sessionToPort)

# Register SocketAcceptorBase in _quickfix:
_quickfix.SocketAcceptorBase_swigregister(SocketAcceptorBase)
class DataDictionary(object):
    r"""Proxy of C++ FIX::DataDictionary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> DataDictionary
        __init__(self, copy) -> DataDictionary

        Parameters
        ----------
        copy: FIX::DataDictionary const &

        __init__(self, stream, preserveMsgFldsOrder=False) -> DataDictionary

        Parameters
        ----------
        stream: std::istream &
        preserveMsgFldsOrder: bool

        __init__(self, url, preserveMsgFldsOrder=False) -> DataDictionary

        Parameters
        ----------
        url: std::string const &
        preserveMsgFldsOrder: bool

        """
        _quickfix.DataDictionary_swiginit(self, _quickfix.new_DataDictionary(*args))
    __swig_destroy__ = _quickfix.delete_DataDictionary

    def readFromURL(self, url):
        r"""
        readFromURL(self, url)

        Parameters
        ----------
        url: std::string const &

        """
        return _quickfix.DataDictionary_readFromURL(self, url)
    readFromURL = _swig_new_instance_method(_quickfix.DataDictionary_readFromURL)

    def readFromDocument(self, pDoc):
        r"""
        readFromDocument(self, pDoc)

        Parameters
        ----------
        pDoc: DOMDocumentPtr const &

        """
        return _quickfix.DataDictionary_readFromDocument(self, pDoc)
    readFromDocument = _swig_new_instance_method(_quickfix.DataDictionary_readFromDocument)

    def readFromStream(self, stream):
        r"""
        readFromStream(self, stream)

        Parameters
        ----------
        stream: std::istream &

        """
        return _quickfix.DataDictionary_readFromStream(self, stream)
    readFromStream = _swig_new_instance_method(_quickfix.DataDictionary_readFromStream)

    def getOrderedFields(self):
        r"""getOrderedFields(self) -> message_order const &"""
        return _quickfix.DataDictionary_getOrderedFields(self)
    getOrderedFields = _swig_new_instance_method(_quickfix.DataDictionary_getOrderedFields)

    def getHeaderOrderedFields(self):
        r"""getHeaderOrderedFields(self) -> message_order const &"""
        return _quickfix.DataDictionary_getHeaderOrderedFields(self)
    getHeaderOrderedFields = _swig_new_instance_method(_quickfix.DataDictionary_getHeaderOrderedFields)

    def getTrailerOrderedFields(self):
        r"""getTrailerOrderedFields(self) -> message_order const &"""
        return _quickfix.DataDictionary_getTrailerOrderedFields(self)
    getTrailerOrderedFields = _swig_new_instance_method(_quickfix.DataDictionary_getTrailerOrderedFields)

    def getMessageOrderedFields(self, msgType):
        r"""
        getMessageOrderedFields(self, msgType) -> message_order const &

        Parameters
        ----------
        msgType: std::string const &

        """
        return _quickfix.DataDictionary_getMessageOrderedFields(self, msgType)
    getMessageOrderedFields = _swig_new_instance_method(_quickfix.DataDictionary_getMessageOrderedFields)

    def setVersion(self, beginString):
        r"""
        setVersion(self, beginString)

        Parameters
        ----------
        beginString: std::string const &

        """
        return _quickfix.DataDictionary_setVersion(self, beginString)
    setVersion = _swig_new_instance_method(_quickfix.DataDictionary_setVersion)

    def getVersion(self):
        r"""getVersion(self) -> std::string"""
        return _quickfix.DataDictionary_getVersion(self)
    getVersion = _swig_new_instance_method(_quickfix.DataDictionary_getVersion)

    def addField(self, field):
        r"""
        addField(self, field)

        Parameters
        ----------
        field: int

        """
        return _quickfix.DataDictionary_addField(self, field)
    addField = _swig_new_instance_method(_quickfix.DataDictionary_addField)

    def addFieldName(self, field, name):
        r"""
        addFieldName(self, field, name)

        Parameters
        ----------
        field: int
        name: std::string const &

        """
        return _quickfix.DataDictionary_addFieldName(self, field, name)
    addFieldName = _swig_new_instance_method(_quickfix.DataDictionary_addFieldName)

    def getFieldName(self, field, name):
        r"""
        getFieldName(self, field, name) -> bool

        Parameters
        ----------
        field: int
        name: std::string &

        """
        return _quickfix.DataDictionary_getFieldName(self, field, name)
    getFieldName = _swig_new_instance_method(_quickfix.DataDictionary_getFieldName)

    def getFieldTag(self, name, field):
        r"""
        getFieldTag(self, name, field) -> bool

        Parameters
        ----------
        name: std::string const &
        field: int &

        """
        return _quickfix.DataDictionary_getFieldTag(self, name, field)
    getFieldTag = _swig_new_instance_method(_quickfix.DataDictionary_getFieldTag)

    def addValueName(self, field, value, name):
        r"""
        addValueName(self, field, value, name)

        Parameters
        ----------
        field: int
        value: std::string const &
        name: std::string const &

        """
        return _quickfix.DataDictionary_addValueName(self, field, value, name)
    addValueName = _swig_new_instance_method(_quickfix.DataDictionary_addValueName)

    def getValueName(self, field, value, name):
        r"""
        getValueName(self, field, value, name) -> bool

        Parameters
        ----------
        field: int
        value: std::string const &
        name: std::string &

        """
        return _quickfix.DataDictionary_getValueName(self, field, value, name)
    getValueName = _swig_new_instance_method(_quickfix.DataDictionary_getValueName)

    def getNameValue(self, field, name, value):
        r"""
        getNameValue(self, field, name, value) -> bool

        Parameters
        ----------
        field: int
        name: std::string const &
        value: std::string &

        """
        return _quickfix.DataDictionary_getNameValue(self, field, name, value)
    getNameValue = _swig_new_instance_method(_quickfix.DataDictionary_getNameValue)

    def isField(self, field):
        r"""
        isField(self, field) -> bool

        Parameters
        ----------
        field: int

        """
        return _quickfix.DataDictionary_isField(self, field)
    isField = _swig_new_instance_method(_quickfix.DataDictionary_isField)

    def addMsgType(self, msgType):
        r"""
        addMsgType(self, msgType)

        Parameters
        ----------
        msgType: std::string const &

        """
        return _quickfix.DataDictionary_addMsgType(self, msgType)
    addMsgType = _swig_new_instance_method(_quickfix.DataDictionary_addMsgType)

    def isMsgType(self, msgType):
        r"""
        isMsgType(self, msgType) -> bool

        Parameters
        ----------
        msgType: std::string const &

        """
        return _quickfix.DataDictionary_isMsgType(self, msgType)
    isMsgType = _swig_new_instance_method(_quickfix.DataDictionary_isMsgType)

    def addMsgField(self, msgType, field):
        r"""
        addMsgField(self, msgType, field)

        Parameters
        ----------
        msgType: std::string const &
        field: int

        """
        return _quickfix.DataDictionary_addMsgField(self, msgType, field)
    addMsgField = _swig_new_instance_method(_quickfix.DataDictionary_addMsgField)

    def isMsgField(self, msgType, field):
        r"""
        isMsgField(self, msgType, field) -> bool

        Parameters
        ----------
        msgType: std::string const &
        field: int

        """
        return _quickfix.DataDictionary_isMsgField(self, msgType, field)
    isMsgField = _swig_new_instance_method(_quickfix.DataDictionary_isMsgField)

    def addHeaderField(self, field, required):
        r"""
        addHeaderField(self, field, required)

        Parameters
        ----------
        field: int
        required: bool

        """
        return _quickfix.DataDictionary_addHeaderField(self, field, required)
    addHeaderField = _swig_new_instance_method(_quickfix.DataDictionary_addHeaderField)

    def isHeaderField(self, field):
        r"""
        isHeaderField(self, field) -> bool

        Parameters
        ----------
        field: int

        """
        return _quickfix.DataDictionary_isHeaderField(self, field)
    isHeaderField = _swig_new_instance_method(_quickfix.DataDictionary_isHeaderField)

    def addTrailerField(self, field, required):
        r"""
        addTrailerField(self, field, required)

        Parameters
        ----------
        field: int
        required: bool

        """
        return _quickfix.DataDictionary_addTrailerField(self, field, required)
    addTrailerField = _swig_new_instance_method(_quickfix.DataDictionary_addTrailerField)

    def isTrailerField(self, field):
        r"""
        isTrailerField(self, field) -> bool

        Parameters
        ----------
        field: int

        """
        return _quickfix.DataDictionary_isTrailerField(self, field)
    isTrailerField = _swig_new_instance_method(_quickfix.DataDictionary_isTrailerField)

    def addFieldType(self, field, type):
        r"""
        addFieldType(self, field, type)

        Parameters
        ----------
        field: int
        type: enum FIX::TYPE::Type

        """
        return _quickfix.DataDictionary_addFieldType(self, field, type)
    addFieldType = _swig_new_instance_method(_quickfix.DataDictionary_addFieldType)

    def getFieldType(self, field, type):
        r"""
        getFieldType(self, field, type) -> bool

        Parameters
        ----------
        field: int
        type: FIX::TYPE::Type &

        """
        return _quickfix.DataDictionary_getFieldType(self, field, type)
    getFieldType = _swig_new_instance_method(_quickfix.DataDictionary_getFieldType)

    def addRequiredField(self, msgType, field):
        r"""
        addRequiredField(self, msgType, field)

        Parameters
        ----------
        msgType: std::string const &
        field: int

        """
        return _quickfix.DataDictionary_addRequiredField(self, msgType, field)
    addRequiredField = _swig_new_instance_method(_quickfix.DataDictionary_addRequiredField)

    def isRequiredField(self, msgType, field):
        r"""
        isRequiredField(self, msgType, field) -> bool

        Parameters
        ----------
        msgType: std::string const &
        field: int

        """
        return _quickfix.DataDictionary_isRequiredField(self, msgType, field)
    isRequiredField = _swig_new_instance_method(_quickfix.DataDictionary_isRequiredField)

    def addFieldValue(self, field, value):
        r"""
        addFieldValue(self, field, value)

        Parameters
        ----------
        field: int
        value: std::string const &

        """
        return _quickfix.DataDictionary_addFieldValue(self, field, value)
    addFieldValue = _swig_new_instance_method(_quickfix.DataDictionary_addFieldValue)

    def hasFieldValue(self, field):
        r"""
        hasFieldValue(self, field) -> bool

        Parameters
        ----------
        field: int

        """
        return _quickfix.DataDictionary_hasFieldValue(self, field)
    hasFieldValue = _swig_new_instance_method(_quickfix.DataDictionary_hasFieldValue)

    def isFieldValue(self, field, value):
        r"""
        isFieldValue(self, field, value) -> bool

        Parameters
        ----------
        field: int
        value: std::string const &

        """
        return _quickfix.DataDictionary_isFieldValue(self, field, value)
    isFieldValue = _swig_new_instance_method(_quickfix.DataDictionary_isFieldValue)

    def addGroup(self, msg, field, delim, dataDictionary):
        r"""
        addGroup(self, msg, field, delim, dataDictionary)

        Parameters
        ----------
        msg: std::string const &
        field: int
        delim: int
        dataDictionary: FIX::DataDictionary const &

        """
        return _quickfix.DataDictionary_addGroup(self, msg, field, delim, dataDictionary)
    addGroup = _swig_new_instance_method(_quickfix.DataDictionary_addGroup)

    def isGroup(self, msg, field):
        r"""
        isGroup(self, msg, field) -> bool

        Parameters
        ----------
        msg: std::string const &
        field: int

        """
        return _quickfix.DataDictionary_isGroup(self, msg, field)
    isGroup = _swig_new_instance_method(_quickfix.DataDictionary_isGroup)

    def getGroup(self, msg, field, delim, pDataDictionary):
        r"""
        getGroup(self, msg, field, delim, pDataDictionary) -> bool

        Parameters
        ----------
        msg: std::string const &
        field: int
        delim: int &
        pDataDictionary: FIX::DataDictionary const *&

        """
        return _quickfix.DataDictionary_getGroup(self, msg, field, delim, pDataDictionary)
    getGroup = _swig_new_instance_method(_quickfix.DataDictionary_getGroup)

    def isDataField(self, field):
        r"""
        isDataField(self, field) -> bool

        Parameters
        ----------
        field: int

        """
        return _quickfix.DataDictionary_isDataField(self, field)
    isDataField = _swig_new_instance_method(_quickfix.DataDictionary_isDataField)

    def isMultipleValueField(self, field):
        r"""
        isMultipleValueField(self, field) -> bool

        Parameters
        ----------
        field: int

        """
        return _quickfix.DataDictionary_isMultipleValueField(self, field)
    isMultipleValueField = _swig_new_instance_method(_quickfix.DataDictionary_isMultipleValueField)

    def checkFieldsOutOfOrder(self, value):
        r"""
        checkFieldsOutOfOrder(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.DataDictionary_checkFieldsOutOfOrder(self, value)
    checkFieldsOutOfOrder = _swig_new_instance_method(_quickfix.DataDictionary_checkFieldsOutOfOrder)

    def checkFieldsHaveValues(self, value):
        r"""
        checkFieldsHaveValues(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.DataDictionary_checkFieldsHaveValues(self, value)
    checkFieldsHaveValues = _swig_new_instance_method(_quickfix.DataDictionary_checkFieldsHaveValues)

    def checkUserDefinedFields(self, value):
        r"""
        checkUserDefinedFields(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.DataDictionary_checkUserDefinedFields(self, value)
    checkUserDefinedFields = _swig_new_instance_method(_quickfix.DataDictionary_checkUserDefinedFields)

    def allowUnknownMsgFields(self, value):
        r"""
        allowUnknownMsgFields(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.DataDictionary_allowUnknownMsgFields(self, value)
    allowUnknownMsgFields = _swig_new_instance_method(_quickfix.DataDictionary_allowUnknownMsgFields)

    def preserveMessageFieldsOrder(self, value):
        r"""
        preserveMessageFieldsOrder(self, value)

        Parameters
        ----------
        value: bool

        """
        return _quickfix.DataDictionary_preserveMessageFieldsOrder(self, value)
    preserveMessageFieldsOrder = _swig_new_instance_method(_quickfix.DataDictionary_preserveMessageFieldsOrder)

    def isMessageFieldsOrderPreserved(self):
        r"""isMessageFieldsOrderPreserved(self) -> bool"""
        return _quickfix.DataDictionary_isMessageFieldsOrderPreserved(self)
    isMessageFieldsOrderPreserved = _swig_new_instance_method(_quickfix.DataDictionary_isMessageFieldsOrderPreserved)

    def validate(self, *args):
        r"""
        validate(self, message, pSessionDD, pAppID)

        Parameters
        ----------
        message: FIX::Message const &
        pSessionDD: FIX::DataDictionary const *const
        pAppID: FIX::DataDictionary const *const

        validate(self, message)

        Parameters
        ----------
        message: FIX::Message const &

        validate(self, message, bodyOnly)

        Parameters
        ----------
        message: FIX::Message const &
        bodyOnly: bool

        """
        return _quickfix.DataDictionary_validate(self, *args)
    validate = _swig_new_instance_method(_quickfix.DataDictionary_validate)

# Register DataDictionary in _quickfix:
_quickfix.DataDictionary_swigregister(DataDictionary)
class SSLSocketAcceptorBase(Acceptor):
    r"""Proxy of C++ FIX::SSLSocketAcceptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        SSLSocketAcceptor(arg1, arg2, arg3) -> SSLSocketAcceptorBase

        Parameters
        ----------
        arg1: FIX::Application &
        arg2: FIX::MessageStoreFactory &
        arg3: FIX::SessionSettings const &

        __init__(self, arg2, arg3, arg4, arg5) -> SSLSocketAcceptorBase

        Parameters
        ----------
        arg2: FIX::Application &
        arg3: FIX::MessageStoreFactory &
        arg4: FIX::SessionSettings const &
        arg5: FIX::LogFactory &

        """
        _quickfix.SSLSocketAcceptorBase_swiginit(self, _quickfix.new_SSLSocketAcceptorBase(*args))
    __swig_destroy__ = _quickfix.delete_SSLSocketAcceptorBase

    def setPassword(self, pwd):
        r"""
        setPassword(self, pwd)

        Parameters
        ----------
        pwd: std::string const &

        """
        return _quickfix.SSLSocketAcceptorBase_setPassword(self, pwd)
    setPassword = _swig_new_instance_method(_quickfix.SSLSocketAcceptorBase_setPassword)

    def passwordHandleCallback(self, buf, bufsize, verify):
        r"""
        passwordHandleCallback(self, buf, bufsize, verify) -> int

        Parameters
        ----------
        buf: char *
        bufsize: size_t
        verify: int

        """
        return _quickfix.SSLSocketAcceptorBase_passwordHandleCallback(self, buf, bufsize, verify)
    passwordHandleCallback = _swig_new_instance_method(_quickfix.SSLSocketAcceptorBase_passwordHandleCallback)

    @staticmethod
    def passPhraseHandleCB(buf, bufsize, verify, instance):
        r"""
        passPhraseHandleCB(buf, bufsize, verify, instance) -> int

        Parameters
        ----------
        buf: char *
        bufsize: int
        verify: int
        instance: void *

        """
        return _quickfix.SSLSocketAcceptorBase_passPhraseHandleCB(buf, bufsize, verify, instance)
    passPhraseHandleCB = _swig_new_static_method(_quickfix.SSLSocketAcceptorBase_passPhraseHandleCB)

# Register SSLSocketAcceptorBase in _quickfix:
_quickfix.SSLSocketAcceptorBase_swigregister(SSLSocketAcceptorBase)
SSL_HANDSHAKE_FAILED = _quickfix.SSL_HANDSHAKE_FAILED

SSL_HANDSHAKE_SUCCEDED = _quickfix.SSL_HANDSHAKE_SUCCEDED

SSL_HANDSHAKE_IN_PROGRESS = _quickfix.SSL_HANDSHAKE_IN_PROGRESS

class SSLSocketInitiatorBase(Initiator):
    r"""Proxy of C++ FIX::SSLSocketInitiator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        SSLSocketInitiator(arg1, arg2, arg3) -> SSLSocketInitiatorBase

        Parameters
        ----------
        arg1: FIX::Application &
        arg2: FIX::MessageStoreFactory &
        arg3: FIX::SessionSettings const &

        __init__(self, arg2, arg3, arg4, arg5) -> SSLSocketInitiatorBase

        Parameters
        ----------
        arg2: FIX::Application &
        arg3: FIX::MessageStoreFactory &
        arg4: FIX::SessionSettings const &
        arg5: FIX::LogFactory &

        """
        _quickfix.SSLSocketInitiatorBase_swiginit(self, _quickfix.new_SSLSocketInitiatorBase(*args))
    __swig_destroy__ = _quickfix.delete_SSLSocketInitiatorBase

    def setPassword(self, pwd):
        r"""
        setPassword(self, pwd)

        Parameters
        ----------
        pwd: std::string const &

        """
        return _quickfix.SSLSocketInitiatorBase_setPassword(self, pwd)
    setPassword = _swig_new_instance_method(_quickfix.SSLSocketInitiatorBase_setPassword)

    def setCertAndKey(self, cert, key):
        r"""
        setCertAndKey(self, cert, key)

        Parameters
        ----------
        cert: X509 *
        key: RSA *

        """
        return _quickfix.SSLSocketInitiatorBase_setCertAndKey(self, cert, key)
    setCertAndKey = _swig_new_instance_method(_quickfix.SSLSocketInitiatorBase_setCertAndKey)

    def passwordHandleCallback(self, buf, bufsize, verify):
        r"""
        passwordHandleCallback(self, buf, bufsize, verify) -> int

        Parameters
        ----------
        buf: char *
        bufsize: size_t
        verify: int

        """
        return _quickfix.SSLSocketInitiatorBase_passwordHandleCallback(self, buf, bufsize, verify)
    passwordHandleCallback = _swig_new_instance_method(_quickfix.SSLSocketInitiatorBase_passwordHandleCallback)

    @staticmethod
    def passwordHandleCB(buf, bufsize, verify, instance):
        r"""
        passwordHandleCB(buf, bufsize, verify, instance) -> int

        Parameters
        ----------
        buf: char *
        bufsize: int
        verify: int
        instance: void *

        """
        return _quickfix.SSLSocketInitiatorBase_passwordHandleCB(buf, bufsize, verify, instance)
    passwordHandleCB = _swig_new_static_method(_quickfix.SSLSocketInitiatorBase_passwordHandleCB)

# Register SSLSocketInitiatorBase in _quickfix:
_quickfix.SSLSocketInitiatorBase_swigregister(SSLSocketInitiatorBase)
class DatabaseConnectionID(object):
    r"""Proxy of C++ FIX::DatabaseConnectionID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database, user, password, host, port):
        r"""
        __init__(self, database, user, password, host, port) -> DatabaseConnectionID

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        """
        _quickfix.DatabaseConnectionID_swiginit(self, _quickfix.new_DatabaseConnectionID(database, user, password, host, port))

    def getDatabase(self):
        r"""getDatabase(self) -> std::string const &"""
        return _quickfix.DatabaseConnectionID_getDatabase(self)
    getDatabase = _swig_new_instance_method(_quickfix.DatabaseConnectionID_getDatabase)

    def getUser(self):
        r"""getUser(self) -> std::string const &"""
        return _quickfix.DatabaseConnectionID_getUser(self)
    getUser = _swig_new_instance_method(_quickfix.DatabaseConnectionID_getUser)

    def getPassword(self):
        r"""getPassword(self) -> std::string const &"""
        return _quickfix.DatabaseConnectionID_getPassword(self)
    getPassword = _swig_new_instance_method(_quickfix.DatabaseConnectionID_getPassword)

    def getHost(self):
        r"""getHost(self) -> std::string const &"""
        return _quickfix.DatabaseConnectionID_getHost(self)
    getHost = _swig_new_instance_method(_quickfix.DatabaseConnectionID_getHost)

    def getPort(self):
        r"""getPort(self) -> short"""
        return _quickfix.DatabaseConnectionID_getPort(self)
    getPort = _swig_new_instance_method(_quickfix.DatabaseConnectionID_getPort)
    __swig_destroy__ = _quickfix.delete_DatabaseConnectionID

# Register DatabaseConnectionID in _quickfix:
_quickfix.DatabaseConnectionID_swigregister(DatabaseConnectionID)

def __lt__(*args):
    r"""
    __lt__(lhs, rhs) -> bool

    Parameters
    ----------
    lhs: FIX::DateTime const &
    rhs: FIX::DateTime const &

    __lt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: char const *

    __lt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: char const *
    arg2: FIX::StringField const &

    __lt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: std::string const &

    __lt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: std::string const &
    arg2: FIX::StringField const &

    __lt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::SessionID const &
    arg2: FIX::SessionID const &

    __lt__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::DatabaseConnectionID const &
    arg2: FIX::DatabaseConnectionID const &

    """
    return _quickfix.__lt__(*args)
__lt__ = _quickfix.__lt__

def __eq__(*args):
    r"""
    __eq__(lhs, rhs) -> bool

    Parameters
    ----------
    lhs: FIX::DateTime const &
    rhs: FIX::DateTime const &

    __eq__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: char const *

    __eq__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: char const *
    arg2: FIX::StringField const &

    __eq__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: std::string const &

    __eq__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: std::string const &
    arg2: FIX::StringField const &

    __eq__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::SessionID const &
    arg2: FIX::SessionID const &

    __eq__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::DatabaseConnectionID const &
    arg2: FIX::DatabaseConnectionID const &

    """
    return _quickfix.__eq__(*args)
__eq__ = _quickfix.__eq__

def __ne__(*args):
    r"""
    __ne__(lhs, rhs) -> bool

    Parameters
    ----------
    lhs: FIX::DateTime const &
    rhs: FIX::DateTime const &

    __ne__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: char const *

    __ne__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: char const *
    arg2: FIX::StringField const &

    __ne__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::StringField const &
    arg2: std::string const &

    __ne__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: std::string const &
    arg2: FIX::StringField const &

    __ne__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::SessionID const &
    arg2: FIX::SessionID const &

    __ne__(arg1, arg2) -> bool

    Parameters
    ----------
    arg1: FIX::DatabaseConnectionID const &
    arg2: FIX::DatabaseConnectionID const &

    """
    return _quickfix.__ne__(*args)
__ne__ = _quickfix.__ne__

class MySQLQuery(object):
    r"""Proxy of C++ FIX::MySQLQuery class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, query):
        r"""
        __init__(self, query) -> MySQLQuery

        Parameters
        ----------
        query: std::string const &

        """
        _quickfix.MySQLQuery_swiginit(self, _quickfix.new_MySQLQuery(query))
    __swig_destroy__ = _quickfix.delete_MySQLQuery

    def execute(self, pConnection):
        r"""
        execute(self, pConnection) -> bool

        Parameters
        ----------
        pConnection: MYSQL *

        """
        return _quickfix.MySQLQuery_execute(self, pConnection)
    execute = _swig_new_instance_method(_quickfix.MySQLQuery_execute)

    def success(self):
        r"""success(self) -> bool"""
        return _quickfix.MySQLQuery_success(self)
    success = _swig_new_instance_method(_quickfix.MySQLQuery_success)

    def rows(self):
        r"""rows(self) -> int"""
        return _quickfix.MySQLQuery_rows(self)
    rows = _swig_new_instance_method(_quickfix.MySQLQuery_rows)

    def reason(self):
        r"""reason(self) -> std::string const &"""
        return _quickfix.MySQLQuery_reason(self)
    reason = _swig_new_instance_method(_quickfix.MySQLQuery_reason)

    def getValue(self, row, column):
        r"""
        getValue(self, row, column) -> char *

        Parameters
        ----------
        row: int
        column: int

        """
        return _quickfix.MySQLQuery_getValue(self, row, column)
    getValue = _swig_new_instance_method(_quickfix.MySQLQuery_getValue)

    def throwException(self):
        r"""throwException(self)"""
        return _quickfix.MySQLQuery_throwException(self)
    throwException = _swig_new_instance_method(_quickfix.MySQLQuery_throwException)

# Register MySQLQuery in _quickfix:
_quickfix.MySQLQuery_swigregister(MySQLQuery)
class MySQLConnection(object):
    r"""Proxy of C++ FIX::MySQLConnection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, id) -> MySQLConnection

        Parameters
        ----------
        id: FIX::DatabaseConnectionID const &

        __init__(self, database, user, password, host, port) -> MySQLConnection

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        """
        _quickfix.MySQLConnection_swiginit(self, _quickfix.new_MySQLConnection(*args))
    __swig_destroy__ = _quickfix.delete_MySQLConnection

    def connectionID(self):
        r"""connectionID(self) -> DatabaseConnectionID"""
        return _quickfix.MySQLConnection_connectionID(self)
    connectionID = _swig_new_instance_method(_quickfix.MySQLConnection_connectionID)

    def connected(self):
        r"""connected(self) -> bool"""
        return _quickfix.MySQLConnection_connected(self)
    connected = _swig_new_instance_method(_quickfix.MySQLConnection_connected)

    def reconnect(self):
        r"""reconnect(self) -> bool"""
        return _quickfix.MySQLConnection_reconnect(self)
    reconnect = _swig_new_instance_method(_quickfix.MySQLConnection_reconnect)

    def execute(self, pQuery):
        r"""
        execute(self, pQuery) -> bool

        Parameters
        ----------
        pQuery: FIX::MySQLQuery &

        """
        return _quickfix.MySQLConnection_execute(self, pQuery)
    execute = _swig_new_instance_method(_quickfix.MySQLConnection_execute)

# Register MySQLConnection in _quickfix:
_quickfix.MySQLConnection_swigregister(MySQLConnection)
class MySQLStoreFactory(MessageStoreFactory):
    r"""Proxy of C++ FIX::MySQLStoreFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, settings) -> MySQLStoreFactory

        Parameters
        ----------
        settings: FIX::SessionSettings const &

        __init__(self, dictionary) -> MySQLStoreFactory

        Parameters
        ----------
        dictionary: FIX::Dictionary const &

        __init__(self, database, user, password, host, port) -> MySQLStoreFactory

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        __init__(self) -> MySQLStoreFactory
        """
        _quickfix.MySQLStoreFactory_swiginit(self, _quickfix.new_MySQLStoreFactory(*args))

    def create(self, arg2, arg3):
        r"""
        create(self, arg2, arg3) -> MessageStore

        Parameters
        ----------
        arg2: FIX::UtcTimeStamp const &
        arg3: FIX::SessionID const &

        """
        return _quickfix.MySQLStoreFactory_create(self, arg2, arg3)
    create = _swig_new_instance_method(_quickfix.MySQLStoreFactory_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::MessageStore *

        """
        return _quickfix.MySQLStoreFactory_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.MySQLStoreFactory_destroy)
    __swig_destroy__ = _quickfix.delete_MySQLStoreFactory

# Register MySQLStoreFactory in _quickfix:
_quickfix.MySQLStoreFactory_swigregister(MySQLStoreFactory)
MySQLStoreFactory.DEFAULT_DATABASE = _quickfix.cvar.MySQLStoreFactory_DEFAULT_DATABASE
MySQLStoreFactory.DEFAULT_USER = _quickfix.cvar.MySQLStoreFactory_DEFAULT_USER
MySQLStoreFactory.DEFAULT_PASSWORD = _quickfix.cvar.MySQLStoreFactory_DEFAULT_PASSWORD
MySQLStoreFactory.DEFAULT_HOST = _quickfix.cvar.MySQLStoreFactory_DEFAULT_HOST
MySQLStoreFactory.DEFAULT_PORT = _quickfix.cvar.MySQLStoreFactory_DEFAULT_PORT

class MySQLStore(MessageStore):
    r"""Proxy of C++ FIX::MySQLStore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, now, sessionID, connection, pool) -> MySQLStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &
        sessionID: FIX::SessionID const &
        connection: FIX::DatabaseConnectionID const &
        pool: FIX::MySQLConnectionPool *

        __init__(self, now, sessionID, database, user, password, host, port) -> MySQLStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &
        sessionID: FIX::SessionID const &
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        """
        _quickfix.MySQLStore_swiginit(self, _quickfix.new_MySQLStore(*args))
    __swig_destroy__ = _quickfix.delete_MySQLStore

    def set(self, arg2, arg3):
        r"""
        set(self, arg2, arg3) -> bool

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: std::string const &

        """
        return _quickfix.MySQLStore_set(self, arg2, arg3)
    set = _swig_new_instance_method(_quickfix.MySQLStore_set)

    def get(self, arg2, arg3, arg4):
        r"""
        get(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: FIX::SEQNUM
        arg4: std::vector< std::string,std::allocator< std::string > > &

        """
        return _quickfix.MySQLStore_get(self, arg2, arg3, arg4)
    get = _swig_new_instance_method(_quickfix.MySQLStore_get)

    def getNextSenderMsgSeqNum(self):
        r"""getNextSenderMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.MySQLStore_getNextSenderMsgSeqNum(self)
    getNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MySQLStore_getNextSenderMsgSeqNum)

    def getNextTargetMsgSeqNum(self):
        r"""getNextTargetMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.MySQLStore_getNextTargetMsgSeqNum(self)
    getNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MySQLStore_getNextTargetMsgSeqNum)

    def setNextSenderMsgSeqNum(self, value):
        r"""
        setNextSenderMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.MySQLStore_setNextSenderMsgSeqNum(self, value)
    setNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MySQLStore_setNextSenderMsgSeqNum)

    def setNextTargetMsgSeqNum(self, value):
        r"""
        setNextTargetMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.MySQLStore_setNextTargetMsgSeqNum(self, value)
    setNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MySQLStore_setNextTargetMsgSeqNum)

    def incrNextSenderMsgSeqNum(self):
        r"""incrNextSenderMsgSeqNum(self)"""
        return _quickfix.MySQLStore_incrNextSenderMsgSeqNum(self)
    incrNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.MySQLStore_incrNextSenderMsgSeqNum)

    def incrNextTargetMsgSeqNum(self):
        r"""incrNextTargetMsgSeqNum(self)"""
        return _quickfix.MySQLStore_incrNextTargetMsgSeqNum(self)
    incrNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.MySQLStore_incrNextTargetMsgSeqNum)

    def getCreationTime(self):
        r"""getCreationTime(self) -> UtcTimeStamp"""
        return _quickfix.MySQLStore_getCreationTime(self)
    getCreationTime = _swig_new_instance_method(_quickfix.MySQLStore_getCreationTime)

    def reset(self, now):
        r"""
        reset(self, now)

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        return _quickfix.MySQLStore_reset(self, now)
    reset = _swig_new_instance_method(_quickfix.MySQLStore_reset)

    def refresh(self):
        r"""refresh(self)"""
        return _quickfix.MySQLStore_refresh(self)
    refresh = _swig_new_instance_method(_quickfix.MySQLStore_refresh)

# Register MySQLStore in _quickfix:
_quickfix.MySQLStore_swigregister(MySQLStore)
class MySQLLog(Log):
    r"""Proxy of C++ FIX::MySQLLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, sessionID, connectionID, pool) -> MySQLLog

        Parameters
        ----------
        sessionID: FIX::SessionID const &
        connectionID: FIX::DatabaseConnectionID const &
        pool: FIX::MySQLConnectionPool *

        __init__(self, connectionID, pool) -> MySQLLog

        Parameters
        ----------
        connectionID: FIX::DatabaseConnectionID const &
        pool: FIX::MySQLConnectionPool *

        __init__(self, sessionID, database, user, password, host, port) -> MySQLLog

        Parameters
        ----------
        sessionID: FIX::SessionID const &
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        __init__(self, database, user, password, host, port) -> MySQLLog

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        """
        _quickfix.MySQLLog_swiginit(self, _quickfix.new_MySQLLog(*args))
    __swig_destroy__ = _quickfix.delete_MySQLLog

    def clear(self):
        r"""clear(self)"""
        return _quickfix.MySQLLog_clear(self)
    clear = _swig_new_instance_method(_quickfix.MySQLLog_clear)

    def backup(self):
        r"""backup(self)"""
        return _quickfix.MySQLLog_backup(self)
    backup = _swig_new_instance_method(_quickfix.MySQLLog_backup)

    def setIncomingTable(self, incomingTable):
        r"""
        setIncomingTable(self, incomingTable)

        Parameters
        ----------
        incomingTable: std::string const &

        """
        return _quickfix.MySQLLog_setIncomingTable(self, incomingTable)
    setIncomingTable = _swig_new_instance_method(_quickfix.MySQLLog_setIncomingTable)

    def setOutgoingTable(self, outgoingTable):
        r"""
        setOutgoingTable(self, outgoingTable)

        Parameters
        ----------
        outgoingTable: std::string const &

        """
        return _quickfix.MySQLLog_setOutgoingTable(self, outgoingTable)
    setOutgoingTable = _swig_new_instance_method(_quickfix.MySQLLog_setOutgoingTable)

    def setEventTable(self, eventTable):
        r"""
        setEventTable(self, eventTable)

        Parameters
        ----------
        eventTable: std::string const &

        """
        return _quickfix.MySQLLog_setEventTable(self, eventTable)
    setEventTable = _swig_new_instance_method(_quickfix.MySQLLog_setEventTable)

    def onIncoming(self, value):
        r"""
        onIncoming(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.MySQLLog_onIncoming(self, value)
    onIncoming = _swig_new_instance_method(_quickfix.MySQLLog_onIncoming)

    def onOutgoing(self, value):
        r"""
        onOutgoing(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.MySQLLog_onOutgoing(self, value)
    onOutgoing = _swig_new_instance_method(_quickfix.MySQLLog_onOutgoing)

    def onEvent(self, value):
        r"""
        onEvent(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.MySQLLog_onEvent(self, value)
    onEvent = _swig_new_instance_method(_quickfix.MySQLLog_onEvent)

# Register MySQLLog in _quickfix:
_quickfix.MySQLLog_swigregister(MySQLLog)
class MySQLLogFactory(LogFactory):
    r"""Proxy of C++ FIX::MySQLLogFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, settings) -> MySQLLogFactory

        Parameters
        ----------
        settings: FIX::SessionSettings const &

        __init__(self, database, user, password, host, port) -> MySQLLogFactory

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        __init__(self) -> MySQLLogFactory
        """
        _quickfix.MySQLLogFactory_swiginit(self, _quickfix.new_MySQLLogFactory(*args))

    def create(self, *args):
        r"""
        create(self) -> Log
        create(self, arg2) -> Log

        Parameters
        ----------
        arg2: FIX::SessionID const &

        """
        return _quickfix.MySQLLogFactory_create(self, *args)
    create = _swig_new_instance_method(_quickfix.MySQLLogFactory_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::Log *

        """
        return _quickfix.MySQLLogFactory_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.MySQLLogFactory_destroy)
    __swig_destroy__ = _quickfix.delete_MySQLLogFactory

# Register MySQLLogFactory in _quickfix:
_quickfix.MySQLLogFactory_swigregister(MySQLLogFactory)
MySQLLogFactory.DEFAULT_DATABASE = _quickfix.cvar.MySQLLogFactory_DEFAULT_DATABASE
MySQLLogFactory.DEFAULT_USER = _quickfix.cvar.MySQLLogFactory_DEFAULT_USER
MySQLLogFactory.DEFAULT_PASSWORD = _quickfix.cvar.MySQLLogFactory_DEFAULT_PASSWORD
MySQLLogFactory.DEFAULT_HOST = _quickfix.cvar.MySQLLogFactory_DEFAULT_HOST
MySQLLogFactory.DEFAULT_PORT = _quickfix.cvar.MySQLLogFactory_DEFAULT_PORT

class PostgreSQLQuery(object):
    r"""Proxy of C++ FIX::PostgreSQLQuery class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, query):
        r"""
        __init__(self, query) -> PostgreSQLQuery

        Parameters
        ----------
        query: std::string const &

        """
        _quickfix.PostgreSQLQuery_swiginit(self, _quickfix.new_PostgreSQLQuery(query))
    __swig_destroy__ = _quickfix.delete_PostgreSQLQuery

    def execute(self, pConnection):
        r"""
        execute(self, pConnection) -> bool

        Parameters
        ----------
        pConnection: PGconn *

        """
        return _quickfix.PostgreSQLQuery_execute(self, pConnection)
    execute = _swig_new_instance_method(_quickfix.PostgreSQLQuery_execute)

    def success(self):
        r"""success(self) -> bool"""
        return _quickfix.PostgreSQLQuery_success(self)
    success = _swig_new_instance_method(_quickfix.PostgreSQLQuery_success)

    def rows(self):
        r"""rows(self) -> int"""
        return _quickfix.PostgreSQLQuery_rows(self)
    rows = _swig_new_instance_method(_quickfix.PostgreSQLQuery_rows)

    def reason(self):
        r"""reason(self) -> char *"""
        return _quickfix.PostgreSQLQuery_reason(self)
    reason = _swig_new_instance_method(_quickfix.PostgreSQLQuery_reason)

    def getValue(self, row, column):
        r"""
        getValue(self, row, column) -> char *

        Parameters
        ----------
        row: int
        column: int

        """
        return _quickfix.PostgreSQLQuery_getValue(self, row, column)
    getValue = _swig_new_instance_method(_quickfix.PostgreSQLQuery_getValue)

    def throwException(self):
        r"""throwException(self)"""
        return _quickfix.PostgreSQLQuery_throwException(self)
    throwException = _swig_new_instance_method(_quickfix.PostgreSQLQuery_throwException)

# Register PostgreSQLQuery in _quickfix:
_quickfix.PostgreSQLQuery_swigregister(PostgreSQLQuery)
class PostgreSQLConnection(object):
    r"""Proxy of C++ FIX::PostgreSQLConnection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, id) -> PostgreSQLConnection

        Parameters
        ----------
        id: FIX::DatabaseConnectionID const &

        __init__(self, database, user, password, host, port) -> PostgreSQLConnection

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        """
        _quickfix.PostgreSQLConnection_swiginit(self, _quickfix.new_PostgreSQLConnection(*args))
    __swig_destroy__ = _quickfix.delete_PostgreSQLConnection

    def connectionID(self):
        r"""connectionID(self) -> DatabaseConnectionID"""
        return _quickfix.PostgreSQLConnection_connectionID(self)
    connectionID = _swig_new_instance_method(_quickfix.PostgreSQLConnection_connectionID)

    def connected(self):
        r"""connected(self) -> bool"""
        return _quickfix.PostgreSQLConnection_connected(self)
    connected = _swig_new_instance_method(_quickfix.PostgreSQLConnection_connected)

    def reconnect(self):
        r"""reconnect(self) -> bool"""
        return _quickfix.PostgreSQLConnection_reconnect(self)
    reconnect = _swig_new_instance_method(_quickfix.PostgreSQLConnection_reconnect)

    def execute(self, pQuery):
        r"""
        execute(self, pQuery) -> bool

        Parameters
        ----------
        pQuery: FIX::PostgreSQLQuery &

        """
        return _quickfix.PostgreSQLConnection_execute(self, pQuery)
    execute = _swig_new_instance_method(_quickfix.PostgreSQLConnection_execute)

# Register PostgreSQLConnection in _quickfix:
_quickfix.PostgreSQLConnection_swigregister(PostgreSQLConnection)
class PostgreSQLStoreFactory(MessageStoreFactory):
    r"""Proxy of C++ FIX::PostgreSQLStoreFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, settings) -> PostgreSQLStoreFactory

        Parameters
        ----------
        settings: FIX::SessionSettings const &

        __init__(self, dictionary) -> PostgreSQLStoreFactory

        Parameters
        ----------
        dictionary: FIX::Dictionary const &

        __init__(self, database, user, password, host, port) -> PostgreSQLStoreFactory

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        __init__(self) -> PostgreSQLStoreFactory
        """
        _quickfix.PostgreSQLStoreFactory_swiginit(self, _quickfix.new_PostgreSQLStoreFactory(*args))

    def create(self, arg2, arg3):
        r"""
        create(self, arg2, arg3) -> MessageStore

        Parameters
        ----------
        arg2: FIX::UtcTimeStamp const &
        arg3: FIX::SessionID const &

        """
        return _quickfix.PostgreSQLStoreFactory_create(self, arg2, arg3)
    create = _swig_new_instance_method(_quickfix.PostgreSQLStoreFactory_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::MessageStore *

        """
        return _quickfix.PostgreSQLStoreFactory_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.PostgreSQLStoreFactory_destroy)
    __swig_destroy__ = _quickfix.delete_PostgreSQLStoreFactory

# Register PostgreSQLStoreFactory in _quickfix:
_quickfix.PostgreSQLStoreFactory_swigregister(PostgreSQLStoreFactory)
PostgreSQLStoreFactory.DEFAULT_DATABASE = _quickfix.cvar.PostgreSQLStoreFactory_DEFAULT_DATABASE
PostgreSQLStoreFactory.DEFAULT_USER = _quickfix.cvar.PostgreSQLStoreFactory_DEFAULT_USER
PostgreSQLStoreFactory.DEFAULT_PASSWORD = _quickfix.cvar.PostgreSQLStoreFactory_DEFAULT_PASSWORD
PostgreSQLStoreFactory.DEFAULT_HOST = _quickfix.cvar.PostgreSQLStoreFactory_DEFAULT_HOST
PostgreSQLStoreFactory.DEFAULT_PORT = _quickfix.cvar.PostgreSQLStoreFactory_DEFAULT_PORT

class PostgreSQLStore(MessageStore):
    r"""Proxy of C++ FIX::PostgreSQLStore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, now, sessionID, connection, pool) -> PostgreSQLStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &
        sessionID: FIX::SessionID const &
        connection: FIX::DatabaseConnectionID const &
        pool: FIX::PostgreSQLConnectionPool *

        __init__(self, now, sessionID, database, user, password, host, port) -> PostgreSQLStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &
        sessionID: FIX::SessionID const &
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        """
        _quickfix.PostgreSQLStore_swiginit(self, _quickfix.new_PostgreSQLStore(*args))
    __swig_destroy__ = _quickfix.delete_PostgreSQLStore

    def set(self, arg2, arg3):
        r"""
        set(self, arg2, arg3) -> bool

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: std::string const &

        """
        return _quickfix.PostgreSQLStore_set(self, arg2, arg3)
    set = _swig_new_instance_method(_quickfix.PostgreSQLStore_set)

    def get(self, arg2, arg3, arg4):
        r"""
        get(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: FIX::SEQNUM
        arg4: std::vector< std::string,std::allocator< std::string > > &

        """
        return _quickfix.PostgreSQLStore_get(self, arg2, arg3, arg4)
    get = _swig_new_instance_method(_quickfix.PostgreSQLStore_get)

    def getNextSenderMsgSeqNum(self):
        r"""getNextSenderMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.PostgreSQLStore_getNextSenderMsgSeqNum(self)
    getNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.PostgreSQLStore_getNextSenderMsgSeqNum)

    def getNextTargetMsgSeqNum(self):
        r"""getNextTargetMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.PostgreSQLStore_getNextTargetMsgSeqNum(self)
    getNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.PostgreSQLStore_getNextTargetMsgSeqNum)

    def setNextSenderMsgSeqNum(self, value):
        r"""
        setNextSenderMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.PostgreSQLStore_setNextSenderMsgSeqNum(self, value)
    setNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.PostgreSQLStore_setNextSenderMsgSeqNum)

    def setNextTargetMsgSeqNum(self, value):
        r"""
        setNextTargetMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.PostgreSQLStore_setNextTargetMsgSeqNum(self, value)
    setNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.PostgreSQLStore_setNextTargetMsgSeqNum)

    def incrNextSenderMsgSeqNum(self):
        r"""incrNextSenderMsgSeqNum(self)"""
        return _quickfix.PostgreSQLStore_incrNextSenderMsgSeqNum(self)
    incrNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.PostgreSQLStore_incrNextSenderMsgSeqNum)

    def incrNextTargetMsgSeqNum(self):
        r"""incrNextTargetMsgSeqNum(self)"""
        return _quickfix.PostgreSQLStore_incrNextTargetMsgSeqNum(self)
    incrNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.PostgreSQLStore_incrNextTargetMsgSeqNum)

    def getCreationTime(self):
        r"""getCreationTime(self) -> UtcTimeStamp"""
        return _quickfix.PostgreSQLStore_getCreationTime(self)
    getCreationTime = _swig_new_instance_method(_quickfix.PostgreSQLStore_getCreationTime)

    def reset(self, now):
        r"""
        reset(self, now)

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        return _quickfix.PostgreSQLStore_reset(self, now)
    reset = _swig_new_instance_method(_quickfix.PostgreSQLStore_reset)

    def refresh(self):
        r"""refresh(self)"""
        return _quickfix.PostgreSQLStore_refresh(self)
    refresh = _swig_new_instance_method(_quickfix.PostgreSQLStore_refresh)

# Register PostgreSQLStore in _quickfix:
_quickfix.PostgreSQLStore_swigregister(PostgreSQLStore)
class PostgreSQLLog(Log):
    r"""Proxy of C++ FIX::PostgreSQLLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, s, d, p) -> PostgreSQLLog

        Parameters
        ----------
        s: FIX::SessionID const &
        d: FIX::DatabaseConnectionID const &
        p: FIX::PostgreSQLConnectionPool *

        __init__(self, d, p) -> PostgreSQLLog

        Parameters
        ----------
        d: FIX::DatabaseConnectionID const &
        p: FIX::PostgreSQLConnectionPool *

        __init__(self, s, database, user, password, host, port) -> PostgreSQLLog

        Parameters
        ----------
        s: FIX::SessionID const &
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        __init__(self, database, user, password, host, port) -> PostgreSQLLog

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        """
        _quickfix.PostgreSQLLog_swiginit(self, _quickfix.new_PostgreSQLLog(*args))
    __swig_destroy__ = _quickfix.delete_PostgreSQLLog

    def clear(self):
        r"""clear(self)"""
        return _quickfix.PostgreSQLLog_clear(self)
    clear = _swig_new_instance_method(_quickfix.PostgreSQLLog_clear)

    def backup(self):
        r"""backup(self)"""
        return _quickfix.PostgreSQLLog_backup(self)
    backup = _swig_new_instance_method(_quickfix.PostgreSQLLog_backup)

    def setIncomingTable(self, incomingTable):
        r"""
        setIncomingTable(self, incomingTable)

        Parameters
        ----------
        incomingTable: std::string const &

        """
        return _quickfix.PostgreSQLLog_setIncomingTable(self, incomingTable)
    setIncomingTable = _swig_new_instance_method(_quickfix.PostgreSQLLog_setIncomingTable)

    def setOutgoingTable(self, outgoingTable):
        r"""
        setOutgoingTable(self, outgoingTable)

        Parameters
        ----------
        outgoingTable: std::string const &

        """
        return _quickfix.PostgreSQLLog_setOutgoingTable(self, outgoingTable)
    setOutgoingTable = _swig_new_instance_method(_quickfix.PostgreSQLLog_setOutgoingTable)

    def setEventTable(self, eventTable):
        r"""
        setEventTable(self, eventTable)

        Parameters
        ----------
        eventTable: std::string const &

        """
        return _quickfix.PostgreSQLLog_setEventTable(self, eventTable)
    setEventTable = _swig_new_instance_method(_quickfix.PostgreSQLLog_setEventTable)

    def onIncoming(self, value):
        r"""
        onIncoming(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.PostgreSQLLog_onIncoming(self, value)
    onIncoming = _swig_new_instance_method(_quickfix.PostgreSQLLog_onIncoming)

    def onOutgoing(self, value):
        r"""
        onOutgoing(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.PostgreSQLLog_onOutgoing(self, value)
    onOutgoing = _swig_new_instance_method(_quickfix.PostgreSQLLog_onOutgoing)

    def onEvent(self, value):
        r"""
        onEvent(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _quickfix.PostgreSQLLog_onEvent(self, value)
    onEvent = _swig_new_instance_method(_quickfix.PostgreSQLLog_onEvent)

# Register PostgreSQLLog in _quickfix:
_quickfix.PostgreSQLLog_swigregister(PostgreSQLLog)
class PostgreSQLLogFactory(LogFactory):
    r"""Proxy of C++ FIX::PostgreSQLLogFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, settings) -> PostgreSQLLogFactory

        Parameters
        ----------
        settings: FIX::SessionSettings const &

        __init__(self, database, user, password, host, port) -> PostgreSQLLogFactory

        Parameters
        ----------
        database: std::string const &
        user: std::string const &
        password: std::string const &
        host: std::string const &
        port: short

        __init__(self) -> PostgreSQLLogFactory
        """
        _quickfix.PostgreSQLLogFactory_swiginit(self, _quickfix.new_PostgreSQLLogFactory(*args))

    def create(self, *args):
        r"""
        create(self) -> Log
        create(self, arg2) -> Log

        Parameters
        ----------
        arg2: FIX::SessionID const &

        """
        return _quickfix.PostgreSQLLogFactory_create(self, *args)
    create = _swig_new_instance_method(_quickfix.PostgreSQLLogFactory_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::Log *

        """
        return _quickfix.PostgreSQLLogFactory_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.PostgreSQLLogFactory_destroy)
    __swig_destroy__ = _quickfix.delete_PostgreSQLLogFactory

# Register PostgreSQLLogFactory in _quickfix:
_quickfix.PostgreSQLLogFactory_swigregister(PostgreSQLLogFactory)
PostgreSQLLogFactory.DEFAULT_DATABASE = _quickfix.cvar.PostgreSQLLogFactory_DEFAULT_DATABASE
PostgreSQLLogFactory.DEFAULT_USER = _quickfix.cvar.PostgreSQLLogFactory_DEFAULT_USER
PostgreSQLLogFactory.DEFAULT_PASSWORD = _quickfix.cvar.PostgreSQLLogFactory_DEFAULT_PASSWORD
PostgreSQLLogFactory.DEFAULT_HOST = _quickfix.cvar.PostgreSQLLogFactory_DEFAULT_HOST
PostgreSQLLogFactory.DEFAULT_PORT = _quickfix.cvar.PostgreSQLLogFactory_DEFAULT_PORT

class ThreadedSocketAcceptorBase(Acceptor):
    r"""Proxy of C++ FIX::ThreadedSocketAcceptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        ThreadedSocketAcceptor(arg1, arg2, arg3) -> ThreadedSocketAcceptorBase

        Parameters
        ----------
        arg1: FIX::Application &
        arg2: FIX::MessageStoreFactory &
        arg3: FIX::SessionSettings const &

        __init__(self, arg2, arg3, arg4, arg5) -> ThreadedSocketAcceptorBase

        Parameters
        ----------
        arg2: FIX::Application &
        arg3: FIX::MessageStoreFactory &
        arg4: FIX::SessionSettings const &
        arg5: FIX::LogFactory &

        """
        _quickfix.ThreadedSocketAcceptorBase_swiginit(self, _quickfix.new_ThreadedSocketAcceptorBase(*args))
    __swig_destroy__ = _quickfix.delete_ThreadedSocketAcceptorBase

# Register ThreadedSocketAcceptorBase in _quickfix:
_quickfix.ThreadedSocketAcceptorBase_swigregister(ThreadedSocketAcceptorBase)
class ThreadedSocketInitiatorBase(Initiator):
    r"""Proxy of C++ FIX::ThreadedSocketInitiator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        ThreadedSocketInitiator(arg1, arg2, arg3) -> ThreadedSocketInitiatorBase

        Parameters
        ----------
        arg1: FIX::Application &
        arg2: FIX::MessageStoreFactory &
        arg3: FIX::SessionSettings const &

        __init__(self, arg2, arg3, arg4, arg5) -> ThreadedSocketInitiatorBase

        Parameters
        ----------
        arg2: FIX::Application &
        arg3: FIX::MessageStoreFactory &
        arg4: FIX::SessionSettings const &
        arg5: FIX::LogFactory &

        """
        _quickfix.ThreadedSocketInitiatorBase_swiginit(self, _quickfix.new_ThreadedSocketInitiatorBase(*args))
    __swig_destroy__ = _quickfix.delete_ThreadedSocketInitiatorBase

# Register ThreadedSocketInitiatorBase in _quickfix:
_quickfix.ThreadedSocketInitiatorBase_swigregister(ThreadedSocketInitiatorBase)
class NullStoreFactory(MessageStoreFactory):
    r"""Proxy of C++ FIX::NullStoreFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def create(self, arg2, arg3):
        r"""
        create(self, arg2, arg3) -> MessageStore

        Parameters
        ----------
        arg2: FIX::UtcTimeStamp const &
        arg3: FIX::SessionID const &

        """
        return _quickfix.NullStoreFactory_create(self, arg2, arg3)
    create = _swig_new_instance_method(_quickfix.NullStoreFactory_create)

    def destroy(self, arg2):
        r"""
        destroy(self, arg2)

        Parameters
        ----------
        arg2: FIX::MessageStore *

        """
        return _quickfix.NullStoreFactory_destroy(self, arg2)
    destroy = _swig_new_instance_method(_quickfix.NullStoreFactory_destroy)

    def __init__(self):
        r"""__init__(self) -> NullStoreFactory"""
        _quickfix.NullStoreFactory_swiginit(self, _quickfix.new_NullStoreFactory())
    __swig_destroy__ = _quickfix.delete_NullStoreFactory

# Register NullStoreFactory in _quickfix:
_quickfix.NullStoreFactory_swigregister(NullStoreFactory)
class NullStore(MessageStore):
    r"""Proxy of C++ FIX::NullStore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, now):
        r"""
        __init__(self, now) -> NullStore

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        _quickfix.NullStore_swiginit(self, _quickfix.new_NullStore(now))

    def set(self, arg2, arg3):
        r"""
        set(self, arg2, arg3) -> bool

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: std::string const &

        """
        return _quickfix.NullStore_set(self, arg2, arg3)
    set = _swig_new_instance_method(_quickfix.NullStore_set)

    def get(self, arg2, arg3, arg4):
        r"""
        get(self, arg2, arg3, arg4)

        Parameters
        ----------
        arg2: FIX::SEQNUM
        arg3: FIX::SEQNUM
        arg4: std::vector< std::string,std::allocator< std::string > > &

        """
        return _quickfix.NullStore_get(self, arg2, arg3, arg4)
    get = _swig_new_instance_method(_quickfix.NullStore_get)

    def getNextSenderMsgSeqNum(self):
        r"""getNextSenderMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.NullStore_getNextSenderMsgSeqNum(self)
    getNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.NullStore_getNextSenderMsgSeqNum)

    def getNextTargetMsgSeqNum(self):
        r"""getNextTargetMsgSeqNum(self) -> FIX::SEQNUM"""
        return _quickfix.NullStore_getNextTargetMsgSeqNum(self)
    getNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.NullStore_getNextTargetMsgSeqNum)

    def setNextSenderMsgSeqNum(self, value):
        r"""
        setNextSenderMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.NullStore_setNextSenderMsgSeqNum(self, value)
    setNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.NullStore_setNextSenderMsgSeqNum)

    def setNextTargetMsgSeqNum(self, value):
        r"""
        setNextTargetMsgSeqNum(self, value)

        Parameters
        ----------
        value: FIX::SEQNUM

        """
        return _quickfix.NullStore_setNextTargetMsgSeqNum(self, value)
    setNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.NullStore_setNextTargetMsgSeqNum)

    def incrNextSenderMsgSeqNum(self):
        r"""incrNextSenderMsgSeqNum(self)"""
        return _quickfix.NullStore_incrNextSenderMsgSeqNum(self)
    incrNextSenderMsgSeqNum = _swig_new_instance_method(_quickfix.NullStore_incrNextSenderMsgSeqNum)

    def incrNextTargetMsgSeqNum(self):
        r"""incrNextTargetMsgSeqNum(self)"""
        return _quickfix.NullStore_incrNextTargetMsgSeqNum(self)
    incrNextTargetMsgSeqNum = _swig_new_instance_method(_quickfix.NullStore_incrNextTargetMsgSeqNum)

    def setCreationTime(self, creationTime):
        r"""
        setCreationTime(self, creationTime)

        Parameters
        ----------
        creationTime: FIX::UtcTimeStamp const &

        """
        return _quickfix.NullStore_setCreationTime(self, creationTime)
    setCreationTime = _swig_new_instance_method(_quickfix.NullStore_setCreationTime)

    def getCreationTime(self):
        r"""getCreationTime(self) -> UtcTimeStamp"""
        return _quickfix.NullStore_getCreationTime(self)
    getCreationTime = _swig_new_instance_method(_quickfix.NullStore_getCreationTime)

    def reset(self, now):
        r"""
        reset(self, now)

        Parameters
        ----------
        now: FIX::UtcTimeStamp const &

        """
        return _quickfix.NullStore_reset(self, now)
    reset = _swig_new_instance_method(_quickfix.NullStore_reset)

    def refresh(self):
        r"""refresh(self)"""
        return _quickfix.NullStore_refresh(self)
    refresh = _swig_new_instance_method(_quickfix.NullStore_refresh)
    __swig_destroy__ = _quickfix.delete_NullStore

# Register NullStore in _quickfix:
_quickfix.NullStore_swigregister(NullStore)

try:
  import thread
except ImportError:
  import _thread as thread

def _quickfix_start_thread(i_or_a):
  i_or_a.block()


class SocketInitiator(SocketInitiatorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      SocketInitiatorBase.__init__(self, application, storeFactory, settings)
    else:
      SocketInitiatorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory

class SocketAcceptor(SocketAcceptorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      SocketAcceptorBase.__init__(self, application, storeFactory, settings)
    else:
      SocketAcceptorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory

class ThreadedSocketInitiator(ThreadedSocketInitiatorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      ThreadedSocketInitiatorBase.__init__(self, application, storeFactory, settings)
    else:
      ThreadedSocketInitiatorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory

class ThreadedSocketAcceptor(ThreadedSocketAcceptorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      ThreadedSocketAcceptorBase.__init__(self, application, storeFactory, settings)
    else:
      ThreadedSocketAcceptorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory

#if (HAVE_SSL > 0)
class SSLSocketInitiator(SSLSocketInitiatorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      SSLSocketInitiatorBase.__init__(self, application, storeFactory, settings)
    else:
      SSLSocketInitiatorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory

class SSLSocketAcceptor(SSLSocketAcceptorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      SSLSocketAcceptorBase.__init__(self, application, storeFactory, settings)
    else:
      SSLSocketAcceptorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory
#endif




class BeginSeqNo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 7)
		else:
			IntField.__init__(self, 7, data)

class BeginString(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 8)
		else:
			StringField.__init__(self, 8, data)

class BodyLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 9)
		else:
			IntField.__init__(self, 9, data)

class CheckSum(CheckSumField):
	def __init__(self, data = None):
		if data == None:
			CheckSumField.__init__(self, 10)
		else:
			CheckSumField.__init__(self, 10, data)

class EndSeqNo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 16)
		else:
			IntField.__init__(self, 16, data)

class MsgSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 34)
		else:
			IntField.__init__(self, 34, data)

class MsgType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 35)
		else:
			StringField.__init__(self, 35, data)

class NewSeqNo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 36)
		else:
			IntField.__init__(self, 36, data)

class PossDupFlag(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 43)
		else:
			BoolField.__init__(self, 43, data)

class RefSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 45)
		else:
			IntField.__init__(self, 45, data)

class SenderCompID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 49)
		else:
			StringField.__init__(self, 49, data)

class SenderSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 50)
		else:
			StringField.__init__(self, 50, data)

class SendingTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 52)
		else:
			UtcTimeStampField.__init__(self, 52, data)

class TargetCompID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 56)
		else:
			StringField.__init__(self, 56, data)

class TargetSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 57)
		else:
			StringField.__init__(self, 57, data)

class Text(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 58)
		else:
			StringField.__init__(self, 58, data)

class Signature(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 89)
		else:
			StringField.__init__(self, 89, data)

class SecureDataLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 90)
		else:
			IntField.__init__(self, 90, data)

class SecureData(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 91)
		else:
			StringField.__init__(self, 91, data)

class SignatureLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 93)
		else:
			IntField.__init__(self, 93, data)

class RawDataLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 95)
		else:
			IntField.__init__(self, 95, data)

class RawData(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 96)
		else:
			StringField.__init__(self, 96, data)

class PossResend(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 97)
		else:
			BoolField.__init__(self, 97, data)

class EncryptMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 98)
		else:
			IntField.__init__(self, 98, data)

class HeartBtInt(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 108)
		else:
			IntField.__init__(self, 108, data)

class TestReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 112)
		else:
			StringField.__init__(self, 112, data)

class OnBehalfOfCompID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 115)
		else:
			StringField.__init__(self, 115, data)

class OnBehalfOfSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 116)
		else:
			StringField.__init__(self, 116, data)

class OrigSendingTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 122)
		else:
			UtcTimeStampField.__init__(self, 122, data)

class GapFillFlag(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 123)
		else:
			BoolField.__init__(self, 123, data)

class DeliverToCompID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 128)
		else:
			StringField.__init__(self, 128, data)

class DeliverToSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 129)
		else:
			StringField.__init__(self, 129, data)

class ResetSeqNumFlag(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 141)
		else:
			BoolField.__init__(self, 141, data)

class SenderLocationID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 142)
		else:
			StringField.__init__(self, 142, data)

class TargetLocationID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 143)
		else:
			StringField.__init__(self, 143, data)

class OnBehalfOfLocationID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 144)
		else:
			StringField.__init__(self, 144, data)

class DeliverToLocationID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 145)
		else:
			StringField.__init__(self, 145, data)

class XmlDataLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 212)
		else:
			IntField.__init__(self, 212, data)

class XmlData(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 213)
		else:
			StringField.__init__(self, 213, data)

class MessageEncoding(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 347)
		else:
			StringField.__init__(self, 347, data)

class EncodedTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 354)
		else:
			IntField.__init__(self, 354, data)

class EncodedText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 355)
		else:
			StringField.__init__(self, 355, data)

class LastMsgSeqNumProcessed(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 369)
		else:
			IntField.__init__(self, 369, data)

class RefTagID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 371)
		else:
			IntField.__init__(self, 371, data)

class RefMsgType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 372)
		else:
			StringField.__init__(self, 372, data)

class SessionRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 373)
		else:
			IntField.__init__(self, 373, data)

class MaxMessageSize(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 383)
		else:
			IntField.__init__(self, 383, data)

class TestMessageIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 464)
		else:
			BoolField.__init__(self, 464, data)

class Username(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 553)
		else:
			StringField.__init__(self, 553, data)

class Password(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 554)
		else:
			StringField.__init__(self, 554, data)

class NoHops(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 627)
		else:
			IntField.__init__(self, 627, data)

class HopCompID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 628)
		else:
			StringField.__init__(self, 628, data)

class HopSendingTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 629)
		else:
			UtcTimeStampField.__init__(self, 629, data)

class HopRefID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 630)
		else:
			IntField.__init__(self, 630, data)

class NextExpectedMsgSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 789)
		else:
			IntField.__init__(self, 789, data)

class NewPassword(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 925)
		else:
			StringField.__init__(self, 925, data)

class ApplVerID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1128)
		else:
			StringField.__init__(self, 1128, data)

class CstmApplVerID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1129)
		else:
			StringField.__init__(self, 1129, data)

class RefApplVerID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1130)
		else:
			StringField.__init__(self, 1130, data)

class RefCstmApplVerID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1131)
		else:
			StringField.__init__(self, 1131, data)

class DefaultApplVerID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1137)
		else:
			StringField.__init__(self, 1137, data)

class ApplExtID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1156)
		else:
			IntField.__init__(self, 1156, data)

class EncryptedPasswordMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1400)
		else:
			IntField.__init__(self, 1400, data)

class EncryptedPasswordLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1401)
		else:
			IntField.__init__(self, 1401, data)

class EncryptedPassword(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1402)
		else:
			StringField.__init__(self, 1402, data)

class EncryptedNewPasswordLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1403)
		else:
			IntField.__init__(self, 1403, data)

class EncryptedNewPassword(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1404)
		else:
			StringField.__init__(self, 1404, data)

class RefApplExtID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1406)
		else:
			IntField.__init__(self, 1406, data)

class DefaultApplExtID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1407)
		else:
			IntField.__init__(self, 1407, data)

class DefaultCstmApplVerID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1408)
		else:
			StringField.__init__(self, 1408, data)

class SessionStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1409)
		else:
			IntField.__init__(self, 1409, data)

class Account(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1)
		else:
			StringField.__init__(self, 1, data)

class AdvId(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2)
		else:
			StringField.__init__(self, 2, data)

class AdvRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 3)
		else:
			StringField.__init__(self, 3, data)

class AdvSide(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 4)
		else:
			CharField.__init__(self, 4, data)

class AdvTransType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 5)
		else:
			StringField.__init__(self, 5, data)

class AvgPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 6)
		else:
			DoubleField.__init__(self, 6, data)

class ClOrdID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 11)
		else:
			StringField.__init__(self, 11, data)

class Commission(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 12)
		else:
			DoubleField.__init__(self, 12, data)

class CommType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 13)
		else:
			CharField.__init__(self, 13, data)

class CumQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 14)
		else:
			DoubleField.__init__(self, 14, data)

class Currency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 15)
		else:
			StringField.__init__(self, 15, data)

class ExecID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 17)
		else:
			StringField.__init__(self, 17, data)

class ExecInst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 18)
		else:
			StringField.__init__(self, 18, data)

class ExecRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 19)
		else:
			StringField.__init__(self, 19, data)

class ExecTransType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 20)
		else:
			CharField.__init__(self, 20, data)

class HandlInst(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 21)
		else:
			CharField.__init__(self, 21, data)

class IDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 22)
		else:
			StringField.__init__(self, 22, data)

class IOIid(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 23)
		else:
			StringField.__init__(self, 23, data)

class IOIOthSvc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 24)
		else:
			CharField.__init__(self, 24, data)

class IOIQltyInd(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 25)
		else:
			CharField.__init__(self, 25, data)

class IOIRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 26)
		else:
			StringField.__init__(self, 26, data)

class IOIShares(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 27)
		else:
			StringField.__init__(self, 27, data)

class IOITransType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 28)
		else:
			CharField.__init__(self, 28, data)

class LastCapacity(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 29)
		else:
			CharField.__init__(self, 29, data)

class LastMkt(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 30)
		else:
			StringField.__init__(self, 30, data)

class LastPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 31)
		else:
			DoubleField.__init__(self, 31, data)

class LastShares(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 32)
		else:
			DoubleField.__init__(self, 32, data)

class LinesOfText(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 33)
		else:
			IntField.__init__(self, 33, data)

class OrderID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 37)
		else:
			StringField.__init__(self, 37, data)

class OrderQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 38)
		else:
			DoubleField.__init__(self, 38, data)

class OrdStatus(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 39)
		else:
			CharField.__init__(self, 39, data)

class OrdType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 40)
		else:
			CharField.__init__(self, 40, data)

class OrigClOrdID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41)
		else:
			StringField.__init__(self, 41, data)

class OrigTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 42)
		else:
			UtcTimeStampField.__init__(self, 42, data)

class Price(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 44)
		else:
			DoubleField.__init__(self, 44, data)

class RelatdSym(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 46)
		else:
			StringField.__init__(self, 46, data)

class Rule80A(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 47)
		else:
			CharField.__init__(self, 47, data)

class SecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 48)
		else:
			StringField.__init__(self, 48, data)

class Shares(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 53)
		else:
			DoubleField.__init__(self, 53, data)

class Side(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 54)
		else:
			CharField.__init__(self, 54, data)

class Symbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 55)
		else:
			StringField.__init__(self, 55, data)

class TimeInForce(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 59)
		else:
			CharField.__init__(self, 59, data)

class TransactTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 60)
		else:
			UtcTimeStampField.__init__(self, 60, data)

class Urgency(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 61)
		else:
			CharField.__init__(self, 61, data)

class ValidUntilTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 62)
		else:
			UtcTimeStampField.__init__(self, 62, data)

class SettlmntTyp(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 63)
		else:
			CharField.__init__(self, 63, data)

class FutSettDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 64)
		else:
			StringField.__init__(self, 64, data)

class SymbolSfx(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 65)
		else:
			StringField.__init__(self, 65, data)

class ListID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 66)
		else:
			StringField.__init__(self, 66, data)

class ListSeqNo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 67)
		else:
			IntField.__init__(self, 67, data)

class ListNoOrds(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 68)
		else:
			IntField.__init__(self, 68, data)

class ListExecInst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 69)
		else:
			StringField.__init__(self, 69, data)

class AllocID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 70)
		else:
			StringField.__init__(self, 70, data)

class AllocTransType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 71)
		else:
			CharField.__init__(self, 71, data)

class RefAllocID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 72)
		else:
			StringField.__init__(self, 72, data)

class NoOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 73)
		else:
			IntField.__init__(self, 73, data)

class AvgPrxPrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 74)
		else:
			IntField.__init__(self, 74, data)

class TradeDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 75)
		else:
			StringField.__init__(self, 75, data)

class ExecBroker(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 76)
		else:
			StringField.__init__(self, 76, data)

class OpenClose(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 77)
		else:
			CharField.__init__(self, 77, data)

class NoAllocs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 78)
		else:
			IntField.__init__(self, 78, data)

class AllocAccount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 79)
		else:
			StringField.__init__(self, 79, data)

class AllocShares(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 80)
		else:
			DoubleField.__init__(self, 80, data)

class ProcessCode(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 81)
		else:
			CharField.__init__(self, 81, data)

class NoRpts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 82)
		else:
			IntField.__init__(self, 82, data)

class RptSeq(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 83)
		else:
			IntField.__init__(self, 83, data)

class CxlQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 84)
		else:
			DoubleField.__init__(self, 84, data)

class NoDlvyInst(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 85)
		else:
			IntField.__init__(self, 85, data)

class DlvyInst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 86)
		else:
			StringField.__init__(self, 86, data)

class AllocStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 87)
		else:
			IntField.__init__(self, 87, data)

class AllocRejCode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 88)
		else:
			IntField.__init__(self, 88, data)

class BrokerOfCredit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 92)
		else:
			StringField.__init__(self, 92, data)

class EmailType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 94)
		else:
			CharField.__init__(self, 94, data)

class StopPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 99)
		else:
			DoubleField.__init__(self, 99, data)

class ExDestination(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 100)
		else:
			StringField.__init__(self, 100, data)

class CxlRejReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 102)
		else:
			IntField.__init__(self, 102, data)

class OrdRejReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 103)
		else:
			IntField.__init__(self, 103, data)

class IOIQualifier(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 104)
		else:
			CharField.__init__(self, 104, data)

class WaveNo(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 105)
		else:
			StringField.__init__(self, 105, data)

class Issuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 106)
		else:
			StringField.__init__(self, 106, data)

class SecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 107)
		else:
			StringField.__init__(self, 107, data)

class ClientID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 109)
		else:
			StringField.__init__(self, 109, data)

class MinQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 110)
		else:
			DoubleField.__init__(self, 110, data)

class MaxFloor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 111)
		else:
			DoubleField.__init__(self, 111, data)

class ReportToExch(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 113)
		else:
			BoolField.__init__(self, 113, data)

class LocateReqd(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 114)
		else:
			BoolField.__init__(self, 114, data)

class QuoteID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 117)
		else:
			StringField.__init__(self, 117, data)

class NetMoney(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 118)
		else:
			DoubleField.__init__(self, 118, data)

class SettlCurrAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 119)
		else:
			DoubleField.__init__(self, 119, data)

class SettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 120)
		else:
			StringField.__init__(self, 120, data)

class ForexReq(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 121)
		else:
			BoolField.__init__(self, 121, data)

class NoExecs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 124)
		else:
			IntField.__init__(self, 124, data)

class CxlType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 125)
		else:
			CharField.__init__(self, 125, data)

class ExpireTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 126)
		else:
			UtcTimeStampField.__init__(self, 126, data)

class DKReason(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 127)
		else:
			CharField.__init__(self, 127, data)

class IOINaturalFlag(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 130)
		else:
			BoolField.__init__(self, 130, data)

class QuoteReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 131)
		else:
			StringField.__init__(self, 131, data)

class BidPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 132)
		else:
			DoubleField.__init__(self, 132, data)

class OfferPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 133)
		else:
			DoubleField.__init__(self, 133, data)

class BidSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 134)
		else:
			DoubleField.__init__(self, 134, data)

class OfferSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 135)
		else:
			DoubleField.__init__(self, 135, data)

class NoMiscFees(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 136)
		else:
			IntField.__init__(self, 136, data)

class MiscFeeAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 137)
		else:
			DoubleField.__init__(self, 137, data)

class MiscFeeCurr(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 138)
		else:
			StringField.__init__(self, 138, data)

class MiscFeeType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 139)
		else:
			StringField.__init__(self, 139, data)

class PrevClosePx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 140)
		else:
			DoubleField.__init__(self, 140, data)

class NoRelatedSym(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 146)
		else:
			IntField.__init__(self, 146, data)

class Subject(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 147)
		else:
			StringField.__init__(self, 147, data)

class Headline(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 148)
		else:
			StringField.__init__(self, 148, data)

class URLLink(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 149)
		else:
			StringField.__init__(self, 149, data)

class ExecType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 150)
		else:
			CharField.__init__(self, 150, data)

class LeavesQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 151)
		else:
			DoubleField.__init__(self, 151, data)

class CashOrderQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 152)
		else:
			DoubleField.__init__(self, 152, data)

class AllocAvgPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 153)
		else:
			DoubleField.__init__(self, 153, data)

class AllocNetMoney(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 154)
		else:
			DoubleField.__init__(self, 154, data)

class SettlCurrFxRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 155)
		else:
			DoubleField.__init__(self, 155, data)

class SettlCurrFxRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 156)
		else:
			CharField.__init__(self, 156, data)

class NumDaysInterest(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 157)
		else:
			IntField.__init__(self, 157, data)

class AccruedInterestRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 158)
		else:
			DoubleField.__init__(self, 158, data)

class AccruedInterestAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 159)
		else:
			DoubleField.__init__(self, 159, data)

class SettlInstMode(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 160)
		else:
			CharField.__init__(self, 160, data)

class AllocText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 161)
		else:
			StringField.__init__(self, 161, data)

class SettlInstID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 162)
		else:
			StringField.__init__(self, 162, data)

class SettlInstTransType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 163)
		else:
			CharField.__init__(self, 163, data)

class EmailThreadID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 164)
		else:
			StringField.__init__(self, 164, data)

class SettlInstSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 165)
		else:
			CharField.__init__(self, 165, data)

class SettlLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 166)
		else:
			StringField.__init__(self, 166, data)

class SecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 167)
		else:
			StringField.__init__(self, 167, data)

class EffectiveTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 168)
		else:
			UtcTimeStampField.__init__(self, 168, data)

class StandInstDbType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 169)
		else:
			IntField.__init__(self, 169, data)

class StandInstDbName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 170)
		else:
			StringField.__init__(self, 170, data)

class StandInstDbID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 171)
		else:
			StringField.__init__(self, 171, data)

class SettlDeliveryType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 172)
		else:
			IntField.__init__(self, 172, data)

class SettlDepositoryCode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 173)
		else:
			StringField.__init__(self, 173, data)

class SettlBrkrCode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 174)
		else:
			StringField.__init__(self, 174, data)

class SettlInstCode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 175)
		else:
			StringField.__init__(self, 175, data)

class SecuritySettlAgentName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 176)
		else:
			StringField.__init__(self, 176, data)

class SecuritySettlAgentCode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 177)
		else:
			StringField.__init__(self, 177, data)

class SecuritySettlAgentAcctNum(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 178)
		else:
			StringField.__init__(self, 178, data)

class SecuritySettlAgentAcctName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 179)
		else:
			StringField.__init__(self, 179, data)

class SecuritySettlAgentContactName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 180)
		else:
			StringField.__init__(self, 180, data)

class SecuritySettlAgentContactPhone(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 181)
		else:
			StringField.__init__(self, 181, data)

class CashSettlAgentName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 182)
		else:
			StringField.__init__(self, 182, data)

class CashSettlAgentCode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 183)
		else:
			StringField.__init__(self, 183, data)

class CashSettlAgentAcctNum(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 184)
		else:
			StringField.__init__(self, 184, data)

class CashSettlAgentAcctName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 185)
		else:
			StringField.__init__(self, 185, data)

class CashSettlAgentContactName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 186)
		else:
			StringField.__init__(self, 186, data)

class CashSettlAgentContactPhone(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 187)
		else:
			StringField.__init__(self, 187, data)

class BidSpotRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 188)
		else:
			DoubleField.__init__(self, 188, data)

class BidForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 189)
		else:
			DoubleField.__init__(self, 189, data)

class OfferSpotRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 190)
		else:
			DoubleField.__init__(self, 190, data)

class OfferForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 191)
		else:
			DoubleField.__init__(self, 191, data)

class OrderQty2(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 192)
		else:
			DoubleField.__init__(self, 192, data)

class FutSettDate2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 193)
		else:
			StringField.__init__(self, 193, data)

class LastSpotRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 194)
		else:
			DoubleField.__init__(self, 194, data)

class LastForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 195)
		else:
			DoubleField.__init__(self, 195, data)

class AllocLinkID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 196)
		else:
			StringField.__init__(self, 196, data)

class AllocLinkType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 197)
		else:
			IntField.__init__(self, 197, data)

class SecondaryOrderID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 198)
		else:
			StringField.__init__(self, 198, data)

class NoIOIQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 199)
		else:
			IntField.__init__(self, 199, data)

class MaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 200)
		else:
			StringField.__init__(self, 200, data)

class PutOrCall(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 201)
		else:
			IntField.__init__(self, 201, data)

class StrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 202)
		else:
			DoubleField.__init__(self, 202, data)

class CoveredOrUncovered(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 203)
		else:
			IntField.__init__(self, 203, data)

class CustomerOrFirm(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 204)
		else:
			IntField.__init__(self, 204, data)

class MaturityDay(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 205)
		else:
			StringField.__init__(self, 205, data)

class OptAttribute(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 206)
		else:
			CharField.__init__(self, 206, data)

class SecurityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 207)
		else:
			StringField.__init__(self, 207, data)

class NotifyBrokerOfCredit(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 208)
		else:
			BoolField.__init__(self, 208, data)

class AllocHandlInst(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 209)
		else:
			IntField.__init__(self, 209, data)

class MaxShow(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 210)
		else:
			DoubleField.__init__(self, 210, data)

class PegDifference(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 211)
		else:
			DoubleField.__init__(self, 211, data)

class SendingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 51)
		else:
			StringField.__init__(self, 51, data)

class TotNoOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 68)
		else:
			IntField.__init__(self, 68, data)

class SettlInstRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 214)
		else:
			StringField.__init__(self, 214, data)

class NoRoutingIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 215)
		else:
			IntField.__init__(self, 215, data)

class RoutingType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 216)
		else:
			IntField.__init__(self, 216, data)

class RoutingID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 217)
		else:
			StringField.__init__(self, 217, data)

class SpreadToBenchmark(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 218)
		else:
			DoubleField.__init__(self, 218, data)

class Benchmark(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 219)
		else:
			CharField.__init__(self, 219, data)

class CouponRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 223)
		else:
			DoubleField.__init__(self, 223, data)

class ContractMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 231)
		else:
			DoubleField.__init__(self, 231, data)

class MDReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 262)
		else:
			StringField.__init__(self, 262, data)

class SubscriptionRequestType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 263)
		else:
			CharField.__init__(self, 263, data)

class MarketDepth(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 264)
		else:
			IntField.__init__(self, 264, data)

class MDUpdateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 265)
		else:
			IntField.__init__(self, 265, data)

class AggregatedBook(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 266)
		else:
			BoolField.__init__(self, 266, data)

class NoMDEntryTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 267)
		else:
			IntField.__init__(self, 267, data)

class NoMDEntries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 268)
		else:
			IntField.__init__(self, 268, data)

class MDEntryType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 269)
		else:
			CharField.__init__(self, 269, data)

class MDEntryPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 270)
		else:
			DoubleField.__init__(self, 270, data)

class MDEntrySize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 271)
		else:
			DoubleField.__init__(self, 271, data)

class MDEntryDate(UtcDateField):
	def __init__(self, data = None):
		if data == None:
			UtcDateField.__init__(self, 272)
		else:
			UtcDateField.__init__(self, 272, data)

class MDEntryTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 273)
		else:
			UtcTimeOnlyField.__init__(self, 273, data)

class TickDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 274)
		else:
			CharField.__init__(self, 274, data)

class MDMkt(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 275)
		else:
			StringField.__init__(self, 275, data)

class QuoteCondition(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 276)
		else:
			StringField.__init__(self, 276, data)

class TradeCondition(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 277)
		else:
			StringField.__init__(self, 277, data)

class MDEntryID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 278)
		else:
			StringField.__init__(self, 278, data)

class MDUpdateAction(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 279)
		else:
			CharField.__init__(self, 279, data)

class MDEntryRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 280)
		else:
			StringField.__init__(self, 280, data)

class MDReqRejReason(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 281)
		else:
			CharField.__init__(self, 281, data)

class MDEntryOriginator(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 282)
		else:
			StringField.__init__(self, 282, data)

class LocationID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 283)
		else:
			StringField.__init__(self, 283, data)

class DeskID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 284)
		else:
			StringField.__init__(self, 284, data)

class DeleteReason(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 285)
		else:
			CharField.__init__(self, 285, data)

class OpenCloseSettleFlag(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 286)
		else:
			StringField.__init__(self, 286, data)

class SellerDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 287)
		else:
			IntField.__init__(self, 287, data)

class MDEntryBuyer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 288)
		else:
			StringField.__init__(self, 288, data)

class MDEntrySeller(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 289)
		else:
			StringField.__init__(self, 289, data)

class MDEntryPositionNo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 290)
		else:
			IntField.__init__(self, 290, data)

class FinancialStatus(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 291)
		else:
			StringField.__init__(self, 291, data)

class CorporateAction(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 292)
		else:
			StringField.__init__(self, 292, data)

class DefBidSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 293)
		else:
			DoubleField.__init__(self, 293, data)

class DefOfferSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 294)
		else:
			DoubleField.__init__(self, 294, data)

class NoQuoteEntries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 295)
		else:
			IntField.__init__(self, 295, data)

class NoQuoteSets(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 296)
		else:
			IntField.__init__(self, 296, data)

class QuoteAckStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1865)
		else:
			IntField.__init__(self, 1865, data)

class QuoteCancelType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 298)
		else:
			IntField.__init__(self, 298, data)

class QuoteEntryID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 299)
		else:
			StringField.__init__(self, 299, data)

class QuoteRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 300)
		else:
			IntField.__init__(self, 300, data)

class QuoteResponseLevel(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 301)
		else:
			IntField.__init__(self, 301, data)

class QuoteSetID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 302)
		else:
			StringField.__init__(self, 302, data)

class QuoteRequestType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 303)
		else:
			IntField.__init__(self, 303, data)

class TotQuoteEntries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 304)
		else:
			IntField.__init__(self, 304, data)

class UnderlyingIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 305)
		else:
			StringField.__init__(self, 305, data)

class UnderlyingIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 306)
		else:
			StringField.__init__(self, 306, data)

class UnderlyingSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 307)
		else:
			StringField.__init__(self, 307, data)

class UnderlyingSecurityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 308)
		else:
			StringField.__init__(self, 308, data)

class UnderlyingSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 309)
		else:
			StringField.__init__(self, 309, data)

class UnderlyingSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 310)
		else:
			StringField.__init__(self, 310, data)

class UnderlyingSymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 311)
		else:
			StringField.__init__(self, 311, data)

class UnderlyingSymbolSfx(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 312)
		else:
			StringField.__init__(self, 312, data)

class UnderlyingMaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 313)
		else:
			StringField.__init__(self, 313, data)

class UnderlyingMaturityDay(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 314)
		else:
			StringField.__init__(self, 314, data)

class UnderlyingPutOrCall(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 315)
		else:
			IntField.__init__(self, 315, data)

class UnderlyingStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 316)
		else:
			DoubleField.__init__(self, 316, data)

class UnderlyingOptAttribute(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 317)
		else:
			CharField.__init__(self, 317, data)

class UnderlyingCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 318)
		else:
			StringField.__init__(self, 318, data)

class RatioQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 319)
		else:
			DoubleField.__init__(self, 319, data)

class SecurityReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 320)
		else:
			StringField.__init__(self, 320, data)

class SecurityRequestType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 321)
		else:
			IntField.__init__(self, 321, data)

class SecurityResponseID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 322)
		else:
			StringField.__init__(self, 322, data)

class SecurityResponseType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 323)
		else:
			IntField.__init__(self, 323, data)

class SecurityStatusReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 324)
		else:
			StringField.__init__(self, 324, data)

class UnsolicitedIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 325)
		else:
			BoolField.__init__(self, 325, data)

class SecurityTradingStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 326)
		else:
			IntField.__init__(self, 326, data)

class HaltReasonChar(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 327)
		else:
			CharField.__init__(self, 327, data)

class InViewOfCommon(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 328)
		else:
			BoolField.__init__(self, 328, data)

class DueToRelated(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 329)
		else:
			BoolField.__init__(self, 329, data)

class BuyVolume(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 330)
		else:
			DoubleField.__init__(self, 330, data)

class SellVolume(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 331)
		else:
			DoubleField.__init__(self, 331, data)

class HighPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 332)
		else:
			DoubleField.__init__(self, 332, data)

class LowPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 333)
		else:
			DoubleField.__init__(self, 333, data)

class Adjustment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 334)
		else:
			IntField.__init__(self, 334, data)

class TradSesReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 335)
		else:
			StringField.__init__(self, 335, data)

class TradingSessionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 336)
		else:
			StringField.__init__(self, 336, data)

class ContraTrader(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 337)
		else:
			StringField.__init__(self, 337, data)

class TradSesMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 338)
		else:
			IntField.__init__(self, 338, data)

class TradSesMode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 339)
		else:
			IntField.__init__(self, 339, data)

class TradSesStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 340)
		else:
			IntField.__init__(self, 340, data)

class TradSesStartTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 341)
		else:
			UtcTimeStampField.__init__(self, 341, data)

class TradSesOpenTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 342)
		else:
			UtcTimeStampField.__init__(self, 342, data)

class TradSesPreCloseTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 343)
		else:
			UtcTimeStampField.__init__(self, 343, data)

class TradSesCloseTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 344)
		else:
			UtcTimeStampField.__init__(self, 344, data)

class TradSesEndTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 345)
		else:
			UtcTimeStampField.__init__(self, 345, data)

class NumberOfOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 346)
		else:
			IntField.__init__(self, 346, data)

class EncodedIssuerLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 348)
		else:
			IntField.__init__(self, 348, data)

class EncodedIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 349)
		else:
			StringField.__init__(self, 349, data)

class EncodedSecurityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 350)
		else:
			IntField.__init__(self, 350, data)

class EncodedSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 351)
		else:
			StringField.__init__(self, 351, data)

class EncodedListExecInstLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 352)
		else:
			IntField.__init__(self, 352, data)

class EncodedListExecInst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 353)
		else:
			StringField.__init__(self, 353, data)

class EncodedSubjectLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 356)
		else:
			IntField.__init__(self, 356, data)

class EncodedSubject(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 357)
		else:
			StringField.__init__(self, 357, data)

class EncodedHeadlineLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 358)
		else:
			IntField.__init__(self, 358, data)

class EncodedHeadline(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 359)
		else:
			StringField.__init__(self, 359, data)

class EncodedAllocTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 360)
		else:
			IntField.__init__(self, 360, data)

class EncodedAllocText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 361)
		else:
			StringField.__init__(self, 361, data)

class EncodedUnderlyingIssuerLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 362)
		else:
			IntField.__init__(self, 362, data)

class EncodedUnderlyingIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 363)
		else:
			StringField.__init__(self, 363, data)

class EncodedUnderlyingSecurityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 364)
		else:
			IntField.__init__(self, 364, data)

class EncodedUnderlyingSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 365)
		else:
			StringField.__init__(self, 365, data)

class AllocPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 366)
		else:
			DoubleField.__init__(self, 366, data)

class QuoteSetValidUntilTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 367)
		else:
			UtcTimeStampField.__init__(self, 367, data)

class QuoteEntryRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 368)
		else:
			IntField.__init__(self, 368, data)

class OnBehalfOfSendingTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 370)
		else:
			UtcTimeStampField.__init__(self, 370, data)

class BidRequestTransType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 374)
		else:
			CharField.__init__(self, 374, data)

class ContraBroker(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 375)
		else:
			StringField.__init__(self, 375, data)

class ComplianceID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 376)
		else:
			StringField.__init__(self, 376, data)

class SolicitedFlag(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 377)
		else:
			BoolField.__init__(self, 377, data)

class ExecRestatementReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 378)
		else:
			IntField.__init__(self, 378, data)

class BusinessRejectRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 379)
		else:
			StringField.__init__(self, 379, data)

class BusinessRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 380)
		else:
			IntField.__init__(self, 380, data)

class GrossTradeAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 381)
		else:
			DoubleField.__init__(self, 381, data)

class NoContraBrokers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 382)
		else:
			IntField.__init__(self, 382, data)

class NoMsgTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 384)
		else:
			IntField.__init__(self, 384, data)

class MsgDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 385)
		else:
			CharField.__init__(self, 385, data)

class NoTradingSessions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 386)
		else:
			IntField.__init__(self, 386, data)

class TotalVolumeTraded(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 387)
		else:
			DoubleField.__init__(self, 387, data)

class DiscretionInst(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 388)
		else:
			CharField.__init__(self, 388, data)

class DiscretionOffset(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 389)
		else:
			DoubleField.__init__(self, 389, data)

class BidID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 390)
		else:
			StringField.__init__(self, 390, data)

class ClientBidID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 391)
		else:
			StringField.__init__(self, 391, data)

class ListName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 392)
		else:
			StringField.__init__(self, 392, data)

class TotalNumSecurities(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 393)
		else:
			IntField.__init__(self, 393, data)

class BidType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 394)
		else:
			IntField.__init__(self, 394, data)

class NumTickets(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 395)
		else:
			IntField.__init__(self, 395, data)

class SideValue1(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 396)
		else:
			DoubleField.__init__(self, 396, data)

class SideValue2(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 397)
		else:
			DoubleField.__init__(self, 397, data)

class NoBidDescriptors(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 398)
		else:
			IntField.__init__(self, 398, data)

class BidDescriptorType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 399)
		else:
			IntField.__init__(self, 399, data)

class BidDescriptor(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 400)
		else:
			StringField.__init__(self, 400, data)

class SideValueInd(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 401)
		else:
			IntField.__init__(self, 401, data)

class LiquidityPctLow(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 402)
		else:
			DoubleField.__init__(self, 402, data)

class LiquidityPctHigh(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 403)
		else:
			DoubleField.__init__(self, 403, data)

class LiquidityValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 404)
		else:
			DoubleField.__init__(self, 404, data)

class EFPTrackingError(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 405)
		else:
			DoubleField.__init__(self, 405, data)

class FairValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 406)
		else:
			DoubleField.__init__(self, 406, data)

class OutsideIndexPct(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 407)
		else:
			DoubleField.__init__(self, 407, data)

class ValueOfFutures(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 408)
		else:
			DoubleField.__init__(self, 408, data)

class LiquidityIndType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 409)
		else:
			IntField.__init__(self, 409, data)

class WtAverageLiquidity(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 410)
		else:
			DoubleField.__init__(self, 410, data)

class ExchangeForPhysical(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 411)
		else:
			BoolField.__init__(self, 411, data)

class OutMainCntryUIndex(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 412)
		else:
			DoubleField.__init__(self, 412, data)

class CrossPercent(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 413)
		else:
			DoubleField.__init__(self, 413, data)

class ProgRptReqs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 414)
		else:
			IntField.__init__(self, 414, data)

class ProgPeriodInterval(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 415)
		else:
			IntField.__init__(self, 415, data)

class IncTaxInd(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 416)
		else:
			IntField.__init__(self, 416, data)

class NumBidders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 417)
		else:
			IntField.__init__(self, 417, data)

class TradeType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 418)
		else:
			CharField.__init__(self, 418, data)

class BasisPxType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 419)
		else:
			CharField.__init__(self, 419, data)

class NoBidComponents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 420)
		else:
			IntField.__init__(self, 420, data)

class Country(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 421)
		else:
			StringField.__init__(self, 421, data)

class TotNoStrikes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 422)
		else:
			IntField.__init__(self, 422, data)

class PriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 423)
		else:
			IntField.__init__(self, 423, data)

class DayOrderQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 424)
		else:
			DoubleField.__init__(self, 424, data)

class DayCumQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 425)
		else:
			DoubleField.__init__(self, 425, data)

class DayAvgPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 426)
		else:
			DoubleField.__init__(self, 426, data)

class GTBookingInst(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 427)
		else:
			IntField.__init__(self, 427, data)

class NoStrikes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 428)
		else:
			IntField.__init__(self, 428, data)

class ListStatusType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 429)
		else:
			IntField.__init__(self, 429, data)

class NetGrossInd(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 430)
		else:
			IntField.__init__(self, 430, data)

class ListOrderStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 431)
		else:
			IntField.__init__(self, 431, data)

class ExpireDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 432)
		else:
			StringField.__init__(self, 432, data)

class ListExecInstType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 433)
		else:
			CharField.__init__(self, 433, data)

class CxlRejResponseTo(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 434)
		else:
			CharField.__init__(self, 434, data)

class UnderlyingCouponRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 435)
		else:
			DoubleField.__init__(self, 435, data)

class UnderlyingContractMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 436)
		else:
			DoubleField.__init__(self, 436, data)

class ContraTradeQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 437)
		else:
			DoubleField.__init__(self, 437, data)

class ContraTradeTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 438)
		else:
			UtcTimeStampField.__init__(self, 438, data)

class ClearingFirm(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 439)
		else:
			StringField.__init__(self, 439, data)

class ClearingAccount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 440)
		else:
			StringField.__init__(self, 440, data)

class LiquidityNumSecurities(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 441)
		else:
			IntField.__init__(self, 441, data)

class MultiLegReportingType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 442)
		else:
			CharField.__init__(self, 442, data)

class StrikeTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 443)
		else:
			UtcTimeStampField.__init__(self, 443, data)

class ListStatusText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 444)
		else:
			StringField.__init__(self, 444, data)

class EncodedListStatusTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 445)
		else:
			IntField.__init__(self, 445, data)

class EncodedListStatusText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 446)
		else:
			StringField.__init__(self, 446, data)

class SecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 22)
		else:
			StringField.__init__(self, 22, data)

class IOIQty(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 27)
		else:
			StringField.__init__(self, 27, data)

class LastQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 32)
		else:
			DoubleField.__init__(self, 32, data)

class Quantity(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 53)
		else:
			DoubleField.__init__(self, 53, data)

class PositionEffect(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 77)
		else:
			CharField.__init__(self, 77, data)

class AllocQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 80)
		else:
			DoubleField.__init__(self, 80, data)

class Spread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 218)
		else:
			DoubleField.__init__(self, 218, data)

class BenchmarkCurveCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 220)
		else:
			StringField.__init__(self, 220, data)

class BenchmarkCurveName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 221)
		else:
			StringField.__init__(self, 221, data)

class BenchmarkCurvePoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 222)
		else:
			StringField.__init__(self, 222, data)

class CouponPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 224)
		else:
			StringField.__init__(self, 224, data)

class IssueDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 225)
		else:
			StringField.__init__(self, 225, data)

class RepurchaseTerm(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 226)
		else:
			IntField.__init__(self, 226, data)

class RepurchaseRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 227)
		else:
			DoubleField.__init__(self, 227, data)

class Factor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 228)
		else:
			DoubleField.__init__(self, 228, data)

class TradeOriginationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 229)
		else:
			StringField.__init__(self, 229, data)

class ExDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 230)
		else:
			StringField.__init__(self, 230, data)

class NoStipulations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 232)
		else:
			IntField.__init__(self, 232, data)

class StipulationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 233)
		else:
			StringField.__init__(self, 233, data)

class StipulationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 234)
		else:
			StringField.__init__(self, 234, data)

class YieldType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 235)
		else:
			StringField.__init__(self, 235, data)

class Yield(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 236)
		else:
			DoubleField.__init__(self, 236, data)

class TotalTakedown(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 237)
		else:
			DoubleField.__init__(self, 237, data)

class Concession(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 238)
		else:
			DoubleField.__init__(self, 238, data)

class RepoCollateralSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 239)
		else:
			StringField.__init__(self, 239, data)

class RedemptionDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 240)
		else:
			StringField.__init__(self, 240, data)

class UnderlyingCouponPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 241)
		else:
			StringField.__init__(self, 241, data)

class UnderlyingIssueDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 242)
		else:
			StringField.__init__(self, 242, data)

class UnderlyingRepoCollateralSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 243)
		else:
			StringField.__init__(self, 243, data)

class UnderlyingRepurchaseTerm(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 244)
		else:
			IntField.__init__(self, 244, data)

class UnderlyingRepurchaseRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 245)
		else:
			DoubleField.__init__(self, 245, data)

class UnderlyingFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 246)
		else:
			DoubleField.__init__(self, 246, data)

class UnderlyingRedemptionDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 247)
		else:
			StringField.__init__(self, 247, data)

class LegCouponPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 248)
		else:
			StringField.__init__(self, 248, data)

class LegIssueDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 249)
		else:
			StringField.__init__(self, 249, data)

class LegRepoCollateralSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 250)
		else:
			StringField.__init__(self, 250, data)

class LegRepurchaseTerm(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 251)
		else:
			IntField.__init__(self, 251, data)

class LegRepurchaseRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 252)
		else:
			DoubleField.__init__(self, 252, data)

class LegFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 253)
		else:
			DoubleField.__init__(self, 253, data)

class LegRedemptionDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 254)
		else:
			StringField.__init__(self, 254, data)

class CreditRating(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 255)
		else:
			StringField.__init__(self, 255, data)

class UnderlyingCreditRating(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 256)
		else:
			StringField.__init__(self, 256, data)

class LegCreditRating(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 257)
		else:
			StringField.__init__(self, 257, data)

class TradedFlatSwitch(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 258)
		else:
			BoolField.__init__(self, 258, data)

class BasisFeatureDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 259)
		else:
			StringField.__init__(self, 259, data)

class BasisFeaturePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 260)
		else:
			DoubleField.__init__(self, 260, data)

class QuoteStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 297)
		else:
			IntField.__init__(self, 297, data)

class UnderlyingSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 305)
		else:
			StringField.__init__(self, 305, data)

class PartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 447)
		else:
			CharField.__init__(self, 447, data)

class PartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 448)
		else:
			StringField.__init__(self, 448, data)

class TotalVolumeTradedDate(UtcDateField):
	def __init__(self, data = None):
		if data == None:
			UtcDateField.__init__(self, 449)
		else:
			UtcDateField.__init__(self, 449, data)

class TotalVolumeTradedTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 450)
		else:
			UtcTimeOnlyField.__init__(self, 450, data)

class NetChgPrevDay(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 451)
		else:
			DoubleField.__init__(self, 451, data)

class PartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 452)
		else:
			IntField.__init__(self, 452, data)

class NoPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 453)
		else:
			IntField.__init__(self, 453, data)

class NoSecurityAltID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 454)
		else:
			IntField.__init__(self, 454, data)

class SecurityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 455)
		else:
			StringField.__init__(self, 455, data)

class SecurityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 456)
		else:
			StringField.__init__(self, 456, data)

class NoUnderlyingSecurityAltID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 457)
		else:
			IntField.__init__(self, 457, data)

class UnderlyingSecurityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 458)
		else:
			StringField.__init__(self, 458, data)

class UnderlyingSecurityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 459)
		else:
			StringField.__init__(self, 459, data)

class Product(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 460)
		else:
			IntField.__init__(self, 460, data)

class CFICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 461)
		else:
			StringField.__init__(self, 461, data)

class UnderlyingProduct(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 462)
		else:
			IntField.__init__(self, 462, data)

class UnderlyingCFICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 463)
		else:
			StringField.__init__(self, 463, data)

class QuantityType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 465)
		else:
			IntField.__init__(self, 465, data)

class BookingRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 466)
		else:
			StringField.__init__(self, 466, data)

class IndividualAllocID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 467)
		else:
			StringField.__init__(self, 467, data)

class RoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 468)
		else:
			CharField.__init__(self, 468, data)

class RoundingModulus(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 469)
		else:
			DoubleField.__init__(self, 469, data)

class CountryOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 470)
		else:
			StringField.__init__(self, 470, data)

class StateOrProvinceOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 471)
		else:
			StringField.__init__(self, 471, data)

class LocaleOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 472)
		else:
			StringField.__init__(self, 472, data)

class NoRegistDtls(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 473)
		else:
			IntField.__init__(self, 473, data)

class MailingDtls(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 474)
		else:
			StringField.__init__(self, 474, data)

class InvestorCountryOfResidence(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 475)
		else:
			StringField.__init__(self, 475, data)

class PaymentRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 476)
		else:
			StringField.__init__(self, 476, data)

class DistribPaymentMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 477)
		else:
			IntField.__init__(self, 477, data)

class CashDistribCurr(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 478)
		else:
			StringField.__init__(self, 478, data)

class CommCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 479)
		else:
			StringField.__init__(self, 479, data)

class CancellationRights(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 480)
		else:
			CharField.__init__(self, 480, data)

class MoneyLaunderingStatus(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 481)
		else:
			CharField.__init__(self, 481, data)

class MailingInst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 482)
		else:
			StringField.__init__(self, 482, data)

class TransBkdTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 483)
		else:
			UtcTimeStampField.__init__(self, 483, data)

class ExecPriceType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 484)
		else:
			CharField.__init__(self, 484, data)

class ExecPriceAdjustment(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 485)
		else:
			DoubleField.__init__(self, 485, data)

class DateOfBirth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 486)
		else:
			StringField.__init__(self, 486, data)

class TradeReportTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 487)
		else:
			IntField.__init__(self, 487, data)

class CardHolderName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 488)
		else:
			StringField.__init__(self, 488, data)

class CardNumber(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 489)
		else:
			StringField.__init__(self, 489, data)

class CardExpDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 490)
		else:
			StringField.__init__(self, 490, data)

class CardIssNo(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 491)
		else:
			StringField.__init__(self, 491, data)

class PaymentMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 492)
		else:
			IntField.__init__(self, 492, data)

class RegistAcctType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 493)
		else:
			StringField.__init__(self, 493, data)

class Designation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 494)
		else:
			StringField.__init__(self, 494, data)

class TaxAdvantageType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 495)
		else:
			IntField.__init__(self, 495, data)

class RegistRejReasonText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 496)
		else:
			StringField.__init__(self, 496, data)

class FundRenewWaiv(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 497)
		else:
			CharField.__init__(self, 497, data)

class CashDistribAgentName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 498)
		else:
			StringField.__init__(self, 498, data)

class CashDistribAgentCode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 499)
		else:
			StringField.__init__(self, 499, data)

class CashDistribAgentAcctNumber(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 500)
		else:
			StringField.__init__(self, 500, data)

class CashDistribPayRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 501)
		else:
			StringField.__init__(self, 501, data)

class CardStartDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 503)
		else:
			StringField.__init__(self, 503, data)

class PaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 504)
		else:
			StringField.__init__(self, 504, data)

class PaymentRemitterID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 505)
		else:
			StringField.__init__(self, 505, data)

class RegistStatus(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 506)
		else:
			CharField.__init__(self, 506, data)

class RegistRejReasonCode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 507)
		else:
			IntField.__init__(self, 507, data)

class RegistRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 508)
		else:
			StringField.__init__(self, 508, data)

class RegistDetls(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 509)
		else:
			StringField.__init__(self, 509, data)

class NoDistribInsts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 510)
		else:
			IntField.__init__(self, 510, data)

class RegistEmail(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 511)
		else:
			StringField.__init__(self, 511, data)

class DistribPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 512)
		else:
			DoubleField.__init__(self, 512, data)

class RegistID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 513)
		else:
			StringField.__init__(self, 513, data)

class RegistTransType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 514)
		else:
			CharField.__init__(self, 514, data)

class ExecValuationPoint(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 515)
		else:
			UtcTimeStampField.__init__(self, 515, data)

class OrderPercent(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 516)
		else:
			DoubleField.__init__(self, 516, data)

class OwnershipType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 517)
		else:
			CharField.__init__(self, 517, data)

class NoContAmts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 518)
		else:
			IntField.__init__(self, 518, data)

class ContAmtType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 519)
		else:
			IntField.__init__(self, 519, data)

class ContAmtValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 520)
		else:
			DoubleField.__init__(self, 520, data)

class ContAmtCurr(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 521)
		else:
			StringField.__init__(self, 521, data)

class OwnerType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 522)
		else:
			IntField.__init__(self, 522, data)

class PartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 523)
		else:
			StringField.__init__(self, 523, data)

class NestedPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 524)
		else:
			StringField.__init__(self, 524, data)

class NestedPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 525)
		else:
			CharField.__init__(self, 525, data)

class SecondaryClOrdID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 526)
		else:
			StringField.__init__(self, 526, data)

class SecondaryExecID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 527)
		else:
			StringField.__init__(self, 527, data)

class OrderCapacity(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 528)
		else:
			CharField.__init__(self, 528, data)

class OrderRestrictions(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 529)
		else:
			StringField.__init__(self, 529, data)

class MassCancelRequestType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 530)
		else:
			CharField.__init__(self, 530, data)

class MassCancelResponse(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 531)
		else:
			CharField.__init__(self, 531, data)

class MassCancelRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 532)
		else:
			IntField.__init__(self, 532, data)

class TotalAffectedOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 533)
		else:
			IntField.__init__(self, 533, data)

class NoAffectedOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 534)
		else:
			IntField.__init__(self, 534, data)

class AffectedOrderID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 535)
		else:
			StringField.__init__(self, 535, data)

class AffectedSecondaryOrderID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 536)
		else:
			StringField.__init__(self, 536, data)

class QuoteType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 537)
		else:
			IntField.__init__(self, 537, data)

class NestedPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 538)
		else:
			IntField.__init__(self, 538, data)

class NoNestedPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 539)
		else:
			IntField.__init__(self, 539, data)

class TotalAccruedInterestAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 540)
		else:
			DoubleField.__init__(self, 540, data)

class MaturityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 541)
		else:
			StringField.__init__(self, 541, data)

class UnderlyingMaturityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 542)
		else:
			StringField.__init__(self, 542, data)

class InstrRegistry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 543)
		else:
			StringField.__init__(self, 543, data)

class CashMargin(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 544)
		else:
			CharField.__init__(self, 544, data)

class NestedPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 545)
		else:
			StringField.__init__(self, 545, data)

class Scope(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 546)
		else:
			StringField.__init__(self, 546, data)

class MDImplicitDelete(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 547)
		else:
			BoolField.__init__(self, 547, data)

class CrossID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 548)
		else:
			StringField.__init__(self, 548, data)

class CrossType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 549)
		else:
			IntField.__init__(self, 549, data)

class CrossPrioritization(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 550)
		else:
			IntField.__init__(self, 550, data)

class OrigCrossID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 551)
		else:
			StringField.__init__(self, 551, data)

class NoSides(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 552)
		else:
			IntField.__init__(self, 552, data)

class NoLegs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 555)
		else:
			IntField.__init__(self, 555, data)

class LegCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 556)
		else:
			StringField.__init__(self, 556, data)

class TotalNumSecurityTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 557)
		else:
			IntField.__init__(self, 557, data)

class NoSecurityTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 558)
		else:
			IntField.__init__(self, 558, data)

class SecurityListRequestType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 559)
		else:
			IntField.__init__(self, 559, data)

class SecurityRequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 560)
		else:
			IntField.__init__(self, 560, data)

class RoundLot(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 561)
		else:
			DoubleField.__init__(self, 561, data)

class MinTradeVol(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 562)
		else:
			DoubleField.__init__(self, 562, data)

class MultiLegRptTypeReq(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 563)
		else:
			IntField.__init__(self, 563, data)

class LegPositionEffect(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 564)
		else:
			CharField.__init__(self, 564, data)

class LegCoveredOrUncovered(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 565)
		else:
			IntField.__init__(self, 565, data)

class LegPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 566)
		else:
			DoubleField.__init__(self, 566, data)

class TradSesStatusRejReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 567)
		else:
			IntField.__init__(self, 567, data)

class TradeRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 568)
		else:
			StringField.__init__(self, 568, data)

class TradeRequestType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 569)
		else:
			IntField.__init__(self, 569, data)

class PreviouslyReported(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 570)
		else:
			BoolField.__init__(self, 570, data)

class TradeReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 571)
		else:
			StringField.__init__(self, 571, data)

class TradeReportRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 572)
		else:
			StringField.__init__(self, 572, data)

class MatchStatus(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 573)
		else:
			CharField.__init__(self, 573, data)

class MatchType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 574)
		else:
			StringField.__init__(self, 574, data)

class OddLot(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 575)
		else:
			BoolField.__init__(self, 575, data)

class NoClearingInstructions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 576)
		else:
			IntField.__init__(self, 576, data)

class ClearingInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 577)
		else:
			IntField.__init__(self, 577, data)

class TradeInputSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 578)
		else:
			StringField.__init__(self, 578, data)

class TradeInputDevice(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 579)
		else:
			StringField.__init__(self, 579, data)

class NoDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 580)
		else:
			IntField.__init__(self, 580, data)

class AccountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 581)
		else:
			IntField.__init__(self, 581, data)

class CustOrderCapacity(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 582)
		else:
			IntField.__init__(self, 582, data)

class ClOrdLinkID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 583)
		else:
			StringField.__init__(self, 583, data)

class MassStatusReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 584)
		else:
			StringField.__init__(self, 584, data)

class MassStatusReqType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 585)
		else:
			IntField.__init__(self, 585, data)

class OrigOrdModTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 586)
		else:
			UtcTimeStampField.__init__(self, 586, data)

class LegSettlmntTyp(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 587)
		else:
			CharField.__init__(self, 587, data)

class LegFutSettDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 588)
		else:
			StringField.__init__(self, 588, data)

class DayBookingInst(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 589)
		else:
			CharField.__init__(self, 589, data)

class BookingUnit(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 590)
		else:
			CharField.__init__(self, 590, data)

class PreallocMethod(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 591)
		else:
			CharField.__init__(self, 591, data)

class UnderlyingCountryOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 592)
		else:
			StringField.__init__(self, 592, data)

class UnderlyingStateOrProvinceOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 593)
		else:
			StringField.__init__(self, 593, data)

class UnderlyingLocaleOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 594)
		else:
			StringField.__init__(self, 594, data)

class UnderlyingInstrRegistry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 595)
		else:
			StringField.__init__(self, 595, data)

class LegCountryOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 596)
		else:
			StringField.__init__(self, 596, data)

class LegStateOrProvinceOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 597)
		else:
			StringField.__init__(self, 597, data)

class LegLocaleOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 598)
		else:
			StringField.__init__(self, 598, data)

class LegInstrRegistry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 599)
		else:
			StringField.__init__(self, 599, data)

class LegSymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 600)
		else:
			StringField.__init__(self, 600, data)

class LegSymbolSfx(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 601)
		else:
			StringField.__init__(self, 601, data)

class LegSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 602)
		else:
			StringField.__init__(self, 602, data)

class LegSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 603)
		else:
			StringField.__init__(self, 603, data)

class NoLegSecurityAltID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 604)
		else:
			IntField.__init__(self, 604, data)

class LegSecurityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 605)
		else:
			StringField.__init__(self, 605, data)

class LegSecurityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 606)
		else:
			StringField.__init__(self, 606, data)

class LegProduct(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 607)
		else:
			IntField.__init__(self, 607, data)

class LegCFICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 608)
		else:
			StringField.__init__(self, 608, data)

class LegSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 609)
		else:
			StringField.__init__(self, 609, data)

class LegMaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 610)
		else:
			StringField.__init__(self, 610, data)

class LegMaturityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 611)
		else:
			StringField.__init__(self, 611, data)

class LegStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 612)
		else:
			DoubleField.__init__(self, 612, data)

class LegOptAttribute(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 613)
		else:
			CharField.__init__(self, 613, data)

class LegContractMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 614)
		else:
			DoubleField.__init__(self, 614, data)

class LegCouponRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 615)
		else:
			DoubleField.__init__(self, 615, data)

class LegSecurityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 616)
		else:
			StringField.__init__(self, 616, data)

class LegIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 617)
		else:
			StringField.__init__(self, 617, data)

class EncodedLegIssuerLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 618)
		else:
			IntField.__init__(self, 618, data)

class EncodedLegIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 619)
		else:
			StringField.__init__(self, 619, data)

class LegSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 620)
		else:
			StringField.__init__(self, 620, data)

class EncodedLegSecurityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 621)
		else:
			IntField.__init__(self, 621, data)

class EncodedLegSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 622)
		else:
			StringField.__init__(self, 622, data)

class LegRatioQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 623)
		else:
			DoubleField.__init__(self, 623, data)

class LegSide(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 624)
		else:
			CharField.__init__(self, 624, data)

class TradingSessionSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 625)
		else:
			StringField.__init__(self, 625, data)

class AllocType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 626)
		else:
			IntField.__init__(self, 626, data)

class MidPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 631)
		else:
			DoubleField.__init__(self, 631, data)

class BidYield(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 632)
		else:
			DoubleField.__init__(self, 632, data)

class MidYield(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 633)
		else:
			DoubleField.__init__(self, 633, data)

class OfferYield(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 634)
		else:
			DoubleField.__init__(self, 634, data)

class ClearingFeeIndicator(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 635)
		else:
			StringField.__init__(self, 635, data)

class WorkingIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 636)
		else:
			BoolField.__init__(self, 636, data)

class LegLastPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 637)
		else:
			DoubleField.__init__(self, 637, data)

class PriorityIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 638)
		else:
			IntField.__init__(self, 638, data)

class PriceImprovement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 639)
		else:
			DoubleField.__init__(self, 639, data)

class Price2(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 640)
		else:
			DoubleField.__init__(self, 640, data)

class LastForwardPoints2(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 641)
		else:
			DoubleField.__init__(self, 641, data)

class BidForwardPoints2(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 642)
		else:
			DoubleField.__init__(self, 642, data)

class OfferForwardPoints2(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 643)
		else:
			DoubleField.__init__(self, 643, data)

class RFQReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 644)
		else:
			StringField.__init__(self, 644, data)

class MktBidPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 645)
		else:
			DoubleField.__init__(self, 645, data)

class MktOfferPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 646)
		else:
			DoubleField.__init__(self, 646, data)

class MinBidSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 647)
		else:
			DoubleField.__init__(self, 647, data)

class MinOfferSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 648)
		else:
			DoubleField.__init__(self, 648, data)

class QuoteStatusReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 649)
		else:
			StringField.__init__(self, 649, data)

class LegalConfirm(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 650)
		else:
			BoolField.__init__(self, 650, data)

class UnderlyingLastPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 651)
		else:
			DoubleField.__init__(self, 651, data)

class UnderlyingLastQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 652)
		else:
			DoubleField.__init__(self, 652, data)

class LegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 654)
		else:
			StringField.__init__(self, 654, data)

class ContraLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 655)
		else:
			StringField.__init__(self, 655, data)

class SettlCurrBidFxRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 656)
		else:
			DoubleField.__init__(self, 656, data)

class SettlCurrOfferFxRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 657)
		else:
			DoubleField.__init__(self, 657, data)

class QuoteRequestRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 658)
		else:
			IntField.__init__(self, 658, data)

class SideComplianceID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 659)
		else:
			StringField.__init__(self, 659, data)

class IOIID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 23)
		else:
			StringField.__init__(self, 23, data)

class NoLinesOfText(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 33)
		else:
			IntField.__init__(self, 33, data)

class SettlType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 63)
		else:
			StringField.__init__(self, 63, data)

class SettlDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 64)
		else:
			StringField.__init__(self, 64, data)

class AvgPxPrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 74)
		else:
			IntField.__init__(self, 74, data)

class SettlDate2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 193)
		else:
			StringField.__init__(self, 193, data)

class PegOffsetValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 211)
		else:
			DoubleField.__init__(self, 211, data)

class OpenCloseSettlFlag(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 286)
		else:
			StringField.__init__(self, 286, data)

class TotNoQuoteEntries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 304)
		else:
			IntField.__init__(self, 304, data)

class DiscretionOffsetValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 389)
		else:
			DoubleField.__init__(self, 389, data)

class TotNoRelatedSym(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 393)
		else:
			IntField.__init__(self, 393, data)

class BidTradeType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 418)
		else:
			CharField.__init__(self, 418, data)

class CardIssNum(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 491)
		else:
			StringField.__init__(self, 491, data)

class CashDistribAgentAcctName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 502)
		else:
			StringField.__init__(self, 502, data)

class RegistDtls(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 509)
		else:
			StringField.__init__(self, 509, data)

class TotNoSecurityTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 557)
		else:
			IntField.__init__(self, 557, data)

class LegSettlType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 587)
		else:
			StringField.__init__(self, 587, data)

class LegSettlDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 588)
		else:
			StringField.__init__(self, 588, data)

class AcctIDSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 660)
		else:
			IntField.__init__(self, 660, data)

class AllocAcctIDSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 661)
		else:
			IntField.__init__(self, 661, data)

class BenchmarkPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 662)
		else:
			DoubleField.__init__(self, 662, data)

class BenchmarkPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 663)
		else:
			IntField.__init__(self, 663, data)

class ConfirmID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 664)
		else:
			StringField.__init__(self, 664, data)

class ConfirmStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 665)
		else:
			IntField.__init__(self, 665, data)

class ConfirmTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 666)
		else:
			IntField.__init__(self, 666, data)

class ContractSettlMonth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 667)
		else:
			StringField.__init__(self, 667, data)

class DeliveryForm(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 668)
		else:
			IntField.__init__(self, 668, data)

class LastParPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 669)
		else:
			DoubleField.__init__(self, 669, data)

class NoLegAllocs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 670)
		else:
			IntField.__init__(self, 670, data)

class LegAllocAccount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 671)
		else:
			StringField.__init__(self, 671, data)

class LegIndividualAllocID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 672)
		else:
			StringField.__init__(self, 672, data)

class LegAllocQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 673)
		else:
			DoubleField.__init__(self, 673, data)

class LegAllocAcctIDSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 674)
		else:
			IntField.__init__(self, 674, data)

class LegSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 675)
		else:
			StringField.__init__(self, 675, data)

class LegBenchmarkCurveCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 676)
		else:
			StringField.__init__(self, 676, data)

class LegBenchmarkCurveName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 677)
		else:
			StringField.__init__(self, 677, data)

class LegBenchmarkCurvePoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 678)
		else:
			StringField.__init__(self, 678, data)

class LegBenchmarkPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 679)
		else:
			DoubleField.__init__(self, 679, data)

class LegBenchmarkPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 680)
		else:
			IntField.__init__(self, 680, data)

class LegBidPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 681)
		else:
			DoubleField.__init__(self, 681, data)

class LegIOIQty(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 682)
		else:
			StringField.__init__(self, 682, data)

class NoLegStipulations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 683)
		else:
			IntField.__init__(self, 683, data)

class LegOfferPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 684)
		else:
			DoubleField.__init__(self, 684, data)

class LegPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 686)
		else:
			IntField.__init__(self, 686, data)

class LegQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 687)
		else:
			DoubleField.__init__(self, 687, data)

class LegStipulationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 688)
		else:
			StringField.__init__(self, 688, data)

class LegStipulationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 689)
		else:
			StringField.__init__(self, 689, data)

class LegSwapType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 690)
		else:
			IntField.__init__(self, 690, data)

class Pool(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 691)
		else:
			StringField.__init__(self, 691, data)

class QuotePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 692)
		else:
			IntField.__init__(self, 692, data)

class QuoteRespID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 693)
		else:
			StringField.__init__(self, 693, data)

class QuoteRespType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 694)
		else:
			IntField.__init__(self, 694, data)

class QuoteQualifier(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 695)
		else:
			CharField.__init__(self, 695, data)

class YieldRedemptionDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 696)
		else:
			StringField.__init__(self, 696, data)

class YieldRedemptionPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 697)
		else:
			DoubleField.__init__(self, 697, data)

class YieldRedemptionPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 698)
		else:
			IntField.__init__(self, 698, data)

class BenchmarkSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 699)
		else:
			StringField.__init__(self, 699, data)

class ReversalIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 700)
		else:
			BoolField.__init__(self, 700, data)

class YieldCalcDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 701)
		else:
			StringField.__init__(self, 701, data)

class NoPositions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 702)
		else:
			IntField.__init__(self, 702, data)

class PosType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 703)
		else:
			StringField.__init__(self, 703, data)

class LongQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 704)
		else:
			DoubleField.__init__(self, 704, data)

class ShortQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 705)
		else:
			DoubleField.__init__(self, 705, data)

class PosQtyStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 706)
		else:
			IntField.__init__(self, 706, data)

class PosAmtType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 707)
		else:
			StringField.__init__(self, 707, data)

class PosAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 708)
		else:
			DoubleField.__init__(self, 708, data)

class PosTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 709)
		else:
			IntField.__init__(self, 709, data)

class PosReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 710)
		else:
			StringField.__init__(self, 710, data)

class NoUnderlyings(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 711)
		else:
			IntField.__init__(self, 711, data)

class PosMaintAction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 712)
		else:
			IntField.__init__(self, 712, data)

class OrigPosReqRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 713)
		else:
			StringField.__init__(self, 713, data)

class PosMaintRptRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 714)
		else:
			StringField.__init__(self, 714, data)

class ClearingBusinessDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 715)
		else:
			StringField.__init__(self, 715, data)

class SettlSessID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 716)
		else:
			StringField.__init__(self, 716, data)

class SettlSessSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 717)
		else:
			StringField.__init__(self, 717, data)

class AdjustmentType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 718)
		else:
			IntField.__init__(self, 718, data)

class ContraryInstructionIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 719)
		else:
			BoolField.__init__(self, 719, data)

class PriorSpreadIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 720)
		else:
			BoolField.__init__(self, 720, data)

class PosMaintRptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 721)
		else:
			StringField.__init__(self, 721, data)

class PosMaintStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 722)
		else:
			IntField.__init__(self, 722, data)

class PosMaintResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 723)
		else:
			IntField.__init__(self, 723, data)

class PosReqType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 724)
		else:
			IntField.__init__(self, 724, data)

class ResponseTransportType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 725)
		else:
			IntField.__init__(self, 725, data)

class ResponseDestination(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 726)
		else:
			StringField.__init__(self, 726, data)

class TotalNumPosReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 727)
		else:
			IntField.__init__(self, 727, data)

class PosReqResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 728)
		else:
			IntField.__init__(self, 728, data)

class PosReqStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 729)
		else:
			IntField.__init__(self, 729, data)

class SettlPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 730)
		else:
			DoubleField.__init__(self, 730, data)

class SettlPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 731)
		else:
			IntField.__init__(self, 731, data)

class UnderlyingSettlPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 732)
		else:
			DoubleField.__init__(self, 732, data)

class UnderlyingSettlPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 733)
		else:
			IntField.__init__(self, 733, data)

class PriorSettlPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 734)
		else:
			DoubleField.__init__(self, 734, data)

class NoQuoteQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 735)
		else:
			IntField.__init__(self, 735, data)

class AllocSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 736)
		else:
			StringField.__init__(self, 736, data)

class AllocSettlCurrAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 737)
		else:
			DoubleField.__init__(self, 737, data)

class InterestAtMaturity(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 738)
		else:
			DoubleField.__init__(self, 738, data)

class LegDatedDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 739)
		else:
			StringField.__init__(self, 739, data)

class LegPool(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 740)
		else:
			StringField.__init__(self, 740, data)

class AllocInterestAtMaturity(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 741)
		else:
			DoubleField.__init__(self, 741, data)

class AllocAccruedInterestAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 742)
		else:
			DoubleField.__init__(self, 742, data)

class DeliveryDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 743)
		else:
			StringField.__init__(self, 743, data)

class AssignmentMethod(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 744)
		else:
			CharField.__init__(self, 744, data)

class AssignmentUnit(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 745)
		else:
			DoubleField.__init__(self, 745, data)

class OpenInterest(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 746)
		else:
			DoubleField.__init__(self, 746, data)

class ExerciseMethod(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 747)
		else:
			CharField.__init__(self, 747, data)

class TotNumTradeReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 748)
		else:
			IntField.__init__(self, 748, data)

class TradeRequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 749)
		else:
			IntField.__init__(self, 749, data)

class TradeRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 750)
		else:
			IntField.__init__(self, 750, data)

class TradeReportRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 751)
		else:
			IntField.__init__(self, 751, data)

class SideMultiLegReportingType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 752)
		else:
			IntField.__init__(self, 752, data)

class NoPosAmt(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 753)
		else:
			IntField.__init__(self, 753, data)

class AutoAcceptIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 754)
		else:
			BoolField.__init__(self, 754, data)

class AllocReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 755)
		else:
			StringField.__init__(self, 755, data)

class NoNested2PartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 756)
		else:
			IntField.__init__(self, 756, data)

class Nested2PartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 757)
		else:
			StringField.__init__(self, 757, data)

class Nested2PartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 758)
		else:
			CharField.__init__(self, 758, data)

class Nested2PartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 759)
		else:
			IntField.__init__(self, 759, data)

class Nested2PartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 760)
		else:
			StringField.__init__(self, 760, data)

class BenchmarkSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 761)
		else:
			StringField.__init__(self, 761, data)

class SecuritySubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 762)
		else:
			StringField.__init__(self, 762, data)

class UnderlyingSecuritySubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 763)
		else:
			StringField.__init__(self, 763, data)

class LegSecuritySubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 764)
		else:
			StringField.__init__(self, 764, data)

class AllowableOneSidednessPct(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 765)
		else:
			DoubleField.__init__(self, 765, data)

class AllowableOneSidednessValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 766)
		else:
			DoubleField.__init__(self, 766, data)

class AllowableOneSidednessCurr(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 767)
		else:
			StringField.__init__(self, 767, data)

class NoTrdRegTimestamps(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 768)
		else:
			IntField.__init__(self, 768, data)

class TrdRegTimestamp(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 769)
		else:
			UtcTimeStampField.__init__(self, 769, data)

class TrdRegTimestampType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 770)
		else:
			IntField.__init__(self, 770, data)

class TrdRegTimestampOrigin(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 771)
		else:
			StringField.__init__(self, 771, data)

class ConfirmRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 772)
		else:
			StringField.__init__(self, 772, data)

class ConfirmType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 773)
		else:
			IntField.__init__(self, 773, data)

class ConfirmRejReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 774)
		else:
			IntField.__init__(self, 774, data)

class BookingType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 775)
		else:
			IntField.__init__(self, 775, data)

class IndividualAllocRejCode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 776)
		else:
			IntField.__init__(self, 776, data)

class SettlInstMsgID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 777)
		else:
			StringField.__init__(self, 777, data)

class NoSettlInst(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 778)
		else:
			IntField.__init__(self, 778, data)

class LastUpdateTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 779)
		else:
			UtcTimeStampField.__init__(self, 779, data)

class AllocSettlInstType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 780)
		else:
			IntField.__init__(self, 780, data)

class NoSettlPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 781)
		else:
			IntField.__init__(self, 781, data)

class SettlPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 782)
		else:
			StringField.__init__(self, 782, data)

class SettlPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 783)
		else:
			CharField.__init__(self, 783, data)

class SettlPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 784)
		else:
			IntField.__init__(self, 784, data)

class SettlPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 785)
		else:
			StringField.__init__(self, 785, data)

class SettlPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 786)
		else:
			IntField.__init__(self, 786, data)

class DlvyInstType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 787)
		else:
			CharField.__init__(self, 787, data)

class TerminationType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 788)
		else:
			IntField.__init__(self, 788, data)

class OrdStatusReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 790)
		else:
			StringField.__init__(self, 790, data)

class SettlInstReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 791)
		else:
			StringField.__init__(self, 791, data)

class SettlInstReqRejCode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 792)
		else:
			IntField.__init__(self, 792, data)

class SecondaryAllocID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 793)
		else:
			StringField.__init__(self, 793, data)

class AllocReportType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 794)
		else:
			IntField.__init__(self, 794, data)

class AllocReportRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 795)
		else:
			StringField.__init__(self, 795, data)

class AllocCancReplaceReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 796)
		else:
			IntField.__init__(self, 796, data)

class CopyMsgIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 797)
		else:
			BoolField.__init__(self, 797, data)

class AllocAccountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 798)
		else:
			IntField.__init__(self, 798, data)

class OrderAvgPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 799)
		else:
			DoubleField.__init__(self, 799, data)

class OrderBookingQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 800)
		else:
			DoubleField.__init__(self, 800, data)

class NoSettlPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 801)
		else:
			IntField.__init__(self, 801, data)

class NoPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 802)
		else:
			IntField.__init__(self, 802, data)

class PartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 803)
		else:
			IntField.__init__(self, 803, data)

class NoNestedPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 804)
		else:
			IntField.__init__(self, 804, data)

class NestedPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 805)
		else:
			IntField.__init__(self, 805, data)

class NoNested2PartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 806)
		else:
			IntField.__init__(self, 806, data)

class Nested2PartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 807)
		else:
			IntField.__init__(self, 807, data)

class AllocIntermedReqType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 808)
		else:
			IntField.__init__(self, 808, data)

class UnderlyingPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 810)
		else:
			DoubleField.__init__(self, 810, data)

class PriceDelta(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 811)
		else:
			DoubleField.__init__(self, 811, data)

class ApplQueueMax(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 812)
		else:
			IntField.__init__(self, 812, data)

class ApplQueueDepth(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 813)
		else:
			IntField.__init__(self, 813, data)

class ApplQueueResolution(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 814)
		else:
			IntField.__init__(self, 814, data)

class ApplQueueAction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 815)
		else:
			IntField.__init__(self, 815, data)

class NoAltMDSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 816)
		else:
			IntField.__init__(self, 816, data)

class AltMDSourceID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 817)
		else:
			StringField.__init__(self, 817, data)

class SecondaryTradeReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 818)
		else:
			StringField.__init__(self, 818, data)

class AvgPxIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 819)
		else:
			IntField.__init__(self, 819, data)

class TradeLinkID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 820)
		else:
			StringField.__init__(self, 820, data)

class OrderInputDevice(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 821)
		else:
			StringField.__init__(self, 821, data)

class UnderlyingTradingSessionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 822)
		else:
			StringField.__init__(self, 822, data)

class UnderlyingTradingSessionSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 823)
		else:
			StringField.__init__(self, 823, data)

class TradeLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 824)
		else:
			StringField.__init__(self, 824, data)

class ExchangeRule(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 825)
		else:
			StringField.__init__(self, 825, data)

class TradeAllocIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 826)
		else:
			IntField.__init__(self, 826, data)

class ExpirationCycle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 827)
		else:
			IntField.__init__(self, 827, data)

class TrdType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 828)
		else:
			IntField.__init__(self, 828, data)

class TrdSubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 829)
		else:
			IntField.__init__(self, 829, data)

class TransferReason(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 830)
		else:
			StringField.__init__(self, 830, data)

class TotNumAssignmentReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 832)
		else:
			IntField.__init__(self, 832, data)

class AsgnRptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 833)
		else:
			StringField.__init__(self, 833, data)

class ThresholdAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 834)
		else:
			DoubleField.__init__(self, 834, data)

class PegMoveType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 835)
		else:
			IntField.__init__(self, 835, data)

class PegOffsetType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 836)
		else:
			IntField.__init__(self, 836, data)

class PegLimitType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 837)
		else:
			IntField.__init__(self, 837, data)

class PegRoundDirection(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 838)
		else:
			IntField.__init__(self, 838, data)

class PeggedPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 839)
		else:
			DoubleField.__init__(self, 839, data)

class PegScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 840)
		else:
			IntField.__init__(self, 840, data)

class DiscretionMoveType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 841)
		else:
			IntField.__init__(self, 841, data)

class DiscretionOffsetType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 842)
		else:
			IntField.__init__(self, 842, data)

class DiscretionLimitType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 843)
		else:
			IntField.__init__(self, 843, data)

class DiscretionRoundDirection(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 844)
		else:
			IntField.__init__(self, 844, data)

class DiscretionPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 845)
		else:
			DoubleField.__init__(self, 845, data)

class DiscretionScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 846)
		else:
			IntField.__init__(self, 846, data)

class TargetStrategy(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 847)
		else:
			IntField.__init__(self, 847, data)

class TargetStrategyParameters(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 848)
		else:
			StringField.__init__(self, 848, data)

class ParticipationRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 849)
		else:
			DoubleField.__init__(self, 849, data)

class TargetStrategyPerformance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 850)
		else:
			DoubleField.__init__(self, 850, data)

class LastLiquidityInd(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 851)
		else:
			IntField.__init__(self, 851, data)

class PublishTrdIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 852)
		else:
			BoolField.__init__(self, 852, data)

class ShortSaleReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 853)
		else:
			IntField.__init__(self, 853, data)

class QtyType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 854)
		else:
			IntField.__init__(self, 854, data)

class SecondaryTrdType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 855)
		else:
			IntField.__init__(self, 855, data)

class TradeReportType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 856)
		else:
			IntField.__init__(self, 856, data)

class AllocNoOrdersType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 857)
		else:
			IntField.__init__(self, 857, data)

class SharedCommission(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 858)
		else:
			DoubleField.__init__(self, 858, data)

class ConfirmReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 859)
		else:
			StringField.__init__(self, 859, data)

class AvgParPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 860)
		else:
			DoubleField.__init__(self, 860, data)

class ReportedPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 861)
		else:
			DoubleField.__init__(self, 861, data)

class NoCapacities(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 862)
		else:
			IntField.__init__(self, 862, data)

class OrderCapacityQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 863)
		else:
			DoubleField.__init__(self, 863, data)

class NoEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 864)
		else:
			IntField.__init__(self, 864, data)

class EventType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 865)
		else:
			IntField.__init__(self, 865, data)

class EventDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 866)
		else:
			StringField.__init__(self, 866, data)

class EventPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 867)
		else:
			DoubleField.__init__(self, 867, data)

class EventText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 868)
		else:
			StringField.__init__(self, 868, data)

class PctAtRisk(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 869)
		else:
			DoubleField.__init__(self, 869, data)

class NoInstrAttrib(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 870)
		else:
			IntField.__init__(self, 870, data)

class InstrAttribType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 871)
		else:
			IntField.__init__(self, 871, data)

class InstrAttribValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 872)
		else:
			StringField.__init__(self, 872, data)

class DatedDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 873)
		else:
			StringField.__init__(self, 873, data)

class InterestAccrualDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 874)
		else:
			StringField.__init__(self, 874, data)

class CPProgram(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 875)
		else:
			IntField.__init__(self, 875, data)

class CPRegType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 876)
		else:
			StringField.__init__(self, 876, data)

class UnderlyingCPProgram(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 877)
		else:
			IntField.__init__(self, 877, data)

class UnderlyingCPRegType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 878)
		else:
			StringField.__init__(self, 878, data)

class UnderlyingQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 879)
		else:
			DoubleField.__init__(self, 879, data)

class TrdMatchID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 880)
		else:
			StringField.__init__(self, 880, data)

class SecondaryTradeReportRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 881)
		else:
			StringField.__init__(self, 881, data)

class UnderlyingDirtyPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 882)
		else:
			DoubleField.__init__(self, 882, data)

class UnderlyingEndPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 883)
		else:
			DoubleField.__init__(self, 883, data)

class UnderlyingStartValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 884)
		else:
			DoubleField.__init__(self, 884, data)

class UnderlyingCurrentValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 885)
		else:
			DoubleField.__init__(self, 885, data)

class UnderlyingEndValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 886)
		else:
			DoubleField.__init__(self, 886, data)

class NoUnderlyingStips(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 887)
		else:
			IntField.__init__(self, 887, data)

class UnderlyingStipType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 888)
		else:
			StringField.__init__(self, 888, data)

class UnderlyingStipValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 889)
		else:
			StringField.__init__(self, 889, data)

class MaturityNetMoney(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 890)
		else:
			DoubleField.__init__(self, 890, data)

class MiscFeeBasis(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 891)
		else:
			IntField.__init__(self, 891, data)

class TotNoAllocs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 892)
		else:
			IntField.__init__(self, 892, data)

class LastFragment(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 893)
		else:
			BoolField.__init__(self, 893, data)

class CollReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 894)
		else:
			StringField.__init__(self, 894, data)

class CollAsgnReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 895)
		else:
			IntField.__init__(self, 895, data)

class CollInquiryQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 896)
		else:
			IntField.__init__(self, 896, data)

class NoTrades(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 897)
		else:
			IntField.__init__(self, 897, data)

class MarginRatio(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 898)
		else:
			DoubleField.__init__(self, 898, data)

class MarginExcess(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 899)
		else:
			DoubleField.__init__(self, 899, data)

class TotalNetValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 900)
		else:
			DoubleField.__init__(self, 900, data)

class CashOutstanding(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 901)
		else:
			DoubleField.__init__(self, 901, data)

class CollAsgnID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 902)
		else:
			StringField.__init__(self, 902, data)

class CollAsgnTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 903)
		else:
			IntField.__init__(self, 903, data)

class CollRespID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 904)
		else:
			StringField.__init__(self, 904, data)

class CollAsgnRespType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 905)
		else:
			IntField.__init__(self, 905, data)

class CollAsgnRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 906)
		else:
			IntField.__init__(self, 906, data)

class CollAsgnRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 907)
		else:
			StringField.__init__(self, 907, data)

class CollRptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 908)
		else:
			StringField.__init__(self, 908, data)

class CollInquiryID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 909)
		else:
			StringField.__init__(self, 909, data)

class CollStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 910)
		else:
			IntField.__init__(self, 910, data)

class TotNumReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 911)
		else:
			IntField.__init__(self, 911, data)

class LastRptRequested(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 912)
		else:
			BoolField.__init__(self, 912, data)

class AgreementDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 913)
		else:
			StringField.__init__(self, 913, data)

class AgreementID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 914)
		else:
			StringField.__init__(self, 914, data)

class AgreementDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 915)
		else:
			StringField.__init__(self, 915, data)

class StartDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 916)
		else:
			StringField.__init__(self, 916, data)

class EndDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 917)
		else:
			StringField.__init__(self, 917, data)

class AgreementCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 918)
		else:
			StringField.__init__(self, 918, data)

class DeliveryType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 919)
		else:
			IntField.__init__(self, 919, data)

class EndAccruedInterestAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 920)
		else:
			DoubleField.__init__(self, 920, data)

class StartCash(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 921)
		else:
			DoubleField.__init__(self, 921, data)

class EndCash(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 922)
		else:
			DoubleField.__init__(self, 922, data)

class UserRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 923)
		else:
			StringField.__init__(self, 923, data)

class UserRequestType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 924)
		else:
			IntField.__init__(self, 924, data)

class UserStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 926)
		else:
			IntField.__init__(self, 926, data)

class UserStatusText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 927)
		else:
			StringField.__init__(self, 927, data)

class StatusValue(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 928)
		else:
			IntField.__init__(self, 928, data)

class StatusText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 929)
		else:
			StringField.__init__(self, 929, data)

class RefCompID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 930)
		else:
			StringField.__init__(self, 930, data)

class RefSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 931)
		else:
			StringField.__init__(self, 931, data)

class NetworkResponseID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 932)
		else:
			StringField.__init__(self, 932, data)

class NetworkRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 933)
		else:
			StringField.__init__(self, 933, data)

class LastNetworkResponseID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 934)
		else:
			StringField.__init__(self, 934, data)

class NetworkRequestType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 935)
		else:
			IntField.__init__(self, 935, data)

class NoCompIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 936)
		else:
			IntField.__init__(self, 936, data)

class NetworkStatusResponseType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 937)
		else:
			IntField.__init__(self, 937, data)

class NoCollInquiryQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 938)
		else:
			IntField.__init__(self, 938, data)

class TrdRptStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 939)
		else:
			IntField.__init__(self, 939, data)

class AffirmStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 940)
		else:
			IntField.__init__(self, 940, data)

class UnderlyingStrikeCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 941)
		else:
			StringField.__init__(self, 941, data)

class LegStrikeCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 942)
		else:
			StringField.__init__(self, 942, data)

class TimeBracket(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 943)
		else:
			StringField.__init__(self, 943, data)

class CollAction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 944)
		else:
			IntField.__init__(self, 944, data)

class CollInquiryStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 945)
		else:
			IntField.__init__(self, 945, data)

class CollInquiryResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 946)
		else:
			IntField.__init__(self, 946, data)

class StrikeCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 947)
		else:
			StringField.__init__(self, 947, data)

class NoNested3PartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 948)
		else:
			IntField.__init__(self, 948, data)

class Nested3PartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 949)
		else:
			StringField.__init__(self, 949, data)

class Nested3PartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 950)
		else:
			CharField.__init__(self, 950, data)

class Nested3PartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 951)
		else:
			IntField.__init__(self, 951, data)

class NoNested3PartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 952)
		else:
			IntField.__init__(self, 952, data)

class Nested3PartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 953)
		else:
			StringField.__init__(self, 953, data)

class Nested3PartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 954)
		else:
			IntField.__init__(self, 954, data)

class LegContractSettlMonth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 955)
		else:
			StringField.__init__(self, 955, data)

class LegInterestAccrualDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 956)
		else:
			StringField.__init__(self, 956, data)

class LegOrderQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 685)
		else:
			DoubleField.__init__(self, 685, data)

class NoStrategyParameters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 957)
		else:
			IntField.__init__(self, 957, data)

class StrategyParameterName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 958)
		else:
			StringField.__init__(self, 958, data)

class StrategyParameterType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 959)
		else:
			IntField.__init__(self, 959, data)

class StrategyParameterValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 960)
		else:
			StringField.__init__(self, 960, data)

class HostCrossID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 961)
		else:
			StringField.__init__(self, 961, data)

class SideTimeInForce(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 962)
		else:
			UtcTimeStampField.__init__(self, 962, data)

class MDReportID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 963)
		else:
			IntField.__init__(self, 963, data)

class SecurityReportID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 964)
		else:
			IntField.__init__(self, 964, data)

class SecurityStatus(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 965)
		else:
			StringField.__init__(self, 965, data)

class SettleOnOpenFlag(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 966)
		else:
			StringField.__init__(self, 966, data)

class StrikeMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 967)
		else:
			DoubleField.__init__(self, 967, data)

class StrikeValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 968)
		else:
			DoubleField.__init__(self, 968, data)

class MinPriceIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 969)
		else:
			DoubleField.__init__(self, 969, data)

class PositionLimit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 970)
		else:
			IntField.__init__(self, 970, data)

class NTPositionLimit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 971)
		else:
			IntField.__init__(self, 971, data)

class UnderlyingAllocationPercent(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 972)
		else:
			DoubleField.__init__(self, 972, data)

class UnderlyingCashAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 973)
		else:
			DoubleField.__init__(self, 973, data)

class UnderlyingCashType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 974)
		else:
			StringField.__init__(self, 974, data)

class UnderlyingSettlementType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 975)
		else:
			IntField.__init__(self, 975, data)

class QuantityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 976)
		else:
			StringField.__init__(self, 976, data)

class ContIntRptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 977)
		else:
			StringField.__init__(self, 977, data)

class LateIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 978)
		else:
			BoolField.__init__(self, 978, data)

class InputSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 979)
		else:
			StringField.__init__(self, 979, data)

class SecurityUpdateAction(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 980)
		else:
			CharField.__init__(self, 980, data)

class NoExpiration(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 981)
		else:
			IntField.__init__(self, 981, data)

class ExpType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 982)
		else:
			IntField.__init__(self, 982, data)

class ExpQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 983)
		else:
			DoubleField.__init__(self, 983, data)

class NoUnderlyingAmounts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 984)
		else:
			IntField.__init__(self, 984, data)

class UnderlyingPayAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 985)
		else:
			DoubleField.__init__(self, 985, data)

class UnderlyingCollectAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 986)
		else:
			DoubleField.__init__(self, 986, data)

class UnderlyingSettlementDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 987)
		else:
			StringField.__init__(self, 987, data)

class UnderlyingSettlementStatus(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 988)
		else:
			StringField.__init__(self, 988, data)

class SecondaryIndividualAllocID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 989)
		else:
			StringField.__init__(self, 989, data)

class LegReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 990)
		else:
			StringField.__init__(self, 990, data)

class RndPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 991)
		else:
			DoubleField.__init__(self, 991, data)

class IndividualAllocType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 992)
		else:
			IntField.__init__(self, 992, data)

class AllocCustomerCapacity(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 993)
		else:
			StringField.__init__(self, 993, data)

class TierCode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 994)
		else:
			StringField.__init__(self, 994, data)

class UnitofMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 996)
		else:
			StringField.__init__(self, 996, data)

class TimeUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 997)
		else:
			StringField.__init__(self, 997, data)

class UnderlyingUnitofMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 998)
		else:
			StringField.__init__(self, 998, data)

class LegUnitofMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 999)
		else:
			StringField.__init__(self, 999, data)

class UnderlyingTimeUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1000)
		else:
			StringField.__init__(self, 1000, data)

class LegTimeUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1001)
		else:
			StringField.__init__(self, 1001, data)

class AllocMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1002)
		else:
			IntField.__init__(self, 1002, data)

class TradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1003)
		else:
			StringField.__init__(self, 1003, data)

class SideTradeReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1005)
		else:
			StringField.__init__(self, 1005, data)

class SideFillStationCd(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1006)
		else:
			StringField.__init__(self, 1006, data)

class SideReasonCd(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1007)
		else:
			StringField.__init__(self, 1007, data)

class SideTrdSubTyp(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1008)
		else:
			IntField.__init__(self, 1008, data)

class SideQty(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1009)
		else:
			IntField.__init__(self, 1009, data)

class MessageEventSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1011)
		else:
			StringField.__init__(self, 1011, data)

class SideTrdRegTimestamp(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 1012)
		else:
			UtcTimeStampField.__init__(self, 1012, data)

class SideTrdRegTimestampType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1013)
		else:
			IntField.__init__(self, 1013, data)

class SideTrdRegTimestampSrc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1014)
		else:
			StringField.__init__(self, 1014, data)

class AsOfIndicator(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1015)
		else:
			CharField.__init__(self, 1015, data)

class NoSideTrdRegTS(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1016)
		else:
			IntField.__init__(self, 1016, data)

class LegOptionRatio(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1017)
		else:
			DoubleField.__init__(self, 1017, data)

class NoInstrumentParties(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1018)
		else:
			IntField.__init__(self, 1018, data)

class InstrumentPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1019)
		else:
			StringField.__init__(self, 1019, data)

class TradeVolume(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1020)
		else:
			DoubleField.__init__(self, 1020, data)

class MDBookType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1021)
		else:
			IntField.__init__(self, 1021, data)

class MDFeedType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1022)
		else:
			StringField.__init__(self, 1022, data)

class MDPriceLevel(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1023)
		else:
			IntField.__init__(self, 1023, data)

class MDOriginType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1024)
		else:
			IntField.__init__(self, 1024, data)

class FirstPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1025)
		else:
			DoubleField.__init__(self, 1025, data)

class MDEntrySpotRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1026)
		else:
			DoubleField.__init__(self, 1026, data)

class MDEntryForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1027)
		else:
			DoubleField.__init__(self, 1027, data)

class ManualOrderIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1028)
		else:
			BoolField.__init__(self, 1028, data)

class CustDirectedOrder(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1029)
		else:
			BoolField.__init__(self, 1029, data)

class ReceivedDeptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1030)
		else:
			StringField.__init__(self, 1030, data)

class CustOrderHandlingInst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1031)
		else:
			StringField.__init__(self, 1031, data)

class OrderHandlingInstSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1032)
		else:
			IntField.__init__(self, 1032, data)

class DeskType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1033)
		else:
			StringField.__init__(self, 1033, data)

class DeskTypeSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1034)
		else:
			IntField.__init__(self, 1034, data)

class DeskOrderHandlingInst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1035)
		else:
			StringField.__init__(self, 1035, data)

class ExecAckStatus(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1036)
		else:
			CharField.__init__(self, 1036, data)

class UnderlyingDeliveryAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1037)
		else:
			DoubleField.__init__(self, 1037, data)

class UnderlyingCapValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1038)
		else:
			DoubleField.__init__(self, 1038, data)

class UnderlyingSettlMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1039)
		else:
			StringField.__init__(self, 1039, data)

class SecondaryTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1040)
		else:
			StringField.__init__(self, 1040, data)

class FirmTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1041)
		else:
			StringField.__init__(self, 1041, data)

class SecondaryFirmTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1042)
		else:
			StringField.__init__(self, 1042, data)

class CollApplType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1043)
		else:
			IntField.__init__(self, 1043, data)

class UnderlyingAdjustedQuantity(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1044)
		else:
			DoubleField.__init__(self, 1044, data)

class UnderlyingFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1045)
		else:
			DoubleField.__init__(self, 1045, data)

class UnderlyingFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1046)
		else:
			CharField.__init__(self, 1046, data)

class AllocPositionEffect(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1047)
		else:
			CharField.__init__(self, 1047, data)

class DealingCapacity(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1048)
		else:
			CharField.__init__(self, 1048, data)

class InstrmtAssignmentMethod(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1049)
		else:
			CharField.__init__(self, 1049, data)

class InstrumentPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1050)
		else:
			CharField.__init__(self, 1050, data)

class InstrumentPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1051)
		else:
			IntField.__init__(self, 1051, data)

class NoInstrumentPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1052)
		else:
			IntField.__init__(self, 1052, data)

class InstrumentPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1053)
		else:
			StringField.__init__(self, 1053, data)

class InstrumentPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1054)
		else:
			IntField.__init__(self, 1054, data)

class PositionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1055)
		else:
			StringField.__init__(self, 1055, data)

class CalculatedCcyLastQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1056)
		else:
			DoubleField.__init__(self, 1056, data)

class AggressorIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1057)
		else:
			BoolField.__init__(self, 1057, data)

class NoUndlyInstrumentParties(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1058)
		else:
			IntField.__init__(self, 1058, data)

class UndlyInstrumentPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1059)
		else:
			StringField.__init__(self, 1059, data)

class UndlyInstrumentPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1060)
		else:
			CharField.__init__(self, 1060, data)

class UndlyInstrumentPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1061)
		else:
			IntField.__init__(self, 1061, data)

class NoUndlyInstrumentPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1062)
		else:
			IntField.__init__(self, 1062, data)

class UndlyInstrumentPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1063)
		else:
			StringField.__init__(self, 1063, data)

class UndlyInstrumentPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1064)
		else:
			IntField.__init__(self, 1064, data)

class BidSwapPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1065)
		else:
			DoubleField.__init__(self, 1065, data)

class OfferSwapPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1066)
		else:
			DoubleField.__init__(self, 1066, data)

class LegBidForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1067)
		else:
			DoubleField.__init__(self, 1067, data)

class LegOfferForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1068)
		else:
			DoubleField.__init__(self, 1068, data)

class SwapPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1069)
		else:
			DoubleField.__init__(self, 1069, data)

class MDQuoteType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1070)
		else:
			IntField.__init__(self, 1070, data)

class LastSwapPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1071)
		else:
			DoubleField.__init__(self, 1071, data)

class SideGrossTradeAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1072)
		else:
			DoubleField.__init__(self, 1072, data)

class LegLastForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1073)
		else:
			DoubleField.__init__(self, 1073, data)

class LegCalculatedCcyLastQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1074)
		else:
			DoubleField.__init__(self, 1074, data)

class LegGrossTradeAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1075)
		else:
			DoubleField.__init__(self, 1075, data)

class MaturityTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1079)
		else:
			StringField.__init__(self, 1079, data)

class RefOrderID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1080)
		else:
			StringField.__init__(self, 1080, data)

class RefOrderIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1081)
		else:
			CharField.__init__(self, 1081, data)

class SecondaryDisplayQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1082)
		else:
			DoubleField.__init__(self, 1082, data)

class DisplayWhen(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1083)
		else:
			CharField.__init__(self, 1083, data)

class DisplayMethod(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1084)
		else:
			CharField.__init__(self, 1084, data)

class DisplayLowQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1085)
		else:
			DoubleField.__init__(self, 1085, data)

class DisplayHighQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1086)
		else:
			DoubleField.__init__(self, 1086, data)

class DisplayMinIncr(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1087)
		else:
			DoubleField.__init__(self, 1087, data)

class RefreshQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1088)
		else:
			DoubleField.__init__(self, 1088, data)

class MatchIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1089)
		else:
			DoubleField.__init__(self, 1089, data)

class MaxPriceLevels(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1090)
		else:
			IntField.__init__(self, 1090, data)

class PreTradeAnonymity(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1091)
		else:
			BoolField.__init__(self, 1091, data)

class PriceProtectionScope(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1092)
		else:
			CharField.__init__(self, 1092, data)

class LotType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1093)
		else:
			CharField.__init__(self, 1093, data)

class PegPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1094)
		else:
			IntField.__init__(self, 1094, data)

class PeggedRefPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1095)
		else:
			DoubleField.__init__(self, 1095, data)

class PegSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1096)
		else:
			StringField.__init__(self, 1096, data)

class PegSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1097)
		else:
			StringField.__init__(self, 1097, data)

class PegSymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1098)
		else:
			StringField.__init__(self, 1098, data)

class PegSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1099)
		else:
			StringField.__init__(self, 1099, data)

class TriggerType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1100)
		else:
			CharField.__init__(self, 1100, data)

class TriggerAction(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1101)
		else:
			CharField.__init__(self, 1101, data)

class TriggerPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1102)
		else:
			DoubleField.__init__(self, 1102, data)

class TriggerSymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1103)
		else:
			StringField.__init__(self, 1103, data)

class TriggerSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1104)
		else:
			StringField.__init__(self, 1104, data)

class TriggerSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1105)
		else:
			StringField.__init__(self, 1105, data)

class TriggerSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1106)
		else:
			StringField.__init__(self, 1106, data)

class TriggerPriceType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1107)
		else:
			CharField.__init__(self, 1107, data)

class TriggerPriceTypeScope(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1108)
		else:
			CharField.__init__(self, 1108, data)

class TriggerPriceDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1109)
		else:
			CharField.__init__(self, 1109, data)

class TriggerNewPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1110)
		else:
			DoubleField.__init__(self, 1110, data)

class TriggerOrderType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1111)
		else:
			CharField.__init__(self, 1111, data)

class TriggerNewQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1112)
		else:
			DoubleField.__init__(self, 1112, data)

class TriggerTradingSessionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1113)
		else:
			StringField.__init__(self, 1113, data)

class TriggerTradingSessionSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1114)
		else:
			StringField.__init__(self, 1114, data)

class OrderCategory(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1115)
		else:
			CharField.__init__(self, 1115, data)

class NoRootPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1116)
		else:
			IntField.__init__(self, 1116, data)

class RootPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1117)
		else:
			StringField.__init__(self, 1117, data)

class RootPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1118)
		else:
			CharField.__init__(self, 1118, data)

class RootPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1119)
		else:
			IntField.__init__(self, 1119, data)

class NoRootPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1120)
		else:
			IntField.__init__(self, 1120, data)

class RootPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1121)
		else:
			StringField.__init__(self, 1121, data)

class RootPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1122)
		else:
			IntField.__init__(self, 1122, data)

class TradeHandlingInstr(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1123)
		else:
			CharField.__init__(self, 1123, data)

class OrigTradeHandlingInstr(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1124)
		else:
			CharField.__init__(self, 1124, data)

class OrigTradeDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1125)
		else:
			StringField.__init__(self, 1125, data)

class OrigTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1126)
		else:
			StringField.__init__(self, 1126, data)

class OrigSecondaryTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1127)
		else:
			StringField.__init__(self, 1127, data)

class TZTransactTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1132)
		else:
			StringField.__init__(self, 1132, data)

class ExDestinationIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1133)
		else:
			CharField.__init__(self, 1133, data)

class ReportedPxDiff(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1134)
		else:
			BoolField.__init__(self, 1134, data)

class RptSys(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1135)
		else:
			StringField.__init__(self, 1135, data)

class AllocClearingFeeIndicator(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1136)
		else:
			StringField.__init__(self, 1136, data)

class DisplayQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1138)
		else:
			DoubleField.__init__(self, 1138, data)

class ExchangeSpecialInstructions(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1139)
		else:
			StringField.__init__(self, 1139, data)

class ExpirationQtyType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 982)
		else:
			IntField.__init__(self, 982, data)

class UnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 996)
		else:
			StringField.__init__(self, 996, data)

class UnderlyingUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 998)
		else:
			StringField.__init__(self, 998, data)

class LegUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 999)
		else:
			StringField.__init__(self, 999, data)

class UnderlyingMaturityTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1213)
		else:
			StringField.__init__(self, 1213, data)

class LegMaturityTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1212)
		else:
			StringField.__init__(self, 1212, data)

class MaxTradeVol(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1140)
		else:
			DoubleField.__init__(self, 1140, data)

class NoMDFeedTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1141)
		else:
			IntField.__init__(self, 1141, data)

class MatchAlgorithm(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1142)
		else:
			StringField.__init__(self, 1142, data)

class MaxPriceVariation(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1143)
		else:
			DoubleField.__init__(self, 1143, data)

class ImpliedMarketIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1144)
		else:
			IntField.__init__(self, 1144, data)

class EventTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 1145)
		else:
			UtcTimeStampField.__init__(self, 1145, data)

class MinPriceIncrementAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1146)
		else:
			DoubleField.__init__(self, 1146, data)

class UnitOfMeasureQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1147)
		else:
			DoubleField.__init__(self, 1147, data)

class LowLimitPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1148)
		else:
			DoubleField.__init__(self, 1148, data)

class HighLimitPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1149)
		else:
			DoubleField.__init__(self, 1149, data)

class TradingReferencePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1150)
		else:
			DoubleField.__init__(self, 1150, data)

class SecurityGroup(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1151)
		else:
			StringField.__init__(self, 1151, data)

class LegNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1152)
		else:
			IntField.__init__(self, 1152, data)

class SettlementCycleNo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1153)
		else:
			IntField.__init__(self, 1153, data)

class SideCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1154)
		else:
			StringField.__init__(self, 1154, data)

class SideSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1155)
		else:
			StringField.__init__(self, 1155, data)

class CcyAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1157)
		else:
			DoubleField.__init__(self, 1157, data)

class NoSettlDetails(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1158)
		else:
			IntField.__init__(self, 1158, data)

class SettlObligMode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1159)
		else:
			IntField.__init__(self, 1159, data)

class SettlObligMsgID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1160)
		else:
			StringField.__init__(self, 1160, data)

class SettlObligID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1161)
		else:
			StringField.__init__(self, 1161, data)

class SettlObligTransType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1162)
		else:
			CharField.__init__(self, 1162, data)

class SettlObligRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1163)
		else:
			StringField.__init__(self, 1163, data)

class SettlObligSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1164)
		else:
			CharField.__init__(self, 1164, data)

class NoSettlOblig(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1165)
		else:
			IntField.__init__(self, 1165, data)

class QuoteMsgID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1166)
		else:
			StringField.__init__(self, 1166, data)

class QuoteEntryStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1167)
		else:
			IntField.__init__(self, 1167, data)

class TotNoCxldQuotes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1168)
		else:
			IntField.__init__(self, 1168, data)

class TotNoAccQuotes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1169)
		else:
			IntField.__init__(self, 1169, data)

class TotNoRejQuotes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1170)
		else:
			IntField.__init__(self, 1170, data)

class PrivateQuote(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1171)
		else:
			BoolField.__init__(self, 1171, data)

class RespondentType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1172)
		else:
			IntField.__init__(self, 1172, data)

class MDSubBookType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1173)
		else:
			IntField.__init__(self, 1173, data)

class SecurityTradingEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1174)
		else:
			IntField.__init__(self, 1174, data)

class NoStatsIndicators(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1175)
		else:
			IntField.__init__(self, 1175, data)

class StatsType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1176)
		else:
			IntField.__init__(self, 1176, data)

class NoOfSecSizes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1177)
		else:
			IntField.__init__(self, 1177, data)

class MDSecSizeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1178)
		else:
			IntField.__init__(self, 1178, data)

class MDSecSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1179)
		else:
			DoubleField.__init__(self, 1179, data)

class ApplID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1180)
		else:
			StringField.__init__(self, 1180, data)

class ApplSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1181)
		else:
			IntField.__init__(self, 1181, data)

class ApplBegSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1182)
		else:
			IntField.__init__(self, 1182, data)

class ApplEndSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1183)
		else:
			IntField.__init__(self, 1183, data)

class SecurityXMLLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1184)
		else:
			IntField.__init__(self, 1184, data)

class SecurityXML(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1185)
		else:
			StringField.__init__(self, 1185, data)

class SecurityXMLSchema(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1186)
		else:
			StringField.__init__(self, 1186, data)

class RefreshIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1187)
		else:
			BoolField.__init__(self, 1187, data)

class Volatility(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1188)
		else:
			DoubleField.__init__(self, 1188, data)

class TimeToExpiration(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1189)
		else:
			DoubleField.__init__(self, 1189, data)

class RiskFreeRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1190)
		else:
			DoubleField.__init__(self, 1190, data)

class PriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1191)
		else:
			StringField.__init__(self, 1191, data)

class PriceUnitOfMeasureQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1192)
		else:
			DoubleField.__init__(self, 1192, data)

class SettlMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1193)
		else:
			StringField.__init__(self, 1193, data)

class ExerciseStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1194)
		else:
			IntField.__init__(self, 1194, data)

class UnderlyingExerciseStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1419)
		else:
			IntField.__init__(self, 1419, data)

class LegExerciseStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1420)
		else:
			IntField.__init__(self, 1420, data)

class OptPayAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1195)
		else:
			DoubleField.__init__(self, 1195, data)

class PriceQuoteMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1196)
		else:
			StringField.__init__(self, 1196, data)

class FuturesValuationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1197)
		else:
			StringField.__init__(self, 1197, data)

class ListMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1198)
		else:
			IntField.__init__(self, 1198, data)

class CapPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1199)
		else:
			DoubleField.__init__(self, 1199, data)

class FloorPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1200)
		else:
			DoubleField.__init__(self, 1200, data)

class NoStrikeRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1201)
		else:
			IntField.__init__(self, 1201, data)

class StartStrikePxRange(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1202)
		else:
			DoubleField.__init__(self, 1202, data)

class EndStrikePxRange(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1203)
		else:
			DoubleField.__init__(self, 1203, data)

class StrikeIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1204)
		else:
			DoubleField.__init__(self, 1204, data)

class NoTickRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1205)
		else:
			IntField.__init__(self, 1205, data)

class StartTickPriceRange(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1206)
		else:
			DoubleField.__init__(self, 1206, data)

class EndTickPriceRange(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1207)
		else:
			DoubleField.__init__(self, 1207, data)

class TickIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1208)
		else:
			DoubleField.__init__(self, 1208, data)

class TickRuleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1209)
		else:
			IntField.__init__(self, 1209, data)

class NestedInstrAttribType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1210)
		else:
			IntField.__init__(self, 1210, data)

class NestedInstrAttribValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1211)
		else:
			StringField.__init__(self, 1211, data)

class DerivativeSymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1214)
		else:
			StringField.__init__(self, 1214, data)

class DerivativeSymbolSfx(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1215)
		else:
			StringField.__init__(self, 1215, data)

class DerivativeSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1216)
		else:
			StringField.__init__(self, 1216, data)

class DerivativeSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1217)
		else:
			StringField.__init__(self, 1217, data)

class NoDerivativeSecurityAltID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1218)
		else:
			IntField.__init__(self, 1218, data)

class DerivativeSecurityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1219)
		else:
			StringField.__init__(self, 1219, data)

class DerivativeSecurityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1220)
		else:
			StringField.__init__(self, 1220, data)

class SecondaryLowLimitPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1221)
		else:
			DoubleField.__init__(self, 1221, data)

class SecondaryHighLimitPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1230)
		else:
			DoubleField.__init__(self, 1230, data)

class MaturityRuleID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1222)
		else:
			StringField.__init__(self, 1222, data)

class StrikeRuleID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1223)
		else:
			StringField.__init__(self, 1223, data)

class DerivativeOptPayAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1225)
		else:
			DoubleField.__init__(self, 1225, data)

class EndMaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1226)
		else:
			StringField.__init__(self, 1226, data)

class ProductComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1227)
		else:
			StringField.__init__(self, 1227, data)

class DerivativeProductComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1228)
		else:
			StringField.__init__(self, 1228, data)

class MaturityMonthYearIncrement(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1229)
		else:
			IntField.__init__(self, 1229, data)

class MinLotSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1231)
		else:
			DoubleField.__init__(self, 1231, data)

class NoExecInstRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1232)
		else:
			IntField.__init__(self, 1232, data)

class NoLotTypeRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1234)
		else:
			IntField.__init__(self, 1234, data)

class NoMatchRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1235)
		else:
			IntField.__init__(self, 1235, data)

class NoMaturityRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1236)
		else:
			IntField.__init__(self, 1236, data)

class NoOrdTypeRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1237)
		else:
			IntField.__init__(self, 1237, data)

class NoTimeInForceRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1239)
		else:
			IntField.__init__(self, 1239, data)

class SecondaryTradingReferencePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1240)
		else:
			DoubleField.__init__(self, 1240, data)

class StartMaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1241)
		else:
			StringField.__init__(self, 1241, data)

class FlexProductEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1242)
		else:
			BoolField.__init__(self, 1242, data)

class DerivFlexProductEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1243)
		else:
			BoolField.__init__(self, 1243, data)

class FlexibleIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1244)
		else:
			BoolField.__init__(self, 1244, data)

class TradingCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1245)
		else:
			StringField.__init__(self, 1245, data)

class DerivativeProduct(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1246)
		else:
			IntField.__init__(self, 1246, data)

class DerivativeSecurityGroup(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1247)
		else:
			StringField.__init__(self, 1247, data)

class DerivativeCFICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1248)
		else:
			StringField.__init__(self, 1248, data)

class DerivativeSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1249)
		else:
			StringField.__init__(self, 1249, data)

class DerivativeSecuritySubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1250)
		else:
			StringField.__init__(self, 1250, data)

class DerivativeMaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1251)
		else:
			StringField.__init__(self, 1251, data)

class DerivativeMaturityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1252)
		else:
			StringField.__init__(self, 1252, data)

class DerivativeMaturityTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1253)
		else:
			StringField.__init__(self, 1253, data)

class DerivativeSettleOnOpenFlag(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1254)
		else:
			StringField.__init__(self, 1254, data)

class DerivativeInstrmtAssignmentMethod(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1255)
		else:
			CharField.__init__(self, 1255, data)

class DerivativeSecurityStatus(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1256)
		else:
			StringField.__init__(self, 1256, data)

class DerivativeInstrRegistry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1257)
		else:
			StringField.__init__(self, 1257, data)

class DerivativeCountryOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1258)
		else:
			StringField.__init__(self, 1258, data)

class DerivativeStateOrProvinceOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1259)
		else:
			StringField.__init__(self, 1259, data)

class DerivativeLocaleOfIssue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1260)
		else:
			StringField.__init__(self, 1260, data)

class DerivativeStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1261)
		else:
			DoubleField.__init__(self, 1261, data)

class DerivativeStrikeCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1262)
		else:
			StringField.__init__(self, 1262, data)

class DerivativeStrikeMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1263)
		else:
			DoubleField.__init__(self, 1263, data)

class DerivativeStrikeValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1264)
		else:
			DoubleField.__init__(self, 1264, data)

class DerivativeOptAttribute(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1265)
		else:
			CharField.__init__(self, 1265, data)

class DerivativeContractMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1266)
		else:
			DoubleField.__init__(self, 1266, data)

class DerivativeMinPriceIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1267)
		else:
			DoubleField.__init__(self, 1267, data)

class DerivativeMinPriceIncrementAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1268)
		else:
			DoubleField.__init__(self, 1268, data)

class DerivativeUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1269)
		else:
			StringField.__init__(self, 1269, data)

class DerivativeUnitOfMeasureQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1270)
		else:
			DoubleField.__init__(self, 1270, data)

class DerivativeTimeUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1271)
		else:
			StringField.__init__(self, 1271, data)

class DerivativeSecurityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1272)
		else:
			StringField.__init__(self, 1272, data)

class DerivativePositionLimit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1273)
		else:
			IntField.__init__(self, 1273, data)

class DerivativeNTPositionLimit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1274)
		else:
			IntField.__init__(self, 1274, data)

class DerivativeIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1275)
		else:
			StringField.__init__(self, 1275, data)

class DerivativeIssueDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1276)
		else:
			StringField.__init__(self, 1276, data)

class DerivativeEncodedIssuerLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1277)
		else:
			IntField.__init__(self, 1277, data)

class DerivativeEncodedIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1278)
		else:
			StringField.__init__(self, 1278, data)

class DerivativeSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1279)
		else:
			StringField.__init__(self, 1279, data)

class DerivativeEncodedSecurityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1280)
		else:
			IntField.__init__(self, 1280, data)

class DerivativeEncodedSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1281)
		else:
			StringField.__init__(self, 1281, data)

class DerivativeSecurityXMLLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1282)
		else:
			IntField.__init__(self, 1282, data)

class DerivativeSecurityXML(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1283)
		else:
			StringField.__init__(self, 1283, data)

class DerivativeSecurityXMLSchema(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1284)
		else:
			StringField.__init__(self, 1284, data)

class DerivativeContractSettlMonth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1285)
		else:
			StringField.__init__(self, 1285, data)

class NoDerivativeEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1286)
		else:
			IntField.__init__(self, 1286, data)

class DerivativeEventType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1287)
		else:
			IntField.__init__(self, 1287, data)

class DerivativeEventDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1288)
		else:
			StringField.__init__(self, 1288, data)

class DerivativeEventTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 1289)
		else:
			UtcTimeStampField.__init__(self, 1289, data)

class DerivativeEventPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1290)
		else:
			DoubleField.__init__(self, 1290, data)

class DerivativeEventText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1291)
		else:
			StringField.__init__(self, 1291, data)

class NoDerivativeInstrumentParties(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1292)
		else:
			IntField.__init__(self, 1292, data)

class DerivativeInstrumentPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1293)
		else:
			StringField.__init__(self, 1293, data)

class DerivativeInstrumentPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1294)
		else:
			CharField.__init__(self, 1294, data)

class DerivativeInstrumentPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1295)
		else:
			IntField.__init__(self, 1295, data)

class NoDerivativeInstrumentPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1296)
		else:
			IntField.__init__(self, 1296, data)

class DerivativeInstrumentPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1297)
		else:
			StringField.__init__(self, 1297, data)

class DerivativeInstrumentPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1298)
		else:
			IntField.__init__(self, 1298, data)

class DerivativeExerciseStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1299)
		else:
			IntField.__init__(self, 1299, data)

class MarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1300)
		else:
			StringField.__init__(self, 1300, data)

class MarketID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1301)
		else:
			StringField.__init__(self, 1301, data)

class MaturityMonthYearIncrementUnits(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1302)
		else:
			IntField.__init__(self, 1302, data)

class MaturityMonthYearFormat(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1303)
		else:
			IntField.__init__(self, 1303, data)

class StrikeExerciseStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1304)
		else:
			IntField.__init__(self, 1304, data)

class SecondaryPriceLimitType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1305)
		else:
			IntField.__init__(self, 1305, data)

class PriceLimitType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1306)
		else:
			IntField.__init__(self, 1306, data)

class ExecInstValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1308)
		else:
			StringField.__init__(self, 1308, data)

class NoTradingSessionRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1309)
		else:
			IntField.__init__(self, 1309, data)

class NoMarketSegments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1310)
		else:
			IntField.__init__(self, 1310, data)

class NoDerivativeInstrAttrib(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1311)
		else:
			IntField.__init__(self, 1311, data)

class NoNestedInstrAttrib(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1312)
		else:
			IntField.__init__(self, 1312, data)

class DerivativeInstrAttribType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1313)
		else:
			IntField.__init__(self, 1313, data)

class DerivativeInstrAttribValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1314)
		else:
			StringField.__init__(self, 1314, data)

class DerivativePriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1315)
		else:
			StringField.__init__(self, 1315, data)

class DerivativePriceUnitOfMeasureQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1316)
		else:
			DoubleField.__init__(self, 1316, data)

class DerivativeSettlMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1317)
		else:
			StringField.__init__(self, 1317, data)

class DerivativePriceQuoteMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1318)
		else:
			StringField.__init__(self, 1318, data)

class DerivativeFuturesValuationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1319)
		else:
			StringField.__init__(self, 1319, data)

class DerivativeListMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1320)
		else:
			IntField.__init__(self, 1320, data)

class DerivativeCapPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1321)
		else:
			DoubleField.__init__(self, 1321, data)

class DerivativeFloorPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1322)
		else:
			DoubleField.__init__(self, 1322, data)

class DerivativePutOrCall(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1323)
		else:
			IntField.__init__(self, 1323, data)

class ListUpdateAction(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1324)
		else:
			CharField.__init__(self, 1324, data)

class LegPutOrCall(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1358)
		else:
			IntField.__init__(self, 1358, data)

class LegUnitOfMeasureQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1224)
		else:
			DoubleField.__init__(self, 1224, data)

class LegPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1421)
		else:
			StringField.__init__(self, 1421, data)

class LegPriceUnitOfMeasureQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1422)
		else:
			DoubleField.__init__(self, 1422, data)

class UnderlyingUnitOfMeasureQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1423)
		else:
			DoubleField.__init__(self, 1423, data)

class UnderlyingPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1424)
		else:
			StringField.__init__(self, 1424, data)

class UnderlyingPriceUnitOfMeasureQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1425)
		else:
			DoubleField.__init__(self, 1425, data)

class MarketReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1393)
		else:
			StringField.__init__(self, 1393, data)

class MarketReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1394)
		else:
			StringField.__init__(self, 1394, data)

class MarketUpdateAction(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1395)
		else:
			CharField.__init__(self, 1395, data)

class MarketSegmentDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1396)
		else:
			StringField.__init__(self, 1396, data)

class EncodedMktSegmDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1397)
		else:
			IntField.__init__(self, 1397, data)

class EncodedMktSegmDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1398)
		else:
			StringField.__init__(self, 1398, data)

class ParentMktSegmID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1325)
		else:
			StringField.__init__(self, 1325, data)

class TradingSessionDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1326)
		else:
			StringField.__init__(self, 1326, data)

class TradSesUpdateAction(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1327)
		else:
			CharField.__init__(self, 1327, data)

class RejectText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1328)
		else:
			StringField.__init__(self, 1328, data)

class FeeMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1329)
		else:
			DoubleField.__init__(self, 1329, data)

class UnderlyingLegSymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1330)
		else:
			StringField.__init__(self, 1330, data)

class UnderlyingLegSymbolSfx(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1331)
		else:
			StringField.__init__(self, 1331, data)

class UnderlyingLegSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1332)
		else:
			StringField.__init__(self, 1332, data)

class UnderlyingLegSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1333)
		else:
			StringField.__init__(self, 1333, data)

class NoUnderlyingLegSecurityAltID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1334)
		else:
			IntField.__init__(self, 1334, data)

class UnderlyingLegSecurityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1335)
		else:
			StringField.__init__(self, 1335, data)

class UnderlyingLegSecurityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1336)
		else:
			StringField.__init__(self, 1336, data)

class UnderlyingLegSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1337)
		else:
			StringField.__init__(self, 1337, data)

class UnderlyingLegSecuritySubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1338)
		else:
			StringField.__init__(self, 1338, data)

class UnderlyingLegMaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1339)
		else:
			StringField.__init__(self, 1339, data)

class UnderlyingLegPutOrCall(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1343)
		else:
			IntField.__init__(self, 1343, data)

class UnderlyingLegStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1340)
		else:
			DoubleField.__init__(self, 1340, data)

class UnderlyingLegSecurityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1341)
		else:
			StringField.__init__(self, 1341, data)

class NoOfLegUnderlyings(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1342)
		else:
			IntField.__init__(self, 1342, data)

class UnderlyingLegCFICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1344)
		else:
			StringField.__init__(self, 1344, data)

class UnderlyingLegMaturityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1345)
		else:
			StringField.__init__(self, 1345, data)

class UnderlyingLegMaturityTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1405)
		else:
			StringField.__init__(self, 1405, data)

class UnderlyingLegOptAttribute(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1391)
		else:
			CharField.__init__(self, 1391, data)

class UnderlyingLegSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1392)
		else:
			StringField.__init__(self, 1392, data)

class DefaultVerIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1410)
		else:
			BoolField.__init__(self, 1410, data)

class NoUsernames(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 809)
		else:
			IntField.__init__(self, 809, data)

class LegAllocSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1367)
		else:
			StringField.__init__(self, 1367, data)

class TotNoFills(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1361)
		else:
			IntField.__init__(self, 1361, data)

class NoFills(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1362)
		else:
			IntField.__init__(self, 1362, data)

class FillExecID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1363)
		else:
			StringField.__init__(self, 1363, data)

class FillPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1364)
		else:
			DoubleField.__init__(self, 1364, data)

class FillQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1365)
		else:
			DoubleField.__init__(self, 1365, data)

class LegAllocID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1366)
		else:
			StringField.__init__(self, 1366, data)

class TradSesEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1368)
		else:
			IntField.__init__(self, 1368, data)

class MassActionReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1369)
		else:
			StringField.__init__(self, 1369, data)

class NoNotAffectedOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1370)
		else:
			IntField.__init__(self, 1370, data)

class NotAffectedOrderID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1371)
		else:
			StringField.__init__(self, 1371, data)

class NotAffOrigClOrdID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1372)
		else:
			StringField.__init__(self, 1372, data)

class MassActionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1373)
		else:
			IntField.__init__(self, 1373, data)

class MassActionScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1374)
		else:
			IntField.__init__(self, 1374, data)

class MassActionResponse(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1375)
		else:
			IntField.__init__(self, 1375, data)

class MassActionRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1376)
		else:
			IntField.__init__(self, 1376, data)

class MultilegModel(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1377)
		else:
			IntField.__init__(self, 1377, data)

class MultilegPriceMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1378)
		else:
			IntField.__init__(self, 1378, data)

class LegVolatility(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1379)
		else:
			DoubleField.__init__(self, 1379, data)

class DividendYield(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1380)
		else:
			DoubleField.__init__(self, 1380, data)

class LegDividendYield(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1381)
		else:
			DoubleField.__init__(self, 1381, data)

class CurrencyRatio(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1382)
		else:
			DoubleField.__init__(self, 1382, data)

class LegCurrencyRatio(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1383)
		else:
			DoubleField.__init__(self, 1383, data)

class LegExecInst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1384)
		else:
			StringField.__init__(self, 1384, data)

class ContingencyType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1385)
		else:
			IntField.__init__(self, 1385, data)

class ListRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1386)
		else:
			IntField.__init__(self, 1386, data)

class NoTrdRepIndicators(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1387)
		else:
			IntField.__init__(self, 1387, data)

class TrdRepPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1388)
		else:
			IntField.__init__(self, 1388, data)

class TrdRepIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1389)
		else:
			BoolField.__init__(self, 1389, data)

class TradePublishIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1390)
		else:
			IntField.__init__(self, 1390, data)

class ApplReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1346)
		else:
			StringField.__init__(self, 1346, data)

class ApplReqType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1347)
		else:
			IntField.__init__(self, 1347, data)

class ApplResponseType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1348)
		else:
			IntField.__init__(self, 1348, data)

class ApplTotalMessageCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1349)
		else:
			IntField.__init__(self, 1349, data)

class ApplLastSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1350)
		else:
			IntField.__init__(self, 1350, data)

class NoApplIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1351)
		else:
			IntField.__init__(self, 1351, data)

class ApplResendFlag(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1352)
		else:
			BoolField.__init__(self, 1352, data)

class ApplResponseID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1353)
		else:
			StringField.__init__(self, 1353, data)

class ApplResponseError(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1354)
		else:
			IntField.__init__(self, 1354, data)

class RefApplID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1355)
		else:
			StringField.__init__(self, 1355, data)

class ApplReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1356)
		else:
			StringField.__init__(self, 1356, data)

class RefApplLastSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1357)
		else:
			IntField.__init__(self, 1357, data)

class ApplNewSeqNum(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1399)
		else:
			IntField.__init__(self, 1399, data)

class ApplReportType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1426)
		else:
			IntField.__init__(self, 1426, data)

class Nested4PartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1411)
		else:
			IntField.__init__(self, 1411, data)

class Nested4PartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1412)
		else:
			StringField.__init__(self, 1412, data)

class NoNested4PartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1413)
		else:
			IntField.__init__(self, 1413, data)

class NoNested4PartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1414)
		else:
			IntField.__init__(self, 1414, data)

class Nested4PartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1415)
		else:
			StringField.__init__(self, 1415, data)

class Nested4PartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1416)
		else:
			CharField.__init__(self, 1416, data)

class Nested4PartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1417)
		else:
			IntField.__init__(self, 1417, data)

class LegLastQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1418)
		else:
			DoubleField.__init__(self, 1418, data)

class HaltReasonInt(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 327)
		else:
			IntField.__init__(self, 327, data)

class SideTrdSubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1008)
		else:
			IntField.__init__(self, 1008, data)

class SideLastQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1009)
		else:
			DoubleField.__init__(self, 1009, data)

class UnderlyingInstrumentPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1059)
		else:
			StringField.__init__(self, 1059, data)

class UnderlyingInstrumentPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1060)
		else:
			CharField.__init__(self, 1060, data)

class UnderlyingInstrumentPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1061)
		else:
			IntField.__init__(self, 1061, data)

class UnderlyingInstrumentPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1063)
		else:
			StringField.__init__(self, 1063, data)

class UnderlyingInstrumentPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1064)
		else:
			IntField.__init__(self, 1064, data)

class OptPayoutAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1195)
		else:
			DoubleField.__init__(self, 1195, data)

class ValuationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1197)
		else:
			StringField.__init__(self, 1197, data)

class DerivativeValuationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1319)
		else:
			StringField.__init__(self, 1319, data)

class SideExecID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1427)
		else:
			StringField.__init__(self, 1427, data)

class OrderDelay(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1428)
		else:
			IntField.__init__(self, 1428, data)

class OrderDelayUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1429)
		else:
			IntField.__init__(self, 1429, data)

class VenueType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1430)
		else:
			CharField.__init__(self, 1430, data)

class RefOrdIDReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1431)
		else:
			IntField.__init__(self, 1431, data)

class OrigCustOrderCapacity(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1432)
		else:
			IntField.__init__(self, 1432, data)

class RefApplReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1433)
		else:
			StringField.__init__(self, 1433, data)

class ModelType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1434)
		else:
			IntField.__init__(self, 1434, data)

class ContractMultiplierUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1435)
		else:
			IntField.__init__(self, 1435, data)

class LegContractMultiplierUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1436)
		else:
			IntField.__init__(self, 1436, data)

class UnderlyingContractMultiplierUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1437)
		else:
			IntField.__init__(self, 1437, data)

class DerivativeContractMultiplierUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1438)
		else:
			IntField.__init__(self, 1438, data)

class FlowScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1439)
		else:
			IntField.__init__(self, 1439, data)

class LegFlowScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1440)
		else:
			IntField.__init__(self, 1440, data)

class UnderlyingFlowScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1441)
		else:
			IntField.__init__(self, 1441, data)

class DerivativeFlowScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1442)
		else:
			IntField.__init__(self, 1442, data)

class FillLiquidityInd(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1443)
		else:
			IntField.__init__(self, 1443, data)

class SideLiquidityInd(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1444)
		else:
			IntField.__init__(self, 1444, data)

class NoRateSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1445)
		else:
			IntField.__init__(self, 1445, data)

class RateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1446)
		else:
			IntField.__init__(self, 1446, data)

class RateSourceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1447)
		else:
			IntField.__init__(self, 1447, data)

class ReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1448)
		else:
			StringField.__init__(self, 1448, data)

class RestructuringType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1449)
		else:
			StringField.__init__(self, 1449, data)

class Seniority(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1450)
		else:
			StringField.__init__(self, 1450, data)

class NotionalPercentageOutstanding(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1451)
		else:
			DoubleField.__init__(self, 1451, data)

class OriginalNotionalPercentageOutstanding(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1452)
		else:
			DoubleField.__init__(self, 1452, data)

class UnderlyingRestructuringType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1453)
		else:
			StringField.__init__(self, 1453, data)

class UnderlyingSeniority(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1454)
		else:
			StringField.__init__(self, 1454, data)

class UnderlyingNotionalPercentageOutstanding(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1455)
		else:
			DoubleField.__init__(self, 1455, data)

class UnderlyingOriginalNotionalPercentageOutstanding(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1456)
		else:
			DoubleField.__init__(self, 1456, data)

class AttachmentPoint(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1457)
		else:
			DoubleField.__init__(self, 1457, data)

class DetachmentPoint(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1458)
		else:
			DoubleField.__init__(self, 1458, data)

class UnderlyingAttachmentPoint(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1459)
		else:
			DoubleField.__init__(self, 1459, data)

class UnderlyingDetachmentPoint(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1460)
		else:
			DoubleField.__init__(self, 1460, data)

class NoTargetPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1461)
		else:
			IntField.__init__(self, 1461, data)

class TargetPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1462)
		else:
			StringField.__init__(self, 1462, data)

class TargetPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1463)
		else:
			CharField.__init__(self, 1463, data)

class TargetPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1464)
		else:
			IntField.__init__(self, 1464, data)

class SecurityListID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1465)
		else:
			StringField.__init__(self, 1465, data)

class SecurityListRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1466)
		else:
			StringField.__init__(self, 1466, data)

class SecurityListDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1467)
		else:
			StringField.__init__(self, 1467, data)

class EncodedSecurityListDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1468)
		else:
			IntField.__init__(self, 1468, data)

class EncodedSecurityListDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1469)
		else:
			StringField.__init__(self, 1469, data)

class SecurityListType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1470)
		else:
			IntField.__init__(self, 1470, data)

class SecurityListTypeSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1471)
		else:
			IntField.__init__(self, 1471, data)

class NewsID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1472)
		else:
			StringField.__init__(self, 1472, data)

class NewsCategory(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1473)
		else:
			IntField.__init__(self, 1473, data)

class LanguageCode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1474)
		else:
			StringField.__init__(self, 1474, data)

class NoNewsRefIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1475)
		else:
			IntField.__init__(self, 1475, data)

class NewsRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1476)
		else:
			StringField.__init__(self, 1476, data)

class NewsRefType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1477)
		else:
			IntField.__init__(self, 1477, data)

class StrikePriceDeterminationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1478)
		else:
			IntField.__init__(self, 1478, data)

class StrikePriceBoundaryMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1479)
		else:
			IntField.__init__(self, 1479, data)

class StrikePriceBoundaryPrecision(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1480)
		else:
			DoubleField.__init__(self, 1480, data)

class UnderlyingPriceDeterminationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1481)
		else:
			IntField.__init__(self, 1481, data)

class OptPayoutType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1482)
		else:
			IntField.__init__(self, 1482, data)

class NoComplexEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1483)
		else:
			IntField.__init__(self, 1483, data)

class ComplexEventType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1484)
		else:
			IntField.__init__(self, 1484, data)

class ComplexOptPayoutAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1485)
		else:
			DoubleField.__init__(self, 1485, data)

class ComplexEventPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1486)
		else:
			DoubleField.__init__(self, 1486, data)

class ComplexEventPriceBoundaryMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1487)
		else:
			IntField.__init__(self, 1487, data)

class ComplexEventPriceBoundaryPrecision(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1488)
		else:
			DoubleField.__init__(self, 1488, data)

class ComplexEventPriceTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1489)
		else:
			IntField.__init__(self, 1489, data)

class ComplexEventCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1490)
		else:
			IntField.__init__(self, 1490, data)

class NoComplexEventDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1491)
		else:
			IntField.__init__(self, 1491, data)

class ComplexEventStartDate(UtcDateField):
	def __init__(self, data = None):
		if data == None:
			UtcDateField.__init__(self, 1492)
		else:
			UtcDateField.__init__(self, 1492, data)

class ComplexEventEndDate(UtcDateField):
	def __init__(self, data = None):
		if data == None:
			UtcDateField.__init__(self, 1493)
		else:
			UtcDateField.__init__(self, 1493, data)

class NoComplexEventTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1494)
		else:
			IntField.__init__(self, 1494, data)

class ComplexEventStartTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 1495)
		else:
			UtcTimeOnlyField.__init__(self, 1495, data)

class ComplexEventEndTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 1496)
		else:
			UtcTimeOnlyField.__init__(self, 1496, data)

class StreamAsgnReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1497)
		else:
			StringField.__init__(self, 1497, data)

class StreamAsgnReqType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1498)
		else:
			IntField.__init__(self, 1498, data)

class NoAsgnReqs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1499)
		else:
			IntField.__init__(self, 1499, data)

class MDStreamID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1500)
		else:
			StringField.__init__(self, 1500, data)

class StreamAsgnRptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1501)
		else:
			StringField.__init__(self, 1501, data)

class StreamAsgnRejReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1502)
		else:
			IntField.__init__(self, 1502, data)

class StreamAsgnAckType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1503)
		else:
			IntField.__init__(self, 1503, data)

class StreamAsgnType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1617)
		else:
			IntField.__init__(self, 1617, data)

class RelSymTransactTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 1504)
		else:
			UtcTimeStampField.__init__(self, 1504, data)

class FillYieldType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1622)
		else:
			StringField.__init__(self, 1622, data)

class FillYield(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1623)
		else:
			DoubleField.__init__(self, 1623, data)

class NoMatchInst(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1624)
		else:
			IntField.__init__(self, 1624, data)

class MatchInst(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1625)
		else:
			IntField.__init__(self, 1625, data)

class MatchAttribTagID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1626)
		else:
			StringField.__init__(self, 1626, data)

class MatchAttribValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1627)
		else:
			StringField.__init__(self, 1627, data)

class MatchInstMarketID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1673)
		else:
			StringField.__init__(self, 1673, data)

class TriggerScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1628)
		else:
			IntField.__init__(self, 1628, data)

class ExposureDuration(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1629)
		else:
			IntField.__init__(self, 1629, data)

class NoLimitAmts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1630)
		else:
			IntField.__init__(self, 1630, data)

class LimitAmtType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1631)
		else:
			IntField.__init__(self, 1631, data)

class LastLimitAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1632)
		else:
			DoubleField.__init__(self, 1632, data)

class LimitAmtRemaining(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1633)
		else:
			DoubleField.__init__(self, 1633, data)

class LimitAmtCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1634)
		else:
			StringField.__init__(self, 1634, data)

class MarginReqmtInqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1635)
		else:
			StringField.__init__(self, 1635, data)

class NoMarginReqmtInqQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1636)
		else:
			IntField.__init__(self, 1636, data)

class MarginReqmtInqQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1637)
		else:
			IntField.__init__(self, 1637, data)

class MarginReqmtRptType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1638)
		else:
			IntField.__init__(self, 1638, data)

class MarginClass(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1639)
		else:
			StringField.__init__(self, 1639, data)

class MarginReqmtInqStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1640)
		else:
			IntField.__init__(self, 1640, data)

class MarginReqmtInqResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1641)
		else:
			IntField.__init__(self, 1641, data)

class MarginReqmtRptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1642)
		else:
			StringField.__init__(self, 1642, data)

class NoMarginAmt(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1643)
		else:
			IntField.__init__(self, 1643, data)

class MarginAmtType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1644)
		else:
			IntField.__init__(self, 1644, data)

class MarginAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1645)
		else:
			DoubleField.__init__(self, 1645, data)

class MarginAmtCcy(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1646)
		else:
			StringField.__init__(self, 1646, data)

class NoRelatedInstruments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1647)
		else:
			IntField.__init__(self, 1647, data)

class RelatedInstrumentType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1648)
		else:
			IntField.__init__(self, 1648, data)

class RelatedSymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1649)
		else:
			StringField.__init__(self, 1649, data)

class RelatedSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1650)
		else:
			StringField.__init__(self, 1650, data)

class RelatedSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1651)
		else:
			StringField.__init__(self, 1651, data)

class RelatedSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1652)
		else:
			StringField.__init__(self, 1652, data)

class RelatedMaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1653)
		else:
			StringField.__init__(self, 1653, data)

class CoveredQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1654)
		else:
			DoubleField.__init__(self, 1654, data)

class MarketMakerActivity(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1655)
		else:
			IntField.__init__(self, 1655, data)

class PartyDetailsListRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1505)
		else:
			StringField.__init__(self, 1505, data)

class NoRequestedPartyRoles(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1508)
		else:
			IntField.__init__(self, 1508, data)

class RequestedPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1509)
		else:
			IntField.__init__(self, 1509, data)

class PartyDetailsListReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1510)
		else:
			StringField.__init__(self, 1510, data)

class RequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1511)
		else:
			IntField.__init__(self, 1511, data)

class TotNoParties(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1512)
		else:
			IntField.__init__(self, 1512, data)

class NoPartyRelationships(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1514)
		else:
			IntField.__init__(self, 1514, data)

class PartyRelationship(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1515)
		else:
			IntField.__init__(self, 1515, data)

class NoPartyDetailAltID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1516)
		else:
			IntField.__init__(self, 1516, data)

class PartyDetailAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1517)
		else:
			StringField.__init__(self, 1517, data)

class PartyDetailAltIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1518)
		else:
			CharField.__init__(self, 1518, data)

class NoPartyDetailAltSubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1519)
		else:
			IntField.__init__(self, 1519, data)

class PartyDetailAltSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1520)
		else:
			StringField.__init__(self, 1520, data)

class PartyDetailAltSubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1521)
		else:
			IntField.__init__(self, 1521, data)

class NoRiskLimitTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1529)
		else:
			IntField.__init__(self, 1529, data)

class RiskLimitType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1530)
		else:
			IntField.__init__(self, 1530, data)

class RiskLimitAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1531)
		else:
			DoubleField.__init__(self, 1531, data)

class RiskLimitCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1532)
		else:
			StringField.__init__(self, 1532, data)

class RiskLimitPlatform(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1533)
		else:
			StringField.__init__(self, 1533, data)

class NoRiskInstrumentScopes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1534)
		else:
			IntField.__init__(self, 1534, data)

class InstrumentScopeOperator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1535)
		else:
			IntField.__init__(self, 1535, data)

class InstrumentScopeSymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1536)
		else:
			StringField.__init__(self, 1536, data)

class InstrumentScopeSymbolSfx(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1537)
		else:
			StringField.__init__(self, 1537, data)

class InstrumentScopeSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1538)
		else:
			StringField.__init__(self, 1538, data)

class InstrumentScopeSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1539)
		else:
			StringField.__init__(self, 1539, data)

class NoInstrumentScopeSecurityAltID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1540)
		else:
			IntField.__init__(self, 1540, data)

class InstrumentScopeSecurityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1541)
		else:
			StringField.__init__(self, 1541, data)

class InstrumentScopeSecurityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1542)
		else:
			StringField.__init__(self, 1542, data)

class InstrumentScopeProduct(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1543)
		else:
			IntField.__init__(self, 1543, data)

class InstrumentScopeProductComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1544)
		else:
			StringField.__init__(self, 1544, data)

class InstrumentScopeSecurityGroup(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1545)
		else:
			StringField.__init__(self, 1545, data)

class InstrumentScopeCFICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1546)
		else:
			StringField.__init__(self, 1546, data)

class InstrumentScopeSecurityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1547)
		else:
			StringField.__init__(self, 1547, data)

class InstrumentScopeSecuritySubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1548)
		else:
			StringField.__init__(self, 1548, data)

class InstrumentScopeMaturityMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1549)
		else:
			StringField.__init__(self, 1549, data)

class InstrumentScopeMaturityTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1550)
		else:
			StringField.__init__(self, 1550, data)

class InstrumentScopeRestructuringType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1551)
		else:
			StringField.__init__(self, 1551, data)

class InstrumentScopeSeniority(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1552)
		else:
			StringField.__init__(self, 1552, data)

class InstrumentScopePutOrCall(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1553)
		else:
			IntField.__init__(self, 1553, data)

class InstrumentScopeFlexibleIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1554)
		else:
			BoolField.__init__(self, 1554, data)

class InstrumentScopeCouponRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1555)
		else:
			DoubleField.__init__(self, 1555, data)

class InstrumentScopeSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1556)
		else:
			StringField.__init__(self, 1556, data)

class InstrumentScopeSettlType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1557)
		else:
			StringField.__init__(self, 1557, data)

class RiskInstrumentMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1558)
		else:
			DoubleField.__init__(self, 1558, data)

class NoRiskWarningLevels(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1559)
		else:
			IntField.__init__(self, 1559, data)

class RiskWarningLevelPercent(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1560)
		else:
			DoubleField.__init__(self, 1560, data)

class RiskWarningLevelName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1561)
		else:
			StringField.__init__(self, 1561, data)

class NoRelatedPartyDetailID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1562)
		else:
			IntField.__init__(self, 1562, data)

class RelatedPartyDetailID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1563)
		else:
			StringField.__init__(self, 1563, data)

class RelatedPartyDetailIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1564)
		else:
			CharField.__init__(self, 1564, data)

class RelatedPartyDetailRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1565)
		else:
			IntField.__init__(self, 1565, data)

class NoRelatedPartyDetailSubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1566)
		else:
			IntField.__init__(self, 1566, data)

class RelatedPartyDetailSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1567)
		else:
			StringField.__init__(self, 1567, data)

class RelatedPartyDetailSubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1568)
		else:
			IntField.__init__(self, 1568, data)

class NoRelatedPartyDetailAltID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1569)
		else:
			IntField.__init__(self, 1569, data)

class RelatedPartyDetailAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1570)
		else:
			StringField.__init__(self, 1570, data)

class RelatedPartyDetailAltIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1571)
		else:
			CharField.__init__(self, 1571, data)

class NoRelatedPartyDetailAltSubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1572)
		else:
			IntField.__init__(self, 1572, data)

class RelatedPartyDetailAltSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1573)
		else:
			StringField.__init__(self, 1573, data)

class RelatedPartyDetailAltSubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1574)
		else:
			IntField.__init__(self, 1574, data)

class InstrumentScopeSecurityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1616)
		else:
			StringField.__init__(self, 1616, data)

class InstrumentScopeEncodedSecurityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1620)
		else:
			IntField.__init__(self, 1620, data)

class InstrumentScopeEncodedSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1621)
		else:
			StringField.__init__(self, 1621, data)

class NoInstrumentScopes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1656)
		else:
			IntField.__init__(self, 1656, data)

class NoRequestingPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1657)
		else:
			IntField.__init__(self, 1657, data)

class RequestingPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1658)
		else:
			StringField.__init__(self, 1658, data)

class RequestingPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1659)
		else:
			CharField.__init__(self, 1659, data)

class RequestingPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1660)
		else:
			IntField.__init__(self, 1660, data)

class NoRequestingPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1661)
		else:
			IntField.__init__(self, 1661, data)

class RequestingPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1662)
		else:
			StringField.__init__(self, 1662, data)

class RequestingPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1663)
		else:
			IntField.__init__(self, 1663, data)

class EncodedRejectTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1664)
		else:
			IntField.__init__(self, 1664, data)

class EncodedRejectText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1665)
		else:
			StringField.__init__(self, 1665, data)

class RiskLimitRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1666)
		else:
			StringField.__init__(self, 1666, data)

class RiskLimitReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1667)
		else:
			StringField.__init__(self, 1667, data)

class NoRequestedRiskLimitType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1668)
		else:
			IntField.__init__(self, 1668, data)

class NoRiskLimits(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1669)
		else:
			IntField.__init__(self, 1669, data)

class RiskLimitID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1670)
		else:
			StringField.__init__(self, 1670, data)

class NoPartyDetails(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1671)
		else:
			IntField.__init__(self, 1671, data)

class PartyDetailStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1672)
		else:
			IntField.__init__(self, 1672, data)

class PartyDetailRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1674)
		else:
			IntField.__init__(self, 1674, data)

class RelatedPartyDetailRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1675)
		else:
			IntField.__init__(self, 1675, data)

class NoPartyUpdates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1676)
		else:
			IntField.__init__(self, 1676, data)

class NoPartyRiskLimits(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1677)
		else:
			IntField.__init__(self, 1677, data)

class PartyDetailID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1691)
		else:
			StringField.__init__(self, 1691, data)

class PartyDetailIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1692)
		else:
			CharField.__init__(self, 1692, data)

class PartyDetailRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1693)
		else:
			IntField.__init__(self, 1693, data)

class NoPartyDetailSubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1694)
		else:
			IntField.__init__(self, 1694, data)

class PartyDetailSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1695)
		else:
			StringField.__init__(self, 1695, data)

class PartyDetailSubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1696)
		else:
			IntField.__init__(self, 1696, data)

class SecurityMassTradingStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1679)
		else:
			IntField.__init__(self, 1679, data)

class SecurityMassTradingEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1680)
		else:
			IntField.__init__(self, 1680, data)

class MassHaltReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1681)
		else:
			IntField.__init__(self, 1681, data)

class MDSecurityTradingStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1682)
		else:
			IntField.__init__(self, 1682, data)

class MDSubFeedType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1683)
		else:
			StringField.__init__(self, 1683, data)

class MDHaltReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1684)
		else:
			IntField.__init__(self, 1684, data)

class SideTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1506)
		else:
			StringField.__init__(self, 1506, data)

class SideOrigTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1507)
		else:
			StringField.__init__(self, 1507, data)

class DifferentialPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1522)
		else:
			DoubleField.__init__(self, 1522, data)

class TrdAckStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1523)
		else:
			IntField.__init__(self, 1523, data)

class PriceQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1524)
		else:
			StringField.__init__(self, 1524, data)

class UnderlyingPriceQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1526)
		else:
			StringField.__init__(self, 1526, data)

class LegPriceQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1528)
		else:
			StringField.__init__(self, 1528, data)

class DerivativePriceQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1576)
		else:
			StringField.__init__(self, 1576, data)

class NoSecurityClassifications(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1582)
		else:
			IntField.__init__(self, 1582, data)

class SecurityClassificationReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1583)
		else:
			IntField.__init__(self, 1583, data)

class SecurityClassificationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1584)
		else:
			StringField.__init__(self, 1584, data)

class PosAmtReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1585)
		else:
			IntField.__init__(self, 1585, data)

class NoLegPosAmt(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1586)
		else:
			IntField.__init__(self, 1586, data)

class LegPosAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1587)
		else:
			DoubleField.__init__(self, 1587, data)

class LegPosAmtType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1588)
		else:
			StringField.__init__(self, 1588, data)

class LegPosCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1589)
		else:
			StringField.__init__(self, 1589, data)

class LegPosAmtReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1590)
		else:
			IntField.__init__(self, 1590, data)

class LegQtyType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1591)
		else:
			IntField.__init__(self, 1591, data)

class DiscountFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1592)
		else:
			DoubleField.__init__(self, 1592, data)

class ParentAllocID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1593)
		else:
			StringField.__init__(self, 1593, data)

class LegSecurityGroup(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1594)
		else:
			StringField.__init__(self, 1594, data)

class PositionContingentPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1595)
		else:
			DoubleField.__init__(self, 1595, data)

class ClearingTradePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1596)
		else:
			DoubleField.__init__(self, 1596, data)

class SideClearingTradePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1597)
		else:
			DoubleField.__init__(self, 1597, data)

class SideClearingTradePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1598)
		else:
			IntField.__init__(self, 1598, data)

class SidePriceDifferential(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1599)
		else:
			DoubleField.__init__(self, 1599, data)

class FIXEngineName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1600)
		else:
			StringField.__init__(self, 1600, data)

class FIXEngineVersion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1601)
		else:
			StringField.__init__(self, 1601, data)

class FIXEngineVendor(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1602)
		else:
			StringField.__init__(self, 1602, data)

class ApplicationSystemName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1603)
		else:
			StringField.__init__(self, 1603, data)

class ApplicationSystemVersion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1604)
		else:
			StringField.__init__(self, 1604, data)

class ApplicationSystemVendor(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1605)
		else:
			StringField.__init__(self, 1605, data)

class NumOfSimpleInstruments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1606)
		else:
			IntField.__init__(self, 1606, data)

class SecurityRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1607)
		else:
			IntField.__init__(self, 1607, data)

class InitialDisplayQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1608)
		else:
			DoubleField.__init__(self, 1608, data)

class ThrottleStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1609)
		else:
			IntField.__init__(self, 1609, data)

class NoThrottles(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1610)
		else:
			IntField.__init__(self, 1610, data)

class ThrottleAction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1611)
		else:
			IntField.__init__(self, 1611, data)

class ThrottleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1612)
		else:
			IntField.__init__(self, 1612, data)

class ThrottleNoMsgs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1613)
		else:
			IntField.__init__(self, 1613, data)

class ThrottleTimeInterval(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1614)
		else:
			IntField.__init__(self, 1614, data)

class ThrottleTimeUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1615)
		else:
			IntField.__init__(self, 1615, data)

class NoThrottleMsgType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1618)
		else:
			IntField.__init__(self, 1618, data)

class ThrottleMsgType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1619)
		else:
			StringField.__init__(self, 1619, data)

class ThrottleInst(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1685)
		else:
			IntField.__init__(self, 1685, data)

class ThrottleCountIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1686)
		else:
			IntField.__init__(self, 1686, data)

class AccountSummaryReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1699)
		else:
			StringField.__init__(self, 1699, data)

class NoSettlementAmounts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1700)
		else:
			IntField.__init__(self, 1700, data)

class SettlementAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1701)
		else:
			DoubleField.__init__(self, 1701, data)

class SettlementAmountCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1702)
		else:
			StringField.__init__(self, 1702, data)

class NoCollateralAmounts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1703)
		else:
			IntField.__init__(self, 1703, data)

class CurrentCollateralAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1704)
		else:
			DoubleField.__init__(self, 1704, data)

class CollateralCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1705)
		else:
			StringField.__init__(self, 1705, data)

class CollateralType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1706)
		else:
			StringField.__init__(self, 1706, data)

class NoPayCollects(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1707)
		else:
			IntField.__init__(self, 1707, data)

class PayAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1710)
		else:
			DoubleField.__init__(self, 1710, data)

class CollectAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1711)
		else:
			DoubleField.__init__(self, 1711, data)

class PayCollectType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1708)
		else:
			StringField.__init__(self, 1708, data)

class PayCollectCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1709)
		else:
			StringField.__init__(self, 1709, data)

class PayCollectMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1712)
		else:
			StringField.__init__(self, 1712, data)

class PayCollectMarketID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1713)
		else:
			StringField.__init__(self, 1713, data)

class MarginAmountMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1714)
		else:
			StringField.__init__(self, 1714, data)

class MarginAmountMarketID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1715)
		else:
			StringField.__init__(self, 1715, data)

class FirmGroupID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1728)
		else:
			StringField.__init__(self, 1728, data)

class FirmMnemonic(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1729)
		else:
			StringField.__init__(self, 1729, data)

class AllocGroupID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1730)
		else:
			StringField.__init__(self, 1730, data)

class AvgPxGroupID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1731)
		else:
			StringField.__init__(self, 1731, data)

class FirmAllocText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1732)
		else:
			StringField.__init__(self, 1732, data)

class EncodedFirmAllocTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1733)
		else:
			IntField.__init__(self, 1733, data)

class EncodedFirmAllocText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1734)
		else:
			StringField.__init__(self, 1734, data)

class AllocationRollupInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1735)
		else:
			IntField.__init__(self, 1735, data)

class AllocGroupQuantity(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1736)
		else:
			DoubleField.__init__(self, 1736, data)

class AllocGroupRemainingQuantity(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1737)
		else:
			DoubleField.__init__(self, 1737, data)

class AllocReversalStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1738)
		else:
			IntField.__init__(self, 1738, data)

class ObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1739)
		else:
			StringField.__init__(self, 1739, data)

class TradePriceNegotiationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1740)
		else:
			IntField.__init__(self, 1740, data)

class UpfrontPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1741)
		else:
			IntField.__init__(self, 1741, data)

class UpfrontPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1742)
		else:
			DoubleField.__init__(self, 1742, data)

class LastUpfrontPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1743)
		else:
			DoubleField.__init__(self, 1743, data)

class ShortSaleRestriction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1687)
		else:
			IntField.__init__(self, 1687, data)

class ShortSaleExemptionReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1688)
		else:
			IntField.__init__(self, 1688, data)

class LegShortSaleExemptionReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1689)
		else:
			IntField.__init__(self, 1689, data)

class SideShortSaleExemptionReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1690)
		else:
			IntField.__init__(self, 1690, data)

class UnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1716)
		else:
			StringField.__init__(self, 1716, data)

class PriceUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1717)
		else:
			StringField.__init__(self, 1717, data)

class UnderlyingUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1718)
		else:
			StringField.__init__(self, 1718, data)

class UnderlyingPriceUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1719)
		else:
			StringField.__init__(self, 1719, data)

class LegUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1720)
		else:
			StringField.__init__(self, 1720, data)

class LegPriceUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1721)
		else:
			StringField.__init__(self, 1721, data)

class DerivativeUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1722)
		else:
			StringField.__init__(self, 1722, data)

class DerivativePriceUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1723)
		else:
			StringField.__init__(self, 1723, data)

class ApplLevelRecoveryIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1744)
		else:
			IntField.__init__(self, 1744, data)

class BidMDEntryID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1745)
		else:
			StringField.__init__(self, 1745, data)

class OfferMDEntryID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1746)
		else:
			StringField.__init__(self, 1746, data)

class BidQuoteID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1747)
		else:
			StringField.__init__(self, 1747, data)

class OfferQuoteID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1748)
		else:
			StringField.__init__(self, 1748, data)

class TotalBidSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1749)
		else:
			DoubleField.__init__(self, 1749, data)

class TotalOfferSize(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1750)
		else:
			DoubleField.__init__(self, 1750, data)

class SecondaryQuoteID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1751)
		else:
			StringField.__init__(self, 1751, data)

class CustodialLotID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1752)
		else:
			StringField.__init__(self, 1752, data)

class VersusPurchaseDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1753)
		else:
			StringField.__init__(self, 1753, data)

class VersusPurchasePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1754)
		else:
			DoubleField.__init__(self, 1754, data)

class CurrentCostBasis(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1755)
		else:
			DoubleField.__init__(self, 1755, data)

class LegCustodialLotID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1756)
		else:
			StringField.__init__(self, 1756, data)

class LegVersusPurchaseDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1757)
		else:
			StringField.__init__(self, 1757, data)

class LegVersusPurchasePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1758)
		else:
			DoubleField.__init__(self, 1758, data)

class LegCurrentCostBasis(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1759)
		else:
			DoubleField.__init__(self, 1759, data)

class RiskLimitRequestType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1760)
		else:
			IntField.__init__(self, 1760, data)

class RiskLimitRequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1761)
		else:
			IntField.__init__(self, 1761, data)

class RiskLimitRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1762)
		else:
			IntField.__init__(self, 1762, data)

class RiskLimitStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1763)
		else:
			IntField.__init__(self, 1763, data)

class RiskLimitResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1764)
		else:
			IntField.__init__(self, 1764, data)

class RiskLimitUtilizationPercent(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1765)
		else:
			DoubleField.__init__(self, 1765, data)

class RiskLimitUtilizationAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1766)
		else:
			DoubleField.__init__(self, 1766, data)

class RiskLimitAction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1767)
		else:
			IntField.__init__(self, 1767, data)

class RiskWarningLevelAmount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1768)
		else:
			IntField.__init__(self, 1768, data)

class RiskWarningLevelAction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1769)
		else:
			IntField.__init__(self, 1769, data)

class EntitlementRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1770)
		else:
			StringField.__init__(self, 1770, data)

class EntitlementReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1771)
		else:
			StringField.__init__(self, 1771, data)

class NoPartyEntitlements(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1772)
		else:
			IntField.__init__(self, 1772, data)

class NoEntitlements(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1773)
		else:
			IntField.__init__(self, 1773, data)

class EntitlementIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1774)
		else:
			BoolField.__init__(self, 1774, data)

class EntitlementType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1775)
		else:
			IntField.__init__(self, 1775, data)

class EntitlementID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1776)
		else:
			StringField.__init__(self, 1776, data)

class NoEntitlementAttrib(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1777)
		else:
			IntField.__init__(self, 1777, data)

class EntitlementAttribType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1778)
		else:
			IntField.__init__(self, 1778, data)

class EntitlementAttribDatatype(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1779)
		else:
			IntField.__init__(self, 1779, data)

class EntitlementAttribValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1780)
		else:
			StringField.__init__(self, 1780, data)

class EntitlementAttribCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1781)
		else:
			StringField.__init__(self, 1781, data)

class EntitlementStartDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1782)
		else:
			StringField.__init__(self, 1782, data)

class EntitlementEndDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1783)
		else:
			StringField.__init__(self, 1783, data)

class EntitlementPlatform(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1784)
		else:
			StringField.__init__(self, 1784, data)

class TradSesControl(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1785)
		else:
			IntField.__init__(self, 1785, data)

class TradeVolType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1786)
		else:
			IntField.__init__(self, 1786, data)

class RefTickTableID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1787)
		else:
			IntField.__init__(self, 1787, data)

class LegID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1788)
		else:
			StringField.__init__(self, 1788, data)

class NoTargetMarketSegments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1789)
		else:
			IntField.__init__(self, 1789, data)

class TargetMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1790)
		else:
			StringField.__init__(self, 1790, data)

class NoAffectedMarketSegments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1791)
		else:
			IntField.__init__(self, 1791, data)

class AffectedMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1792)
		else:
			StringField.__init__(self, 1792, data)

class NoNotAffectedMarketSegments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1793)
		else:
			IntField.__init__(self, 1793, data)

class NotAffectedMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1794)
		else:
			StringField.__init__(self, 1794, data)

class NoOrderEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1795)
		else:
			IntField.__init__(self, 1795, data)

class OrderEventType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1796)
		else:
			IntField.__init__(self, 1796, data)

class OrderEventExecID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1797)
		else:
			StringField.__init__(self, 1797, data)

class OrderEventReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1798)
		else:
			IntField.__init__(self, 1798, data)

class OrderEventPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1799)
		else:
			DoubleField.__init__(self, 1799, data)

class OrderEventQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1800)
		else:
			DoubleField.__init__(self, 1800, data)

class OrderEventLiquidityIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1801)
		else:
			IntField.__init__(self, 1801, data)

class OrderEventText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1802)
		else:
			StringField.__init__(self, 1802, data)

class AuctionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1803)
		else:
			IntField.__init__(self, 1803, data)

class AuctionAllocationPct(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1804)
		else:
			DoubleField.__init__(self, 1804, data)

class AuctionInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1805)
		else:
			IntField.__init__(self, 1805, data)

class RefClOrdID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1806)
		else:
			StringField.__init__(self, 1806, data)

class LockType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1807)
		else:
			IntField.__init__(self, 1807, data)

class LockedQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1808)
		else:
			DoubleField.__init__(self, 1808, data)

class SecondaryLockedQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1809)
		else:
			DoubleField.__init__(self, 1809, data)

class ReleaseInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1810)
		else:
			IntField.__init__(self, 1810, data)

class ReleaseQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1811)
		else:
			DoubleField.__init__(self, 1811, data)

class NoDisclosureInstructions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1812)
		else:
			IntField.__init__(self, 1812, data)

class DisclosureType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1813)
		else:
			IntField.__init__(self, 1813, data)

class DisclosureInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1814)
		else:
			IntField.__init__(self, 1814, data)

class TradingCapacity(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1815)
		else:
			IntField.__init__(self, 1815, data)

class ClearingAccountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1816)
		else:
			IntField.__init__(self, 1816, data)

class LegClearingAccountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1817)
		else:
			IntField.__init__(self, 1817, data)

class TargetPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1818)
		else:
			IntField.__init__(self, 1818, data)

class RelatedHighPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1819)
		else:
			DoubleField.__init__(self, 1819, data)

class RelatedLowPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1820)
		else:
			DoubleField.__init__(self, 1820, data)

class RelatedPriceSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1821)
		else:
			IntField.__init__(self, 1821, data)

class MinQtyMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1822)
		else:
			IntField.__init__(self, 1822, data)

class Triggered(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1823)
		else:
			IntField.__init__(self, 1823, data)

class AffectedOrigClOrdID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1824)
		else:
			StringField.__init__(self, 1824, data)

class NotAffSecondaryOrderID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1825)
		else:
			StringField.__init__(self, 1825, data)

class NoCrossLegs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1829)
		else:
			IntField.__init__(self, 1829, data)

class EventTimePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1826)
		else:
			IntField.__init__(self, 1826, data)

class EventTimeUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1827)
		else:
			StringField.__init__(self, 1827, data)

class LastQtyVariance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1828)
		else:
			DoubleField.__init__(self, 1828, data)

class OrderOrigination(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1724)
		else:
			IntField.__init__(self, 1724, data)

class OriginatingDeptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1725)
		else:
			StringField.__init__(self, 1725, data)

class ReceivingDeptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1726)
		else:
			StringField.__init__(self, 1726, data)

class InformationBarrierID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1727)
		else:
			StringField.__init__(self, 1727, data)

class SettlPriceIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1830)
		else:
			DoubleField.__init__(self, 1830, data)

class SettlPriceSecondaryIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1831)
		else:
			DoubleField.__init__(self, 1831, data)

class ClearedIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1832)
		else:
			IntField.__init__(self, 1832, data)

class ContractRefPosType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1833)
		else:
			IntField.__init__(self, 1833, data)

class PositionCapacity(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1834)
		else:
			IntField.__init__(self, 1834, data)

class PosQtyUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1835)
		else:
			StringField.__init__(self, 1835, data)

class PosQtyUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1836)
		else:
			StringField.__init__(self, 1836, data)

class UnderlyingContractPriceRefMonth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1837)
		else:
			StringField.__init__(self, 1837, data)

class NoTradePriceConditions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1838)
		else:
			IntField.__init__(self, 1838, data)

class TradePriceCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1839)
		else:
			IntField.__init__(self, 1839, data)

class TradeAllocStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1840)
		else:
			IntField.__init__(self, 1840, data)

class NoTradeQtys(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1841)
		else:
			IntField.__init__(self, 1841, data)

class TradeQtyType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1842)
		else:
			IntField.__init__(self, 1842, data)

class TradeQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1843)
		else:
			DoubleField.__init__(self, 1843, data)

class NoTradeAllocAmts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1844)
		else:
			IntField.__init__(self, 1844, data)

class TradeAllocAmtType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1845)
		else:
			StringField.__init__(self, 1845, data)

class TradeAllocAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1846)
		else:
			DoubleField.__init__(self, 1846, data)

class TradeAllocCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1847)
		else:
			StringField.__init__(self, 1847, data)

class TradeAllocGroupInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1848)
		else:
			IntField.__init__(self, 1848, data)

class OffsetInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1849)
		else:
			IntField.__init__(self, 1849, data)

class TradeAllocAmtReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1850)
		else:
			IntField.__init__(self, 1850, data)

class StrategyLinkID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1851)
		else:
			StringField.__init__(self, 1851, data)

class SideAvgPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1852)
		else:
			DoubleField.__init__(self, 1852, data)

class SideAvgPxIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1853)
		else:
			IntField.__init__(self, 1853, data)

class SideAvgPxGroupID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1854)
		else:
			StringField.__init__(self, 1854, data)

class NoRelatedTrades(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1855)
		else:
			IntField.__init__(self, 1855, data)

class RelatedTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1856)
		else:
			StringField.__init__(self, 1856, data)

class RelatedTradeIDSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1857)
		else:
			IntField.__init__(self, 1857, data)

class RelatedTradeDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1858)
		else:
			StringField.__init__(self, 1858, data)

class RelatedTradeMarketID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1859)
		else:
			StringField.__init__(self, 1859, data)

class RelatedTradeQuantity(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1860)
		else:
			DoubleField.__init__(self, 1860, data)

class NoRelatedPositions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1861)
		else:
			IntField.__init__(self, 1861, data)

class RelatedPositionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1862)
		else:
			StringField.__init__(self, 1862, data)

class RelatedPositionIDSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1863)
		else:
			IntField.__init__(self, 1863, data)

class RelatedPositionDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1864)
		else:
			StringField.__init__(self, 1864, data)

class OfferID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1867)
		else:
			StringField.__init__(self, 1867, data)

class NoValueChecks(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1868)
		else:
			IntField.__init__(self, 1868, data)

class ValueCheckType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1869)
		else:
			IntField.__init__(self, 1869, data)

class ValueCheckAction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1870)
		else:
			IntField.__init__(self, 1870, data)

class LegSecurityXMLLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1871)
		else:
			IntField.__init__(self, 1871, data)

class LegSecurityXML(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1872)
		else:
			StringField.__init__(self, 1872, data)

class LegSecurityXMLSchema(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1873)
		else:
			StringField.__init__(self, 1873, data)

class UnderlyingSecurityXMLLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1874)
		else:
			IntField.__init__(self, 1874, data)

class UnderlyingSecurityXML(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1875)
		else:
			StringField.__init__(self, 1875, data)

class UnderlyingSecurityXMLSchema(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1876)
		else:
			StringField.__init__(self, 1876, data)

class PartyDetailRequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1877)
		else:
			IntField.__init__(self, 1877, data)

class PartyDetailRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1878)
		else:
			IntField.__init__(self, 1878, data)

class PartyDetailDefinitionStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1879)
		else:
			IntField.__init__(self, 1879, data)

class PartyDetailDefinitionResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1880)
		else:
			IntField.__init__(self, 1880, data)

class EntitlementRequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1881)
		else:
			IntField.__init__(self, 1881, data)

class EntitlementRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1882)
		else:
			IntField.__init__(self, 1882, data)

class EntitlementStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1883)
		else:
			IntField.__init__(self, 1883, data)

class EntitlementResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1884)
		else:
			IntField.__init__(self, 1884, data)

class EntitlementRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1885)
		else:
			StringField.__init__(self, 1885, data)

class SettlPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1886)
		else:
			StringField.__init__(self, 1886, data)

class SettlPriceUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1887)
		else:
			StringField.__init__(self, 1887, data)

class TradeMatchTimestamp(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 1888)
		else:
			UtcTimeStampField.__init__(self, 1888, data)

class NoInstrmtMatchSides(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1889)
		else:
			IntField.__init__(self, 1889, data)

class NoTrdMatchSides(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1890)
		else:
			IntField.__init__(self, 1890, data)

class TrdMatchSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1891)
		else:
			StringField.__init__(self, 1891, data)

class NoLegExecs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1892)
		else:
			IntField.__init__(self, 1892, data)

class LegExecID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1893)
		else:
			StringField.__init__(self, 1893, data)

class LegTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1894)
		else:
			StringField.__init__(self, 1894, data)

class LegTradeReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1895)
		else:
			StringField.__init__(self, 1895, data)

class TradeMatchAckStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1896)
		else:
			IntField.__init__(self, 1896, data)

class TradeMatchRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1897)
		else:
			IntField.__init__(self, 1897, data)

class SideMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1898)
		else:
			StringField.__init__(self, 1898, data)

class SideVenueType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 1899)
		else:
			CharField.__init__(self, 1899, data)

class SideExecRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1900)
		else:
			StringField.__init__(self, 1900, data)

class LegExecRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1901)
		else:
			StringField.__init__(self, 1901, data)

class HaircutIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1902)
		else:
			BoolField.__init__(self, 1902, data)

class NumOfCompetitors(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1913)
		else:
			IntField.__init__(self, 1913, data)

class ResponseTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 1914)
		else:
			UtcTimeStampField.__init__(self, 1914, data)

class QuoteDisplayTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 1915)
		else:
			UtcTimeStampField.__init__(self, 1915, data)

class ExposureDurationUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1916)
		else:
			IntField.__init__(self, 1916, data)

class CoverPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1917)
		else:
			DoubleField.__init__(self, 1917, data)

class NoClearingAccountTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1918)
		else:
			IntField.__init__(self, 1918, data)

class NoPriceMovements(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1919)
		else:
			IntField.__init__(self, 1919, data)

class NoPriceMovementValues(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1920)
		else:
			IntField.__init__(self, 1920, data)

class PriceMovementValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1921)
		else:
			DoubleField.__init__(self, 1921, data)

class PriceMovementPoint(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1922)
		else:
			IntField.__init__(self, 1922, data)

class PriceMovementType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1923)
		else:
			IntField.__init__(self, 1923, data)

class EncodedEventTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1578)
		else:
			IntField.__init__(self, 1578, data)

class EncodedEventText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1579)
		else:
			StringField.__init__(self, 1579, data)

class RegulatoryTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1903)
		else:
			StringField.__init__(self, 1903, data)

class RegulatoryTradeIDEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1904)
		else:
			IntField.__init__(self, 1904, data)

class RegulatoryTradeIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1905)
		else:
			StringField.__init__(self, 1905, data)

class RegulatoryTradeIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1906)
		else:
			IntField.__init__(self, 1906, data)

class NoRegulatoryTradeIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1907)
		else:
			IntField.__init__(self, 1907, data)

class NoAllocRegulatoryTradeIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1908)
		else:
			IntField.__init__(self, 1908, data)

class AllocRegulatoryTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1909)
		else:
			StringField.__init__(self, 1909, data)

class AllocRegulatoryTradeIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1910)
		else:
			StringField.__init__(self, 1910, data)

class AllocRegulatoryTradeIDEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1911)
		else:
			IntField.__init__(self, 1911, data)

class AllocRegulatoryTradeIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1912)
		else:
			IntField.__init__(self, 1912, data)

class ClearingIntention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1924)
		else:
			IntField.__init__(self, 1924, data)

class TradeClearingInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1925)
		else:
			IntField.__init__(self, 1925, data)

class BackloadedTradeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1926)
		else:
			BoolField.__init__(self, 1926, data)

class ConfirmationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1927)
		else:
			IntField.__init__(self, 1927, data)

class MandatoryClearingIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1928)
		else:
			BoolField.__init__(self, 1928, data)

class MixedSwapIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1929)
		else:
			BoolField.__init__(self, 1929, data)

class OffMarketPriceIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1930)
		else:
			BoolField.__init__(self, 1930, data)

class VerificationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1931)
		else:
			IntField.__init__(self, 1931, data)

class ClearingRequirementException(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1932)
		else:
			IntField.__init__(self, 1932, data)

class IRSDirection(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1933)
		else:
			StringField.__init__(self, 1933, data)

class RegulatoryReportType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1934)
		else:
			IntField.__init__(self, 1934, data)

class VoluntaryRegulatoryReport(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 1935)
		else:
			BoolField.__init__(self, 1935, data)

class TradeCollateralization(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1936)
		else:
			IntField.__init__(self, 1936, data)

class TradeContinuation(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1937)
		else:
			IntField.__init__(self, 1937, data)

class AssetClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1938)
		else:
			IntField.__init__(self, 1938, data)

class AssetSubClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1939)
		else:
			IntField.__init__(self, 1939, data)

class AssetType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1940)
		else:
			StringField.__init__(self, 1940, data)

class SwapClass(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1941)
		else:
			StringField.__init__(self, 1941, data)

class NthToDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1942)
		else:
			IntField.__init__(self, 1942, data)

class MthToDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1943)
		else:
			IntField.__init__(self, 1943, data)

class SettledEntityMatrixSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1944)
		else:
			StringField.__init__(self, 1944, data)

class SettledEntityMatrixPublicationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1945)
		else:
			StringField.__init__(self, 1945, data)

class CouponType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1946)
		else:
			IntField.__init__(self, 1946, data)

class TotalIssuedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1947)
		else:
			DoubleField.__init__(self, 1947, data)

class CouponFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1948)
		else:
			IntField.__init__(self, 1948, data)

class CouponFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1949)
		else:
			StringField.__init__(self, 1949, data)

class CouponDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1950)
		else:
			IntField.__init__(self, 1950, data)

class ConvertibleBondEquityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1951)
		else:
			StringField.__init__(self, 1951, data)

class ConvertibleBondEquityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1952)
		else:
			StringField.__init__(self, 1952, data)

class ContractPriceRefMonth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1953)
		else:
			StringField.__init__(self, 1953, data)

class LienSeniority(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1954)
		else:
			IntField.__init__(self, 1954, data)

class LoanFacility(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1955)
		else:
			IntField.__init__(self, 1955, data)

class ReferenceEntityType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1956)
		else:
			IntField.__init__(self, 1956, data)

class IndexSeries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1957)
		else:
			IntField.__init__(self, 1957, data)

class IndexAnnexVersion(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1958)
		else:
			IntField.__init__(self, 1958, data)

class IndexAnnexDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1959)
		else:
			StringField.__init__(self, 1959, data)

class IndexAnnexSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1960)
		else:
			StringField.__init__(self, 1960, data)

class AgreementVersion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1961)
		else:
			StringField.__init__(self, 1961, data)

class MasterConfirmationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1962)
		else:
			StringField.__init__(self, 1962, data)

class MasterConfirmationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1963)
		else:
			StringField.__init__(self, 1963, data)

class MasterConfirmationAnnexDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1964)
		else:
			StringField.__init__(self, 1964, data)

class MasterConfirmationAnnexDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1965)
		else:
			StringField.__init__(self, 1965, data)

class BrokerConfirmationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1966)
		else:
			StringField.__init__(self, 1966, data)

class CreditSupportAgreementDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1967)
		else:
			StringField.__init__(self, 1967, data)

class CreditSupportAgreementDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1968)
		else:
			StringField.__init__(self, 1968, data)

class CreditSupportAgreementID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1969)
		else:
			StringField.__init__(self, 1969, data)

class GoverningLaw(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1970)
		else:
			StringField.__init__(self, 1970, data)

class NoSideRegulatoryTradeIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1971)
		else:
			IntField.__init__(self, 1971, data)

class SideRegulatoryTradeID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1972)
		else:
			StringField.__init__(self, 1972, data)

class SideRegulatoryTradeIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1973)
		else:
			StringField.__init__(self, 1973, data)

class SideRegulatoryTradeIDEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1974)
		else:
			IntField.__init__(self, 1974, data)

class SideRegulatoryTradeIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1975)
		else:
			IntField.__init__(self, 1975, data)

class NoSecondaryAssetClasses(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1976)
		else:
			IntField.__init__(self, 1976, data)

class SecondaryAssetClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1977)
		else:
			IntField.__init__(self, 1977, data)

class SecondaryAssetSubClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1978)
		else:
			IntField.__init__(self, 1978, data)

class SecondaryAssetType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1979)
		else:
			StringField.__init__(self, 1979, data)

class BlockTrdAllocIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1980)
		else:
			IntField.__init__(self, 1980, data)

class NoUnderlyingEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1981)
		else:
			IntField.__init__(self, 1981, data)

class UnderlyingEventType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1982)
		else:
			IntField.__init__(self, 1982, data)

class UnderlyingEventDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1983)
		else:
			StringField.__init__(self, 1983, data)

class UnderlyingEventTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 1984)
		else:
			UtcTimeStampField.__init__(self, 1984, data)

class UnderlyingEventTimeUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1985)
		else:
			StringField.__init__(self, 1985, data)

class UnderlyingEventTimePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1986)
		else:
			IntField.__init__(self, 1986, data)

class UnderlyingEventPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1987)
		else:
			DoubleField.__init__(self, 1987, data)

class UnderlyingConstituentWeight(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1988)
		else:
			DoubleField.__init__(self, 1988, data)

class UnderlyingCouponType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1989)
		else:
			IntField.__init__(self, 1989, data)

class UnderlyingTotalIssuedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1990)
		else:
			DoubleField.__init__(self, 1990, data)

class UnderlyingCouponFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1991)
		else:
			IntField.__init__(self, 1991, data)

class UnderlyingCouponFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1992)
		else:
			StringField.__init__(self, 1992, data)

class UnderlyingCouponDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1993)
		else:
			IntField.__init__(self, 1993, data)

class UnderlyingObligationID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1994)
		else:
			StringField.__init__(self, 1994, data)

class UnderlyingObligationIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1995)
		else:
			StringField.__init__(self, 1995, data)

class UnderlyingEquityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1996)
		else:
			StringField.__init__(self, 1996, data)

class UnderlyingEquityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1997)
		else:
			StringField.__init__(self, 1997, data)

class UnderlyingLienSeniority(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1998)
		else:
			IntField.__init__(self, 1998, data)

class UnderlyingLoanFacility(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1999)
		else:
			IntField.__init__(self, 1999, data)

class UnderlyingReferenceEntityType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2000)
		else:
			IntField.__init__(self, 2000, data)

class UnderlyingProtectionTermXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41314)
		else:
			StringField.__init__(self, 41314, data)

class UnderlyingSettlTermXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41315)
		else:
			StringField.__init__(self, 41315, data)

class UnderlyingIndexSeries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2003)
		else:
			IntField.__init__(self, 2003, data)

class UnderlyingIndexAnnexVersion(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2004)
		else:
			IntField.__init__(self, 2004, data)

class UnderlyingIndexAnnexDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2005)
		else:
			StringField.__init__(self, 2005, data)

class UnderlyingIndexAnnexSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2006)
		else:
			StringField.__init__(self, 2006, data)

class UnderlyingProductComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2007)
		else:
			StringField.__init__(self, 2007, data)

class UnderlyingSecurityGroup(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2008)
		else:
			StringField.__init__(self, 2008, data)

class UnderlyingSettleOnOpenFlag(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2009)
		else:
			StringField.__init__(self, 2009, data)

class UnderlyingAssignmentMethod(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2010)
		else:
			CharField.__init__(self, 2010, data)

class UnderlyingSecurityStatus(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2011)
		else:
			StringField.__init__(self, 2011, data)

class UnderlyingObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2012)
		else:
			StringField.__init__(self, 2012, data)

class UnderlyingAssetClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2013)
		else:
			IntField.__init__(self, 2013, data)

class UnderlyingAssetSubClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2014)
		else:
			IntField.__init__(self, 2014, data)

class UnderlyingAssetType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2015)
		else:
			StringField.__init__(self, 2015, data)

class UnderlyingSwapClass(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2016)
		else:
			StringField.__init__(self, 2016, data)

class UnderlyingNthToDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2017)
		else:
			IntField.__init__(self, 2017, data)

class UnderlyingMthToDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2018)
		else:
			IntField.__init__(self, 2018, data)

class UnderlyingSettledEntityMatrixSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2019)
		else:
			StringField.__init__(self, 2019, data)

class UnderlyingSettledEntityMatrixPublicationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2020)
		else:
			StringField.__init__(self, 2020, data)

class UnderlyingStrikeMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2021)
		else:
			DoubleField.__init__(self, 2021, data)

class UnderlyingStrikeValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2022)
		else:
			DoubleField.__init__(self, 2022, data)

class UnderlyingStrikePriceDeterminationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2023)
		else:
			IntField.__init__(self, 2023, data)

class UnderlyingStrikePriceBoundaryMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2024)
		else:
			IntField.__init__(self, 2024, data)

class UnderlyingStrikePriceBoundaryPrecision(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2025)
		else:
			DoubleField.__init__(self, 2025, data)

class UnderlyingMinPriceIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2026)
		else:
			DoubleField.__init__(self, 2026, data)

class UnderlyingMinPriceIncrementAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2027)
		else:
			DoubleField.__init__(self, 2027, data)

class UnderlyingOptPayoutType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2028)
		else:
			IntField.__init__(self, 2028, data)

class UnderlyingOptPayoutAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2029)
		else:
			DoubleField.__init__(self, 2029, data)

class UnderlyingPriceQuoteMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2030)
		else:
			StringField.__init__(self, 2030, data)

class UnderlyingValuationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2031)
		else:
			StringField.__init__(self, 2031, data)

class UnderlyingListMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2032)
		else:
			IntField.__init__(self, 2032, data)

class UnderlyingCapPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2033)
		else:
			DoubleField.__init__(self, 2033, data)

class UnderlyingFloorPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2034)
		else:
			DoubleField.__init__(self, 2034, data)

class UnderlyingFlexibleIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2035)
		else:
			BoolField.__init__(self, 2035, data)

class UnderlyingFlexProductEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2036)
		else:
			BoolField.__init__(self, 2036, data)

class UnderlyingPositionLimit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2037)
		else:
			IntField.__init__(self, 2037, data)

class UnderlyingNTPositionLimit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2038)
		else:
			IntField.__init__(self, 2038, data)

class UnderlyingPool(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2039)
		else:
			StringField.__init__(self, 2039, data)

class UnderlyingContractSettlMonth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2040)
		else:
			StringField.__init__(self, 2040, data)

class UnderlyingDatedDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2041)
		else:
			StringField.__init__(self, 2041, data)

class UnderlyingInterestAccrualDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2042)
		else:
			StringField.__init__(self, 2042, data)

class UnderlyingShortSaleRestriction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2043)
		else:
			IntField.__init__(self, 2043, data)

class UnderlyingRefTickTableID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2044)
		else:
			IntField.__init__(self, 2044, data)

class NoUnderlyingComplexEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2045)
		else:
			IntField.__init__(self, 2045, data)

class UnderlyingComplexEventType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2046)
		else:
			IntField.__init__(self, 2046, data)

class UnderlyingComplexOptPayoutAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2047)
		else:
			DoubleField.__init__(self, 2047, data)

class UnderlyingComplexEventPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2048)
		else:
			DoubleField.__init__(self, 2048, data)

class UnderlyingComplexEventPriceBoundaryMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2049)
		else:
			IntField.__init__(self, 2049, data)

class UnderlyingComplexEventPriceBoundaryPrecision(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2050)
		else:
			DoubleField.__init__(self, 2050, data)

class UnderlyingComplexEventPriceTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2051)
		else:
			IntField.__init__(self, 2051, data)

class UnderlyingComplexEventCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2052)
		else:
			IntField.__init__(self, 2052, data)

class NoUnderlyingComplexEventDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2053)
		else:
			IntField.__init__(self, 2053, data)

class UnderlyingComplexEventStartDate(UtcDateField):
	def __init__(self, data = None):
		if data == None:
			UtcDateField.__init__(self, 2054)
		else:
			UtcDateField.__init__(self, 2054, data)

class UnderlyingComplexEventEndDate(UtcDateField):
	def __init__(self, data = None):
		if data == None:
			UtcDateField.__init__(self, 2055)
		else:
			UtcDateField.__init__(self, 2055, data)

class NoUnderlyingComplexEventTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2056)
		else:
			IntField.__init__(self, 2056, data)

class UnderlyingComplexEventStartTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 2057)
		else:
			UtcTimeOnlyField.__init__(self, 2057, data)

class UnderlyingComplexEventEndTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 2058)
		else:
			UtcTimeOnlyField.__init__(self, 2058, data)

class NoLegEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2059)
		else:
			IntField.__init__(self, 2059, data)

class LegEventType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2060)
		else:
			IntField.__init__(self, 2060, data)

class LegEventDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2061)
		else:
			StringField.__init__(self, 2061, data)

class LegEventTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2062)
		else:
			UtcTimeStampField.__init__(self, 2062, data)

class LegEventTimeUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2063)
		else:
			StringField.__init__(self, 2063, data)

class LegEventTimePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2064)
		else:
			IntField.__init__(self, 2064, data)

class LegEventPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2065)
		else:
			DoubleField.__init__(self, 2065, data)

class LegEventText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2066)
		else:
			StringField.__init__(self, 2066, data)

class LegAssetClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2067)
		else:
			IntField.__init__(self, 2067, data)

class LegAssetSubClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2068)
		else:
			IntField.__init__(self, 2068, data)

class LegAssetType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2069)
		else:
			StringField.__init__(self, 2069, data)

class LegSwapClass(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2070)
		else:
			StringField.__init__(self, 2070, data)

class UnderlyingEventText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2071)
		else:
			StringField.__init__(self, 2071, data)

class EncodedUnderlyingEventTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2072)
		else:
			IntField.__init__(self, 2072, data)

class EncodedUnderlyingEventText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2073)
		else:
			StringField.__init__(self, 2073, data)

class EncodedLegEventTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2074)
		else:
			IntField.__init__(self, 2074, data)

class EncodedLegEventText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2075)
		else:
			StringField.__init__(self, 2075, data)

class NoLegSecondaryAssetClasses(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2076)
		else:
			IntField.__init__(self, 2076, data)

class LegSecondaryAssetClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2077)
		else:
			IntField.__init__(self, 2077, data)

class LegSecondaryAssetSubClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2078)
		else:
			IntField.__init__(self, 2078, data)

class LegSecondaryAssetType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2079)
		else:
			StringField.__init__(self, 2079, data)

class NoUnderlyingSecondaryAssetClasses(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2080)
		else:
			IntField.__init__(self, 2080, data)

class UnderlyingSecondaryAssetClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2081)
		else:
			IntField.__init__(self, 2081, data)

class UnderlyingSecondaryAssetSubClass(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2082)
		else:
			IntField.__init__(self, 2082, data)

class UnderlyingSecondaryAssetType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2083)
		else:
			StringField.__init__(self, 2083, data)

class NoAdditionalTermBondRefs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40000)
		else:
			IntField.__init__(self, 40000, data)

class AdditionalTermBondSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40001)
		else:
			StringField.__init__(self, 40001, data)

class AdditionalTermBondSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40002)
		else:
			StringField.__init__(self, 40002, data)

class AdditionalTermBondDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40003)
		else:
			StringField.__init__(self, 40003, data)

class EncodedAdditionalTermBondDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40004)
		else:
			IntField.__init__(self, 40004, data)

class EncodedAdditionalTermBondDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40005)
		else:
			StringField.__init__(self, 40005, data)

class AdditionalTermBondCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40006)
		else:
			StringField.__init__(self, 40006, data)

class AdditionalTermBondIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40007)
		else:
			StringField.__init__(self, 40007, data)

class EncodedAdditionalTermBondIssuerLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40008)
		else:
			IntField.__init__(self, 40008, data)

class EncodedAdditionalTermBondIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40009)
		else:
			StringField.__init__(self, 40009, data)

class AdditionalTermBondSeniority(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40010)
		else:
			StringField.__init__(self, 40010, data)

class AdditionalTermBondCouponType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40011)
		else:
			IntField.__init__(self, 40011, data)

class AdditionalTermBondCouponRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40012)
		else:
			DoubleField.__init__(self, 40012, data)

class AdditionalTermBondMaturityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40013)
		else:
			StringField.__init__(self, 40013, data)

class AdditionalTermBondParValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40014)
		else:
			DoubleField.__init__(self, 40014, data)

class AdditionalTermBondCurrentTotalIssuedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40015)
		else:
			DoubleField.__init__(self, 40015, data)

class AdditionalTermBondCouponFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40016)
		else:
			IntField.__init__(self, 40016, data)

class AdditionalTermBondCouponFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40017)
		else:
			StringField.__init__(self, 40017, data)

class AdditionalTermBondDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40018)
		else:
			IntField.__init__(self, 40018, data)

class NoAdditionalTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40019)
		else:
			IntField.__init__(self, 40019, data)

class AdditionalTermConditionPrecedentBondIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40020)
		else:
			BoolField.__init__(self, 40020, data)

class AdditionalTermDiscrepancyClauseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40021)
		else:
			BoolField.__init__(self, 40021, data)

class NoCashSettlTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40022)
		else:
			IntField.__init__(self, 40022, data)

class CashSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40023)
		else:
			StringField.__init__(self, 40023, data)

class CashSettlValuationFirstBusinessDayOffset(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40024)
		else:
			IntField.__init__(self, 40024, data)

class CashSettlValuationSubsequentBusinessDaysOffset(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40916)
		else:
			IntField.__init__(self, 40916, data)

class CashSettlNumOfValuationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40917)
		else:
			IntField.__init__(self, 40917, data)

class CashSettlValuationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40025)
		else:
			StringField.__init__(self, 40025, data)

class CashSettlBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40026)
		else:
			StringField.__init__(self, 40026, data)

class CashSettlQuoteMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40027)
		else:
			IntField.__init__(self, 40027, data)

class CashSettlQuoteAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40028)
		else:
			DoubleField.__init__(self, 40028, data)

class CashSettlQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40029)
		else:
			StringField.__init__(self, 40029, data)

class CashSettlMinimumQuoteAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40030)
		else:
			DoubleField.__init__(self, 40030, data)

class CashSettlMinimumQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40031)
		else:
			StringField.__init__(self, 40031, data)

class CashSettlDealer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40032)
		else:
			StringField.__init__(self, 40032, data)

class CashSettlBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40033)
		else:
			IntField.__init__(self, 40033, data)

class CashSettlAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40034)
		else:
			DoubleField.__init__(self, 40034, data)

class CashSettlRecoveryFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40035)
		else:
			DoubleField.__init__(self, 40035, data)

class CashSettlFixedTermIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40036)
		else:
			BoolField.__init__(self, 40036, data)

class CashSettlAccruedInterestIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40037)
		else:
			BoolField.__init__(self, 40037, data)

class CashSettlValuationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40038)
		else:
			IntField.__init__(self, 40038, data)

class CashSettlTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40039)
		else:
			StringField.__init__(self, 40039, data)

class NoContractualDefinitions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40040)
		else:
			IntField.__init__(self, 40040, data)

class ContractualDefinition(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40041)
		else:
			StringField.__init__(self, 40041, data)

class NoContractualMatrices(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40042)
		else:
			IntField.__init__(self, 40042, data)

class ContractualMatrixSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40043)
		else:
			StringField.__init__(self, 40043, data)

class ContractualMatrixDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40044)
		else:
			StringField.__init__(self, 40044, data)

class ContractualMatrixTerm(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40045)
		else:
			StringField.__init__(self, 40045, data)

class NoFinancingTermSupplements(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40046)
		else:
			IntField.__init__(self, 40046, data)

class FinancingTermSupplementDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40047)
		else:
			StringField.__init__(self, 40047, data)

class FinancingTermSupplementDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40048)
		else:
			StringField.__init__(self, 40048, data)

class NoStreams(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40049)
		else:
			IntField.__init__(self, 40049, data)

class StreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40050)
		else:
			IntField.__init__(self, 40050, data)

class StreamDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40051)
		else:
			StringField.__init__(self, 40051, data)

class StreamPaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40052)
		else:
			IntField.__init__(self, 40052, data)

class StreamReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40053)
		else:
			IntField.__init__(self, 40053, data)

class StreamNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40054)
		else:
			DoubleField.__init__(self, 40054, data)

class StreamCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40055)
		else:
			StringField.__init__(self, 40055, data)

class StreamText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40056)
		else:
			StringField.__init__(self, 40056, data)

class UnderlyingStreamEffectiveDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40057)
		else:
			StringField.__init__(self, 40057, data)

class UnderlyingStreamEffectiveDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40058)
		else:
			IntField.__init__(self, 40058, data)

class UnderlyingStreamEffectiveDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40059)
		else:
			StringField.__init__(self, 40059, data)

class UnderlyingStreamEffectiveDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40060)
		else:
			IntField.__init__(self, 40060, data)

class UnderlyingStreamEffectiveDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40061)
		else:
			IntField.__init__(self, 40061, data)

class UnderlyingStreamEffectiveDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40062)
		else:
			StringField.__init__(self, 40062, data)

class UnderlyingStreamEffectiveDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40063)
		else:
			IntField.__init__(self, 40063, data)

class UnderlyingStreamEffectiveDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40064)
		else:
			StringField.__init__(self, 40064, data)

class StreamTerminationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40065)
		else:
			StringField.__init__(self, 40065, data)

class StreamTerminationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40066)
		else:
			IntField.__init__(self, 40066, data)

class StreamTerminationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40067)
		else:
			StringField.__init__(self, 40067, data)

class StreamTerminationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40068)
		else:
			IntField.__init__(self, 40068, data)

class StreamTerminationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40069)
		else:
			IntField.__init__(self, 40069, data)

class StreamTerminationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40070)
		else:
			StringField.__init__(self, 40070, data)

class StreamTerminationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40071)
		else:
			IntField.__init__(self, 40071, data)

class StreamTerminationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40072)
		else:
			StringField.__init__(self, 40072, data)

class StreamCalculationPeriodBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40073)
		else:
			IntField.__init__(self, 40073, data)

class StreamCalculationPeriodBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40074)
		else:
			StringField.__init__(self, 40074, data)

class StreamFirstPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40075)
		else:
			StringField.__init__(self, 40075, data)

class StreamFirstPeriodStartDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40076)
		else:
			IntField.__init__(self, 40076, data)

class StreamFirstPeriodStartDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40077)
		else:
			StringField.__init__(self, 40077, data)

class StreamFirstPeriodStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40078)
		else:
			StringField.__init__(self, 40078, data)

class StreamFirstRegularPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40079)
		else:
			StringField.__init__(self, 40079, data)

class StreamFirstCompoundingPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40080)
		else:
			StringField.__init__(self, 40080, data)

class StreamLastRegularPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40081)
		else:
			StringField.__init__(self, 40081, data)

class StreamCalculationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40082)
		else:
			IntField.__init__(self, 40082, data)

class StreamCalculationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40083)
		else:
			StringField.__init__(self, 40083, data)

class StreamCalculationRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40084)
		else:
			StringField.__init__(self, 40084, data)

class NoSettlRateFallbacks(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40085)
		else:
			IntField.__init__(self, 40085, data)

class SettlRatePostponementMaximumDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40086)
		else:
			IntField.__init__(self, 40086, data)

class LegPaymentStreamNonDeliverableSettlRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40087)
		else:
			IntField.__init__(self, 40087, data)

class SettlRatePostponementSurvey(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40088)
		else:
			BoolField.__init__(self, 40088, data)

class SettlRatePostponementCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40089)
		else:
			IntField.__init__(self, 40089, data)

class NoProvisions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40090)
		else:
			IntField.__init__(self, 40090, data)

class ProvisionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40091)
		else:
			IntField.__init__(self, 40091, data)

class ProvisionDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40092)
		else:
			StringField.__init__(self, 40092, data)

class ProvisionDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40093)
		else:
			IntField.__init__(self, 40093, data)

class ProvisionDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40094)
		else:
			StringField.__init__(self, 40094, data)

class ProvisionDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40095)
		else:
			StringField.__init__(self, 40095, data)

class ProvisionDateTenorPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40096)
		else:
			IntField.__init__(self, 40096, data)

class ProvisionDateTenorUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40097)
		else:
			StringField.__init__(self, 40097, data)

class ProvisionCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40098)
		else:
			IntField.__init__(self, 40098, data)

class ProvisionOptionSinglePartyBuyerSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40099)
		else:
			IntField.__init__(self, 40099, data)

class ProvisionOptionSinglePartySellerSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40100)
		else:
			IntField.__init__(self, 40100, data)

class ProvisionOptionExerciseStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40101)
		else:
			IntField.__init__(self, 40101, data)

class ProvisionOptionExerciseMultipleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40102)
		else:
			DoubleField.__init__(self, 40102, data)

class ProvisionOptionExerciseMinimumNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40103)
		else:
			DoubleField.__init__(self, 40103, data)

class ProvisionOptionExerciseMaximumNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40104)
		else:
			DoubleField.__init__(self, 40104, data)

class ProvisionOptionMinimumNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40105)
		else:
			IntField.__init__(self, 40105, data)

class ProvisionOptionMaximumNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40106)
		else:
			IntField.__init__(self, 40106, data)

class ProvisionOptionExerciseConfirmation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40107)
		else:
			BoolField.__init__(self, 40107, data)

class ProvisionCashSettlMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40108)
		else:
			IntField.__init__(self, 40108, data)

class ProvisionCashSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40109)
		else:
			StringField.__init__(self, 40109, data)

class ProvisionCashSettlCurrency2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40110)
		else:
			StringField.__init__(self, 40110, data)

class ProvisionCashSettlQuoteType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40111)
		else:
			IntField.__init__(self, 40111, data)

class ProvisionCashSettlQuoteSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40112)
		else:
			IntField.__init__(self, 40112, data)

class ProvisionText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40113)
		else:
			StringField.__init__(self, 40113, data)

class ProvisionCashSettlValueTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40114)
		else:
			StringField.__init__(self, 40114, data)

class ProvisionCashSettlValueTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40115)
		else:
			StringField.__init__(self, 40115, data)

class ProvisionCashSettlValueDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40116)
		else:
			IntField.__init__(self, 40116, data)

class ProvisionCashSettlValueDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40117)
		else:
			StringField.__init__(self, 40117, data)

class ProvisionCashSettlValueDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40118)
		else:
			IntField.__init__(self, 40118, data)

class ProvisionCashSettlValueDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40119)
		else:
			IntField.__init__(self, 40119, data)

class ProvisionCashSettlValueDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40120)
		else:
			StringField.__init__(self, 40120, data)

class ProvisionCashSettlValueDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40121)
		else:
			IntField.__init__(self, 40121, data)

class ProvisionCashSettlValueDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40122)
		else:
			StringField.__init__(self, 40122, data)

class ProvisionOptionExerciseBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40123)
		else:
			IntField.__init__(self, 40123, data)

class ProvisionOptionExerciseBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40124)
		else:
			StringField.__init__(self, 40124, data)

class ProvisionOptionExerciseEarliestDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40125)
		else:
			IntField.__init__(self, 40125, data)

class ProvisionOptionExerciseEarliestDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40126)
		else:
			StringField.__init__(self, 40126, data)

class ProvisionOptionExerciseFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40127)
		else:
			IntField.__init__(self, 40127, data)

class ProvisionOptionExerciseFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40128)
		else:
			StringField.__init__(self, 40128, data)

class ProvisionOptionExerciseStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40129)
		else:
			StringField.__init__(self, 40129, data)

class ProvisionOptionExerciseStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40130)
		else:
			IntField.__init__(self, 40130, data)

class ProvisionOptionExerciseStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40131)
		else:
			IntField.__init__(self, 40131, data)

class ProvisionOptionExerciseStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40132)
		else:
			StringField.__init__(self, 40132, data)

class ProvisionOptionExerciseStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40133)
		else:
			IntField.__init__(self, 40133, data)

class ProvisionOptionExerciseStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40134)
		else:
			StringField.__init__(self, 40134, data)

class ProvisionOptionExercisePeriodSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40135)
		else:
			IntField.__init__(self, 40135, data)

class ProvisionOptionExerciseBoundsFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40136)
		else:
			StringField.__init__(self, 40136, data)

class ProvisionOptionExerciseBoundsLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40137)
		else:
			StringField.__init__(self, 40137, data)

class ProvisionOptionExerciseEarliestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40138)
		else:
			StringField.__init__(self, 40138, data)

class ProvisionOptionExerciseEarliestTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40139)
		else:
			StringField.__init__(self, 40139, data)

class ProvisionOptionExerciseLatestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40140)
		else:
			StringField.__init__(self, 40140, data)

class ProvisionOptionExerciseLatestTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40141)
		else:
			StringField.__init__(self, 40141, data)

class NoProvisionOptionExerciseFixedDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40142)
		else:
			IntField.__init__(self, 40142, data)

class ProvisionOptionExerciseFixedDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40143)
		else:
			StringField.__init__(self, 40143, data)

class ProvisionOptionExerciseFixedDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40144)
		else:
			IntField.__init__(self, 40144, data)

class ProvisionOptionExpirationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40145)
		else:
			StringField.__init__(self, 40145, data)

class ProvisionOptionExpirationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40146)
		else:
			IntField.__init__(self, 40146, data)

class ProvisionOptionExpirationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40147)
		else:
			StringField.__init__(self, 40147, data)

class ProvisionOptionExpirationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40148)
		else:
			IntField.__init__(self, 40148, data)

class ProvisionOptionExpirationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40149)
		else:
			IntField.__init__(self, 40149, data)

class ProvisionOptionExpirationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40150)
		else:
			StringField.__init__(self, 40150, data)

class ProvisionOptionExpirationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40151)
		else:
			IntField.__init__(self, 40151, data)

class ProvisionOptionExpirationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40152)
		else:
			StringField.__init__(self, 40152, data)

class ProvisionOptionExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40153)
		else:
			StringField.__init__(self, 40153, data)

class ProvisionOptionExpirationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40154)
		else:
			StringField.__init__(self, 40154, data)

class ProvisionOptionRelevantUnderlyingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40155)
		else:
			StringField.__init__(self, 40155, data)

class ProvisionOptionRelevantUnderlyingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40156)
		else:
			IntField.__init__(self, 40156, data)

class ProvisionOptionRelevantUnderlyingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40157)
		else:
			StringField.__init__(self, 40157, data)

class ProvisionOptionRelevantUnderlyingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40158)
		else:
			IntField.__init__(self, 40158, data)

class ProvisionOptionRelevantUnderlyingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40159)
		else:
			IntField.__init__(self, 40159, data)

class ProvisionOptionRelevantUnderlyingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40160)
		else:
			StringField.__init__(self, 40160, data)

class ProvisionOptionRelevantUnderlyingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40161)
		else:
			IntField.__init__(self, 40161, data)

class ProvisionOptionRelevantUnderlyingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40162)
		else:
			StringField.__init__(self, 40162, data)

class ProvisionCashSettlPaymentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40163)
		else:
			IntField.__init__(self, 40163, data)

class ProvisionCashSettlPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40164)
		else:
			StringField.__init__(self, 40164, data)

class ProvisionCashSettlPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40165)
		else:
			IntField.__init__(self, 40165, data)

class ProvisionCashSettlPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40166)
		else:
			IntField.__init__(self, 40166, data)

class ProvisionCashSettlPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40167)
		else:
			StringField.__init__(self, 40167, data)

class ProvisionCashSettlPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40168)
		else:
			IntField.__init__(self, 40168, data)

class ProvisionCashSettlPaymentDateRangeFirst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40169)
		else:
			StringField.__init__(self, 40169, data)

class ProvisionCashSettlPaymentDateRangeLast(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40170)
		else:
			StringField.__init__(self, 40170, data)

class NoProvisionCashSettlPaymentDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40171)
		else:
			IntField.__init__(self, 40171, data)

class ProvisionCashSettlPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40172)
		else:
			StringField.__init__(self, 40172, data)

class ProvisionCashSettlPaymentDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40173)
		else:
			IntField.__init__(self, 40173, data)

class NoProvisionPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40174)
		else:
			IntField.__init__(self, 40174, data)

class ProvisionPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40175)
		else:
			StringField.__init__(self, 40175, data)

class ProvisionPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 40176)
		else:
			CharField.__init__(self, 40176, data)

class ProvisionPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40177)
		else:
			IntField.__init__(self, 40177, data)

class NoProvisionPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40178)
		else:
			IntField.__init__(self, 40178, data)

class ProvisionPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40179)
		else:
			StringField.__init__(self, 40179, data)

class ProvisionPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40180)
		else:
			IntField.__init__(self, 40180, data)

class NoProtectionTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40181)
		else:
			IntField.__init__(self, 40181, data)

class ProtectionTermNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40182)
		else:
			DoubleField.__init__(self, 40182, data)

class ProtectionTermCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40183)
		else:
			StringField.__init__(self, 40183, data)

class ProtectionTermSellerNotifies(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40184)
		else:
			BoolField.__init__(self, 40184, data)

class ProtectionTermBuyerNotifies(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40185)
		else:
			BoolField.__init__(self, 40185, data)

class ProtectionTermEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40186)
		else:
			StringField.__init__(self, 40186, data)

class ProtectionTermStandardSources(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40187)
		else:
			BoolField.__init__(self, 40187, data)

class ProtectionTermEventMinimumSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40188)
		else:
			IntField.__init__(self, 40188, data)

class ProtectionTermEventNewsSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40189)
		else:
			StringField.__init__(self, 40189, data)

class ProtectionTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40190)
		else:
			StringField.__init__(self, 40190, data)

class NoProtectionTermEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40191)
		else:
			IntField.__init__(self, 40191, data)

class ProtectionTermEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40192)
		else:
			StringField.__init__(self, 40192, data)

class ProtectionTermEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40193)
		else:
			StringField.__init__(self, 40193, data)

class ProtectionTermEventCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40194)
		else:
			StringField.__init__(self, 40194, data)

class ProtectionTermEventPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40195)
		else:
			IntField.__init__(self, 40195, data)

class ProtectionTermEventUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40196)
		else:
			StringField.__init__(self, 40196, data)

class ProtectionTermEventDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40197)
		else:
			IntField.__init__(self, 40197, data)

class ProtectionTermEventRateSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40198)
		else:
			StringField.__init__(self, 40198, data)

class NoProtectionTermEventQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40199)
		else:
			IntField.__init__(self, 40199, data)

class ProtectionTermEventQualifier(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 40200)
		else:
			CharField.__init__(self, 40200, data)

class NoProtectionTermObligations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40201)
		else:
			IntField.__init__(self, 40201, data)

class ProtectionTermObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40202)
		else:
			StringField.__init__(self, 40202, data)

class ProtectionTermObligationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40203)
		else:
			StringField.__init__(self, 40203, data)

class NoPhysicalSettlTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40204)
		else:
			IntField.__init__(self, 40204, data)

class PhysicalSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40205)
		else:
			StringField.__init__(self, 40205, data)

class PhysicalSettlBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40206)
		else:
			IntField.__init__(self, 40206, data)

class PhysicalSettlMaximumBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40207)
		else:
			IntField.__init__(self, 40207, data)

class PhysicalSettlTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40208)
		else:
			StringField.__init__(self, 40208, data)

class NoPhysicalSettlDeliverableObligations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40209)
		else:
			IntField.__init__(self, 40209, data)

class PhysicalSettlDeliverableObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40210)
		else:
			StringField.__init__(self, 40210, data)

class PhysicalSettlDeliverableObligationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40211)
		else:
			StringField.__init__(self, 40211, data)

class NoPayments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40212)
		else:
			IntField.__init__(self, 40212, data)

class PaymentType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40213)
		else:
			IntField.__init__(self, 40213, data)

class PaymentPaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40214)
		else:
			IntField.__init__(self, 40214, data)

class PaymentReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40215)
		else:
			IntField.__init__(self, 40215, data)

class PaymentCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40216)
		else:
			StringField.__init__(self, 40216, data)

class PaymentAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40217)
		else:
			DoubleField.__init__(self, 40217, data)

class PaymentPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40218)
		else:
			DoubleField.__init__(self, 40218, data)

class PaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40219)
		else:
			StringField.__init__(self, 40219, data)

class PaymentBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40220)
		else:
			IntField.__init__(self, 40220, data)

class PaymentBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40221)
		else:
			StringField.__init__(self, 40221, data)

class PaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40222)
		else:
			StringField.__init__(self, 40222, data)

class PaymentDiscountFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40224)
		else:
			DoubleField.__init__(self, 40224, data)

class PaymentPresentValueAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40225)
		else:
			DoubleField.__init__(self, 40225, data)

class PaymentPresentValueCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40226)
		else:
			StringField.__init__(self, 40226, data)

class PaymentSettlStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40227)
		else:
			IntField.__init__(self, 40227, data)

class LegPaymentStreamNonDeliverableSettlReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40228)
		else:
			StringField.__init__(self, 40228, data)

class PaymentText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40229)
		else:
			StringField.__init__(self, 40229, data)

class NoPaymentSettls(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40230)
		else:
			IntField.__init__(self, 40230, data)

class PaymentSettlAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40231)
		else:
			DoubleField.__init__(self, 40231, data)

class PaymentSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40232)
		else:
			StringField.__init__(self, 40232, data)

class NoPaymentSettlPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40233)
		else:
			IntField.__init__(self, 40233, data)

class PaymentSettlPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40234)
		else:
			StringField.__init__(self, 40234, data)

class PaymentSettlPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 40235)
		else:
			CharField.__init__(self, 40235, data)

class PaymentSettlPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40236)
		else:
			IntField.__init__(self, 40236, data)

class PaymentSettlPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40237)
		else:
			IntField.__init__(self, 40237, data)

class NoPaymentSettlPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40238)
		else:
			IntField.__init__(self, 40238, data)

class PaymentSettlPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40239)
		else:
			StringField.__init__(self, 40239, data)

class PaymentSettlPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40240)
		else:
			IntField.__init__(self, 40240, data)

class NoLegStreams(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40241)
		else:
			IntField.__init__(self, 40241, data)

class LegStreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40242)
		else:
			IntField.__init__(self, 40242, data)

class LegStreamDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40243)
		else:
			StringField.__init__(self, 40243, data)

class LegStreamPaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40244)
		else:
			IntField.__init__(self, 40244, data)

class LegStreamReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40245)
		else:
			IntField.__init__(self, 40245, data)

class LegStreamNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40246)
		else:
			DoubleField.__init__(self, 40246, data)

class LegStreamCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40247)
		else:
			StringField.__init__(self, 40247, data)

class LegStreamText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40248)
		else:
			StringField.__init__(self, 40248, data)

class LegStreamEffectiveDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40249)
		else:
			StringField.__init__(self, 40249, data)

class LegStreamEffectiveDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40250)
		else:
			IntField.__init__(self, 40250, data)

class LegStreamEffectiveDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40251)
		else:
			StringField.__init__(self, 40251, data)

class LegStreamEffectiveDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40252)
		else:
			IntField.__init__(self, 40252, data)

class LegStreamEffectiveDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40253)
		else:
			IntField.__init__(self, 40253, data)

class LegStreamEffectiveDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40254)
		else:
			StringField.__init__(self, 40254, data)

class LegStreamEffectiveDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40255)
		else:
			IntField.__init__(self, 40255, data)

class LegStreamEffectiveDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40256)
		else:
			StringField.__init__(self, 40256, data)

class LegStreamTerminationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40257)
		else:
			StringField.__init__(self, 40257, data)

class LegStreamTerminationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40258)
		else:
			IntField.__init__(self, 40258, data)

class LegStreamTerminationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40259)
		else:
			StringField.__init__(self, 40259, data)

class LegStreamTerminationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40260)
		else:
			IntField.__init__(self, 40260, data)

class LegStreamTerminationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40261)
		else:
			IntField.__init__(self, 40261, data)

class LegStreamTerminationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40262)
		else:
			StringField.__init__(self, 40262, data)

class LegStreamTerminationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40263)
		else:
			IntField.__init__(self, 40263, data)

class LegStreamTerminationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40264)
		else:
			StringField.__init__(self, 40264, data)

class LegStreamCalculationPeriodBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40265)
		else:
			IntField.__init__(self, 40265, data)

class LegStreamCalculationPeriodBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40266)
		else:
			StringField.__init__(self, 40266, data)

class LegStreamFirstPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40267)
		else:
			StringField.__init__(self, 40267, data)

class LegStreamFirstPeriodStartDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40268)
		else:
			IntField.__init__(self, 40268, data)

class LegStreamFirstPeriodStartDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40269)
		else:
			StringField.__init__(self, 40269, data)

class LegStreamFirstPeriodStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40270)
		else:
			StringField.__init__(self, 40270, data)

class LegStreamFirstRegularPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40271)
		else:
			StringField.__init__(self, 40271, data)

class LegStreamFirstCompoundingPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40272)
		else:
			StringField.__init__(self, 40272, data)

class LegStreamLastRegularPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40273)
		else:
			StringField.__init__(self, 40273, data)

class LegStreamCalculationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40274)
		else:
			IntField.__init__(self, 40274, data)

class LegStreamCalculationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40275)
		else:
			StringField.__init__(self, 40275, data)

class LegStreamCalculationRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40276)
		else:
			StringField.__init__(self, 40276, data)

class NoCashSettlDealers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40277)
		else:
			IntField.__init__(self, 40277, data)

class NoBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40278)
		else:
			IntField.__init__(self, 40278, data)

class LegPaymentStreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40279)
		else:
			IntField.__init__(self, 40279, data)

class LegPaymentStreamMarketRate(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40280)
		else:
			IntField.__init__(self, 40280, data)

class LegPaymentStreamDelayIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40281)
		else:
			BoolField.__init__(self, 40281, data)

class LegPaymentStreamSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40282)
		else:
			StringField.__init__(self, 40282, data)

class LegPaymentStreamDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40283)
		else:
			IntField.__init__(self, 40283, data)

class LegPaymentStreamAccrualDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40284)
		else:
			IntField.__init__(self, 40284, data)

class LegPaymentStreamDiscountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40285)
		else:
			IntField.__init__(self, 40285, data)

class LegPaymentStreamDiscountRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40286)
		else:
			DoubleField.__init__(self, 40286, data)

class LegPaymentStreamDiscountRateDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40287)
		else:
			IntField.__init__(self, 40287, data)

class LegPaymentStreamCompoundingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40288)
		else:
			IntField.__init__(self, 40288, data)

class LegPaymentStreamInitialPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40289)
		else:
			BoolField.__init__(self, 40289, data)

class LegPaymentStreamInterimPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40290)
		else:
			BoolField.__init__(self, 40290, data)

class LegPaymentStreamFinalPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40291)
		else:
			BoolField.__init__(self, 40291, data)

class LegPaymentStreamPaymentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40292)
		else:
			IntField.__init__(self, 40292, data)

class LegPaymentStreamPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40293)
		else:
			StringField.__init__(self, 40293, data)

class LegPaymentStreamPaymentFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40294)
		else:
			IntField.__init__(self, 40294, data)

class LegPaymentStreamPaymentFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40295)
		else:
			StringField.__init__(self, 40295, data)

class LegPaymentStreamPaymentRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40296)
		else:
			StringField.__init__(self, 40296, data)

class LegPaymentStreamFirstPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40297)
		else:
			StringField.__init__(self, 40297, data)

class LegPaymentStreamLastRegularPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40298)
		else:
			StringField.__init__(self, 40298, data)

class LegPaymentStreamPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40299)
		else:
			IntField.__init__(self, 40299, data)

class LegPaymentStreamPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40300)
		else:
			IntField.__init__(self, 40300, data)

class LegPaymentStreamPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40301)
		else:
			StringField.__init__(self, 40301, data)

class LegPaymentStreamPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40302)
		else:
			IntField.__init__(self, 40302, data)

class LegPaymentStreamResetDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40303)
		else:
			IntField.__init__(self, 40303, data)

class LegPaymentStreamResetDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40304)
		else:
			IntField.__init__(self, 40304, data)

class LegPaymentStreamResetDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40305)
		else:
			StringField.__init__(self, 40305, data)

class LegPaymentStreamResetFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40306)
		else:
			IntField.__init__(self, 40306, data)

class LegPaymentStreamResetFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40307)
		else:
			StringField.__init__(self, 40307, data)

class LegPaymentStreamResetWeeklyRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40308)
		else:
			StringField.__init__(self, 40308, data)

class LegPaymentStreamInitialFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40309)
		else:
			IntField.__init__(self, 40309, data)

class LegPaymentStreamInitialFixingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40310)
		else:
			IntField.__init__(self, 40310, data)

class LegPaymentStreamInitialFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40311)
		else:
			StringField.__init__(self, 40311, data)

class LegPaymentStreamInitialFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40312)
		else:
			IntField.__init__(self, 40312, data)

class LegPaymentStreamInitialFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40313)
		else:
			StringField.__init__(self, 40313, data)

class LegPaymentStreamInitialFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40314)
		else:
			IntField.__init__(self, 40314, data)

class LegPaymentStreamInitialFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40315)
		else:
			StringField.__init__(self, 40315, data)

class LegPaymentStreamFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40316)
		else:
			IntField.__init__(self, 40316, data)

class LegPaymentStreamFixingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40317)
		else:
			IntField.__init__(self, 40317, data)

class LegPaymentStreamFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40318)
		else:
			StringField.__init__(self, 40318, data)

class LegPaymentStreamFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40319)
		else:
			IntField.__init__(self, 40319, data)

class LegPaymentStreamFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40320)
		else:
			StringField.__init__(self, 40320, data)

class LegPaymentStreamFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40321)
		else:
			IntField.__init__(self, 40321, data)

class LegPaymentStreamFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40322)
		else:
			StringField.__init__(self, 40322, data)

class LegPaymentStreamRateCutoffDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40323)
		else:
			IntField.__init__(self, 40323, data)

class LegPaymentStreamRateCutoffDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40324)
		else:
			StringField.__init__(self, 40324, data)

class LegPaymentStreamRateCutoffDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40325)
		else:
			IntField.__init__(self, 40325, data)

class LegPaymentStreamRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40326)
		else:
			DoubleField.__init__(self, 40326, data)

class LegPaymentStreamFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40327)
		else:
			DoubleField.__init__(self, 40327, data)

class LegPaymentStreamRateOrAmountCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40328)
		else:
			StringField.__init__(self, 40328, data)

class LegPaymentStreamFutureValueNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40329)
		else:
			DoubleField.__init__(self, 40329, data)

class LegPaymentStreamFutureValueDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40330)
		else:
			StringField.__init__(self, 40330, data)

class LegPaymentStreamRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40331)
		else:
			StringField.__init__(self, 40331, data)

class LegPaymentStreamRateIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40332)
		else:
			IntField.__init__(self, 40332, data)

class LegPaymentStreamRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40333)
		else:
			StringField.__init__(self, 40333, data)

class LegPaymentStreamRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40334)
		else:
			IntField.__init__(self, 40334, data)

class LegPaymentStreamRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40335)
		else:
			DoubleField.__init__(self, 40335, data)

class LegPaymentStreamRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40336)
		else:
			DoubleField.__init__(self, 40336, data)

class LegPaymentStreamRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40337)
		else:
			IntField.__init__(self, 40337, data)

class LegPaymentStreamRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40338)
		else:
			IntField.__init__(self, 40338, data)

class LegPaymentStreamCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40339)
		else:
			DoubleField.__init__(self, 40339, data)

class LegPaymentStreamCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40340)
		else:
			IntField.__init__(self, 40340, data)

class LegPaymentStreamCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40341)
		else:
			IntField.__init__(self, 40341, data)

class LegPaymentStreamFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40342)
		else:
			DoubleField.__init__(self, 40342, data)

class LegPaymentStreamFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40343)
		else:
			IntField.__init__(self, 40343, data)

class LegPaymentStreamFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40344)
		else:
			IntField.__init__(self, 40344, data)

class LegPaymentStreamInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40345)
		else:
			DoubleField.__init__(self, 40345, data)

class LegPaymentStreamFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 40346)
		else:
			CharField.__init__(self, 40346, data)

class LegPaymentStreamFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40347)
		else:
			IntField.__init__(self, 40347, data)

class LegPaymentStreamAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40348)
		else:
			IntField.__init__(self, 40348, data)

class LegPaymentStreamNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40349)
		else:
			IntField.__init__(self, 40349, data)

class LegPaymentStreamInflationLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40350)
		else:
			IntField.__init__(self, 40350, data)

class LegPaymentStreamInflationLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40351)
		else:
			StringField.__init__(self, 40351, data)

class LegPaymentStreamInflationLagDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40352)
		else:
			IntField.__init__(self, 40352, data)

class LegPaymentStreamInflationInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40353)
		else:
			IntField.__init__(self, 40353, data)

class LegPaymentStreamInflationIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40354)
		else:
			IntField.__init__(self, 40354, data)

class LegPaymentStreamInflationPublicationSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40355)
		else:
			StringField.__init__(self, 40355, data)

class LegPaymentStreamInflationInitialIndexLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40356)
		else:
			DoubleField.__init__(self, 40356, data)

class LegPaymentStreamInflationFallbackBondApplicable(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40357)
		else:
			BoolField.__init__(self, 40357, data)

class LegPaymentStreamFRADiscounting(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40358)
		else:
			IntField.__init__(self, 40358, data)

class LegPaymentStreamNonDeliverableRefCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40359)
		else:
			StringField.__init__(self, 40359, data)

class LegPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40360)
		else:
			IntField.__init__(self, 40360, data)

class LegPaymentStreamNonDeliverableFixingDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40361)
		else:
			StringField.__init__(self, 40361, data)

class LegPaymentStreamNonDeliverableFixingDatesRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40362)
		else:
			IntField.__init__(self, 40362, data)

class LegPaymentStreamNonDeliverableFixingDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40363)
		else:
			IntField.__init__(self, 40363, data)

class LegPaymentStreamNonDeliverableFixingDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40364)
		else:
			StringField.__init__(self, 40364, data)

class LegPaymentStreamNonDeliverableFixingDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40365)
		else:
			IntField.__init__(self, 40365, data)

class LegSettlRateFallbackRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40366)
		else:
			IntField.__init__(self, 40366, data)

class NoLegNonDeliverableFixingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40367)
		else:
			IntField.__init__(self, 40367, data)

class LegNonDeliverableFixingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40368)
		else:
			StringField.__init__(self, 40368, data)

class LegNonDeliverableFixingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40369)
		else:
			IntField.__init__(self, 40369, data)

class LegSettlRateFallbackReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40370)
		else:
			StringField.__init__(self, 40370, data)

class PaymentStreamNonDeliverableSettlRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40371)
		else:
			IntField.__init__(self, 40371, data)

class PaymentStreamNonDeliverableSettlReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40372)
		else:
			StringField.__init__(self, 40372, data)

class SettlRateFallbackRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40373)
		else:
			IntField.__init__(self, 40373, data)

class NoLegPaymentSchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40374)
		else:
			IntField.__init__(self, 40374, data)

class LegPaymentScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40375)
		else:
			IntField.__init__(self, 40375, data)

class LegPaymentScheduleStubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40376)
		else:
			IntField.__init__(self, 40376, data)

class LegPaymentScheduleStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40377)
		else:
			StringField.__init__(self, 40377, data)

class LegPaymentScheduleEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40378)
		else:
			StringField.__init__(self, 40378, data)

class LegPaymentSchedulePaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40379)
		else:
			IntField.__init__(self, 40379, data)

class LegPaymentScheduleReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40380)
		else:
			IntField.__init__(self, 40380, data)

class LegPaymentScheduleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40381)
		else:
			DoubleField.__init__(self, 40381, data)

class LegPaymentScheduleCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40382)
		else:
			StringField.__init__(self, 40382, data)

class LegPaymentScheduleRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40383)
		else:
			DoubleField.__init__(self, 40383, data)

class LegPaymentScheduleRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40384)
		else:
			DoubleField.__init__(self, 40384, data)

class LegPaymentScheduleRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40385)
		else:
			DoubleField.__init__(self, 40385, data)

class LegPaymentScheduleRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40386)
		else:
			IntField.__init__(self, 40386, data)

class LegPaymentScheduleRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40387)
		else:
			IntField.__init__(self, 40387, data)

class LegPaymentScheduleFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40388)
		else:
			DoubleField.__init__(self, 40388, data)

class LegPaymentScheduleFixedCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40389)
		else:
			StringField.__init__(self, 40389, data)

class LegPaymentScheduleStepFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40390)
		else:
			IntField.__init__(self, 40390, data)

class LegPaymentScheduleStepFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40391)
		else:
			StringField.__init__(self, 40391, data)

class LegPaymentScheduleStepOffsetValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40392)
		else:
			DoubleField.__init__(self, 40392, data)

class LegPaymentScheduleStepRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40393)
		else:
			DoubleField.__init__(self, 40393, data)

class LegPaymentScheduleStepOffsetRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40394)
		else:
			DoubleField.__init__(self, 40394, data)

class LegPaymentScheduleStepRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40395)
		else:
			IntField.__init__(self, 40395, data)

class LegPaymentScheduleFixingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40396)
		else:
			StringField.__init__(self, 40396, data)

class LegPaymentScheduleWeight(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40397)
		else:
			DoubleField.__init__(self, 40397, data)

class LegPaymentScheduleFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40398)
		else:
			IntField.__init__(self, 40398, data)

class LegPaymentScheduleFixingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40399)
		else:
			IntField.__init__(self, 40399, data)

class LegPaymentScheduleFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40400)
		else:
			StringField.__init__(self, 40400, data)

class LegPaymentScheduleFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40401)
		else:
			IntField.__init__(self, 40401, data)

class LegPaymentScheduleFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40402)
		else:
			StringField.__init__(self, 40402, data)

class LegPaymentScheduleFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40403)
		else:
			IntField.__init__(self, 40403, data)

class LegPaymentScheduleFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40404)
		else:
			StringField.__init__(self, 40404, data)

class LegPaymentScheduleFixingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40405)
		else:
			StringField.__init__(self, 40405, data)

class LegPaymentScheduleFixingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40406)
		else:
			StringField.__init__(self, 40406, data)

class LegPaymentScheduleInterimExchangePaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40407)
		else:
			IntField.__init__(self, 40407, data)

class LegPaymentScheduleInterimExchangeDatesBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40408)
		else:
			IntField.__init__(self, 40408, data)

class LegPaymentScheduleInterimExchangeDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40409)
		else:
			StringField.__init__(self, 40409, data)

class LegPaymentScheduleInterimExchangeDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40410)
		else:
			IntField.__init__(self, 40410, data)

class LegPaymentScheduleInterimExchangeDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40411)
		else:
			StringField.__init__(self, 40411, data)

class LegPaymentScheduleInterimExchangeDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40412)
		else:
			IntField.__init__(self, 40412, data)

class LegPaymentScheduleInterimExchangeDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40413)
		else:
			StringField.__init__(self, 40413, data)

class NoLegPaymentScheduleRateSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40414)
		else:
			IntField.__init__(self, 40414, data)

class LegPaymentScheduleRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40415)
		else:
			IntField.__init__(self, 40415, data)

class LegPaymentScheduleRateSourceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40416)
		else:
			IntField.__init__(self, 40416, data)

class LegPaymentScheduleReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40417)
		else:
			StringField.__init__(self, 40417, data)

class NoLegPaymentStubs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40418)
		else:
			IntField.__init__(self, 40418, data)

class LegPaymentStubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40419)
		else:
			IntField.__init__(self, 40419, data)

class LegPaymentStubLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40420)
		else:
			IntField.__init__(self, 40420, data)

class LegPaymentStubRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40421)
		else:
			DoubleField.__init__(self, 40421, data)

class LegPaymentStubFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40422)
		else:
			DoubleField.__init__(self, 40422, data)

class LegPaymentStubFixedCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40423)
		else:
			StringField.__init__(self, 40423, data)

class LegPaymentStubIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40424)
		else:
			StringField.__init__(self, 40424, data)

class LegPaymentStubIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40425)
		else:
			IntField.__init__(self, 40425, data)

class LegPaymentStubIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40426)
		else:
			IntField.__init__(self, 40426, data)

class LegPaymentStubIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40427)
		else:
			StringField.__init__(self, 40427, data)

class LegPaymentStubIndexRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40428)
		else:
			DoubleField.__init__(self, 40428, data)

class LegPaymentStubIndexRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40429)
		else:
			DoubleField.__init__(self, 40429, data)

class LegPaymentStubIndexRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40430)
		else:
			IntField.__init__(self, 40430, data)

class LegPaymentStubIndexRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40431)
		else:
			IntField.__init__(self, 40431, data)

class LegPaymentStubIndexCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40432)
		else:
			DoubleField.__init__(self, 40432, data)

class LegPaymentStubIndexCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40433)
		else:
			IntField.__init__(self, 40433, data)

class LegPaymentStubIndexCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40434)
		else:
			IntField.__init__(self, 40434, data)

class LegPaymentStubIndexFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40435)
		else:
			DoubleField.__init__(self, 40435, data)

class LegPaymentStubIndexFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40436)
		else:
			IntField.__init__(self, 40436, data)

class LegPaymentStubIndexFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40437)
		else:
			IntField.__init__(self, 40437, data)

class LegPaymentStubIndex2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40438)
		else:
			StringField.__init__(self, 40438, data)

class LegPaymentStubIndex2Source(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40439)
		else:
			IntField.__init__(self, 40439, data)

class LegPaymentStubIndex2CurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40440)
		else:
			IntField.__init__(self, 40440, data)

class LegPaymentStubIndex2CurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40441)
		else:
			StringField.__init__(self, 40441, data)

class LegPaymentStubIndex2RateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40442)
		else:
			DoubleField.__init__(self, 40442, data)

class LegPaymentStubIndex2RateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40443)
		else:
			DoubleField.__init__(self, 40443, data)

class LegPaymentStubIndex2RateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40444)
		else:
			IntField.__init__(self, 40444, data)

class LegPaymentStubIndex2RateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40445)
		else:
			IntField.__init__(self, 40445, data)

class LegPaymentStubIndex2CapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40446)
		else:
			DoubleField.__init__(self, 40446, data)

class LegPaymentStubIndex2FloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40447)
		else:
			DoubleField.__init__(self, 40447, data)

class NoLegProvisions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40448)
		else:
			IntField.__init__(self, 40448, data)

class LegProvisionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40449)
		else:
			IntField.__init__(self, 40449, data)

class LegProvisionDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40450)
		else:
			StringField.__init__(self, 40450, data)

class LegProvisionDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40451)
		else:
			IntField.__init__(self, 40451, data)

class LegProvisionDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40452)
		else:
			StringField.__init__(self, 40452, data)

class LegProvisionDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40453)
		else:
			StringField.__init__(self, 40453, data)

class LegProvisionDateTenorPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40454)
		else:
			IntField.__init__(self, 40454, data)

class LegProvisionDateTenorUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40455)
		else:
			StringField.__init__(self, 40455, data)

class LegProvisionCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40456)
		else:
			IntField.__init__(self, 40456, data)

class LegProvisionOptionSinglePartyBuyerSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40457)
		else:
			IntField.__init__(self, 40457, data)

class LegProvisionOptionSinglePartySellerSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40458)
		else:
			IntField.__init__(self, 40458, data)

class LegProvisionOptionExerciseStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40459)
		else:
			IntField.__init__(self, 40459, data)

class LegProvisionOptionExerciseMultipleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40460)
		else:
			DoubleField.__init__(self, 40460, data)

class LegProvisionOptionExerciseMinimumNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40461)
		else:
			DoubleField.__init__(self, 40461, data)

class LegProvisionOptionExerciseMaximumNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40462)
		else:
			DoubleField.__init__(self, 40462, data)

class LegProvisionOptionMinimumNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40463)
		else:
			IntField.__init__(self, 40463, data)

class LegProvisionOptionMaximumNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40464)
		else:
			IntField.__init__(self, 40464, data)

class LegProvisionOptionExerciseConfirmation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40465)
		else:
			BoolField.__init__(self, 40465, data)

class LegProvisionCashSettlMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40466)
		else:
			IntField.__init__(self, 40466, data)

class LegProvisionCashSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40467)
		else:
			StringField.__init__(self, 40467, data)

class LegProvisionCashSettlCurrency2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40468)
		else:
			StringField.__init__(self, 40468, data)

class LegProvisionCashSettlQuoteType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40469)
		else:
			IntField.__init__(self, 40469, data)

class LegProvisionCashSettlQuoteSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40470)
		else:
			IntField.__init__(self, 40470, data)

class BusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40471)
		else:
			StringField.__init__(self, 40471, data)

class LegProvisionText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40472)
		else:
			StringField.__init__(self, 40472, data)

class NoLegProvisionCashSettlPaymentDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40473)
		else:
			IntField.__init__(self, 40473, data)

class LegProvisionCashSettlPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40474)
		else:
			StringField.__init__(self, 40474, data)

class LegProvisionCashSettlPaymentDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40475)
		else:
			IntField.__init__(self, 40475, data)

class LegProvisionOptionExerciseBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40476)
		else:
			IntField.__init__(self, 40476, data)

class LegProvisionOptionExerciseBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40477)
		else:
			StringField.__init__(self, 40477, data)

class LegProvisionOptionExerciseEarliestDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40478)
		else:
			IntField.__init__(self, 40478, data)

class LegProvisionOptionExerciseEarliestDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40479)
		else:
			StringField.__init__(self, 40479, data)

class LegProvisionOptionExerciseFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40480)
		else:
			IntField.__init__(self, 40480, data)

class LegProvisionOptionExerciseFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40481)
		else:
			StringField.__init__(self, 40481, data)

class LegProvisionOptionExerciseStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40482)
		else:
			StringField.__init__(self, 40482, data)

class LegProvisionOptionExerciseStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40483)
		else:
			IntField.__init__(self, 40483, data)

class LegProvisionOptionExerciseStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40484)
		else:
			IntField.__init__(self, 40484, data)

class LegProvisionOptionExerciseStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40485)
		else:
			StringField.__init__(self, 40485, data)

class LegProvisionOptionExerciseStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40486)
		else:
			IntField.__init__(self, 40486, data)

class LegProvisionOptionExerciseStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40487)
		else:
			StringField.__init__(self, 40487, data)

class LegProvisionOptionExercisePeriodSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40488)
		else:
			IntField.__init__(self, 40488, data)

class LegProvisionOptionExerciseBoundsFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40489)
		else:
			StringField.__init__(self, 40489, data)

class LegProvisionOptionExerciseBoundsLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40490)
		else:
			StringField.__init__(self, 40490, data)

class LegProvisionOptionExerciseEarliestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40491)
		else:
			StringField.__init__(self, 40491, data)

class LegProvisionOptionExerciseEarliestTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40492)
		else:
			StringField.__init__(self, 40492, data)

class LegProvisionOptionExerciseLatestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40493)
		else:
			StringField.__init__(self, 40493, data)

class LegProvisionOptionExerciseLatestTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40494)
		else:
			StringField.__init__(self, 40494, data)

class NoLegProvisionOptionExerciseFixedDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40495)
		else:
			IntField.__init__(self, 40495, data)

class LegProvisionOptionExerciseFixedDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40496)
		else:
			StringField.__init__(self, 40496, data)

class LegProvisionOptionExerciseFixedDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40497)
		else:
			IntField.__init__(self, 40497, data)

class LegProvisionOptionExpirationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40498)
		else:
			StringField.__init__(self, 40498, data)

class LegProvisionOptionExpirationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40499)
		else:
			IntField.__init__(self, 40499, data)

class LegProvisionOptionExpirationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40500)
		else:
			StringField.__init__(self, 40500, data)

class LegProvisionOptionExpirationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40501)
		else:
			IntField.__init__(self, 40501, data)

class LegProvisionOptionExpirationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40502)
		else:
			IntField.__init__(self, 40502, data)

class LegProvisionOptionExpirationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40503)
		else:
			StringField.__init__(self, 40503, data)

class LegProvisionOptionExpirationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40504)
		else:
			IntField.__init__(self, 40504, data)

class LegProvisionOptionExpirationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40505)
		else:
			StringField.__init__(self, 40505, data)

class LegProvisionOptionExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40506)
		else:
			StringField.__init__(self, 40506, data)

class LegProvisionOptionExpirationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40507)
		else:
			StringField.__init__(self, 40507, data)

class LegProvisionOptionRelevantUnderlyingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40508)
		else:
			StringField.__init__(self, 40508, data)

class LegProvisionOptionRelevantUnderlyingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40509)
		else:
			IntField.__init__(self, 40509, data)

class LegProvisionOptionRelevantUnderlyingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40510)
		else:
			StringField.__init__(self, 40510, data)

class LegProvisionOptionRelevantUnderlyingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40511)
		else:
			IntField.__init__(self, 40511, data)

class LegProvisionOptionRelevantUnderlyingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40512)
		else:
			IntField.__init__(self, 40512, data)

class LegProvisionOptionRelevantUnderlyingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40513)
		else:
			StringField.__init__(self, 40513, data)

class LegProvisionOptionRelevantUnderlyingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40514)
		else:
			IntField.__init__(self, 40514, data)

class LegProvisionOptionRelevantUnderlyingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40515)
		else:
			StringField.__init__(self, 40515, data)

class LegProvisionCashSettlPaymentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40516)
		else:
			IntField.__init__(self, 40516, data)

class LegProvisionCashSettlPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40517)
		else:
			StringField.__init__(self, 40517, data)

class LegProvisionCashSettlPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40518)
		else:
			IntField.__init__(self, 40518, data)

class LegProvisionCashSettlPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40519)
		else:
			IntField.__init__(self, 40519, data)

class LegProvisionCashSettlPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40520)
		else:
			StringField.__init__(self, 40520, data)

class LegProvisionCashSettlPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40521)
		else:
			IntField.__init__(self, 40521, data)

class LegProvisionCashSettlPaymentDateRangeFirst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40522)
		else:
			StringField.__init__(self, 40522, data)

class LegProvisionCashSettlPaymentDateRangeLast(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40523)
		else:
			StringField.__init__(self, 40523, data)

class LegProvisionCashSettlValueTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40524)
		else:
			StringField.__init__(self, 40524, data)

class LegProvisionCashSettlValueTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40525)
		else:
			StringField.__init__(self, 40525, data)

class LegProvisionCashSettlValueDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40526)
		else:
			IntField.__init__(self, 40526, data)

class LegProvisionCashSettlValueDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40527)
		else:
			StringField.__init__(self, 40527, data)

class LegProvisionCashSettlValueDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40528)
		else:
			IntField.__init__(self, 40528, data)

class LegProvisionCashSettlValueDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40529)
		else:
			IntField.__init__(self, 40529, data)

class LegProvisionCashSettlValueDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40530)
		else:
			StringField.__init__(self, 40530, data)

class LegProvisionCashSettlValueDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40531)
		else:
			IntField.__init__(self, 40531, data)

class LegProvisionCashSettlValueDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40532)
		else:
			StringField.__init__(self, 40532, data)

class NoLegProvisionPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40533)
		else:
			IntField.__init__(self, 40533, data)

class LegProvisionPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40534)
		else:
			StringField.__init__(self, 40534, data)

class LegProvisionPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 40535)
		else:
			CharField.__init__(self, 40535, data)

class LegProvisionPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40536)
		else:
			IntField.__init__(self, 40536, data)

class NoLegProvisionPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40537)
		else:
			IntField.__init__(self, 40537, data)

class LegProvisionPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40538)
		else:
			StringField.__init__(self, 40538, data)

class LegProvisionPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40539)
		else:
			IntField.__init__(self, 40539, data)

class NoUnderlyingStreams(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40540)
		else:
			IntField.__init__(self, 40540, data)

class UnderlyingStreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40541)
		else:
			IntField.__init__(self, 40541, data)

class UnderlyingStreamDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40542)
		else:
			StringField.__init__(self, 40542, data)

class UnderlyingStreamPaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40543)
		else:
			IntField.__init__(self, 40543, data)

class UnderlyingStreamReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40544)
		else:
			IntField.__init__(self, 40544, data)

class UnderlyingStreamNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40545)
		else:
			DoubleField.__init__(self, 40545, data)

class UnderlyingStreamCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40546)
		else:
			StringField.__init__(self, 40546, data)

class UnderlyingStreamText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40547)
		else:
			StringField.__init__(self, 40547, data)

class UnderlyingStreamTerminationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40548)
		else:
			StringField.__init__(self, 40548, data)

class UnderlyingStreamTerminationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40549)
		else:
			IntField.__init__(self, 40549, data)

class UnderlyingStreamTerminationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40550)
		else:
			StringField.__init__(self, 40550, data)

class UnderlyingStreamTerminationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40551)
		else:
			IntField.__init__(self, 40551, data)

class UnderlyingStreamTerminationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40552)
		else:
			IntField.__init__(self, 40552, data)

class UnderlyingStreamTerminationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40553)
		else:
			StringField.__init__(self, 40553, data)

class UnderlyingStreamTerminationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40554)
		else:
			IntField.__init__(self, 40554, data)

class UnderlyingStreamTerminationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40555)
		else:
			StringField.__init__(self, 40555, data)

class UnderlyingStreamCalculationPeriodBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40556)
		else:
			IntField.__init__(self, 40556, data)

class UnderlyingStreamCalculationPeriodBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40557)
		else:
			StringField.__init__(self, 40557, data)

class UnderlyingStreamFirstPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40558)
		else:
			StringField.__init__(self, 40558, data)

class UnderlyingStreamFirstPeriodStartDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40559)
		else:
			IntField.__init__(self, 40559, data)

class UnderlyingStreamFirstPeriodStartDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40560)
		else:
			StringField.__init__(self, 40560, data)

class UnderlyingStreamFirstPeriodStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40561)
		else:
			StringField.__init__(self, 40561, data)

class UnderlyingStreamFirstRegularPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40562)
		else:
			StringField.__init__(self, 40562, data)

class UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40563)
		else:
			StringField.__init__(self, 40563, data)

class UnderlyingStreamLastRegularPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40564)
		else:
			StringField.__init__(self, 40564, data)

class UnderlyingStreamCalculationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40565)
		else:
			IntField.__init__(self, 40565, data)

class UnderlyingStreamCalculationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40566)
		else:
			StringField.__init__(self, 40566, data)

class UnderlyingStreamCalculationRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40567)
		else:
			StringField.__init__(self, 40567, data)

class UnderlyingPaymentStreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40568)
		else:
			IntField.__init__(self, 40568, data)

class UnderlyingPaymentStreamMarketRate(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40569)
		else:
			IntField.__init__(self, 40569, data)

class UnderlyingPaymentStreamDelayIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40570)
		else:
			BoolField.__init__(self, 40570, data)

class UnderlyingPaymentStreamSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40571)
		else:
			StringField.__init__(self, 40571, data)

class UnderlyingPaymentStreamDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40572)
		else:
			IntField.__init__(self, 40572, data)

class UnderlyingPaymentStreamAccrualDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40573)
		else:
			IntField.__init__(self, 40573, data)

class UnderlyingPaymentStreamDiscountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40574)
		else:
			IntField.__init__(self, 40574, data)

class UnderlyingPaymentStreamDiscountRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40575)
		else:
			DoubleField.__init__(self, 40575, data)

class UnderlyingPaymentStreamDiscountRateDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40576)
		else:
			IntField.__init__(self, 40576, data)

class UnderlyingPaymentStreamCompoundingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40577)
		else:
			IntField.__init__(self, 40577, data)

class UnderlyingPaymentStreamInitialPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40578)
		else:
			BoolField.__init__(self, 40578, data)

class UnderlyingPaymentStreamInterimPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40579)
		else:
			BoolField.__init__(self, 40579, data)

class UnderlyingPaymentStreamFinalPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40580)
		else:
			BoolField.__init__(self, 40580, data)

class UnderlyingPaymentStreamPaymentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40581)
		else:
			IntField.__init__(self, 40581, data)

class UnderlyingPaymentStreamPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40582)
		else:
			StringField.__init__(self, 40582, data)

class UnderlyingPaymentStreamPaymentFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40583)
		else:
			IntField.__init__(self, 40583, data)

class UnderlyingPaymentStreamPaymentFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40584)
		else:
			StringField.__init__(self, 40584, data)

class UnderlyingPaymentStreamPaymentRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40585)
		else:
			StringField.__init__(self, 40585, data)

class UnderlyingPaymentStreamFirstPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40586)
		else:
			StringField.__init__(self, 40586, data)

class UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40587)
		else:
			StringField.__init__(self, 40587, data)

class UnderlyingPaymentStreamPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40588)
		else:
			IntField.__init__(self, 40588, data)

class UnderlyingPaymentStreamPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40589)
		else:
			IntField.__init__(self, 40589, data)

class UnderlyingPaymentStreamPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40590)
		else:
			StringField.__init__(self, 40590, data)

class UnderlyingPaymentStreamPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40591)
		else:
			IntField.__init__(self, 40591, data)

class UnderlyingPaymentStreamResetDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40592)
		else:
			IntField.__init__(self, 40592, data)

class UnderlyingPaymentStreamResetDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40593)
		else:
			IntField.__init__(self, 40593, data)

class UnderlyingPaymentStreamResetDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40594)
		else:
			StringField.__init__(self, 40594, data)

class UnderlyingPaymentStreamResetFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40595)
		else:
			IntField.__init__(self, 40595, data)

class UnderlyingPaymentStreamResetFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40596)
		else:
			StringField.__init__(self, 40596, data)

class UnderlyingPaymentStreamResetWeeklyRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40597)
		else:
			StringField.__init__(self, 40597, data)

class UnderlyingPaymentStreamInitialFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40598)
		else:
			IntField.__init__(self, 40598, data)

class UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40599)
		else:
			IntField.__init__(self, 40599, data)

class UnderlyingPaymentStreamInitialFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40600)
		else:
			StringField.__init__(self, 40600, data)

class UnderlyingPaymentStreamInitialFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40601)
		else:
			IntField.__init__(self, 40601, data)

class UnderlyingPaymentStreamInitialFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40602)
		else:
			StringField.__init__(self, 40602, data)

class UnderlyingPaymentStreamInitialFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40603)
		else:
			IntField.__init__(self, 40603, data)

class UnderlyingPaymentStreamInitialFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40604)
		else:
			StringField.__init__(self, 40604, data)

class UnderlyingPaymentStreamFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40605)
		else:
			IntField.__init__(self, 40605, data)

class UnderlyingPaymentStreamFixingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40606)
		else:
			IntField.__init__(self, 40606, data)

class UnderlyingPaymentStreamFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40607)
		else:
			StringField.__init__(self, 40607, data)

class UnderlyingPaymentStreamFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40608)
		else:
			IntField.__init__(self, 40608, data)

class UnderlyingPaymentStreamFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40609)
		else:
			StringField.__init__(self, 40609, data)

class UnderlyingPaymentStreamFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40610)
		else:
			IntField.__init__(self, 40610, data)

class UnderlyingPaymentStreamFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40611)
		else:
			StringField.__init__(self, 40611, data)

class UnderlyingPaymentStreamRateCutoffDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40612)
		else:
			IntField.__init__(self, 40612, data)

class UnderlyingPaymentStreamRateCutoffDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40613)
		else:
			StringField.__init__(self, 40613, data)

class UnderlyingPaymentStreamRateCutoffDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40614)
		else:
			IntField.__init__(self, 40614, data)

class UnderlyingPaymentStreamRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40615)
		else:
			DoubleField.__init__(self, 40615, data)

class UnderlyingPaymentStreamFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40616)
		else:
			DoubleField.__init__(self, 40616, data)

class UnderlyingPaymentStreamRateOrAmountCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40617)
		else:
			StringField.__init__(self, 40617, data)

class UnderlyingPaymentStreamFutureValueNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40618)
		else:
			DoubleField.__init__(self, 40618, data)

class UnderlyingPaymentStreamFutureValueDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40619)
		else:
			StringField.__init__(self, 40619, data)

class UnderlyingPaymentStreamRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40620)
		else:
			StringField.__init__(self, 40620, data)

class UnderlyingPaymentStreamRateIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40621)
		else:
			IntField.__init__(self, 40621, data)

class UnderlyingPaymentStreamRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40622)
		else:
			StringField.__init__(self, 40622, data)

class UnderlyingPaymentStreamRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40623)
		else:
			IntField.__init__(self, 40623, data)

class UnderlyingPaymentStreamRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40624)
		else:
			DoubleField.__init__(self, 40624, data)

class UnderlyingPaymentStreamRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40625)
		else:
			DoubleField.__init__(self, 40625, data)

class UnderlyingPaymentStreamRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40626)
		else:
			IntField.__init__(self, 40626, data)

class UnderlyingPaymentStreamRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40627)
		else:
			IntField.__init__(self, 40627, data)

class UnderlyingPaymentStreamCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40628)
		else:
			DoubleField.__init__(self, 40628, data)

class UnderlyingPaymentStreamCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40629)
		else:
			IntField.__init__(self, 40629, data)

class UnderlyingPaymentStreamCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40630)
		else:
			IntField.__init__(self, 40630, data)

class UnderlyingPaymentStreamFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40631)
		else:
			DoubleField.__init__(self, 40631, data)

class UnderlyingPaymentStreamFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40632)
		else:
			IntField.__init__(self, 40632, data)

class UnderlyingPaymentStreamFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40633)
		else:
			IntField.__init__(self, 40633, data)

class UnderlyingPaymentStreamInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40634)
		else:
			DoubleField.__init__(self, 40634, data)

class UnderlyingPaymentStreamFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 40635)
		else:
			CharField.__init__(self, 40635, data)

class UnderlyingPaymentStreamFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40636)
		else:
			IntField.__init__(self, 40636, data)

class UnderlyingPaymentStreamAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40637)
		else:
			IntField.__init__(self, 40637, data)

class UnderlyingPaymentStreamNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40638)
		else:
			IntField.__init__(self, 40638, data)

class UnderlyingPaymentStreamInflationLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40639)
		else:
			IntField.__init__(self, 40639, data)

class UnderlyingPaymentStreamInflationLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40640)
		else:
			StringField.__init__(self, 40640, data)

class UnderlyingPaymentStreamInflationLagDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40641)
		else:
			IntField.__init__(self, 40641, data)

class UnderlyingPaymentStreamInflationInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40642)
		else:
			IntField.__init__(self, 40642, data)

class UnderlyingPaymentStreamInflationIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40643)
		else:
			IntField.__init__(self, 40643, data)

class UnderlyingPaymentStreamInflationPublicationSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40644)
		else:
			StringField.__init__(self, 40644, data)

class UnderlyingPaymentStreamInflationInitialIndexLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40645)
		else:
			DoubleField.__init__(self, 40645, data)

class UnderlyingPaymentStreamInflationFallbackBondApplicable(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40646)
		else:
			BoolField.__init__(self, 40646, data)

class UnderlyingPaymentStreamFRADiscounting(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40647)
		else:
			IntField.__init__(self, 40647, data)

class UnderlyingPaymentStreamNonDeliverableRefCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40648)
		else:
			StringField.__init__(self, 40648, data)

class UnderlyingPaymentStreamNonDeliverableFixingDatesBizDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40649)
		else:
			IntField.__init__(self, 40649, data)

class UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40650)
		else:
			StringField.__init__(self, 40650, data)

class UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40651)
		else:
			IntField.__init__(self, 40651, data)

class UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40652)
		else:
			IntField.__init__(self, 40652, data)

class UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40653)
		else:
			StringField.__init__(self, 40653, data)

class UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40654)
		else:
			IntField.__init__(self, 40654, data)

class SettlRateFallbackReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40655)
		else:
			StringField.__init__(self, 40655, data)

class NoUnderlyingNonDeliverableFixingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40656)
		else:
			IntField.__init__(self, 40656, data)

class UnderlyingNonDeliverableFixingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40657)
		else:
			StringField.__init__(self, 40657, data)

class UnderlyingNonDeliverableFixingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40658)
		else:
			IntField.__init__(self, 40658, data)

class NoUnderlyingSettlRateFallbacks(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40659)
		else:
			IntField.__init__(self, 40659, data)

class UnderlyingSettlRatePostponementMaximumDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40660)
		else:
			IntField.__init__(self, 40660, data)

class UnderlyingPaymentStreamNonDeliverableSettlRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40661)
		else:
			IntField.__init__(self, 40661, data)

class UnderlyingSettlRatePostponementSurvey(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40662)
		else:
			BoolField.__init__(self, 40662, data)

class UnderlyingSettlRatePostponementCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40663)
		else:
			IntField.__init__(self, 40663, data)

class NoUnderlyingPaymentSchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40664)
		else:
			IntField.__init__(self, 40664, data)

class UnderlyingPaymentScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40665)
		else:
			IntField.__init__(self, 40665, data)

class UnderlyingPaymentScheduleStubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40666)
		else:
			IntField.__init__(self, 40666, data)

class UnderlyingPaymentScheduleStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40667)
		else:
			StringField.__init__(self, 40667, data)

class UnderlyingPaymentScheduleEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40668)
		else:
			StringField.__init__(self, 40668, data)

class UnderlyingPaymentSchedulePaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40669)
		else:
			IntField.__init__(self, 40669, data)

class UnderlyingPaymentScheduleReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40670)
		else:
			IntField.__init__(self, 40670, data)

class UnderlyingPaymentScheduleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40671)
		else:
			DoubleField.__init__(self, 40671, data)

class UnderlyingPaymentScheduleCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40672)
		else:
			StringField.__init__(self, 40672, data)

class UnderlyingPaymentScheduleRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40673)
		else:
			DoubleField.__init__(self, 40673, data)

class UnderlyingPaymentScheduleRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40674)
		else:
			DoubleField.__init__(self, 40674, data)

class UnderlyingPaymentScheduleRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40675)
		else:
			DoubleField.__init__(self, 40675, data)

class UnderlyingPaymentScheduleRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40676)
		else:
			IntField.__init__(self, 40676, data)

class UnderlyingPaymentScheduleRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40677)
		else:
			IntField.__init__(self, 40677, data)

class UnderlyingPaymentScheduleFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40678)
		else:
			DoubleField.__init__(self, 40678, data)

class UnderlyingPaymentScheduleFixedCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40679)
		else:
			StringField.__init__(self, 40679, data)

class UnderlyingPaymentScheduleStepFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40680)
		else:
			IntField.__init__(self, 40680, data)

class UnderlyingPaymentScheduleStepFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40681)
		else:
			StringField.__init__(self, 40681, data)

class UnderlyingPaymentScheduleStepOffsetValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40682)
		else:
			DoubleField.__init__(self, 40682, data)

class UnderlyingPaymentScheduleStepRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40683)
		else:
			DoubleField.__init__(self, 40683, data)

class UnderlyingPaymentScheduleStepOffsetRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40684)
		else:
			DoubleField.__init__(self, 40684, data)

class UnderlyingPaymentScheduleStepRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40685)
		else:
			IntField.__init__(self, 40685, data)

class UnderlyingPaymentScheduleFixingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40686)
		else:
			StringField.__init__(self, 40686, data)

class UnderlyingPaymentScheduleWeight(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40687)
		else:
			DoubleField.__init__(self, 40687, data)

class UnderlyingPaymentScheduleFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40688)
		else:
			IntField.__init__(self, 40688, data)

class UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40689)
		else:
			IntField.__init__(self, 40689, data)

class UnderlyingPaymentScheduleFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40690)
		else:
			StringField.__init__(self, 40690, data)

class UnderlyingPaymentScheduleFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40691)
		else:
			IntField.__init__(self, 40691, data)

class UnderlyingPaymentScheduleFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40692)
		else:
			StringField.__init__(self, 40692, data)

class UnderlyingPaymentScheduleFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40693)
		else:
			IntField.__init__(self, 40693, data)

class UnderlyingPaymentScheduleFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40694)
		else:
			StringField.__init__(self, 40694, data)

class UnderlyingPaymentScheduleFixingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40695)
		else:
			StringField.__init__(self, 40695, data)

class UnderlyingPaymentScheduleFixingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40696)
		else:
			StringField.__init__(self, 40696, data)

class UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40697)
		else:
			IntField.__init__(self, 40697, data)

class UnderlyingPaymentScheduleInterimExchangeDatesBizDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40698)
		else:
			IntField.__init__(self, 40698, data)

class UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40699)
		else:
			StringField.__init__(self, 40699, data)

class UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40700)
		else:
			IntField.__init__(self, 40700, data)

class UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40701)
		else:
			StringField.__init__(self, 40701, data)

class UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40702)
		else:
			IntField.__init__(self, 40702, data)

class UnderlyingPaymentScheduleInterimExchangeDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40703)
		else:
			StringField.__init__(self, 40703, data)

class NoUnderlyingPaymentScheduleRateSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40704)
		else:
			IntField.__init__(self, 40704, data)

class UnderlyingPaymentScheduleRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40705)
		else:
			IntField.__init__(self, 40705, data)

class UnderlyingPaymentScheduleRateSourceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40706)
		else:
			IntField.__init__(self, 40706, data)

class UnderlyingPaymentScheduleReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40707)
		else:
			StringField.__init__(self, 40707, data)

class NoUnderlyingPaymentStubs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40708)
		else:
			IntField.__init__(self, 40708, data)

class UnderlyingPaymentStubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40709)
		else:
			IntField.__init__(self, 40709, data)

class UnderlyingPaymentStubLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40710)
		else:
			IntField.__init__(self, 40710, data)

class UnderlyingPaymentStubRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40711)
		else:
			DoubleField.__init__(self, 40711, data)

class UnderlyingPaymentStubFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40712)
		else:
			DoubleField.__init__(self, 40712, data)

class UnderlyingPaymentStubFixedCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40713)
		else:
			StringField.__init__(self, 40713, data)

class UnderlyingPaymentStubIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40714)
		else:
			StringField.__init__(self, 40714, data)

class UnderlyingPaymentStubIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40715)
		else:
			IntField.__init__(self, 40715, data)

class UnderlyingPaymentStubIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40716)
		else:
			IntField.__init__(self, 40716, data)

class UnderlyingPaymentStubIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40717)
		else:
			StringField.__init__(self, 40717, data)

class UnderlyingPaymentStubIndexRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40718)
		else:
			DoubleField.__init__(self, 40718, data)

class UnderlyingPaymentStubIndexRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40719)
		else:
			DoubleField.__init__(self, 40719, data)

class UnderlyingPaymentStubIndexRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40720)
		else:
			IntField.__init__(self, 40720, data)

class UnderlyingPaymentStubIndexRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40721)
		else:
			IntField.__init__(self, 40721, data)

class UnderlyingPaymentStubIndexCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40722)
		else:
			DoubleField.__init__(self, 40722, data)

class UnderlyingPaymentStubIndexCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40723)
		else:
			IntField.__init__(self, 40723, data)

class UnderlyingPaymentStubIndexCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40724)
		else:
			IntField.__init__(self, 40724, data)

class UnderlyingPaymentStubIndexFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40725)
		else:
			DoubleField.__init__(self, 40725, data)

class UnderlyingPaymentStubIndexFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40726)
		else:
			IntField.__init__(self, 40726, data)

class UnderlyingPaymentStubIndexFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40727)
		else:
			IntField.__init__(self, 40727, data)

class UnderlyingPaymentStubIndex2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40728)
		else:
			StringField.__init__(self, 40728, data)

class UnderlyingPaymentStubIndex2Source(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40729)
		else:
			IntField.__init__(self, 40729, data)

class UnderlyingPaymentStubIndex2CurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40730)
		else:
			IntField.__init__(self, 40730, data)

class UnderlyingPaymentStubIndex2CurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40731)
		else:
			StringField.__init__(self, 40731, data)

class UnderlyingPaymentStubIndex2RateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40732)
		else:
			DoubleField.__init__(self, 40732, data)

class UnderlyingPaymentStubIndex2RateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40733)
		else:
			DoubleField.__init__(self, 40733, data)

class UnderlyingPaymentStubIndex2RateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40734)
		else:
			IntField.__init__(self, 40734, data)

class UnderlyingPaymentStubIndex2RateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40735)
		else:
			IntField.__init__(self, 40735, data)

class UnderlyingPaymentStubIndex2CapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40736)
		else:
			DoubleField.__init__(self, 40736, data)

class UnderlyingPaymentStubIndex2FloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40737)
		else:
			DoubleField.__init__(self, 40737, data)

class PaymentStreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40738)
		else:
			IntField.__init__(self, 40738, data)

class PaymentStreamMarketRate(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40739)
		else:
			IntField.__init__(self, 40739, data)

class PaymentStreamDelayIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40740)
		else:
			BoolField.__init__(self, 40740, data)

class PaymentStreamSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40741)
		else:
			StringField.__init__(self, 40741, data)

class PaymentStreamDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40742)
		else:
			IntField.__init__(self, 40742, data)

class PaymentStreamAccrualDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40743)
		else:
			IntField.__init__(self, 40743, data)

class PaymentStreamDiscountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40744)
		else:
			IntField.__init__(self, 40744, data)

class PaymentStreamDiscountRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40745)
		else:
			DoubleField.__init__(self, 40745, data)

class PaymentStreamDiscountRateDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40746)
		else:
			IntField.__init__(self, 40746, data)

class PaymentStreamCompoundingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40747)
		else:
			IntField.__init__(self, 40747, data)

class PaymentStreamInitialPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40748)
		else:
			BoolField.__init__(self, 40748, data)

class PaymentStreamInterimPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40749)
		else:
			BoolField.__init__(self, 40749, data)

class PaymentStreamFinalPrincipalExchangeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40750)
		else:
			BoolField.__init__(self, 40750, data)

class PaymentStreamPaymentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40751)
		else:
			IntField.__init__(self, 40751, data)

class PaymentStreamPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40752)
		else:
			StringField.__init__(self, 40752, data)

class PaymentStreamPaymentFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40753)
		else:
			IntField.__init__(self, 40753, data)

class PaymentStreamPaymentFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40754)
		else:
			StringField.__init__(self, 40754, data)

class PaymentStreamPaymentRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40755)
		else:
			StringField.__init__(self, 40755, data)

class PaymentStreamFirstPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40756)
		else:
			StringField.__init__(self, 40756, data)

class PaymentStreamLastRegularPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40757)
		else:
			StringField.__init__(self, 40757, data)

class PaymentStreamPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40758)
		else:
			IntField.__init__(self, 40758, data)

class PaymentStreamPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40759)
		else:
			IntField.__init__(self, 40759, data)

class PaymentStreamPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40760)
		else:
			StringField.__init__(self, 40760, data)

class PaymentStreamResetDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40761)
		else:
			IntField.__init__(self, 40761, data)

class PaymentStreamResetDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40762)
		else:
			IntField.__init__(self, 40762, data)

class PaymentStreamResetDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40763)
		else:
			StringField.__init__(self, 40763, data)

class PaymentStreamResetFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40764)
		else:
			IntField.__init__(self, 40764, data)

class PaymentStreamResetFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40765)
		else:
			StringField.__init__(self, 40765, data)

class PaymentStreamResetWeeklyRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40766)
		else:
			StringField.__init__(self, 40766, data)

class PaymentStreamInitialFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40767)
		else:
			IntField.__init__(self, 40767, data)

class PaymentStreamInitialFixingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40768)
		else:
			IntField.__init__(self, 40768, data)

class PaymentStreamInitialFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40769)
		else:
			StringField.__init__(self, 40769, data)

class PaymentStreamInitialFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40770)
		else:
			IntField.__init__(self, 40770, data)

class PaymentStreamInitialFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40771)
		else:
			StringField.__init__(self, 40771, data)

class PaymentStreamInitialFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40772)
		else:
			IntField.__init__(self, 40772, data)

class PaymentStreamInitialFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40773)
		else:
			StringField.__init__(self, 40773, data)

class PaymentStreamFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40774)
		else:
			IntField.__init__(self, 40774, data)

class PaymentStreamFixingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40775)
		else:
			IntField.__init__(self, 40775, data)

class PaymentStreamFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40776)
		else:
			StringField.__init__(self, 40776, data)

class PaymentStreamFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40777)
		else:
			IntField.__init__(self, 40777, data)

class PaymentStreamFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40778)
		else:
			StringField.__init__(self, 40778, data)

class PaymentStreamFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40779)
		else:
			IntField.__init__(self, 40779, data)

class PaymentStreamFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40780)
		else:
			StringField.__init__(self, 40780, data)

class PaymentStreamRateCutoffDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40781)
		else:
			IntField.__init__(self, 40781, data)

class PaymentStreamRateCutoffDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40782)
		else:
			StringField.__init__(self, 40782, data)

class PaymentStreamRateCutoffDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40783)
		else:
			IntField.__init__(self, 40783, data)

class PaymentStreamRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40784)
		else:
			DoubleField.__init__(self, 40784, data)

class PaymentStreamFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40785)
		else:
			DoubleField.__init__(self, 40785, data)

class PaymentStreamRateOrAmountCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40786)
		else:
			StringField.__init__(self, 40786, data)

class PaymentStreamFutureValueNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40787)
		else:
			DoubleField.__init__(self, 40787, data)

class PaymentStreamFutureValueDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40788)
		else:
			StringField.__init__(self, 40788, data)

class PaymentStreamRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40789)
		else:
			StringField.__init__(self, 40789, data)

class PaymentStreamRateIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40790)
		else:
			IntField.__init__(self, 40790, data)

class PaymentStreamRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40791)
		else:
			StringField.__init__(self, 40791, data)

class PaymentStreamRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40792)
		else:
			IntField.__init__(self, 40792, data)

class PaymentStreamRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40793)
		else:
			DoubleField.__init__(self, 40793, data)

class PaymentStreamRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40794)
		else:
			DoubleField.__init__(self, 40794, data)

class PaymentStreamRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40795)
		else:
			IntField.__init__(self, 40795, data)

class PaymentStreamRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40796)
		else:
			IntField.__init__(self, 40796, data)

class PaymentStreamCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40797)
		else:
			DoubleField.__init__(self, 40797, data)

class PaymentStreamCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40798)
		else:
			IntField.__init__(self, 40798, data)

class PaymentStreamCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40799)
		else:
			IntField.__init__(self, 40799, data)

class PaymentStreamFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40800)
		else:
			DoubleField.__init__(self, 40800, data)

class PaymentStreamFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40801)
		else:
			IntField.__init__(self, 40801, data)

class PaymentStreamFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40802)
		else:
			IntField.__init__(self, 40802, data)

class PaymentStreamInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40803)
		else:
			DoubleField.__init__(self, 40803, data)

class PaymentStreamFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 40804)
		else:
			CharField.__init__(self, 40804, data)

class PaymentStreamFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40805)
		else:
			IntField.__init__(self, 40805, data)

class PaymentStreamAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40806)
		else:
			IntField.__init__(self, 40806, data)

class PaymentStreamNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40807)
		else:
			IntField.__init__(self, 40807, data)

class PaymentStreamInflationLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40808)
		else:
			IntField.__init__(self, 40808, data)

class PaymentStreamInflationLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40809)
		else:
			StringField.__init__(self, 40809, data)

class PaymentStreamInflationLagDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40810)
		else:
			IntField.__init__(self, 40810, data)

class PaymentStreamInflationInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40811)
		else:
			IntField.__init__(self, 40811, data)

class PaymentStreamInflationIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40812)
		else:
			IntField.__init__(self, 40812, data)

class PaymentStreamInflationPublicationSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40813)
		else:
			StringField.__init__(self, 40813, data)

class PaymentStreamInflationInitialIndexLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40814)
		else:
			DoubleField.__init__(self, 40814, data)

class PaymentStreamInflationFallbackBondApplicable(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40815)
		else:
			BoolField.__init__(self, 40815, data)

class PaymentStreamFRADiscounting(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40816)
		else:
			IntField.__init__(self, 40816, data)

class PaymentStreamNonDeliverableRefCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40817)
		else:
			StringField.__init__(self, 40817, data)

class PaymentStreamNonDeliverableFixingDatesBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40818)
		else:
			IntField.__init__(self, 40818, data)

class PaymentStreamNonDeliverableFixingDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40819)
		else:
			StringField.__init__(self, 40819, data)

class PaymentStreamNonDeliverableFixingDatesRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40820)
		else:
			IntField.__init__(self, 40820, data)

class PaymentStreamNonDeliverableFixingDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40821)
		else:
			IntField.__init__(self, 40821, data)

class PaymentStreamNonDeliverableFixingDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40822)
		else:
			StringField.__init__(self, 40822, data)

class PaymentStreamNonDeliverableFixingDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40823)
		else:
			IntField.__init__(self, 40823, data)

class UnderlyingPaymentStreamNonDeliverableSettlReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40824)
		else:
			StringField.__init__(self, 40824, data)

class NoNonDeliverableFixingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40825)
		else:
			IntField.__init__(self, 40825, data)

class NonDeliverableFixingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40826)
		else:
			StringField.__init__(self, 40826, data)

class NonDeliverableFixingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40827)
		else:
			IntField.__init__(self, 40827, data)

class NoPaymentSchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40828)
		else:
			IntField.__init__(self, 40828, data)

class PaymentScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40829)
		else:
			IntField.__init__(self, 40829, data)

class PaymentScheduleStubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40830)
		else:
			IntField.__init__(self, 40830, data)

class PaymentScheduleStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40831)
		else:
			StringField.__init__(self, 40831, data)

class PaymentScheduleEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40832)
		else:
			StringField.__init__(self, 40832, data)

class PaymentSchedulePaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40833)
		else:
			IntField.__init__(self, 40833, data)

class PaymentScheduleReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40834)
		else:
			IntField.__init__(self, 40834, data)

class PaymentScheduleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40835)
		else:
			DoubleField.__init__(self, 40835, data)

class PaymentScheduleCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40836)
		else:
			StringField.__init__(self, 40836, data)

class PaymentScheduleRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40837)
		else:
			DoubleField.__init__(self, 40837, data)

class PaymentScheduleRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40838)
		else:
			DoubleField.__init__(self, 40838, data)

class PaymentScheduleRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40839)
		else:
			DoubleField.__init__(self, 40839, data)

class PaymentScheduleRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40840)
		else:
			IntField.__init__(self, 40840, data)

class PaymentScheduleRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40841)
		else:
			IntField.__init__(self, 40841, data)

class PaymentScheduleFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40842)
		else:
			DoubleField.__init__(self, 40842, data)

class PaymentScheduleFixedCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40843)
		else:
			StringField.__init__(self, 40843, data)

class PaymentScheduleStepFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40844)
		else:
			IntField.__init__(self, 40844, data)

class PaymentScheduleStepFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40845)
		else:
			StringField.__init__(self, 40845, data)

class PaymentScheduleStepOffsetValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40846)
		else:
			DoubleField.__init__(self, 40846, data)

class PaymentScheduleStepRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40847)
		else:
			DoubleField.__init__(self, 40847, data)

class PaymentScheduleStepOffsetRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40848)
		else:
			DoubleField.__init__(self, 40848, data)

class PaymentScheduleStepRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40849)
		else:
			IntField.__init__(self, 40849, data)

class PaymentScheduleFixingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40850)
		else:
			StringField.__init__(self, 40850, data)

class PaymentScheduleWeight(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40851)
		else:
			DoubleField.__init__(self, 40851, data)

class PaymentScheduleFixingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40852)
		else:
			IntField.__init__(self, 40852, data)

class PaymentScheduleFixingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40853)
		else:
			IntField.__init__(self, 40853, data)

class PaymentScheduleFixingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40854)
		else:
			StringField.__init__(self, 40854, data)

class PaymentScheduleFixingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40855)
		else:
			IntField.__init__(self, 40855, data)

class PaymentScheduleFixingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40856)
		else:
			StringField.__init__(self, 40856, data)

class PaymentScheduleFixingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40857)
		else:
			IntField.__init__(self, 40857, data)

class PaymentScheduleFixingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40858)
		else:
			StringField.__init__(self, 40858, data)

class PaymentScheduleFixingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40859)
		else:
			StringField.__init__(self, 40859, data)

class PaymentScheduleFixingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40860)
		else:
			StringField.__init__(self, 40860, data)

class PaymentScheduleInterimExchangePaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40861)
		else:
			IntField.__init__(self, 40861, data)

class PaymentScheduleInterimExchangeDatesBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40862)
		else:
			IntField.__init__(self, 40862, data)

class PaymentScheduleInterimExchangeDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40863)
		else:
			StringField.__init__(self, 40863, data)

class PaymentScheduleInterimExchangeDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40864)
		else:
			IntField.__init__(self, 40864, data)

class PaymentScheduleInterimExchangeDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40865)
		else:
			StringField.__init__(self, 40865, data)

class PaymentScheduleInterimExchangeDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40866)
		else:
			IntField.__init__(self, 40866, data)

class PaymentScheduleInterimExchangeDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40867)
		else:
			StringField.__init__(self, 40867, data)

class NoPaymentScheduleRateSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40868)
		else:
			IntField.__init__(self, 40868, data)

class PaymentScheduleRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40869)
		else:
			IntField.__init__(self, 40869, data)

class PaymentScheduleRateSourceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40870)
		else:
			IntField.__init__(self, 40870, data)

class PaymentScheduleReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40871)
		else:
			StringField.__init__(self, 40871, data)

class NoPaymentStubs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40872)
		else:
			IntField.__init__(self, 40872, data)

class PaymentStubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40873)
		else:
			IntField.__init__(self, 40873, data)

class PaymentStubLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40874)
		else:
			IntField.__init__(self, 40874, data)

class PaymentStubRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40875)
		else:
			DoubleField.__init__(self, 40875, data)

class PaymentStubFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40876)
		else:
			DoubleField.__init__(self, 40876, data)

class PaymentStubFixedCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40877)
		else:
			StringField.__init__(self, 40877, data)

class PaymentStubIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40878)
		else:
			StringField.__init__(self, 40878, data)

class PaymentStubIndexSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40879)
		else:
			IntField.__init__(self, 40879, data)

class PaymentStubIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40880)
		else:
			IntField.__init__(self, 40880, data)

class PaymentStubIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40881)
		else:
			StringField.__init__(self, 40881, data)

class PaymentStubIndexRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40882)
		else:
			DoubleField.__init__(self, 40882, data)

class PaymentStubIndexRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40883)
		else:
			DoubleField.__init__(self, 40883, data)

class PaymentStubIndexRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40884)
		else:
			IntField.__init__(self, 40884, data)

class PaymentStubIndexRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40885)
		else:
			IntField.__init__(self, 40885, data)

class PaymentStubIndexCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40886)
		else:
			DoubleField.__init__(self, 40886, data)

class PaymentStubIndexCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40887)
		else:
			IntField.__init__(self, 40887, data)

class PaymentStubIndexCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40888)
		else:
			IntField.__init__(self, 40888, data)

class PaymentStubIndexFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40889)
		else:
			DoubleField.__init__(self, 40889, data)

class PaymentStubIndexFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40890)
		else:
			IntField.__init__(self, 40890, data)

class PaymentStubIndexFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40891)
		else:
			IntField.__init__(self, 40891, data)

class PaymentStubIndex2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40892)
		else:
			StringField.__init__(self, 40892, data)

class PaymentStubIndex2Source(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40893)
		else:
			IntField.__init__(self, 40893, data)

class PaymentStubIndex2CurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40894)
		else:
			IntField.__init__(self, 40894, data)

class PaymentStubIndex2CurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40895)
		else:
			StringField.__init__(self, 40895, data)

class PaymentStubIndex2RateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40896)
		else:
			DoubleField.__init__(self, 40896, data)

class PaymentStubIndex2RateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40897)
		else:
			DoubleField.__init__(self, 40897, data)

class PaymentStubIndex2RateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40898)
		else:
			IntField.__init__(self, 40898, data)

class PaymentStubIndex2RateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40899)
		else:
			IntField.__init__(self, 40899, data)

class PaymentStubIndex2CapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40900)
		else:
			DoubleField.__init__(self, 40900, data)

class PaymentStubIndex2FloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40901)
		else:
			DoubleField.__init__(self, 40901, data)

class NoLegSettlRateFallbacks(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40902)
		else:
			IntField.__init__(self, 40902, data)

class LegSettlRatePostponementMaximumDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40903)
		else:
			IntField.__init__(self, 40903, data)

class UnderlyingSettlRateFallbackRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40904)
		else:
			IntField.__init__(self, 40904, data)

class LegSettlRatePostponementSurvey(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 40905)
		else:
			BoolField.__init__(self, 40905, data)

class LegSettlRatePostponementCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40906)
		else:
			IntField.__init__(self, 40906, data)

class StreamEffectiveDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40907)
		else:
			StringField.__init__(self, 40907, data)

class StreamEffectiveDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40908)
		else:
			IntField.__init__(self, 40908, data)

class StreamEffectiveDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40909)
		else:
			StringField.__init__(self, 40909, data)

class StreamEffectiveDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40910)
		else:
			IntField.__init__(self, 40910, data)

class StreamEffectiveDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40911)
		else:
			IntField.__init__(self, 40911, data)

class StreamEffectiveDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40912)
		else:
			StringField.__init__(self, 40912, data)

class StreamEffectiveDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40913)
		else:
			IntField.__init__(self, 40913, data)

class StreamEffectiveDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40914)
		else:
			StringField.__init__(self, 40914, data)

class UnderlyingSettlRateFallbackReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40915)
		else:
			StringField.__init__(self, 40915, data)

class PaymentPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40919)
		else:
			IntField.__init__(self, 40919, data)

class PaymentStreamPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40920)
		else:
			IntField.__init__(self, 40920, data)

class BusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40921)
		else:
			IntField.__init__(self, 40921, data)

class DateRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40922)
		else:
			StringField.__init__(self, 40922, data)

class NoLegBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40923)
		else:
			IntField.__init__(self, 40923, data)

class LegBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40924)
		else:
			StringField.__init__(self, 40924, data)

class LegBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40925)
		else:
			IntField.__init__(self, 40925, data)

class LegDateRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40926)
		else:
			StringField.__init__(self, 40926, data)

class NoLegPaymentScheduleFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40927)
		else:
			IntField.__init__(self, 40927, data)

class NoLegPaymentScheduleInterimExchangeDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40928)
		else:
			IntField.__init__(self, 40928, data)

class NoLegPaymentStreamNonDeliverableFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40929)
		else:
			IntField.__init__(self, 40929, data)

class NoLegPaymentStreamPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40930)
		else:
			IntField.__init__(self, 40930, data)

class NoLegPaymentStreamResetDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40931)
		else:
			IntField.__init__(self, 40931, data)

class NoLegPaymentStreamInitialFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40932)
		else:
			IntField.__init__(self, 40932, data)

class NoLegPaymentStreamFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40933)
		else:
			IntField.__init__(self, 40933, data)

class NoLegProvisionCashSettlPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40934)
		else:
			IntField.__init__(self, 40934, data)

class NoLegProvisionCashSettlValueDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40935)
		else:
			IntField.__init__(self, 40935, data)

class NoLegProvisionOptionExerciseBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40936)
		else:
			IntField.__init__(self, 40936, data)

class NoLegProvisionOptionExpirationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40937)
		else:
			IntField.__init__(self, 40937, data)

class NoLegProvisionOptionRelevantUnderlyingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40938)
		else:
			IntField.__init__(self, 40938, data)

class NoLegProvisionDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40939)
		else:
			IntField.__init__(self, 40939, data)

class NoLegStreamCalculationPeriodBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40940)
		else:
			IntField.__init__(self, 40940, data)

class NoLegStreamFirstPeriodStartDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40941)
		else:
			IntField.__init__(self, 40941, data)

class NoLegStreamEffectiveDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40942)
		else:
			IntField.__init__(self, 40942, data)

class NoLegStreamTerminationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40943)
		else:
			IntField.__init__(self, 40943, data)

class NoPaymentBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40944)
		else:
			IntField.__init__(self, 40944, data)

class NoPaymentScheduleInterimExchangeDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40945)
		else:
			IntField.__init__(self, 40945, data)

class NoPaymentStreamNonDeliverableFixingDatesBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40946)
		else:
			IntField.__init__(self, 40946, data)

class NoPaymentStreamPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40947)
		else:
			IntField.__init__(self, 40947, data)

class NoPaymentStreamResetDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40948)
		else:
			IntField.__init__(self, 40948, data)

class NoPaymentStreamInitialFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40949)
		else:
			IntField.__init__(self, 40949, data)

class NoPaymentStreamFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40950)
		else:
			IntField.__init__(self, 40950, data)

class NoProtectionTermEventNewsSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40951)
		else:
			IntField.__init__(self, 40951, data)

class NoProvisionCashSettlPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40952)
		else:
			IntField.__init__(self, 40952, data)

class NoProvisionCashSettlValueDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40953)
		else:
			IntField.__init__(self, 40953, data)

class NoProvisionOptionExerciseBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40954)
		else:
			IntField.__init__(self, 40954, data)

class NoProvisionOptionExpirationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40955)
		else:
			IntField.__init__(self, 40955, data)

class NoProvisionOptionRelevantUnderlyingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40956)
		else:
			IntField.__init__(self, 40956, data)

class NoProvisionDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40957)
		else:
			IntField.__init__(self, 40957, data)

class NoStreamCalculationPeriodBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40958)
		else:
			IntField.__init__(self, 40958, data)

class NoStreamFirstPeriodStartDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40959)
		else:
			IntField.__init__(self, 40959, data)

class NoStreamEffectiveDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40960)
		else:
			IntField.__init__(self, 40960, data)

class NoStreamTerminationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40961)
		else:
			IntField.__init__(self, 40961, data)

class NoUnderlyingBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40962)
		else:
			IntField.__init__(self, 40962, data)

class UnderlyingBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40963)
		else:
			StringField.__init__(self, 40963, data)

class UnderlyingBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40964)
		else:
			IntField.__init__(self, 40964, data)

class UnderlyingDateRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40965)
		else:
			StringField.__init__(self, 40965, data)

class NoUnderlyingPaymentScheduleFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40966)
		else:
			IntField.__init__(self, 40966, data)

class NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40967)
		else:
			IntField.__init__(self, 40967, data)

class NoUnderlyingPaymentStreamNonDeliverableFixingDatesBizCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40968)
		else:
			IntField.__init__(self, 40968, data)

class NoUnderlyingPaymentStreamPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40969)
		else:
			IntField.__init__(self, 40969, data)

class NoUnderlyingPaymentStreamResetDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40970)
		else:
			IntField.__init__(self, 40970, data)

class NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40971)
		else:
			IntField.__init__(self, 40971, data)

class NoUnderlyingPaymentStreamFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40972)
		else:
			IntField.__init__(self, 40972, data)

class NoUnderlyingStreamCalculationPeriodBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40973)
		else:
			IntField.__init__(self, 40973, data)

class NoUnderlyingStreamFirstPeriodStartDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40974)
		else:
			IntField.__init__(self, 40974, data)

class NoUnderlyingStreamEffectiveDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40975)
		else:
			IntField.__init__(self, 40975, data)

class NoUnderlyingStreamTerminationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40976)
		else:
			IntField.__init__(self, 40976, data)

class NoPaymentScheduleFixingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40977)
		else:
			IntField.__init__(self, 40977, data)

class EncodedLegStreamTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40978)
		else:
			IntField.__init__(self, 40978, data)

class EncodedLegStreamText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40979)
		else:
			StringField.__init__(self, 40979, data)

class EncodedLegProvisionTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40980)
		else:
			IntField.__init__(self, 40980, data)

class EncodedLegProvisionText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40981)
		else:
			StringField.__init__(self, 40981, data)

class EncodedStreamTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40982)
		else:
			IntField.__init__(self, 40982, data)

class EncodedStreamText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40983)
		else:
			StringField.__init__(self, 40983, data)

class EncodedPaymentTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40984)
		else:
			IntField.__init__(self, 40984, data)

class EncodedPaymentText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40985)
		else:
			StringField.__init__(self, 40985, data)

class EncodedProvisionTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40986)
		else:
			IntField.__init__(self, 40986, data)

class EncodedProvisionText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40987)
		else:
			StringField.__init__(self, 40987, data)

class EncodedUnderlyingStreamTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40988)
		else:
			IntField.__init__(self, 40988, data)

class EncodedUnderlyingStreamText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40989)
		else:
			StringField.__init__(self, 40989, data)

class ProvisionCashSettlQuoteReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41406)
		else:
			StringField.__init__(self, 41406, data)

class LegProvisionCashSettlQuoteReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41407)
		else:
			StringField.__init__(self, 41407, data)

class EventMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2340)
		else:
			StringField.__init__(self, 2340, data)

class LegEventMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2341)
		else:
			StringField.__init__(self, 2341, data)

class UnderlyingEventMonthYear(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2342)
		else:
			StringField.__init__(self, 2342, data)

class PreviousClearingBusinessDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2084)
		else:
			StringField.__init__(self, 2084, data)

class ValuationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2085)
		else:
			StringField.__init__(self, 2085, data)

class ValuationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2086)
		else:
			StringField.__init__(self, 2086, data)

class ValuationBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2087)
		else:
			StringField.__init__(self, 2087, data)

class MarginAmtFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2088)
		else:
			DoubleField.__init__(self, 2088, data)

class MarginAmtFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2089)
		else:
			CharField.__init__(self, 2089, data)

class CollateralFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2090)
		else:
			DoubleField.__init__(self, 2090, data)

class CollateralFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2091)
		else:
			CharField.__init__(self, 2091, data)

class CollateralAmountMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2092)
		else:
			StringField.__init__(self, 2092, data)

class CollateralAmountMarketID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2093)
		else:
			StringField.__init__(self, 2093, data)

class PayCollectFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2094)
		else:
			DoubleField.__init__(self, 2094, data)

class PayCollectFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2095)
		else:
			CharField.__init__(self, 2095, data)

class PosAmtStreamDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2096)
		else:
			StringField.__init__(self, 2096, data)

class PositionFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2097)
		else:
			DoubleField.__init__(self, 2097, data)

class PositionFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2098)
		else:
			CharField.__init__(self, 2098, data)

class PosAmtMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2099)
		else:
			StringField.__init__(self, 2099, data)

class PosAmtMarketID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2100)
		else:
			StringField.__init__(self, 2100, data)

class TerminatedIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2101)
		else:
			BoolField.__init__(self, 2101, data)

class ShortMarkingExemptIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2102)
		else:
			BoolField.__init__(self, 2102, data)

class RelatedRegulatoryTradeIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2103)
		else:
			StringField.__init__(self, 2103, data)

class NoAttachments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2104)
		else:
			IntField.__init__(self, 2104, data)

class AttachmentName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2105)
		else:
			StringField.__init__(self, 2105, data)

class AttachmentMediaType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2106)
		else:
			StringField.__init__(self, 2106, data)

class AttachmentClassification(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2107)
		else:
			StringField.__init__(self, 2107, data)

class AttachmentExternalURL(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2108)
		else:
			StringField.__init__(self, 2108, data)

class AttachmentEncodingType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2109)
		else:
			IntField.__init__(self, 2109, data)

class UnencodedAttachmentLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2110)
		else:
			IntField.__init__(self, 2110, data)

class EncodedAttachmentLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2111)
		else:
			IntField.__init__(self, 2111, data)

class EncodedAttachment(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2112)
		else:
			StringField.__init__(self, 2112, data)

class NoAttachmentKeywords(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2113)
		else:
			IntField.__init__(self, 2113, data)

class AttachmentKeyword(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2114)
		else:
			StringField.__init__(self, 2114, data)

class NegotiationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2115)
		else:
			IntField.__init__(self, 2115, data)

class NextAuctionTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2116)
		else:
			UtcTimeStampField.__init__(self, 2116, data)

class NoAssetAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2304)
		else:
			IntField.__init__(self, 2304, data)

class AssetAttributeType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2305)
		else:
			StringField.__init__(self, 2305, data)

class AssetAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2306)
		else:
			StringField.__init__(self, 2306, data)

class AssetAttributeLimit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2307)
		else:
			StringField.__init__(self, 2307, data)

class CommRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 1233)
		else:
			DoubleField.__init__(self, 1233, data)

class CommUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1238)
		else:
			StringField.__init__(self, 1238, data)

class NoComplexEventAveragingObservations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40994)
		else:
			IntField.__init__(self, 40994, data)

class ComplexEventAveragingObservationNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40995)
		else:
			IntField.__init__(self, 40995, data)

class ComplexEventAveragingWeight(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 40996)
		else:
			DoubleField.__init__(self, 40996, data)

class NoComplexEventCreditEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40997)
		else:
			IntField.__init__(self, 40997, data)

class ComplexEventCreditEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40998)
		else:
			StringField.__init__(self, 40998, data)

class ComplexEventCreditEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40999)
		else:
			StringField.__init__(self, 40999, data)

class ComplexEventCreditEventCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41000)
		else:
			StringField.__init__(self, 41000, data)

class ComplexEventCreditEventPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41001)
		else:
			IntField.__init__(self, 41001, data)

class ComplexEventCreditEventUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41002)
		else:
			StringField.__init__(self, 41002, data)

class ComplexEventCreditEventDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41003)
		else:
			IntField.__init__(self, 41003, data)

class ComplexEventCreditEventRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41004)
		else:
			IntField.__init__(self, 41004, data)

class NoComplexEventCreditEventQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41005)
		else:
			IntField.__init__(self, 41005, data)

class ComplexEventCreditEventQualifier(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 41006)
		else:
			CharField.__init__(self, 41006, data)

class NoComplexEventPeriodDateTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41007)
		else:
			IntField.__init__(self, 41007, data)

class ComplexEventPeriodDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41008)
		else:
			StringField.__init__(self, 41008, data)

class ComplexEventPeriodTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41009)
		else:
			StringField.__init__(self, 41009, data)

class NoComplexEventPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41010)
		else:
			IntField.__init__(self, 41010, data)

class ComplexEventPeriodType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41011)
		else:
			IntField.__init__(self, 41011, data)

class ComplexEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41012)
		else:
			StringField.__init__(self, 41012, data)

class NoComplexEventRateSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41013)
		else:
			IntField.__init__(self, 41013, data)

class ComplexEventRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41014)
		else:
			IntField.__init__(self, 41014, data)

class ComplexEventRateSourceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41015)
		else:
			IntField.__init__(self, 41015, data)

class ComplexEventReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41016)
		else:
			StringField.__init__(self, 41016, data)

class ComplexEventReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41017)
		else:
			StringField.__init__(self, 41017, data)

class NoComplexEventDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41018)
		else:
			IntField.__init__(self, 41018, data)

class ComplexEventDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41019)
		else:
			StringField.__init__(self, 41019, data)

class ComplexEventDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41020)
		else:
			StringField.__init__(self, 41020, data)

class ComplexEventDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41021)
		else:
			IntField.__init__(self, 41021, data)

class ComplexEventDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41022)
		else:
			IntField.__init__(self, 41022, data)

class ComplexEventDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41023)
		else:
			StringField.__init__(self, 41023, data)

class ComplexEventDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41024)
		else:
			IntField.__init__(self, 41024, data)

class ComplexEventDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41025)
		else:
			IntField.__init__(self, 41025, data)

class ComplexEventDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41026)
		else:
			StringField.__init__(self, 41026, data)

class ComplexEventFixingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41027)
		else:
			StringField.__init__(self, 41027, data)

class ComplexEventFixingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41028)
		else:
			StringField.__init__(self, 41028, data)

class NoComplexEventCreditEventSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41029)
		else:
			IntField.__init__(self, 41029, data)

class ComplexEventCreditEventSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41030)
		else:
			StringField.__init__(self, 41030, data)

class ComplexOptPayoutPaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2117)
		else:
			IntField.__init__(self, 2117, data)

class ComplexOptPayoutReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2118)
		else:
			IntField.__init__(self, 2118, data)

class ComplexOptPayoutUnderlier(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2119)
		else:
			StringField.__init__(self, 2119, data)

class ComplexOptPayoutPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2120)
		else:
			DoubleField.__init__(self, 2120, data)

class ComplexOptPayoutTime(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2121)
		else:
			IntField.__init__(self, 2121, data)

class ComplexOptPayoutCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2122)
		else:
			StringField.__init__(self, 2122, data)

class ComplexEventPricePercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2123)
		else:
			DoubleField.__init__(self, 2123, data)

class ComplexEventCurrencyOne(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2124)
		else:
			StringField.__init__(self, 2124, data)

class ComplexEventCurrencyTwo(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2125)
		else:
			StringField.__init__(self, 2125, data)

class ComplexEventQuoteBasis(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2126)
		else:
			IntField.__init__(self, 2126, data)

class ComplexEventFixedFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2127)
		else:
			DoubleField.__init__(self, 2127, data)

class ComplexEventDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2128)
		else:
			StringField.__init__(self, 2128, data)

class ComplexEventCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2129)
		else:
			IntField.__init__(self, 2129, data)

class ComplexEventStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2130)
		else:
			DoubleField.__init__(self, 2130, data)

class ComplexEventStrikeFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2131)
		else:
			DoubleField.__init__(self, 2131, data)

class ComplexEventStrikeNumberOfOptions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2132)
		else:
			IntField.__init__(self, 2132, data)

class ComplexEventCreditEventsXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2133)
		else:
			StringField.__init__(self, 2133, data)

class ComplexEventCreditEventNotifyingParty(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2134)
		else:
			IntField.__init__(self, 2134, data)

class ComplexEventCreditEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2135)
		else:
			StringField.__init__(self, 2135, data)

class ComplexEventCreditEventStandardSources(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2136)
		else:
			BoolField.__init__(self, 2136, data)

class ComplexEventCreditEventMinimumSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2137)
		else:
			IntField.__init__(self, 2137, data)

class ComplexEventXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2138)
		else:
			StringField.__init__(self, 2138, data)

class ComplexEventXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2139)
		else:
			StringField.__init__(self, 2139, data)

class NoComplexEventSchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41031)
		else:
			IntField.__init__(self, 41031, data)

class ComplexEventScheduleStartDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41032)
		else:
			StringField.__init__(self, 41032, data)

class ComplexEventScheduleEndDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41033)
		else:
			StringField.__init__(self, 41033, data)

class ComplexEventScheduleFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41034)
		else:
			IntField.__init__(self, 41034, data)

class ComplexEventScheduleFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41035)
		else:
			StringField.__init__(self, 41035, data)

class ComplexEventScheduleRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41036)
		else:
			StringField.__init__(self, 41036, data)

class NoDeliverySchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41037)
		else:
			IntField.__init__(self, 41037, data)

class DeliveryScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41038)
		else:
			IntField.__init__(self, 41038, data)

class DeliveryScheduleXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41039)
		else:
			StringField.__init__(self, 41039, data)

class DeliveryScheduleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41040)
		else:
			DoubleField.__init__(self, 41040, data)

class DeliveryScheduleNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41041)
		else:
			StringField.__init__(self, 41041, data)

class DeliveryScheduleNotionalCommodityFrequency(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41042)
		else:
			IntField.__init__(self, 41042, data)

class DeliveryScheduleNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41043)
		else:
			DoubleField.__init__(self, 41043, data)

class DeliverySchedulePositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41044)
		else:
			DoubleField.__init__(self, 41044, data)

class DeliveryScheduleToleranceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41045)
		else:
			StringField.__init__(self, 41045, data)

class DeliveryScheduleToleranceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41046)
		else:
			IntField.__init__(self, 41046, data)

class DeliveryScheduleSettlCountry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41047)
		else:
			StringField.__init__(self, 41047, data)

class DeliveryScheduleSettlTimeZone(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41048)
		else:
			StringField.__init__(self, 41048, data)

class DeliveryScheduleSettlFlowType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41049)
		else:
			IntField.__init__(self, 41049, data)

class DeliveryScheduleSettlHolidaysProcessingInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41050)
		else:
			IntField.__init__(self, 41050, data)

class NoDeliveryScheduleSettlDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41051)
		else:
			IntField.__init__(self, 41051, data)

class DeliveryScheduleSettlDay(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41052)
		else:
			IntField.__init__(self, 41052, data)

class DeliveryScheduleSettlTotalHours(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41053)
		else:
			IntField.__init__(self, 41053, data)

class NoDeliveryScheduleSettlTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41054)
		else:
			IntField.__init__(self, 41054, data)

class DeliveryScheduleSettlStart(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41055)
		else:
			StringField.__init__(self, 41055, data)

class DeliveryScheduleSettlEnd(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41056)
		else:
			StringField.__init__(self, 41056, data)

class DeliveryScheduleSettlTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41057)
		else:
			IntField.__init__(self, 41057, data)

class DeliveryStreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41058)
		else:
			IntField.__init__(self, 41058, data)

class DeliveryStreamPipeline(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41059)
		else:
			StringField.__init__(self, 41059, data)

class DeliveryStreamEntryPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41060)
		else:
			StringField.__init__(self, 41060, data)

class DeliveryStreamWithdrawalPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41061)
		else:
			StringField.__init__(self, 41061, data)

class DeliveryStreamDeliveryPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41062)
		else:
			StringField.__init__(self, 41062, data)

class DeliveryStreamDeliveryRestriction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41063)
		else:
			IntField.__init__(self, 41063, data)

class DeliveryStreamDeliveryContingency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41064)
		else:
			StringField.__init__(self, 41064, data)

class DeliveryStreamDeliveryContingentPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41065)
		else:
			IntField.__init__(self, 41065, data)

class DeliveryStreamDeliverAtSourceIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41066)
		else:
			BoolField.__init__(self, 41066, data)

class DeliveryStreamRiskApportionment(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41067)
		else:
			StringField.__init__(self, 41067, data)

class DeliveryStreamRiskApportionmentSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41218)
		else:
			StringField.__init__(self, 41218, data)

class DeliveryStreamTitleTransferLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41068)
		else:
			StringField.__init__(self, 41068, data)

class DeliveryStreamTitleTransferCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41069)
		else:
			IntField.__init__(self, 41069, data)

class DeliveryStreamImporterOfRecord(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41070)
		else:
			StringField.__init__(self, 41070, data)

class DeliveryStreamNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41071)
		else:
			DoubleField.__init__(self, 41071, data)

class DeliveryStreamPositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41072)
		else:
			DoubleField.__init__(self, 41072, data)

class DeliveryStreamToleranceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41073)
		else:
			StringField.__init__(self, 41073, data)

class DeliveryStreamToleranceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41074)
		else:
			IntField.__init__(self, 41074, data)

class DeliveryStreamToleranceOptionSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41075)
		else:
			IntField.__init__(self, 41075, data)

class DeliveryStreamTotalPositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41076)
		else:
			DoubleField.__init__(self, 41076, data)

class DeliveryStreamTotalNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41077)
		else:
			DoubleField.__init__(self, 41077, data)

class DeliveryStreamNotionalConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41078)
		else:
			DoubleField.__init__(self, 41078, data)

class DeliveryStreamTransportEquipment(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41079)
		else:
			StringField.__init__(self, 41079, data)

class DeliveryStreamElectingPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41080)
		else:
			IntField.__init__(self, 41080, data)

class NoDeliveryStreamCycles(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41081)
		else:
			IntField.__init__(self, 41081, data)

class DeliveryStreamCycleDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41082)
		else:
			StringField.__init__(self, 41082, data)

class EncodedDeliveryStreamCycleDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41083)
		else:
			IntField.__init__(self, 41083, data)

class EncodedDeliveryStreamCycleDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41084)
		else:
			StringField.__init__(self, 41084, data)

class NoDeliveryStreamCommoditySources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41085)
		else:
			IntField.__init__(self, 41085, data)

class DeliveryStreamCommoditySource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41086)
		else:
			StringField.__init__(self, 41086, data)

class DocumentationText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1513)
		else:
			StringField.__init__(self, 1513, data)

class EncodedDocumentationTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1525)
		else:
			IntField.__init__(self, 1525, data)

class EncodedDocumentationText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1527)
		else:
			StringField.__init__(self, 1527, data)

class SwapSubClass(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1575)
		else:
			StringField.__init__(self, 1575, data)

class SettlRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1577)
		else:
			StringField.__init__(self, 1577, data)

class SettlRateIndexLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1580)
		else:
			StringField.__init__(self, 1580, data)

class OptionExpirationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1581)
		else:
			StringField.__init__(self, 1581, data)

class EncodedOptionExpirationDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 1678)
		else:
			IntField.__init__(self, 1678, data)

class EncodedOptionExpirationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1697)
		else:
			StringField.__init__(self, 1697, data)

class StrikeUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1698)
		else:
			StringField.__init__(self, 1698, data)

class StrikeIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 1866)
		else:
			StringField.__init__(self, 1866, data)

class StrikeIndexSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2001)
		else:
			DoubleField.__init__(self, 2001, data)

class ValuationSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2002)
		else:
			StringField.__init__(self, 2002, data)

class ValuationReferenceModel(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2140)
		else:
			StringField.__init__(self, 2140, data)

class StrategyType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2141)
		else:
			StringField.__init__(self, 2141, data)

class CommonPricingIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2142)
		else:
			BoolField.__init__(self, 2142, data)

class SettlDisruptionProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2143)
		else:
			IntField.__init__(self, 2143, data)

class InstrumentRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2144)
		else:
			CharField.__init__(self, 2144, data)

class InstrumentRoundingPrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2145)
		else:
			IntField.__init__(self, 2145, data)

class LegSettleOnOpenFlag(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2146)
		else:
			StringField.__init__(self, 2146, data)

class LegInstrmtAssignmentMethod(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2147)
		else:
			CharField.__init__(self, 2147, data)

class LegSecurityStatus(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2148)
		else:
			StringField.__init__(self, 2148, data)

class LegRestructuringType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2149)
		else:
			StringField.__init__(self, 2149, data)

class LegSeniority(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2150)
		else:
			StringField.__init__(self, 2150, data)

class LegNotionalPercentageOutstanding(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2151)
		else:
			DoubleField.__init__(self, 2151, data)

class LegOriginalNotionalPercentageOutstanding(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2152)
		else:
			DoubleField.__init__(self, 2152, data)

class LegAttachmentPoint(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2153)
		else:
			DoubleField.__init__(self, 2153, data)

class LegDetachmentPoint(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2154)
		else:
			DoubleField.__init__(self, 2154, data)

class LegObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2155)
		else:
			StringField.__init__(self, 2155, data)

class LegSwapSubClass(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2156)
		else:
			StringField.__init__(self, 2156, data)

class LegNthToDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2157)
		else:
			IntField.__init__(self, 2157, data)

class LegMthToDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2158)
		else:
			IntField.__init__(self, 2158, data)

class LegSettledEntityMatrixSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2159)
		else:
			StringField.__init__(self, 2159, data)

class LegSettledEntityMatrixPublicationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2160)
		else:
			StringField.__init__(self, 2160, data)

class LegCouponType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2161)
		else:
			IntField.__init__(self, 2161, data)

class LegTotalIssuedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2162)
		else:
			DoubleField.__init__(self, 2162, data)

class LegCouponFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2163)
		else:
			IntField.__init__(self, 2163, data)

class LegCouponFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2164)
		else:
			StringField.__init__(self, 2164, data)

class LegCouponDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2165)
		else:
			IntField.__init__(self, 2165, data)

class LegConvertibleBondEquityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2166)
		else:
			StringField.__init__(self, 2166, data)

class LegConvertibleBondEquityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2167)
		else:
			StringField.__init__(self, 2167, data)

class LegContractPriceRefMonth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2168)
		else:
			StringField.__init__(self, 2168, data)

class LegLienSeniority(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2169)
		else:
			IntField.__init__(self, 2169, data)

class LegLoanFacility(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2170)
		else:
			IntField.__init__(self, 2170, data)

class LegReferenceEntityType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2171)
		else:
			IntField.__init__(self, 2171, data)

class LegIndexSeries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2172)
		else:
			IntField.__init__(self, 2172, data)

class LegIndexAnnexVersion(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2173)
		else:
			IntField.__init__(self, 2173, data)

class LegIndexAnnexDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2174)
		else:
			StringField.__init__(self, 2174, data)

class LegIndexAnnexSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2175)
		else:
			StringField.__init__(self, 2175, data)

class LegSettlRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2176)
		else:
			StringField.__init__(self, 2176, data)

class LegSettlRateIndexLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2177)
		else:
			StringField.__init__(self, 2177, data)

class LegOptionExpirationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2178)
		else:
			StringField.__init__(self, 2178, data)

class EncodedLegOptionExpirationDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2179)
		else:
			IntField.__init__(self, 2179, data)

class EncodedLegOptionExpirationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2180)
		else:
			StringField.__init__(self, 2180, data)

class LegStrikeMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2181)
		else:
			DoubleField.__init__(self, 2181, data)

class LegStrikeValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2182)
		else:
			DoubleField.__init__(self, 2182, data)

class LegStrikeUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2183)
		else:
			StringField.__init__(self, 2183, data)

class LegStrikeIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2184)
		else:
			StringField.__init__(self, 2184, data)

class LegStrikeIndexSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2185)
		else:
			DoubleField.__init__(self, 2185, data)

class LegStrikePriceDeterminationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2186)
		else:
			IntField.__init__(self, 2186, data)

class LegStrikePriceBoundaryMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2187)
		else:
			IntField.__init__(self, 2187, data)

class LegStrikePriceBoundaryPrecision(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2188)
		else:
			DoubleField.__init__(self, 2188, data)

class LegUnderlyingPriceDeterminationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2189)
		else:
			IntField.__init__(self, 2189, data)

class LegMinPriceIncrement(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2190)
		else:
			DoubleField.__init__(self, 2190, data)

class LegMinPriceIncrementAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2191)
		else:
			DoubleField.__init__(self, 2191, data)

class LegSettlMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2192)
		else:
			StringField.__init__(self, 2192, data)

class LegOptPayoutType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2193)
		else:
			IntField.__init__(self, 2193, data)

class LegOptPayoutAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2194)
		else:
			DoubleField.__init__(self, 2194, data)

class LegPriceQuoteMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2195)
		else:
			StringField.__init__(self, 2195, data)

class LegValuationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2196)
		else:
			StringField.__init__(self, 2196, data)

class LegValuationSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2197)
		else:
			StringField.__init__(self, 2197, data)

class LegValuationReferenceModel(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2198)
		else:
			StringField.__init__(self, 2198, data)

class LegListMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2199)
		else:
			IntField.__init__(self, 2199, data)

class LegCapPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2200)
		else:
			DoubleField.__init__(self, 2200, data)

class LegFloorPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2201)
		else:
			DoubleField.__init__(self, 2201, data)

class LegFlexibleIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2202)
		else:
			BoolField.__init__(self, 2202, data)

class LegFlexProductEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2203)
		else:
			BoolField.__init__(self, 2203, data)

class LegPositionLimit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2205)
		else:
			IntField.__init__(self, 2205, data)

class LegNTPositionLimit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2206)
		else:
			IntField.__init__(self, 2206, data)

class LegCPProgram(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2207)
		else:
			IntField.__init__(self, 2207, data)

class LegCPRegType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2208)
		else:
			StringField.__init__(self, 2208, data)

class LegShortSaleRestriction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2209)
		else:
			IntField.__init__(self, 2209, data)

class LegStrategyType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2211)
		else:
			StringField.__init__(self, 2211, data)

class LegCommonPricingIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2212)
		else:
			BoolField.__init__(self, 2212, data)

class LegSettlDisruptionProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2213)
		else:
			IntField.__init__(self, 2213, data)

class LegInstrumentRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2214)
		else:
			CharField.__init__(self, 2214, data)

class LegInstrumentRoundingPrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2215)
		else:
			IntField.__init__(self, 2215, data)

class MarketDisruptionProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41087)
		else:
			IntField.__init__(self, 41087, data)

class MarketDisruptionFallbackProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41088)
		else:
			IntField.__init__(self, 41088, data)

class MarketDisruptionMaximumDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41089)
		else:
			IntField.__init__(self, 41089, data)

class MarketDisruptionMaterialityPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41090)
		else:
			DoubleField.__init__(self, 41090, data)

class MarketDisruptionMinimumFuturesContracts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41091)
		else:
			IntField.__init__(self, 41091, data)

class NoMarketDisruptionEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41092)
		else:
			IntField.__init__(self, 41092, data)

class MarketDisruptionEvent(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41093)
		else:
			StringField.__init__(self, 41093, data)

class NoMarketDisruptionFallbacks(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41094)
		else:
			IntField.__init__(self, 41094, data)

class MarketDisruptionFallbackType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41095)
		else:
			StringField.__init__(self, 41095, data)

class NoMarketDisruptionFallbackReferencePrices(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41096)
		else:
			IntField.__init__(self, 41096, data)

class MarketDisruptionFallbackUnderlierType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41097)
		else:
			IntField.__init__(self, 41097, data)

class MarketDisruptionFallbackUnderlierSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41098)
		else:
			StringField.__init__(self, 41098, data)

class MarketDisruptionFallbackUnderlierSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41099)
		else:
			StringField.__init__(self, 41099, data)

class MarketDisruptionFallbackUnderlierSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41100)
		else:
			StringField.__init__(self, 41100, data)

class EncodedMarketDisruptionFallbackUnderlierSecurityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41101)
		else:
			IntField.__init__(self, 41101, data)

class EncodedMarketDisruptionFallbackUnderlierSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41102)
		else:
			StringField.__init__(self, 41102, data)

class MarketDisruptionFallbackOpenUnits(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41103)
		else:
			DoubleField.__init__(self, 41103, data)

class MarketDisruptionFallbackBasketCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41104)
		else:
			StringField.__init__(self, 41104, data)

class MarketDisruptionFallbackBasketDivisor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41105)
		else:
			DoubleField.__init__(self, 41105, data)

class MiscFeeRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2216)
		else:
			DoubleField.__init__(self, 2216, data)

class MiscFeeAmountDue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2217)
		else:
			DoubleField.__init__(self, 2217, data)

class ExerciseDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41106)
		else:
			StringField.__init__(self, 41106, data)

class EncodedExerciseDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41107)
		else:
			IntField.__init__(self, 41107, data)

class EncodedExerciseDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41108)
		else:
			StringField.__init__(self, 41108, data)

class AutomaticExerciseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41109)
		else:
			BoolField.__init__(self, 41109, data)

class AutomaticExerciseThresholdRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41110)
		else:
			DoubleField.__init__(self, 41110, data)

class ExerciseConfirmationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41111)
		else:
			IntField.__init__(self, 41111, data)

class ManualNoticeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41112)
		else:
			StringField.__init__(self, 41112, data)

class FallbackExerciseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41113)
		else:
			BoolField.__init__(self, 41113, data)

class LimitedRightToConfirmIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41114)
		else:
			BoolField.__init__(self, 41114, data)

class ExerciseSplitTicketIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41115)
		else:
			BoolField.__init__(self, 41115, data)

class NoOptionExerciseBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41116)
		else:
			IntField.__init__(self, 41116, data)

class OptionExerciseBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41117)
		else:
			StringField.__init__(self, 41117, data)

class OptionExerciseBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41118)
		else:
			IntField.__init__(self, 41118, data)

class OptionExerciseEarliestDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41119)
		else:
			IntField.__init__(self, 41119, data)

class OptionExerciseEarliestDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41120)
		else:
			IntField.__init__(self, 41120, data)

class OptionExerciseEarliestDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41121)
		else:
			StringField.__init__(self, 41121, data)

class OptionExerciseFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41122)
		else:
			IntField.__init__(self, 41122, data)

class OptionExerciseFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41123)
		else:
			StringField.__init__(self, 41123, data)

class OptionExerciseStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41124)
		else:
			StringField.__init__(self, 41124, data)

class OptionExerciseStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41125)
		else:
			IntField.__init__(self, 41125, data)

class OptionExerciseStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41126)
		else:
			IntField.__init__(self, 41126, data)

class OptionExerciseStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41127)
		else:
			StringField.__init__(self, 41127, data)

class OptionExerciseStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41128)
		else:
			IntField.__init__(self, 41128, data)

class OptionExerciseStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41129)
		else:
			StringField.__init__(self, 41129, data)

class OptionExerciseSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41130)
		else:
			IntField.__init__(self, 41130, data)

class OptionExerciseNominationDeadline(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41131)
		else:
			StringField.__init__(self, 41131, data)

class OptionExerciseFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41132)
		else:
			StringField.__init__(self, 41132, data)

class OptionExerciseLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41133)
		else:
			StringField.__init__(self, 41133, data)

class OptionExerciseEarliestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41134)
		else:
			StringField.__init__(self, 41134, data)

class OptionExerciseLatestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41135)
		else:
			StringField.__init__(self, 41135, data)

class OptionExerciseTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41136)
		else:
			StringField.__init__(self, 41136, data)

class NoOptionExerciseDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41137)
		else:
			IntField.__init__(self, 41137, data)

class OptionExerciseDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41138)
		else:
			StringField.__init__(self, 41138, data)

class OptionExerciseDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41139)
		else:
			IntField.__init__(self, 41139, data)

class NoOptionExerciseExpirationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41140)
		else:
			IntField.__init__(self, 41140, data)

class OptionExerciseExpirationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41141)
		else:
			StringField.__init__(self, 41141, data)

class OptionExerciseExpirationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41142)
		else:
			IntField.__init__(self, 41142, data)

class OptionExerciseExpirationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41143)
		else:
			IntField.__init__(self, 41143, data)

class OptionExerciseExpirationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41144)
		else:
			IntField.__init__(self, 41144, data)

class OptionExerciseExpirationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41145)
		else:
			StringField.__init__(self, 41145, data)

class OptionExerciseExpirationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41146)
		else:
			IntField.__init__(self, 41146, data)

class OptionExerciseExpirationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41147)
		else:
			StringField.__init__(self, 41147, data)

class OptionExerciseExpirationRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41148)
		else:
			StringField.__init__(self, 41148, data)

class OptionExerciseExpirationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41149)
		else:
			IntField.__init__(self, 41149, data)

class OptionExerciseExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41150)
		else:
			StringField.__init__(self, 41150, data)

class OptionExerciseExpirationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41151)
		else:
			StringField.__init__(self, 41151, data)

class NoOptionExerciseExpirationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41152)
		else:
			IntField.__init__(self, 41152, data)

class OptionExerciseExpirationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41153)
		else:
			StringField.__init__(self, 41153, data)

class OptionExerciseExpirationDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41154)
		else:
			IntField.__init__(self, 41154, data)

class PaymentUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41155)
		else:
			StringField.__init__(self, 41155, data)

class PaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41156)
		else:
			IntField.__init__(self, 41156, data)

class PaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41157)
		else:
			IntField.__init__(self, 41157, data)

class PaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41158)
		else:
			StringField.__init__(self, 41158, data)

class PaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41159)
		else:
			IntField.__init__(self, 41159, data)

class PaymentForwardStartType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41160)
		else:
			IntField.__init__(self, 41160, data)

class NoPaymentScheduleFixingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41161)
		else:
			IntField.__init__(self, 41161, data)

class PaymentScheduleFixingDayOfWeek(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41162)
		else:
			IntField.__init__(self, 41162, data)

class PaymentScheduleFixingDayNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41163)
		else:
			IntField.__init__(self, 41163, data)

class PaymentScheduleXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41164)
		else:
			StringField.__init__(self, 41164, data)

class PaymentScheduleXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41165)
		else:
			StringField.__init__(self, 41165, data)

class PaymentScheduleRateCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41166)
		else:
			StringField.__init__(self, 41166, data)

class PaymentScheduleRateUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41167)
		else:
			StringField.__init__(self, 41167, data)

class PaymentScheduleRateConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41168)
		else:
			DoubleField.__init__(self, 41168, data)

class PaymentScheduleRateSpreadType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41169)
		else:
			IntField.__init__(self, 41169, data)

class PaymentScheduleSettlPeriodPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41170)
		else:
			DoubleField.__init__(self, 41170, data)

class PaymentScheduleSettlPeriodPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41171)
		else:
			StringField.__init__(self, 41171, data)

class PaymentScheduleSettlPeriodPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41172)
		else:
			StringField.__init__(self, 41172, data)

class PaymentScheduleStepUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41173)
		else:
			StringField.__init__(self, 41173, data)

class PaymentScheduleFixingDayDistribution(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41174)
		else:
			IntField.__init__(self, 41174, data)

class PaymentScheduleFixingDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41175)
		else:
			IntField.__init__(self, 41175, data)

class PaymentScheduleFixingLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41176)
		else:
			IntField.__init__(self, 41176, data)

class PaymentScheduleFixingLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41177)
		else:
			StringField.__init__(self, 41177, data)

class PaymentScheduleFixingFirstObservationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41178)
		else:
			IntField.__init__(self, 41178, data)

class PaymentScheduleFixingFirstObservationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41179)
		else:
			StringField.__init__(self, 41179, data)

class PaymentStreamFlatRateIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41180)
		else:
			BoolField.__init__(self, 41180, data)

class PaymentStreamFlatRateAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41181)
		else:
			DoubleField.__init__(self, 41181, data)

class PaymentStreamFlatRateCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41182)
		else:
			StringField.__init__(self, 41182, data)

class PaymentStreamMaximumPaymentAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41183)
		else:
			DoubleField.__init__(self, 41183, data)

class PaymentStreamMaximumPaymentCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41184)
		else:
			StringField.__init__(self, 41184, data)

class PaymentStreamMaximumTransactionAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41185)
		else:
			DoubleField.__init__(self, 41185, data)

class PaymentStreamMaximumTransactionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41186)
		else:
			StringField.__init__(self, 41186, data)

class PaymentStreamFixedAmountUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41187)
		else:
			StringField.__init__(self, 41187, data)

class PaymentStreamTotalFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41188)
		else:
			DoubleField.__init__(self, 41188, data)

class PaymentStreamWorldScaleRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41189)
		else:
			DoubleField.__init__(self, 41189, data)

class PaymentStreamContractPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41190)
		else:
			DoubleField.__init__(self, 41190, data)

class PaymentStreamContractPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41191)
		else:
			StringField.__init__(self, 41191, data)

class NoPaymentStreamPricingBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41192)
		else:
			IntField.__init__(self, 41192, data)

class PaymentStreamPricingBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41193)
		else:
			StringField.__init__(self, 41193, data)

class PaymentStreamRateIndex2CurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41194)
		else:
			IntField.__init__(self, 41194, data)

class PaymentStreamRateIndex2CurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41195)
		else:
			StringField.__init__(self, 41195, data)

class PaymentStreamRateIndexLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41196)
		else:
			StringField.__init__(self, 41196, data)

class PaymentStreamRateIndexLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41197)
		else:
			DoubleField.__init__(self, 41197, data)

class PaymentStreamRateIndexUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41198)
		else:
			StringField.__init__(self, 41198, data)

class PaymentStreamSettlLevel(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41199)
		else:
			IntField.__init__(self, 41199, data)

class PaymentStreamReferenceLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41200)
		else:
			DoubleField.__init__(self, 41200, data)

class PaymentStreamReferenceLevelUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41201)
		else:
			StringField.__init__(self, 41201, data)

class PaymentStreamReferenceLevelEqualsZeroIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41202)
		else:
			BoolField.__init__(self, 41202, data)

class PaymentStreamRateSpreadCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41203)
		else:
			StringField.__init__(self, 41203, data)

class PaymentStreamRateSpreadUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41204)
		else:
			StringField.__init__(self, 41204, data)

class PaymentStreamRateConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41205)
		else:
			DoubleField.__init__(self, 41205, data)

class PaymentStreamRateSpreadType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41206)
		else:
			IntField.__init__(self, 41206, data)

class PaymentStreamLastResetRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41207)
		else:
			DoubleField.__init__(self, 41207, data)

class PaymentStreamFinalRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41208)
		else:
			DoubleField.__init__(self, 41208, data)

class PaymentStreamCalculationLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41209)
		else:
			IntField.__init__(self, 41209, data)

class PaymentStreamCalculationLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41210)
		else:
			StringField.__init__(self, 41210, data)

class PaymentStreamFirstObservationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41211)
		else:
			IntField.__init__(self, 41211, data)

class PaymentStreamFirstObservationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41212)
		else:
			StringField.__init__(self, 41212, data)

class PaymentStreamPricingDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41213)
		else:
			IntField.__init__(self, 41213, data)

class PaymentStreamPricingDayDistribution(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41214)
		else:
			IntField.__init__(self, 41214, data)

class PaymentStreamPricingDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41215)
		else:
			IntField.__init__(self, 41215, data)

class PaymentStreamPricingBusinessCalendar(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41216)
		else:
			StringField.__init__(self, 41216, data)

class PaymentStreamPricingBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41217)
		else:
			IntField.__init__(self, 41217, data)

class NoPaymentStreamPaymentDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41220)
		else:
			IntField.__init__(self, 41220, data)

class PaymentStreamPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41221)
		else:
			StringField.__init__(self, 41221, data)

class PaymentStreamPaymentDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41222)
		else:
			IntField.__init__(self, 41222, data)

class PaymentStreamMasterAgreementPaymentDatesIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41223)
		else:
			BoolField.__init__(self, 41223, data)

class NoPaymentStreamPricingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41224)
		else:
			IntField.__init__(self, 41224, data)

class PaymentStreamPricingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41225)
		else:
			StringField.__init__(self, 41225, data)

class PaymentStreamPricingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41226)
		else:
			IntField.__init__(self, 41226, data)

class NoPaymentStreamPricingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41227)
		else:
			IntField.__init__(self, 41227, data)

class PaymentStreamPricingDayOfWeek(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41228)
		else:
			IntField.__init__(self, 41228, data)

class PaymentStreamPricingDayNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41229)
		else:
			IntField.__init__(self, 41229, data)

class NoPricingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41230)
		else:
			IntField.__init__(self, 41230, data)

class PricingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41231)
		else:
			StringField.__init__(self, 41231, data)

class PricingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41232)
		else:
			StringField.__init__(self, 41232, data)

class PricingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41233)
		else:
			IntField.__init__(self, 41233, data)

class PricingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41234)
		else:
			StringField.__init__(self, 41234, data)

class PricingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41235)
		else:
			StringField.__init__(self, 41235, data)

class PricingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41236)
		else:
			StringField.__init__(self, 41236, data)

class NoStreamAssetAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41237)
		else:
			IntField.__init__(self, 41237, data)

class StreamAssetAttributeType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41238)
		else:
			StringField.__init__(self, 41238, data)

class StreamAssetAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41239)
		else:
			StringField.__init__(self, 41239, data)

class StreamAssetAttributeLimit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41240)
		else:
			StringField.__init__(self, 41240, data)

class NoStreamCalculationPeriodDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41241)
		else:
			IntField.__init__(self, 41241, data)

class StreamCalculationPeriodDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41242)
		else:
			StringField.__init__(self, 41242, data)

class StreamCalculationPeriodDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41243)
		else:
			IntField.__init__(self, 41243, data)

class StreamCalculationPeriodDatesXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41244)
		else:
			StringField.__init__(self, 41244, data)

class StreamCalculationPeriodDatesXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41245)
		else:
			StringField.__init__(self, 41245, data)

class StreamCalculationBalanceOfFirstPeriod(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41246)
		else:
			BoolField.__init__(self, 41246, data)

class StreamCalculationCorrectionPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41247)
		else:
			IntField.__init__(self, 41247, data)

class StreamCalculationCorrectionUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41248)
		else:
			StringField.__init__(self, 41248, data)

class NoStreamCommoditySettlBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41249)
		else:
			IntField.__init__(self, 41249, data)

class StreamCommoditySettlBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41250)
		else:
			StringField.__init__(self, 41250, data)

class StreamCommodityBase(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41251)
		else:
			StringField.__init__(self, 41251, data)

class StreamCommodityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41252)
		else:
			StringField.__init__(self, 41252, data)

class StreamCommoditySecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41253)
		else:
			StringField.__init__(self, 41253, data)

class StreamCommoditySecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41254)
		else:
			StringField.__init__(self, 41254, data)

class StreamCommodityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41255)
		else:
			StringField.__init__(self, 41255, data)

class EncodedStreamCommodityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41256)
		else:
			IntField.__init__(self, 41256, data)

class EncodedStreamCommodityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41257)
		else:
			StringField.__init__(self, 41257, data)

class StreamCommodityUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41258)
		else:
			StringField.__init__(self, 41258, data)

class StreamCommodityCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41259)
		else:
			StringField.__init__(self, 41259, data)

class StreamCommodityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41260)
		else:
			StringField.__init__(self, 41260, data)

class StreamCommodityRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41261)
		else:
			IntField.__init__(self, 41261, data)

class StreamCommodityRateReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41262)
		else:
			StringField.__init__(self, 41262, data)

class StreamCommodityRateReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41263)
		else:
			StringField.__init__(self, 41263, data)

class StreamDataProvider(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41264)
		else:
			StringField.__init__(self, 41264, data)

class StreamCommodityPricingType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41265)
		else:
			StringField.__init__(self, 41265, data)

class StreamCommodityNearbySettlDayPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41266)
		else:
			IntField.__init__(self, 41266, data)

class StreamCommodityNearbySettlDayUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41267)
		else:
			StringField.__init__(self, 41267, data)

class StreamCommoditySettlDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41268)
		else:
			StringField.__init__(self, 41268, data)

class StreamCommoditySettlDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41269)
		else:
			IntField.__init__(self, 41269, data)

class StreamCommoditySettlDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41270)
		else:
			StringField.__init__(self, 41270, data)

class StreamCommoditySettlMonth(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41271)
		else:
			IntField.__init__(self, 41271, data)

class StreamCommoditySettlDateRollPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41272)
		else:
			IntField.__init__(self, 41272, data)

class StreamCommoditySettlDateRollUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41273)
		else:
			StringField.__init__(self, 41273, data)

class StreamCommoditySettlDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41274)
		else:
			IntField.__init__(self, 41274, data)

class StreamCommodityXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41275)
		else:
			StringField.__init__(self, 41275, data)

class StreamCommodityXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41276)
		else:
			StringField.__init__(self, 41276, data)

class NoStreamCommodityAltIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41277)
		else:
			IntField.__init__(self, 41277, data)

class StreamCommodityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41278)
		else:
			StringField.__init__(self, 41278, data)

class StreamCommodityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41279)
		else:
			StringField.__init__(self, 41279, data)

class NoStreamCommodityDataSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41280)
		else:
			IntField.__init__(self, 41280, data)

class StreamCommodityDataSourceID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41281)
		else:
			StringField.__init__(self, 41281, data)

class StreamCommodityDataSourceIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41282)
		else:
			IntField.__init__(self, 41282, data)

class NoStreamCommoditySettlDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41283)
		else:
			IntField.__init__(self, 41283, data)

class StreamCommoditySettlDay(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41284)
		else:
			IntField.__init__(self, 41284, data)

class StreamCommoditySettlTotalHours(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41285)
		else:
			IntField.__init__(self, 41285, data)

class NoStreamCommoditySettlTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41286)
		else:
			IntField.__init__(self, 41286, data)

class StreamCommoditySettlStart(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41287)
		else:
			StringField.__init__(self, 41287, data)

class StreamCommoditySettlEnd(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41288)
		else:
			StringField.__init__(self, 41288, data)

class StreamCommoditySettlTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41588)
		else:
			IntField.__init__(self, 41588, data)

class NoStreamCommoditySettlPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41289)
		else:
			IntField.__init__(self, 41289, data)

class StreamCommoditySettlCountry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41290)
		else:
			StringField.__init__(self, 41290, data)

class StreamCommoditySettlTimeZone(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41291)
		else:
			StringField.__init__(self, 41291, data)

class StreamCommoditySettlFlowType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41292)
		else:
			IntField.__init__(self, 41292, data)

class StreamCommoditySettlPeriodNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41293)
		else:
			DoubleField.__init__(self, 41293, data)

class StreamCommoditySettlPeriodNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41294)
		else:
			StringField.__init__(self, 41294, data)

class StreamCommoditySettlPeriodFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41295)
		else:
			IntField.__init__(self, 41295, data)

class StreamCommoditySettlPeriodFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41296)
		else:
			StringField.__init__(self, 41296, data)

class StreamCommoditySettlPeriodPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41297)
		else:
			DoubleField.__init__(self, 41297, data)

class StreamCommoditySettlPeriodPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41298)
		else:
			StringField.__init__(self, 41298, data)

class StreamCommoditySettlPeriodPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41299)
		else:
			StringField.__init__(self, 41299, data)

class StreamCommoditySettlHolidaysProcessingInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41300)
		else:
			IntField.__init__(self, 41300, data)

class StreamCommoditySettlPeriodXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41301)
		else:
			StringField.__init__(self, 41301, data)

class StreamCommoditySettlPeriodXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41302)
		else:
			StringField.__init__(self, 41302, data)

class StreamXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41303)
		else:
			StringField.__init__(self, 41303, data)

class StreamNotionalXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41305)
		else:
			StringField.__init__(self, 41305, data)

class StreamNotionalFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41306)
		else:
			IntField.__init__(self, 41306, data)

class StreamNotionalFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41307)
		else:
			StringField.__init__(self, 41307, data)

class StreamNotionalCommodityFrequency(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41308)
		else:
			IntField.__init__(self, 41308, data)

class StreamNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41309)
		else:
			StringField.__init__(self, 41309, data)

class StreamTotalNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41310)
		else:
			DoubleField.__init__(self, 41310, data)

class StreamTotalNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41311)
		else:
			StringField.__init__(self, 41311, data)

class NoMandatoryClearingJurisdictions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41312)
		else:
			IntField.__init__(self, 41312, data)

class MandatoryClearingJurisdiction(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41313)
		else:
			StringField.__init__(self, 41313, data)

class LastQtyChanged(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2301)
		else:
			DoubleField.__init__(self, 2301, data)

class TradeVersion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2302)
		else:
			StringField.__init__(self, 2302, data)

class HistoricalReportIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2303)
		else:
			BoolField.__init__(self, 2303, data)

class NoLegAdditionalTermBondRefs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41316)
		else:
			IntField.__init__(self, 41316, data)

class LegAdditionalTermBondSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41317)
		else:
			StringField.__init__(self, 41317, data)

class LegAdditionalTermBondSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41318)
		else:
			StringField.__init__(self, 41318, data)

class LegAdditionalTermBondDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41319)
		else:
			StringField.__init__(self, 41319, data)

class EncodedLegAdditionalTermBondDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41320)
		else:
			IntField.__init__(self, 41320, data)

class EncodedLegAdditionalTermBondDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41321)
		else:
			StringField.__init__(self, 41321, data)

class LegAdditionalTermBondCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41322)
		else:
			StringField.__init__(self, 41322, data)

class LegAdditionalTermBondIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41323)
		else:
			StringField.__init__(self, 41323, data)

class EncodedLegAdditionalTermBondIssuerLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41324)
		else:
			IntField.__init__(self, 41324, data)

class EncodedLegAdditionalTermBondIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41325)
		else:
			StringField.__init__(self, 41325, data)

class LegAdditionalTermBondSeniority(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41326)
		else:
			StringField.__init__(self, 41326, data)

class LegAdditionalTermBondCouponType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41327)
		else:
			IntField.__init__(self, 41327, data)

class LegAdditionalTermBondCouponRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41328)
		else:
			DoubleField.__init__(self, 41328, data)

class LegAdditionalTermBondMaturityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41329)
		else:
			StringField.__init__(self, 41329, data)

class LegAdditionalTermBondParValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41330)
		else:
			DoubleField.__init__(self, 41330, data)

class LegAdditionalTermBondCurrentTotalIssuedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41331)
		else:
			DoubleField.__init__(self, 41331, data)

class LegAdditionalTermBondCouponFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41332)
		else:
			IntField.__init__(self, 41332, data)

class LegAdditionalTermBondCouponFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41333)
		else:
			StringField.__init__(self, 41333, data)

class LegAdditionalTermBondDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41334)
		else:
			IntField.__init__(self, 41334, data)

class NoLegAdditionalTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41335)
		else:
			IntField.__init__(self, 41335, data)

class LegAdditionalTermConditionPrecedentBondIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41336)
		else:
			BoolField.__init__(self, 41336, data)

class LegAdditionalTermDiscrepancyClauseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41337)
		else:
			BoolField.__init__(self, 41337, data)

class NoLegAssetAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2308)
		else:
			IntField.__init__(self, 2308, data)

class LegAssetAttributeType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2309)
		else:
			StringField.__init__(self, 2309, data)

class LegAssetAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2310)
		else:
			StringField.__init__(self, 2310, data)

class LegAssetAttributeLimit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2311)
		else:
			StringField.__init__(self, 2311, data)

class NoLegCashSettlDealers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41342)
		else:
			IntField.__init__(self, 41342, data)

class LegCashSettlDealer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41343)
		else:
			StringField.__init__(self, 41343, data)

class NoLegCashSettlTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41344)
		else:
			IntField.__init__(self, 41344, data)

class LegCashSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41345)
		else:
			StringField.__init__(self, 41345, data)

class LegCasSettlValuationFirstBusinessDayOffset(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41346)
		else:
			IntField.__init__(self, 41346, data)

class LegCashSettlValuationSubsequentBusinessDaysOffset(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41347)
		else:
			IntField.__init__(self, 41347, data)

class LegCashSettlNumOfValuationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41348)
		else:
			IntField.__init__(self, 41348, data)

class LegCashSettlValuationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41349)
		else:
			StringField.__init__(self, 41349, data)

class LegCashSettlBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41350)
		else:
			StringField.__init__(self, 41350, data)

class LegCashSettlQuoteMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41351)
		else:
			IntField.__init__(self, 41351, data)

class LegCashSettlQuoteAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41352)
		else:
			DoubleField.__init__(self, 41352, data)

class LegCashSettlQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41353)
		else:
			StringField.__init__(self, 41353, data)

class LegCashSettlMinimumQuoteAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41354)
		else:
			DoubleField.__init__(self, 41354, data)

class LegCashSettlMinimumQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41355)
		else:
			StringField.__init__(self, 41355, data)

class LegCashSettlBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41356)
		else:
			IntField.__init__(self, 41356, data)

class LegCashSettlAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41357)
		else:
			DoubleField.__init__(self, 41357, data)

class LegCashSettlRecoveryFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41358)
		else:
			DoubleField.__init__(self, 41358, data)

class LegCashSettlFixedTermIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41359)
		else:
			BoolField.__init__(self, 41359, data)

class LegCashSettlAccruedInterestIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41360)
		else:
			BoolField.__init__(self, 41360, data)

class LegCashSettlValuationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41361)
		else:
			IntField.__init__(self, 41361, data)

class LegCashSettlTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41362)
		else:
			StringField.__init__(self, 41362, data)

class NoLegComplexEventAveragingObservations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41363)
		else:
			IntField.__init__(self, 41363, data)

class LegComplexEventAveragingObservationNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41364)
		else:
			IntField.__init__(self, 41364, data)

class LegComplexEventAveragingWeight(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41365)
		else:
			DoubleField.__init__(self, 41365, data)

class NoLegComplexEventCreditEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41366)
		else:
			IntField.__init__(self, 41366, data)

class LegComplexEventCreditEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41367)
		else:
			StringField.__init__(self, 41367, data)

class LegComplexEventCreditEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41368)
		else:
			StringField.__init__(self, 41368, data)

class LegComplexEventCreditEventCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41369)
		else:
			StringField.__init__(self, 41369, data)

class LegComplexEventCreditEventPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41370)
		else:
			IntField.__init__(self, 41370, data)

class LegComplexEventCreditEventUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41371)
		else:
			StringField.__init__(self, 41371, data)

class LegComplexEventCreditEventDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41372)
		else:
			IntField.__init__(self, 41372, data)

class LegComplexEventCreditEventRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41373)
		else:
			IntField.__init__(self, 41373, data)

class NoLegComplexEventCreditEventQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41374)
		else:
			IntField.__init__(self, 41374, data)

class LegComplexEventCreditEventQualifier(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 41375)
		else:
			CharField.__init__(self, 41375, data)

class NoLegComplexEventPeriodDateTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41376)
		else:
			IntField.__init__(self, 41376, data)

class LegComplexEventPeriodDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41377)
		else:
			StringField.__init__(self, 41377, data)

class LegComplexEventPeriodTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41378)
		else:
			StringField.__init__(self, 41378, data)

class NoLegComplexEventPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41379)
		else:
			IntField.__init__(self, 41379, data)

class LegComplexEventPeriodType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41380)
		else:
			IntField.__init__(self, 41380, data)

class LegComplexEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41381)
		else:
			StringField.__init__(self, 41381, data)

class NoLegComplexEventRateSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41382)
		else:
			IntField.__init__(self, 41382, data)

class LegComplexEventRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41383)
		else:
			IntField.__init__(self, 41383, data)

class LegComplexEventRateSourceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41384)
		else:
			IntField.__init__(self, 41384, data)

class LegComplexEventReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41385)
		else:
			StringField.__init__(self, 41385, data)

class LegComplexEvenReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41386)
		else:
			StringField.__init__(self, 41386, data)

class NoLegComplexEventDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41387)
		else:
			IntField.__init__(self, 41387, data)

class LegComplexEventDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41388)
		else:
			StringField.__init__(self, 41388, data)

class LegComplexEventDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41389)
		else:
			StringField.__init__(self, 41389, data)

class LegComplexEventDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41390)
		else:
			IntField.__init__(self, 41390, data)

class LegComplexEventDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41391)
		else:
			IntField.__init__(self, 41391, data)

class LegComplexEventDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41392)
		else:
			StringField.__init__(self, 41392, data)

class LegComplexEventDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41393)
		else:
			IntField.__init__(self, 41393, data)

class LegComplexEventDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41394)
		else:
			IntField.__init__(self, 41394, data)

class LegComplexEventDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41395)
		else:
			StringField.__init__(self, 41395, data)

class LegComplexEventFixingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41396)
		else:
			StringField.__init__(self, 41396, data)

class LegComplexEventFixingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41397)
		else:
			StringField.__init__(self, 41397, data)

class NoLegComplexEventCreditEventSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41398)
		else:
			IntField.__init__(self, 41398, data)

class LegComplexEventCreditEventSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41399)
		else:
			StringField.__init__(self, 41399, data)

class NoLegComplexEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2218)
		else:
			IntField.__init__(self, 2218, data)

class LegComplexEventType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2219)
		else:
			IntField.__init__(self, 2219, data)

class LegComplexOptPayoutPaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2220)
		else:
			IntField.__init__(self, 2220, data)

class LegComplexOptPayoutReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2221)
		else:
			IntField.__init__(self, 2221, data)

class LegComplexOptPayoutUnderlier(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2222)
		else:
			StringField.__init__(self, 2222, data)

class LegComplexOptPayoutAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2223)
		else:
			DoubleField.__init__(self, 2223, data)

class LegComplexOptPayoutPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2224)
		else:
			DoubleField.__init__(self, 2224, data)

class LegComplexOptPayoutTime(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2225)
		else:
			IntField.__init__(self, 2225, data)

class LegComplexOptPayoutCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2226)
		else:
			StringField.__init__(self, 2226, data)

class LegComplexEventPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2227)
		else:
			DoubleField.__init__(self, 2227, data)

class LegComplexEventPricePercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2228)
		else:
			DoubleField.__init__(self, 2228, data)

class LegComplexEventPriceBoundaryMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2229)
		else:
			IntField.__init__(self, 2229, data)

class LegComplexEventPriceBoundaryPrecision(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2230)
		else:
			DoubleField.__init__(self, 2230, data)

class LegComplexEventPriceTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2231)
		else:
			IntField.__init__(self, 2231, data)

class LegComplexEventCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2232)
		else:
			IntField.__init__(self, 2232, data)

class LegComplexEventCurrencyOne(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2233)
		else:
			StringField.__init__(self, 2233, data)

class LegComplexEventCurrencyTwo(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2234)
		else:
			StringField.__init__(self, 2234, data)

class LegComplexEventQuoteBasis(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2235)
		else:
			IntField.__init__(self, 2235, data)

class LegComplexEventFixedFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2236)
		else:
			DoubleField.__init__(self, 2236, data)

class LegComplexEventDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2237)
		else:
			StringField.__init__(self, 2237, data)

class LegComplexEventCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2238)
		else:
			IntField.__init__(self, 2238, data)

class LegComplexEventStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2239)
		else:
			DoubleField.__init__(self, 2239, data)

class LegComplexEventStrikeFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2240)
		else:
			DoubleField.__init__(self, 2240, data)

class LegComplexEventStrikeNumberOfOptions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2241)
		else:
			IntField.__init__(self, 2241, data)

class LegComplexEventCreditEventsXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2242)
		else:
			StringField.__init__(self, 2242, data)

class LegComplexEventCreditEventNotifyingParty(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2243)
		else:
			IntField.__init__(self, 2243, data)

class LegComplexEventCreditEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2244)
		else:
			StringField.__init__(self, 2244, data)

class LegComplexEventCreditEventStandardSources(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2245)
		else:
			BoolField.__init__(self, 2245, data)

class LegComplexEventCreditEventMinimumSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2246)
		else:
			IntField.__init__(self, 2246, data)

class LegComplexEventXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2248)
		else:
			StringField.__init__(self, 2248, data)

class LegComplexEventXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2249)
		else:
			StringField.__init__(self, 2249, data)

class NoLegComplexEventDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2250)
		else:
			IntField.__init__(self, 2250, data)

class LegComplexEventStartDate(UtcDateField):
	def __init__(self, data = None):
		if data == None:
			UtcDateField.__init__(self, 2251)
		else:
			UtcDateField.__init__(self, 2251, data)

class LegComplexEventEndDate(UtcDateField):
	def __init__(self, data = None):
		if data == None:
			UtcDateField.__init__(self, 2252)
		else:
			UtcDateField.__init__(self, 2252, data)

class NoLegComplexEventTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2253)
		else:
			IntField.__init__(self, 2253, data)

class LegComplexEventStartTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 2204)
		else:
			UtcTimeOnlyField.__init__(self, 2204, data)

class LegComplexEventEndTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 2247)
		else:
			UtcTimeOnlyField.__init__(self, 2247, data)

class NoLegComplexEventSchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41400)
		else:
			IntField.__init__(self, 41400, data)

class LegComplexEventScheduleStartDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41401)
		else:
			StringField.__init__(self, 41401, data)

class LegComplexEventScheduleEndDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41402)
		else:
			StringField.__init__(self, 41402, data)

class LegComplexEventScheduleFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41403)
		else:
			IntField.__init__(self, 41403, data)

class LegComplexEventScheduleFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41404)
		else:
			StringField.__init__(self, 41404, data)

class LegComplexEventScheduleRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41405)
		else:
			StringField.__init__(self, 41405, data)

class NoLegDeliverySchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41408)
		else:
			IntField.__init__(self, 41408, data)

class LegDeliveryScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41409)
		else:
			IntField.__init__(self, 41409, data)

class LegDeliveryScheduleXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41410)
		else:
			StringField.__init__(self, 41410, data)

class LegDeliveryScheduleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41411)
		else:
			DoubleField.__init__(self, 41411, data)

class LegDeliveryScheduleNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41412)
		else:
			StringField.__init__(self, 41412, data)

class LegDeliveryScheduleNotionalCommodityFrequency(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41413)
		else:
			IntField.__init__(self, 41413, data)

class LegDeliveryScheduleNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41414)
		else:
			DoubleField.__init__(self, 41414, data)

class LegDeliverySchedulePositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41415)
		else:
			DoubleField.__init__(self, 41415, data)

class LegDeliveryScheduleToleranceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41416)
		else:
			StringField.__init__(self, 41416, data)

class LegDeliveryScheduleToleranceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41417)
		else:
			IntField.__init__(self, 41417, data)

class LegDeliveryScheduleSettlCountry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41418)
		else:
			StringField.__init__(self, 41418, data)

class LegDeliveryScheduleSettlTimeZone(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41419)
		else:
			StringField.__init__(self, 41419, data)

class LegDeliveryScheduleSettlFlowType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41420)
		else:
			IntField.__init__(self, 41420, data)

class LegDeliveryScheduleSettlHolidaysProcessingInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41421)
		else:
			IntField.__init__(self, 41421, data)

class NoLegDeliveryScheduleSettlDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41422)
		else:
			IntField.__init__(self, 41422, data)

class LegDeliveryScheduleSettlDay(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41423)
		else:
			IntField.__init__(self, 41423, data)

class LegDeliveryScheduleSettlTotalHours(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41424)
		else:
			IntField.__init__(self, 41424, data)

class NoLegDeliveryScheduleSettlTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41425)
		else:
			IntField.__init__(self, 41425, data)

class LegDeliveryScheduleSettlStart(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41426)
		else:
			StringField.__init__(self, 41426, data)

class LegDeliveryScheduleSettlEnd(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41427)
		else:
			StringField.__init__(self, 41427, data)

class LegDeliveryScheduleSettlTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41428)
		else:
			IntField.__init__(self, 41428, data)

class LegDeliveryStreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41429)
		else:
			IntField.__init__(self, 41429, data)

class LegDeliveryStreamPipeline(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41430)
		else:
			StringField.__init__(self, 41430, data)

class LegDeliveryStreamEntryPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41431)
		else:
			StringField.__init__(self, 41431, data)

class LegDeliveryStreamWithdrawalPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41432)
		else:
			StringField.__init__(self, 41432, data)

class LegDeliveryStreamDeliveryPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41433)
		else:
			StringField.__init__(self, 41433, data)

class LegDeliveryStreamDeliveryRestriction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41434)
		else:
			IntField.__init__(self, 41434, data)

class LegDeliveryStreamDeliveryContingency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41435)
		else:
			StringField.__init__(self, 41435, data)

class LegDeliveryStreamDeliveryContingentPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41436)
		else:
			IntField.__init__(self, 41436, data)

class LegDeliveryStreamDeliverAtSourceIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41437)
		else:
			BoolField.__init__(self, 41437, data)

class LegDeliveryStreamRiskApportionment(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41438)
		else:
			StringField.__init__(self, 41438, data)

class LegDeliveryStreamRiskApportionmentSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41219)
		else:
			StringField.__init__(self, 41219, data)

class LegDeliveryStreamTitleTransferLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41439)
		else:
			StringField.__init__(self, 41439, data)

class LegDeliveryStreamTitleTransferCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41440)
		else:
			IntField.__init__(self, 41440, data)

class LegDeliveryStreamImporterOfRecord(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41441)
		else:
			StringField.__init__(self, 41441, data)

class LegDeliveryStreamNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41442)
		else:
			DoubleField.__init__(self, 41442, data)

class LegDeliveryStreamPositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41443)
		else:
			DoubleField.__init__(self, 41443, data)

class LegDeliveryStreamToleranceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41444)
		else:
			StringField.__init__(self, 41444, data)

class LegDeliveryStreamToleranceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41445)
		else:
			IntField.__init__(self, 41445, data)

class LegDeliveryStreamToleranceOptionSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41446)
		else:
			IntField.__init__(self, 41446, data)

class LegDeliveryStreamTotalPositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41447)
		else:
			DoubleField.__init__(self, 41447, data)

class LegDeliveryStreamTotalNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41448)
		else:
			DoubleField.__init__(self, 41448, data)

class LegDeliveryStreamNotionalConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41449)
		else:
			DoubleField.__init__(self, 41449, data)

class LegDeliveryStreamTransportEquipment(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41450)
		else:
			StringField.__init__(self, 41450, data)

class LegDeliveryStreamElectingPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41451)
		else:
			IntField.__init__(self, 41451, data)

class NoLegStreamAssetAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41452)
		else:
			IntField.__init__(self, 41452, data)

class LegStreamAssetAttributeType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41453)
		else:
			StringField.__init__(self, 41453, data)

class LegStreamAssetAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41454)
		else:
			StringField.__init__(self, 41454, data)

class LegStreamAssetAttributeLimit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41455)
		else:
			StringField.__init__(self, 41455, data)

class NoLegDeliveryStreamCycles(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41456)
		else:
			IntField.__init__(self, 41456, data)

class LegDeliveryStreamCycleDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41457)
		else:
			StringField.__init__(self, 41457, data)

class EncodedLegDeliveryStreamCycleDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41458)
		else:
			IntField.__init__(self, 41458, data)

class EncodedLegDeliveryStreamCycleDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41459)
		else:
			StringField.__init__(self, 41459, data)

class NoLegDeliveryStreamCommoditySources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41460)
		else:
			IntField.__init__(self, 41460, data)

class LegDeliveryStreamCommoditySource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41461)
		else:
			StringField.__init__(self, 41461, data)

class NoLegInstrumentParties(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2254)
		else:
			IntField.__init__(self, 2254, data)

class LegInstrumentPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2255)
		else:
			StringField.__init__(self, 2255, data)

class LegInstrumentPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2256)
		else:
			CharField.__init__(self, 2256, data)

class LegInstrumentPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2257)
		else:
			IntField.__init__(self, 2257, data)

class NoLegInstrumentPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2258)
		else:
			IntField.__init__(self, 2258, data)

class LegInstrumentPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2259)
		else:
			StringField.__init__(self, 2259, data)

class LegInstrumentPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2260)
		else:
			IntField.__init__(self, 2260, data)

class LegMarketDisruptionProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41462)
		else:
			IntField.__init__(self, 41462, data)

class LegMarketDisruptionFallbackProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41463)
		else:
			IntField.__init__(self, 41463, data)

class LegMarketDisruptionMaximumDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41464)
		else:
			IntField.__init__(self, 41464, data)

class LegMarketDisruptionMaterialityPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41465)
		else:
			DoubleField.__init__(self, 41465, data)

class LegMarketDisruptionMinimumFuturesContracts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41466)
		else:
			IntField.__init__(self, 41466, data)

class NoLegMarketDisruptionEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41467)
		else:
			IntField.__init__(self, 41467, data)

class LegMarketDisruptionEvent(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41468)
		else:
			StringField.__init__(self, 41468, data)

class NoLegMarketDisruptionFallbacks(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41469)
		else:
			IntField.__init__(self, 41469, data)

class LegMarketDisruptionFallbackType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41470)
		else:
			StringField.__init__(self, 41470, data)

class NoLegMarketDisruptionFallbackReferencePrices(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41471)
		else:
			IntField.__init__(self, 41471, data)

class LegMarketDisruptionFallbackUnderlierType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41472)
		else:
			IntField.__init__(self, 41472, data)

class LegMarketDisruptionFallbackUnderlierSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41473)
		else:
			StringField.__init__(self, 41473, data)

class LegMarketDisruptionFallbackUnderlierSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41474)
		else:
			StringField.__init__(self, 41474, data)

class LegMarketDisruptionFallbackUnderlierSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41475)
		else:
			StringField.__init__(self, 41475, data)

class EncodedLegMarketDisruptionFallbackUnderlierSecurityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41476)
		else:
			IntField.__init__(self, 41476, data)

class EncodedLegMarketDisruptionFallbackUnderlierSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41477)
		else:
			StringField.__init__(self, 41477, data)

class LegMarketDisruptionFallbackOpenUnits(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41478)
		else:
			DoubleField.__init__(self, 41478, data)

class LegMarketDisruptionFallbackBasketCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41479)
		else:
			StringField.__init__(self, 41479, data)

class LegMarketDisruptionFallbackBasketDivisor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41480)
		else:
			DoubleField.__init__(self, 41480, data)

class LegExerciseDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41481)
		else:
			StringField.__init__(self, 41481, data)

class EncodedLegExerciseDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41482)
		else:
			IntField.__init__(self, 41482, data)

class EncodedLegExerciseDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41483)
		else:
			StringField.__init__(self, 41483, data)

class LegAutomaticExerciseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41484)
		else:
			BoolField.__init__(self, 41484, data)

class LegAutomaticExerciseThresholdRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41485)
		else:
			DoubleField.__init__(self, 41485, data)

class LegExerciseConfirmationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41486)
		else:
			IntField.__init__(self, 41486, data)

class LegManualNoticeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41487)
		else:
			StringField.__init__(self, 41487, data)

class LegFallbackExerciseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41488)
		else:
			BoolField.__init__(self, 41488, data)

class LegLimitRightToConfirmIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41489)
		else:
			BoolField.__init__(self, 41489, data)

class LegExerciseSplitTicketIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41490)
		else:
			BoolField.__init__(self, 41490, data)

class NoLegOptionExerciseBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41491)
		else:
			IntField.__init__(self, 41491, data)

class LegOptionExerciseBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41492)
		else:
			StringField.__init__(self, 41492, data)

class LegOptionExerciseBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41493)
		else:
			IntField.__init__(self, 41493, data)

class LegOptionExerciseEarliestDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41494)
		else:
			IntField.__init__(self, 41494, data)

class LegOptionExerciseEarliestDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41495)
		else:
			IntField.__init__(self, 41495, data)

class LegOptionExerciseEarliestDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41496)
		else:
			StringField.__init__(self, 41496, data)

class LegOptionExerciseFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41497)
		else:
			IntField.__init__(self, 41497, data)

class LegOptionExerciseFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41498)
		else:
			StringField.__init__(self, 41498, data)

class LegOptionExerciseStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41499)
		else:
			StringField.__init__(self, 41499, data)

class LegOptionExerciseStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41500)
		else:
			IntField.__init__(self, 41500, data)

class LegOptionExerciseStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41501)
		else:
			IntField.__init__(self, 41501, data)

class LegOptionExerciseStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41502)
		else:
			StringField.__init__(self, 41502, data)

class LegOptionExerciseStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41503)
		else:
			IntField.__init__(self, 41503, data)

class LegOptionExerciseStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41504)
		else:
			StringField.__init__(self, 41504, data)

class LegOptionExerciseSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41505)
		else:
			IntField.__init__(self, 41505, data)

class LegOptionExerciseNominationDeadline(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41506)
		else:
			StringField.__init__(self, 41506, data)

class LegOptionExerciseFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41507)
		else:
			StringField.__init__(self, 41507, data)

class LegOptionExerciseLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41508)
		else:
			StringField.__init__(self, 41508, data)

class LegOptionExerciseEarliestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41509)
		else:
			StringField.__init__(self, 41509, data)

class LegOptionExerciseLatestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41510)
		else:
			StringField.__init__(self, 41510, data)

class LegOptionExerciseTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41511)
		else:
			StringField.__init__(self, 41511, data)

class NoLegOptionExerciseDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41512)
		else:
			IntField.__init__(self, 41512, data)

class LegOptionExerciseDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41513)
		else:
			StringField.__init__(self, 41513, data)

class LegOptionExerciseDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41514)
		else:
			IntField.__init__(self, 41514, data)

class NoLegOptionExerciseExpirationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41515)
		else:
			IntField.__init__(self, 41515, data)

class LegOptionExerciseExpirationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41516)
		else:
			StringField.__init__(self, 41516, data)

class LegOptionExerciseExpirationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41517)
		else:
			IntField.__init__(self, 41517, data)

class LegOptionExerciseExpirationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41518)
		else:
			IntField.__init__(self, 41518, data)

class LegOptionExerciseExpirationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41519)
		else:
			IntField.__init__(self, 41519, data)

class LegOptionExerciseExpirationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41520)
		else:
			StringField.__init__(self, 41520, data)

class LegOptionExerciseExpirationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41521)
		else:
			IntField.__init__(self, 41521, data)

class LegOptionExerciseExpirationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41522)
		else:
			StringField.__init__(self, 41522, data)

class LegOptionExerciseExpirationRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41523)
		else:
			StringField.__init__(self, 41523, data)

class LegOptionExerciseExpirationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41524)
		else:
			IntField.__init__(self, 41524, data)

class LegOptionExerciseExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41525)
		else:
			StringField.__init__(self, 41525, data)

class LegOptionExerciseExpirationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41526)
		else:
			StringField.__init__(self, 41526, data)

class NoLegOptionExerciseExpirationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41527)
		else:
			IntField.__init__(self, 41527, data)

class LegOptionExerciseExpirationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41528)
		else:
			StringField.__init__(self, 41528, data)

class LegOptionExerciseExpirationDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41529)
		else:
			IntField.__init__(self, 41529, data)

class NoLegPaymentScheduleFixingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41530)
		else:
			IntField.__init__(self, 41530, data)

class LegPaymentScheduleFixingDayOfWeek(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41531)
		else:
			IntField.__init__(self, 41531, data)

class LegPaymentScheduleFixingDayNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41532)
		else:
			IntField.__init__(self, 41532, data)

class LegPaymentScheduleXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41533)
		else:
			StringField.__init__(self, 41533, data)

class LegPaymentScheduleXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41534)
		else:
			StringField.__init__(self, 41534, data)

class LegPaymentScheduleRateCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41535)
		else:
			StringField.__init__(self, 41535, data)

class LegPaymentScheduleRateUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41536)
		else:
			StringField.__init__(self, 41536, data)

class LegPaymentScheduleRateConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41537)
		else:
			DoubleField.__init__(self, 41537, data)

class LegPaymentScheduleRateSpreadType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41538)
		else:
			IntField.__init__(self, 41538, data)

class LegPaymentScheduleSettlPeriodPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41539)
		else:
			DoubleField.__init__(self, 41539, data)

class LegPaymentScheduleSettlPeriodPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41540)
		else:
			StringField.__init__(self, 41540, data)

class LegPaymentScheduleSettlPeriodPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41541)
		else:
			StringField.__init__(self, 41541, data)

class LegPaymentScheduleStepUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41542)
		else:
			StringField.__init__(self, 41542, data)

class LegPaymentScheduleFixingDayDistribution(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41543)
		else:
			IntField.__init__(self, 41543, data)

class LegPaymentScheduleFixingDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41544)
		else:
			IntField.__init__(self, 41544, data)

class LegPaymentScheduleFixingLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41545)
		else:
			IntField.__init__(self, 41545, data)

class LegPaymentScheduleFixingLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41546)
		else:
			StringField.__init__(self, 41546, data)

class LegPaymentScheduleFixingFirstObservationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41547)
		else:
			IntField.__init__(self, 41547, data)

class LegPaymentScheduleFixingFirstObservationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41548)
		else:
			StringField.__init__(self, 41548, data)

class LegPaymentStreamFlatRateIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41549)
		else:
			BoolField.__init__(self, 41549, data)

class LegPaymentStreamFlatRateAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41550)
		else:
			DoubleField.__init__(self, 41550, data)

class LegPaymentStreamFlatRateCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41551)
		else:
			StringField.__init__(self, 41551, data)

class LegStreamMaximumPaymentAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41552)
		else:
			DoubleField.__init__(self, 41552, data)

class LegStreamMaximumPaymentCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41553)
		else:
			StringField.__init__(self, 41553, data)

class LegStreamMaximumTransactionAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41554)
		else:
			DoubleField.__init__(self, 41554, data)

class LegStreamMaximumTransactionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41555)
		else:
			StringField.__init__(self, 41555, data)

class LegPaymentStreamFixedAmountUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41556)
		else:
			StringField.__init__(self, 41556, data)

class LegPaymentStreamTotalFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41557)
		else:
			DoubleField.__init__(self, 41557, data)

class LegPaymentStreamWorldScaleRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41558)
		else:
			DoubleField.__init__(self, 41558, data)

class LegPaymentStreamContractPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41559)
		else:
			DoubleField.__init__(self, 41559, data)

class LegPaymentStreamContractPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41560)
		else:
			StringField.__init__(self, 41560, data)

class NoLegPaymentStreamPricingBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41561)
		else:
			IntField.__init__(self, 41561, data)

class LegPaymentStreamPricingBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41562)
		else:
			StringField.__init__(self, 41562, data)

class LegPaymentStreamRateIndex2CurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41563)
		else:
			StringField.__init__(self, 41563, data)

class LegPaymentStreamRateIndex2CurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41564)
		else:
			IntField.__init__(self, 41564, data)

class LegPaymentStreamRateIndexLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41565)
		else:
			StringField.__init__(self, 41565, data)

class LegPaymentStreamRateIndexLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41566)
		else:
			DoubleField.__init__(self, 41566, data)

class LegPaymentStreamRateIndexUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41567)
		else:
			StringField.__init__(self, 41567, data)

class LegPaymentStreamSettlLevel(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41568)
		else:
			IntField.__init__(self, 41568, data)

class LegPaymentStreamReferenceLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41569)
		else:
			DoubleField.__init__(self, 41569, data)

class LegPaymentStreamReferenceLevelUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41570)
		else:
			StringField.__init__(self, 41570, data)

class LegPaymentStreamReferenceLevelEqualsZeroIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41571)
		else:
			BoolField.__init__(self, 41571, data)

class LegPaymentStreamRateSpreadCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41572)
		else:
			StringField.__init__(self, 41572, data)

class LegPaymentStreamRateSpreadUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41573)
		else:
			StringField.__init__(self, 41573, data)

class LegPaymentStreamRateConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41574)
		else:
			DoubleField.__init__(self, 41574, data)

class LegPaymentStreamRateSpreadType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41575)
		else:
			IntField.__init__(self, 41575, data)

class LegPaymentStreamLastResetRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41576)
		else:
			DoubleField.__init__(self, 41576, data)

class LegPaymentStreamFinalRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41577)
		else:
			DoubleField.__init__(self, 41577, data)

class LegPaymentStreamCalculationLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41578)
		else:
			IntField.__init__(self, 41578, data)

class LegPaymentStreamCalculationLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41579)
		else:
			StringField.__init__(self, 41579, data)

class LegPaymentStreamFirstObservationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41580)
		else:
			IntField.__init__(self, 41580, data)

class LegPaymentStreamFirstObservationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41581)
		else:
			StringField.__init__(self, 41581, data)

class LegPaymentStreamPricingDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41582)
		else:
			IntField.__init__(self, 41582, data)

class LegPaymentStreamPricingDayDistribution(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41583)
		else:
			IntField.__init__(self, 41583, data)

class LegPaymentStreamPricingDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41584)
		else:
			IntField.__init__(self, 41584, data)

class LegPaymentStreamPricingBusinessCalendar(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41585)
		else:
			StringField.__init__(self, 41585, data)

class LegPaymentStreamPricingBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41586)
		else:
			IntField.__init__(self, 41586, data)

class NoLegPaymentStreamPaymentDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41589)
		else:
			IntField.__init__(self, 41589, data)

class LegPaymentStreamPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41590)
		else:
			StringField.__init__(self, 41590, data)

class LegPaymentStreamPaymentDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41591)
		else:
			IntField.__init__(self, 41591, data)

class LegPaymentStreamMasterAgreementPaymentDatesIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41592)
		else:
			BoolField.__init__(self, 41592, data)

class NoLegPaymentStreamPricingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41593)
		else:
			IntField.__init__(self, 41593, data)

class LegPaymentStreamPricingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41594)
		else:
			StringField.__init__(self, 41594, data)

class LegPaymentStreamPricingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41595)
		else:
			IntField.__init__(self, 41595, data)

class NoLegPaymentStreamPricingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41596)
		else:
			IntField.__init__(self, 41596, data)

class LegPaymentStreamPricingDayOfWeek(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41597)
		else:
			IntField.__init__(self, 41597, data)

class LegPaymentStreamPricingDayNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41598)
		else:
			IntField.__init__(self, 41598, data)

class NoLegPhysicalSettlTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41599)
		else:
			IntField.__init__(self, 41599, data)

class LegPhysicalSettlTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41600)
		else:
			StringField.__init__(self, 41600, data)

class LegPhysicalSettlCurency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41601)
		else:
			StringField.__init__(self, 41601, data)

class LegPhysicalSettlBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41602)
		else:
			IntField.__init__(self, 41602, data)

class LegPhysicalSettlMaximumBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41603)
		else:
			IntField.__init__(self, 41603, data)

class NoLegPhysicalSettlDeliverableObligations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41604)
		else:
			IntField.__init__(self, 41604, data)

class LegPhysicalSettlDeliverableObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41605)
		else:
			StringField.__init__(self, 41605, data)

class LegPhysicalSettlDeliverableObligationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41606)
		else:
			StringField.__init__(self, 41606, data)

class NoLegPricingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41607)
		else:
			IntField.__init__(self, 41607, data)

class LegPricingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41608)
		else:
			StringField.__init__(self, 41608, data)

class LegPricingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41609)
		else:
			StringField.__init__(self, 41609, data)

class LegPricingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41610)
		else:
			IntField.__init__(self, 41610, data)

class LegPricingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41611)
		else:
			StringField.__init__(self, 41611, data)

class LegPricingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41612)
		else:
			StringField.__init__(self, 41612, data)

class LegPricingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41613)
		else:
			StringField.__init__(self, 41613, data)

class NoLegProtectionTermEventNewsSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41614)
		else:
			IntField.__init__(self, 41614, data)

class LegProtectionTermEventNewsSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41615)
		else:
			StringField.__init__(self, 41615, data)

class NoLegProtectionTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41616)
		else:
			IntField.__init__(self, 41616, data)

class LegProtectionTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41617)
		else:
			StringField.__init__(self, 41617, data)

class LegProtectionTermNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41618)
		else:
			DoubleField.__init__(self, 41618, data)

class LegProtectionTermCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41619)
		else:
			StringField.__init__(self, 41619, data)

class LegProtectionTermSellerNotifies(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41620)
		else:
			BoolField.__init__(self, 41620, data)

class LegProtectionTermBuyerNotifies(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41621)
		else:
			BoolField.__init__(self, 41621, data)

class LegProtectionTermEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41622)
		else:
			StringField.__init__(self, 41622, data)

class LegProtectionTermStandardSources(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41623)
		else:
			BoolField.__init__(self, 41623, data)

class LegProtectionTermEventMinimumSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41624)
		else:
			IntField.__init__(self, 41624, data)

class NoLegProtectionTermEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41625)
		else:
			IntField.__init__(self, 41625, data)

class LegProtectionTermEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41626)
		else:
			StringField.__init__(self, 41626, data)

class LegProtectionTermEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41627)
		else:
			StringField.__init__(self, 41627, data)

class LegProtectionTermEventCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41628)
		else:
			StringField.__init__(self, 41628, data)

class LegProtectionTermEventPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41629)
		else:
			IntField.__init__(self, 41629, data)

class LegProtectionTermEventUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41630)
		else:
			StringField.__init__(self, 41630, data)

class LegProtectionTermEventDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41631)
		else:
			IntField.__init__(self, 41631, data)

class LegProtectionTermEventRateSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41632)
		else:
			StringField.__init__(self, 41632, data)

class NoLegProtectionTermEventQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41633)
		else:
			IntField.__init__(self, 41633, data)

class LegProtectionTermEventQualifier(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 41634)
		else:
			CharField.__init__(self, 41634, data)

class NoLegProtectionTermObligations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41635)
		else:
			IntField.__init__(self, 41635, data)

class LegProtectionTermObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41636)
		else:
			StringField.__init__(self, 41636, data)

class LegProtectionTermObligationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41637)
		else:
			StringField.__init__(self, 41637, data)

class NoLegStreamCalculationPeriodDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41638)
		else:
			IntField.__init__(self, 41638, data)

class LegStreamCalculationPeriodDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41639)
		else:
			StringField.__init__(self, 41639, data)

class LegStreamCalculationPeriodDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41640)
		else:
			IntField.__init__(self, 41640, data)

class LegStreamCalculationPeriodDatesXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41641)
		else:
			StringField.__init__(self, 41641, data)

class LegStreamCalculationPeriodDatesXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41642)
		else:
			StringField.__init__(self, 41642, data)

class LegStreamCalculationBalanceOfFirstPeriod(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41643)
		else:
			BoolField.__init__(self, 41643, data)

class LegStreamCalculationCorrectionPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41644)
		else:
			IntField.__init__(self, 41644, data)

class LegStreamCalculationCorrectionUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41645)
		else:
			StringField.__init__(self, 41645, data)

class NoLegStreamCommoditySettlBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41646)
		else:
			IntField.__init__(self, 41646, data)

class LegStreamCommoditySettlBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41647)
		else:
			StringField.__init__(self, 41647, data)

class LegStreamCommodityBase(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41648)
		else:
			StringField.__init__(self, 41648, data)

class LegStreamCommodityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41649)
		else:
			StringField.__init__(self, 41649, data)

class LegStreamCommoditySecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41650)
		else:
			StringField.__init__(self, 41650, data)

class LegStreamCommoditySecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41651)
		else:
			StringField.__init__(self, 41651, data)

class LegStreamCommodityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41652)
		else:
			StringField.__init__(self, 41652, data)

class EncodedLegStreamCommodityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41653)
		else:
			IntField.__init__(self, 41653, data)

class EncodedLegStreamCommodityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41654)
		else:
			StringField.__init__(self, 41654, data)

class LegStreamCommodityUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41655)
		else:
			StringField.__init__(self, 41655, data)

class LegStreamCommodityCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41656)
		else:
			StringField.__init__(self, 41656, data)

class LegStreamCommodityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41657)
		else:
			StringField.__init__(self, 41657, data)

class LegStreamCommodityRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41658)
		else:
			IntField.__init__(self, 41658, data)

class LegStreamCommodityRateReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41659)
		else:
			StringField.__init__(self, 41659, data)

class LegStreamCommodityRateReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41660)
		else:
			StringField.__init__(self, 41660, data)

class LegStreamDataProvider(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41661)
		else:
			StringField.__init__(self, 41661, data)

class LegStreamCommodityPricingType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41662)
		else:
			StringField.__init__(self, 41662, data)

class LegStreamCommodityNearbySettlDayPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41663)
		else:
			IntField.__init__(self, 41663, data)

class LegStreamCommodityNearbySettlDayUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41664)
		else:
			StringField.__init__(self, 41664, data)

class LegStreamCommoditySettlDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41665)
		else:
			StringField.__init__(self, 41665, data)

class LegStreamCommoditySettlDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41666)
		else:
			IntField.__init__(self, 41666, data)

class LegStreamCommoditySettlDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41667)
		else:
			StringField.__init__(self, 41667, data)

class LegStreamCommoditySettlMonth(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41668)
		else:
			IntField.__init__(self, 41668, data)

class LegStreamCommoditySettlDateRollPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41669)
		else:
			IntField.__init__(self, 41669, data)

class LegStreamCommoditySettlDateRollUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41670)
		else:
			StringField.__init__(self, 41670, data)

class LegStreamCommoditySettlDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41671)
		else:
			IntField.__init__(self, 41671, data)

class LegStreamCommodityXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41672)
		else:
			StringField.__init__(self, 41672, data)

class LegStreamCommodityXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41673)
		else:
			StringField.__init__(self, 41673, data)

class NoLegStreamCommodityAltIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41674)
		else:
			IntField.__init__(self, 41674, data)

class LegStreamCommodityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41675)
		else:
			StringField.__init__(self, 41675, data)

class LegStreamCommodityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41676)
		else:
			StringField.__init__(self, 41676, data)

class NoLegStreamCommodityDataSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41677)
		else:
			IntField.__init__(self, 41677, data)

class LegStreamCommodityDataSourceID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41678)
		else:
			StringField.__init__(self, 41678, data)

class LegStreamCommodityDataSourceIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41679)
		else:
			IntField.__init__(self, 41679, data)

class NoLegStreamCommoditySettlDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41680)
		else:
			IntField.__init__(self, 41680, data)

class LegStreamCommoditySettlDay(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41681)
		else:
			IntField.__init__(self, 41681, data)

class LegStreamCommoditySettlTotalHours(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41682)
		else:
			IntField.__init__(self, 41682, data)

class NoLegStreamCommoditySettlTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41683)
		else:
			IntField.__init__(self, 41683, data)

class LegStreamCommoditySettlStart(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41684)
		else:
			StringField.__init__(self, 41684, data)

class LegStreamCommoditySettlEnd(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41685)
		else:
			StringField.__init__(self, 41685, data)

class LegStreamCommoditySettlTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41935)
		else:
			IntField.__init__(self, 41935, data)

class NoLegStreamCommoditySettlPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41686)
		else:
			IntField.__init__(self, 41686, data)

class LegStreamCommoditySettlCountry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41687)
		else:
			StringField.__init__(self, 41687, data)

class LegStreamCommoditySettlTimeZone(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41688)
		else:
			StringField.__init__(self, 41688, data)

class LegStreamCommoditySettlFlowType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41689)
		else:
			IntField.__init__(self, 41689, data)

class LegStreamCommoditySettlPeriodNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41690)
		else:
			DoubleField.__init__(self, 41690, data)

class LegStreamCommoditySettlPeriodNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41691)
		else:
			StringField.__init__(self, 41691, data)

class LegStreamCommoditySettlPeriodFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41692)
		else:
			IntField.__init__(self, 41692, data)

class LegStreamCommoditySettlPeriodFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41693)
		else:
			StringField.__init__(self, 41693, data)

class LegStreamCommoditySettlPeriodPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41694)
		else:
			DoubleField.__init__(self, 41694, data)

class LegStreamCommoditySettlPeriodPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41695)
		else:
			StringField.__init__(self, 41695, data)

class LegStreamCommoditySettlPeriodPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41696)
		else:
			StringField.__init__(self, 41696, data)

class LegStreamCommoditySettlHolidaysProcessingInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41697)
		else:
			IntField.__init__(self, 41697, data)

class LegStreamCommoditySettlPeriodXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41698)
		else:
			StringField.__init__(self, 41698, data)

class LegStreamCommoditySettlPeriodXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41699)
		else:
			StringField.__init__(self, 41699, data)

class LegStreamXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41700)
		else:
			StringField.__init__(self, 41700, data)

class LegStreamNotionalXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41702)
		else:
			StringField.__init__(self, 41702, data)

class LegStreamNotionalFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41703)
		else:
			IntField.__init__(self, 41703, data)

class LegStreamNotionalFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41704)
		else:
			StringField.__init__(self, 41704, data)

class LegStreamNotionalCommodityFrequency(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41705)
		else:
			IntField.__init__(self, 41705, data)

class LegStreamNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41706)
		else:
			StringField.__init__(self, 41706, data)

class LegStreamTotalNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41707)
		else:
			DoubleField.__init__(self, 41707, data)

class LegStreamTotalNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41708)
		else:
			StringField.__init__(self, 41708, data)

class NoUnderlyingAssetAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2312)
		else:
			IntField.__init__(self, 2312, data)

class UnderlyingAssetAttributeType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2313)
		else:
			StringField.__init__(self, 2313, data)

class UnderlyingAssetAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2314)
		else:
			StringField.__init__(self, 2314, data)

class UnderlyingAssetAttributeLimit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2315)
		else:
			StringField.__init__(self, 2315, data)

class NoUnderlyingComplexEventAveragingObservations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41713)
		else:
			IntField.__init__(self, 41713, data)

class UnderlyingComplexEventAveragingObservationNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41714)
		else:
			IntField.__init__(self, 41714, data)

class UnderlyingComplexEventAveragingWeight(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41715)
		else:
			DoubleField.__init__(self, 41715, data)

class NoUnderlyingComplexEventCreditEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41716)
		else:
			IntField.__init__(self, 41716, data)

class UnderlyingComplexEventCreditEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41717)
		else:
			StringField.__init__(self, 41717, data)

class UnderlyingComplexEventCreditEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41718)
		else:
			StringField.__init__(self, 41718, data)

class UnderlyingComplexEventCreditEventCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41719)
		else:
			StringField.__init__(self, 41719, data)

class UnderlyingComplexEventCreditEventPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41720)
		else:
			IntField.__init__(self, 41720, data)

class UnderlyingComplexEventCreditEventUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41721)
		else:
			StringField.__init__(self, 41721, data)

class UnderlyingComplexEventCreditEventDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41722)
		else:
			IntField.__init__(self, 41722, data)

class UnderlyingComplexEventCreditEventRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41723)
		else:
			IntField.__init__(self, 41723, data)

class NoUnderlyingComplexEventCreditEventQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41724)
		else:
			IntField.__init__(self, 41724, data)

class UnderlyingComplexEventCreditEventQualifier(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 41725)
		else:
			CharField.__init__(self, 41725, data)

class NoUnderlyingComplexEventPeriodDateTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41726)
		else:
			IntField.__init__(self, 41726, data)

class UnderlyingComplexEventPeriodDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41727)
		else:
			StringField.__init__(self, 41727, data)

class UnderlyingComplexEventPeriodTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41728)
		else:
			StringField.__init__(self, 41728, data)

class NoUnderlyingComplexEventPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41729)
		else:
			IntField.__init__(self, 41729, data)

class UnderlyingComplexEventPeriodType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41730)
		else:
			IntField.__init__(self, 41730, data)

class UnderlyingComplexEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41731)
		else:
			StringField.__init__(self, 41731, data)

class NoUnderlyingComplexEventRateSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41732)
		else:
			IntField.__init__(self, 41732, data)

class UnderlyingComplexEventRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41733)
		else:
			IntField.__init__(self, 41733, data)

class UnderlyingComplexEventRateSourceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41734)
		else:
			IntField.__init__(self, 41734, data)

class UnderlyingComplexEventReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41735)
		else:
			StringField.__init__(self, 41735, data)

class UnderlyingComplexEventReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41736)
		else:
			StringField.__init__(self, 41736, data)

class NoUnderlyingComplexEventDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41737)
		else:
			IntField.__init__(self, 41737, data)

class UnderlyingComplexEventDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41738)
		else:
			StringField.__init__(self, 41738, data)

class UnderlyingComplexEventDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41739)
		else:
			StringField.__init__(self, 41739, data)

class UnderlyingComplexEventDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41740)
		else:
			IntField.__init__(self, 41740, data)

class UnderlyingComplexEventDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41741)
		else:
			IntField.__init__(self, 41741, data)

class UnderlyingComplexEventDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41742)
		else:
			StringField.__init__(self, 41742, data)

class UnderlyingComplexEventDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41743)
		else:
			IntField.__init__(self, 41743, data)

class UnderlyingComplexEventDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41744)
		else:
			IntField.__init__(self, 41744, data)

class UnderlyingComplexEventDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41745)
		else:
			StringField.__init__(self, 41745, data)

class UnderlyingComplexEventFixingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41746)
		else:
			StringField.__init__(self, 41746, data)

class UnderlyingComplexEventFixingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41747)
		else:
			StringField.__init__(self, 41747, data)

class NoUnderlyingComplexEventCreditEventSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41748)
		else:
			IntField.__init__(self, 41748, data)

class UnderlyingComplexEventCreditEventSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41749)
		else:
			StringField.__init__(self, 41749, data)

class UnderlyingComplexOptPayoutPaySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2261)
		else:
			IntField.__init__(self, 2261, data)

class UnderlyingComplexOptPayoutReceiveSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2262)
		else:
			IntField.__init__(self, 2262, data)

class UnderlyingComplexOptPayoutUnderlier(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2263)
		else:
			StringField.__init__(self, 2263, data)

class UnderlyingComplexOptPayoutPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2264)
		else:
			DoubleField.__init__(self, 2264, data)

class UnderlyingComplexOptPayoutTime(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2265)
		else:
			IntField.__init__(self, 2265, data)

class UnderlyingComplexOptPayoutCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2266)
		else:
			StringField.__init__(self, 2266, data)

class UnderlyingComplexEventPricePercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2267)
		else:
			DoubleField.__init__(self, 2267, data)

class UnderlyingComplexEventCurrencyOne(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2268)
		else:
			StringField.__init__(self, 2268, data)

class UnderlyingComplexEventCurrencyTwo(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2269)
		else:
			StringField.__init__(self, 2269, data)

class UnderlyingComplexEventQuoteBasis(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2270)
		else:
			IntField.__init__(self, 2270, data)

class UnderlyingComplexEventFixedFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2271)
		else:
			DoubleField.__init__(self, 2271, data)

class UnderlyingComplexEventDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2272)
		else:
			StringField.__init__(self, 2272, data)

class UnderlyingComplexEventCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2273)
		else:
			IntField.__init__(self, 2273, data)

class UnderlyingComplexEventStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2274)
		else:
			DoubleField.__init__(self, 2274, data)

class UnderlyingComplexEventStrikeFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2275)
		else:
			DoubleField.__init__(self, 2275, data)

class UnderlyingComplexEventStrikeNumberOfOptions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2276)
		else:
			IntField.__init__(self, 2276, data)

class UnderlyingComplexEventCreditEventsXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2277)
		else:
			StringField.__init__(self, 2277, data)

class UnderlyingComplexEventCreditEventNotifyingParty(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2278)
		else:
			IntField.__init__(self, 2278, data)

class UnderlyingComplexEventCreditEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2279)
		else:
			StringField.__init__(self, 2279, data)

class UnderlyingComplexEventCreditEventStandardSources(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2280)
		else:
			BoolField.__init__(self, 2280, data)

class UnderlyingComplexEventCreditEventMinimumSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2281)
		else:
			IntField.__init__(self, 2281, data)

class UnderlyingComplexEventXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2282)
		else:
			StringField.__init__(self, 2282, data)

class UnderlyingComplexEventXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2283)
		else:
			StringField.__init__(self, 2283, data)

class NoUnderlyingComplexEventSchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41750)
		else:
			IntField.__init__(self, 41750, data)

class UnderlyingComplexEventScheduleStartDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41751)
		else:
			StringField.__init__(self, 41751, data)

class UnderlyingComplexEventScheduleEndDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41752)
		else:
			StringField.__init__(self, 41752, data)

class UnderlyingComplexEventScheduleFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41753)
		else:
			IntField.__init__(self, 41753, data)

class UnderlyingComplexEventScheduleFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41754)
		else:
			StringField.__init__(self, 41754, data)

class UnderlyingComplexEventScheduleRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41755)
		else:
			StringField.__init__(self, 41755, data)

class NoUnderlyingDeliverySchedules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41756)
		else:
			IntField.__init__(self, 41756, data)

class UnderlyingDeliveryScheduleType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41757)
		else:
			IntField.__init__(self, 41757, data)

class UnderlyingDeliveryScheduleXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41758)
		else:
			StringField.__init__(self, 41758, data)

class UnderlyingDeliveryScheduleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41759)
		else:
			DoubleField.__init__(self, 41759, data)

class UnderlyingDeliveryScheduleNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41760)
		else:
			StringField.__init__(self, 41760, data)

class UnderlyingDeliveryScheduleNotionalCommodityFrequency(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41761)
		else:
			IntField.__init__(self, 41761, data)

class UnderlyingDeliveryScheduleNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41762)
		else:
			DoubleField.__init__(self, 41762, data)

class UnderlyingDeliverySchedulePositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41763)
		else:
			DoubleField.__init__(self, 41763, data)

class UnderlyingDeliveryScheduleToleranceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41764)
		else:
			StringField.__init__(self, 41764, data)

class UnderlyingDeliveryScheduleToleranceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41765)
		else:
			IntField.__init__(self, 41765, data)

class UnderlyingDeliveryScheduleSettlCountry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41766)
		else:
			StringField.__init__(self, 41766, data)

class UnderlyingDeliveryScheduleSettlTimeZone(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41767)
		else:
			StringField.__init__(self, 41767, data)

class UnderlyingDeliveryScheduleSettlFlowType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41768)
		else:
			IntField.__init__(self, 41768, data)

class UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41769)
		else:
			IntField.__init__(self, 41769, data)

class NoUnderlyingDeliveryScheduleSettlDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41770)
		else:
			IntField.__init__(self, 41770, data)

class UnderlyingDeliveryScheduleSettlDay(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41771)
		else:
			IntField.__init__(self, 41771, data)

class UnderlyingDeliveryScheduleSettlTotalHours(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41772)
		else:
			IntField.__init__(self, 41772, data)

class NoUnderlyingDeliveryScheduleSettlTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41773)
		else:
			IntField.__init__(self, 41773, data)

class UnderlyingDeliveryScheduleSettlStart(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41774)
		else:
			StringField.__init__(self, 41774, data)

class UnderlyingDeliveryScheduleSettlEnd(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41775)
		else:
			StringField.__init__(self, 41775, data)

class UnderlyingDeliveryScheduleSettlTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41776)
		else:
			IntField.__init__(self, 41776, data)

class UnderlyingDeliveryStreamType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41777)
		else:
			IntField.__init__(self, 41777, data)

class UnderlyingDeliveryStreamPipeline(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41778)
		else:
			StringField.__init__(self, 41778, data)

class UnderlyingDeliveryStreamEntryPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41779)
		else:
			StringField.__init__(self, 41779, data)

class UnderlyingDeliveryStreamWithdrawalPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41780)
		else:
			StringField.__init__(self, 41780, data)

class UnderlyingDeliveryStreamDeliveryPoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41781)
		else:
			StringField.__init__(self, 41781, data)

class UnderlyingDeliveryStreamDeliveryRestriction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41782)
		else:
			IntField.__init__(self, 41782, data)

class UnderlyingDeliveryStreamDeliveryContingency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41783)
		else:
			StringField.__init__(self, 41783, data)

class UnderlyingDeliveryStreamDeliveryContingentPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41784)
		else:
			IntField.__init__(self, 41784, data)

class UnderlyingDeliveryStreamDeliverAtSourceIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41785)
		else:
			BoolField.__init__(self, 41785, data)

class UnderlyingDeliveryStreamRiskApportionment(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41786)
		else:
			StringField.__init__(self, 41786, data)

class UnderlyingDeliveryStreamRiskApportionmentSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41587)
		else:
			StringField.__init__(self, 41587, data)

class UnderlyingDeliveryStreamTitleTransferLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41787)
		else:
			StringField.__init__(self, 41787, data)

class UnderlyingDeliveryStreamTitleTransferCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41788)
		else:
			IntField.__init__(self, 41788, data)

class UnderlyingDeliveryStreamImporterOfRecord(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41789)
		else:
			StringField.__init__(self, 41789, data)

class UnderlyingDeliveryStreamNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41790)
		else:
			DoubleField.__init__(self, 41790, data)

class UnderlyingDeliveryStreamPositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41791)
		else:
			DoubleField.__init__(self, 41791, data)

class UnderlyingDeliveryStreamToleranceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41792)
		else:
			StringField.__init__(self, 41792, data)

class UnderlyingDeliveryStreamToleranceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41793)
		else:
			IntField.__init__(self, 41793, data)

class UnderlyingDeliveryStreamToleranceOptionSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41794)
		else:
			IntField.__init__(self, 41794, data)

class UnderlyingDeliveryStreamTotalPositiveTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41795)
		else:
			DoubleField.__init__(self, 41795, data)

class UnderlyingDeliveryStreamTotalNegativeTolerance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41796)
		else:
			DoubleField.__init__(self, 41796, data)

class UnderlyingDeliveryStreamNotionalConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41797)
		else:
			DoubleField.__init__(self, 41797, data)

class UnderlyingDeliveryStreamTransportEquipment(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41798)
		else:
			StringField.__init__(self, 41798, data)

class UnderlyingDeliveryStreamElectingPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41799)
		else:
			IntField.__init__(self, 41799, data)

class NoUnderlyingStreamAssetAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41800)
		else:
			IntField.__init__(self, 41800, data)

class UnderlyingStreamAssetAttributeType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41801)
		else:
			StringField.__init__(self, 41801, data)

class UnderlyingStreamAssetAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41802)
		else:
			StringField.__init__(self, 41802, data)

class UnderlyingStreamAssetAttributeLimit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41803)
		else:
			StringField.__init__(self, 41803, data)

class NoUnderlyingDeliveryStreamCycles(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41804)
		else:
			IntField.__init__(self, 41804, data)

class UnderlyingDeliveryStreamCycleDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41805)
		else:
			StringField.__init__(self, 41805, data)

class EncodedUnderlyingDeliveryStreamCycleDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41806)
		else:
			IntField.__init__(self, 41806, data)

class EncodedUnderlyingDeliveryStreamCycleDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41807)
		else:
			StringField.__init__(self, 41807, data)

class NoUnderlyingDeliveryStreamCommoditySources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41808)
		else:
			IntField.__init__(self, 41808, data)

class UnderlyingDeliveryStreamCommoditySource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41809)
		else:
			StringField.__init__(self, 41809, data)

class UnderlyingExerciseDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41810)
		else:
			StringField.__init__(self, 41810, data)

class EncodedUnderlyingExerciseDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41811)
		else:
			IntField.__init__(self, 41811, data)

class EncodedUnderlyingExerciseDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41812)
		else:
			StringField.__init__(self, 41812, data)

class UnderlyingAutomaticExerciseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41813)
		else:
			BoolField.__init__(self, 41813, data)

class UnderlyingAutomaticExerciseThresholdRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41814)
		else:
			DoubleField.__init__(self, 41814, data)

class UnderlyingExerciseConfirmationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41815)
		else:
			IntField.__init__(self, 41815, data)

class UnderlyingManualNoticeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41816)
		else:
			StringField.__init__(self, 41816, data)

class UnderlyingFallbackExerciseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41817)
		else:
			BoolField.__init__(self, 41817, data)

class UnderlyingLimitedRightToConfirmIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41818)
		else:
			BoolField.__init__(self, 41818, data)

class UnderlyingExerciseSplitTicketIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41819)
		else:
			BoolField.__init__(self, 41819, data)

class NoUnderlyingOptionExerciseBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41820)
		else:
			IntField.__init__(self, 41820, data)

class UnderlyingOptionExerciseBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41821)
		else:
			StringField.__init__(self, 41821, data)

class UnderlyingOptionExerciseBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41822)
		else:
			IntField.__init__(self, 41822, data)

class UnderlyingOptionExerciseEarliestDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41823)
		else:
			IntField.__init__(self, 41823, data)

class UnderlyingOptionExerciseEarliestDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41824)
		else:
			IntField.__init__(self, 41824, data)

class UnderlyingOptionExerciseEarliestDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41825)
		else:
			StringField.__init__(self, 41825, data)

class UnderlyingOptionExerciseFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41826)
		else:
			IntField.__init__(self, 41826, data)

class UnderlyingOptionExerciseFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41827)
		else:
			StringField.__init__(self, 41827, data)

class UnderlyingOptionExerciseStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41828)
		else:
			StringField.__init__(self, 41828, data)

class UnderlyingOptionExerciseStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41829)
		else:
			IntField.__init__(self, 41829, data)

class UnderlyingOptionExerciseStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41830)
		else:
			IntField.__init__(self, 41830, data)

class UnderlyingOptionExerciseStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41831)
		else:
			StringField.__init__(self, 41831, data)

class UnderlyingOptionExerciseStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41832)
		else:
			IntField.__init__(self, 41832, data)

class UnderlyingOptionExerciseStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41833)
		else:
			StringField.__init__(self, 41833, data)

class UnderlyingOptionExerciseSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41834)
		else:
			IntField.__init__(self, 41834, data)

class UnderlyingOptionExerciseNominationDeadline(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41835)
		else:
			StringField.__init__(self, 41835, data)

class UnderlyingOptionExerciseFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41836)
		else:
			StringField.__init__(self, 41836, data)

class UnderlyingOptionExerciseLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41837)
		else:
			StringField.__init__(self, 41837, data)

class UnderlyingOptionExerciseEarliestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41838)
		else:
			StringField.__init__(self, 41838, data)

class UnderlyingOptionExerciseLatestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41839)
		else:
			StringField.__init__(self, 41839, data)

class UnderlyingOptionExerciseTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41840)
		else:
			StringField.__init__(self, 41840, data)

class NoUnderlyingOptionExerciseDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41841)
		else:
			IntField.__init__(self, 41841, data)

class UnderlyingOptionExerciseDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41842)
		else:
			StringField.__init__(self, 41842, data)

class UnderlyingOptionExerciseDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41843)
		else:
			IntField.__init__(self, 41843, data)

class NoUnderlyingOptionExerciseExpirationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41844)
		else:
			IntField.__init__(self, 41844, data)

class UnderlyingOptionExerciseExpirationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41845)
		else:
			StringField.__init__(self, 41845, data)

class UnderlyingOptionExerciseExpirationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41846)
		else:
			IntField.__init__(self, 41846, data)

class UnderlyingOptionExerciseExpirationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41847)
		else:
			IntField.__init__(self, 41847, data)

class UnderlyingOptionExerciseExpirationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41848)
		else:
			IntField.__init__(self, 41848, data)

class UnderlyingOptionExerciseExpirationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41849)
		else:
			StringField.__init__(self, 41849, data)

class UnderlyingOptionExerciseExpirationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41850)
		else:
			IntField.__init__(self, 41850, data)

class UnderlyingOptionExerciseExpirationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41851)
		else:
			StringField.__init__(self, 41851, data)

class UnderlyingOptionExerciseExpirationRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41852)
		else:
			StringField.__init__(self, 41852, data)

class UnderlyingOptionExerciseExpirationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41853)
		else:
			IntField.__init__(self, 41853, data)

class UnderlyingOptionExerciseExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41854)
		else:
			StringField.__init__(self, 41854, data)

class UnderlyingOptionExerciseExpirationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41855)
		else:
			StringField.__init__(self, 41855, data)

class NoUnderlyingOptionExerciseExpirationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41856)
		else:
			IntField.__init__(self, 41856, data)

class UnderlyingOptionExerciseExpirationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41857)
		else:
			StringField.__init__(self, 41857, data)

class UnderlyingOptionExerciseExpirationDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41858)
		else:
			IntField.__init__(self, 41858, data)

class UnderlyingSettlRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2284)
		else:
			StringField.__init__(self, 2284, data)

class UnderlyingSettlRateIndexLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2285)
		else:
			StringField.__init__(self, 2285, data)

class UnderlyingOptionExpirationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2286)
		else:
			StringField.__init__(self, 2286, data)

class EncodedUnderlyingOptionExpirationDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2287)
		else:
			IntField.__init__(self, 2287, data)

class EncodedUnderlyingOptionExpirationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2288)
		else:
			StringField.__init__(self, 2288, data)

class UnderlyingSwapSubClass(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2289)
		else:
			StringField.__init__(self, 2289, data)

class UnderlyingStrikeUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2290)
		else:
			StringField.__init__(self, 2290, data)

class UnderlyingStrikeIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2291)
		else:
			StringField.__init__(self, 2291, data)

class UnderlyingStrikeIndexSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2292)
		else:
			DoubleField.__init__(self, 2292, data)

class UnderlyingValuationSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2293)
		else:
			StringField.__init__(self, 2293, data)

class UnderlyingValuationReferenceModel(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2294)
		else:
			StringField.__init__(self, 2294, data)

class UnderlyingStrategyType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2295)
		else:
			StringField.__init__(self, 2295, data)

class UnderlyingCommonPricingIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2296)
		else:
			BoolField.__init__(self, 2296, data)

class UnderlyingSettlDisruptionProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2297)
		else:
			IntField.__init__(self, 2297, data)

class UnderlyingInstrumentRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2298)
		else:
			CharField.__init__(self, 2298, data)

class UnderlyingInstrumentRoundingPrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2299)
		else:
			IntField.__init__(self, 2299, data)

class UnderlyingMarketDisruptionProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41859)
		else:
			IntField.__init__(self, 41859, data)

class UnderlyingMarketDisruptionFallbackProvision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41860)
		else:
			IntField.__init__(self, 41860, data)

class UnderlyingMarketDisruptionMaximumDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41861)
		else:
			IntField.__init__(self, 41861, data)

class UnderlyingMarketDisruptionMaterialityPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41862)
		else:
			DoubleField.__init__(self, 41862, data)

class UnderlyingMarketDisruptionMinimumFuturesContracts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41863)
		else:
			IntField.__init__(self, 41863, data)

class NoUnderlyingMarketDisruptionEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41864)
		else:
			IntField.__init__(self, 41864, data)

class UnderlyingMarketDisruptionEvent(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41865)
		else:
			StringField.__init__(self, 41865, data)

class NoUnderlyingMarketDisruptionFallbacks(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41866)
		else:
			IntField.__init__(self, 41866, data)

class UnderlyingMarketDisruptionFallbackType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41867)
		else:
			StringField.__init__(self, 41867, data)

class NoUnderlyingMarketDisruptionFallbackReferencePrices(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41868)
		else:
			IntField.__init__(self, 41868, data)

class UnderlyingMarketDisruptionFallbackUnderlierType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41869)
		else:
			IntField.__init__(self, 41869, data)

class UnderlyingMarketDisruptionFallbackUnderlierSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41870)
		else:
			StringField.__init__(self, 41870, data)

class UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41871)
		else:
			StringField.__init__(self, 41871, data)

class UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41872)
		else:
			StringField.__init__(self, 41872, data)

class EncodedUnderlyingMarketDisruptionFallbackUnderlierSecDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41873)
		else:
			IntField.__init__(self, 41873, data)

class EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41874)
		else:
			StringField.__init__(self, 41874, data)

class UnderlyingMarketDisruptionFallbackOpenUnits(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41875)
		else:
			DoubleField.__init__(self, 41875, data)

class UnderlyingMarketDisruptionFallbackBasketCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41876)
		else:
			StringField.__init__(self, 41876, data)

class UnderlyingMarketDisruptionFallbackBasketDivisor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41877)
		else:
			DoubleField.__init__(self, 41877, data)

class NoUnderlyingPaymentScheduleFixingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41878)
		else:
			IntField.__init__(self, 41878, data)

class UnderlyingPaymentScheduleFixingDayOfWeek(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41879)
		else:
			IntField.__init__(self, 41879, data)

class UnderlyingPaymentScheduleFixingDayNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41880)
		else:
			IntField.__init__(self, 41880, data)

class UnderlyingPaymentScheduleXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41881)
		else:
			StringField.__init__(self, 41881, data)

class UnderlyingPaymentScheduleXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41882)
		else:
			StringField.__init__(self, 41882, data)

class UnderlyingPaymentScheduleRateCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41883)
		else:
			StringField.__init__(self, 41883, data)

class UnderlyingPaymentScheduleRateUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41884)
		else:
			StringField.__init__(self, 41884, data)

class UnderlyingPaymentScheduleRateConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41885)
		else:
			DoubleField.__init__(self, 41885, data)

class UnderlyingPaymentScheduleRateSpreadType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41886)
		else:
			IntField.__init__(self, 41886, data)

class UnderlyingPaymentScheduleSettlPeriodPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41887)
		else:
			DoubleField.__init__(self, 41887, data)

class UnderlyingPaymentScheduleSettlPeriodPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41888)
		else:
			StringField.__init__(self, 41888, data)

class UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41889)
		else:
			StringField.__init__(self, 41889, data)

class UnderlyingPaymentScheduleStepUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41890)
		else:
			StringField.__init__(self, 41890, data)

class UnderlyingPaymentScheduleFixingDayDistribution(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41891)
		else:
			IntField.__init__(self, 41891, data)

class UnderlyingPaymentScheduleFixingDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41892)
		else:
			IntField.__init__(self, 41892, data)

class UnderlyingPaymentScheduleFixingLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41893)
		else:
			IntField.__init__(self, 41893, data)

class UnderlyingPaymentScheduleFixingLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41894)
		else:
			StringField.__init__(self, 41894, data)

class UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41895)
		else:
			IntField.__init__(self, 41895, data)

class UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41896)
		else:
			StringField.__init__(self, 41896, data)

class UnderlyingPaymentStreamFlatRateIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41897)
		else:
			BoolField.__init__(self, 41897, data)

class UnderlyingPaymentStreamFlatRateAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41898)
		else:
			DoubleField.__init__(self, 41898, data)

class UnderlyingPaymentStreamFlatRateCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41899)
		else:
			StringField.__init__(self, 41899, data)

class UnderlyingPaymentStreamMaximumPaymentAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41900)
		else:
			DoubleField.__init__(self, 41900, data)

class UnderlyingPaymentStreamMaximumPaymentCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41901)
		else:
			StringField.__init__(self, 41901, data)

class UnderlyingPaymentStreamMaximumTransactionAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41902)
		else:
			DoubleField.__init__(self, 41902, data)

class UnderlyingPaymentStreamMaximumTransactionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41903)
		else:
			StringField.__init__(self, 41903, data)

class UnderlyingPaymentStreamFixedAmountUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41904)
		else:
			StringField.__init__(self, 41904, data)

class UnderlyingPaymentStreamTotalFixedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41905)
		else:
			DoubleField.__init__(self, 41905, data)

class UnderlyingPaymentStreamWorldScaleRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41906)
		else:
			DoubleField.__init__(self, 41906, data)

class UnderlyingPaymentStreamContractPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41907)
		else:
			DoubleField.__init__(self, 41907, data)

class UnderlyingPaymentStreamContractPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41908)
		else:
			StringField.__init__(self, 41908, data)

class NoUnderlyingPaymentStreamPricingBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41909)
		else:
			IntField.__init__(self, 41909, data)

class UnderlyingPaymentStreamPricingBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41910)
		else:
			StringField.__init__(self, 41910, data)

class UnderlyingPaymentStreamRateIndex2CurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41911)
		else:
			StringField.__init__(self, 41911, data)

class UnderlyingPaymentStreamRateIndex2CurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41912)
		else:
			IntField.__init__(self, 41912, data)

class UnderlyingPaymentStreamRateIndexLocation(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41913)
		else:
			StringField.__init__(self, 41913, data)

class UnderlyingPaymentStreamRateIndexLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41914)
		else:
			DoubleField.__init__(self, 41914, data)

class UnderlyingPaymentStreamRateIndexUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41915)
		else:
			StringField.__init__(self, 41915, data)

class UnderlyingPaymentStreamSettlLevel(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41916)
		else:
			IntField.__init__(self, 41916, data)

class UnderlyingPaymentStreamReferenceLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41917)
		else:
			DoubleField.__init__(self, 41917, data)

class UnderlyingPaymentStreamReferenceLevelUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41918)
		else:
			StringField.__init__(self, 41918, data)

class UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41919)
		else:
			BoolField.__init__(self, 41919, data)

class UnderlyingPaymentStreamRateSpreadCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41920)
		else:
			StringField.__init__(self, 41920, data)

class UnderlyingPaymentStreamRateSpreadUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41921)
		else:
			StringField.__init__(self, 41921, data)

class UnderlyingPaymentStreamRateConversionFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41922)
		else:
			DoubleField.__init__(self, 41922, data)

class UnderlyingPaymentStreamRateSpreadType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41923)
		else:
			IntField.__init__(self, 41923, data)

class UnderlyingPaymentStreamLastResetRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41924)
		else:
			DoubleField.__init__(self, 41924, data)

class UnderlyingPaymentStreamFinalRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 41925)
		else:
			DoubleField.__init__(self, 41925, data)

class UnderlyingPaymentStreamCalculationLagPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41926)
		else:
			IntField.__init__(self, 41926, data)

class UnderlyingPaymentStreamCalculationLagUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41927)
		else:
			StringField.__init__(self, 41927, data)

class UnderlyingPaymentStreamFirstObservationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41928)
		else:
			IntField.__init__(self, 41928, data)

class UnderlyingPaymentStreamFirstObservationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41929)
		else:
			StringField.__init__(self, 41929, data)

class UnderlyingPaymentStreamPricingDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41930)
		else:
			IntField.__init__(self, 41930, data)

class UnderlyingPaymentStreamPricingDayDistribution(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41931)
		else:
			IntField.__init__(self, 41931, data)

class UnderlyingPaymentStreamPricingDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41932)
		else:
			IntField.__init__(self, 41932, data)

class UnderlyingPaymentStreamPricingBusinessCalendar(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41933)
		else:
			StringField.__init__(self, 41933, data)

class UnderlyingPaymentStreamPricingBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41934)
		else:
			IntField.__init__(self, 41934, data)

class NoUnderlyingPaymentStreamPaymentDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41937)
		else:
			IntField.__init__(self, 41937, data)

class UnderlyingPaymentStreamPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41938)
		else:
			StringField.__init__(self, 41938, data)

class UnderlyingPaymentStreamPaymentDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41939)
		else:
			IntField.__init__(self, 41939, data)

class UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41940)
		else:
			BoolField.__init__(self, 41940, data)

class NoUnderlyingPaymentStreamPricingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41941)
		else:
			IntField.__init__(self, 41941, data)

class UnderlyingPaymentStreamPricingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41942)
		else:
			StringField.__init__(self, 41942, data)

class UnderlyingPaymentStreamPricingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41943)
		else:
			IntField.__init__(self, 41943, data)

class NoUnderlyingPaymentStreamPricingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41944)
		else:
			IntField.__init__(self, 41944, data)

class UnderlyingPaymentStreamPricingDayOfWeek(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41945)
		else:
			IntField.__init__(self, 41945, data)

class UnderlyingPaymentStreamPricingDayNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41946)
		else:
			IntField.__init__(self, 41946, data)

class NoUnderlyingPricingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41947)
		else:
			IntField.__init__(self, 41947, data)

class UnderlyingPricingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41948)
		else:
			StringField.__init__(self, 41948, data)

class UnderlyingPricingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41949)
		else:
			StringField.__init__(self, 41949, data)

class UnderlyingPricingDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41950)
		else:
			IntField.__init__(self, 41950, data)

class UnderlyingPricingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41951)
		else:
			StringField.__init__(self, 41951, data)

class UnderlyingPricingTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41952)
		else:
			StringField.__init__(self, 41952, data)

class UnderlyingPricingTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41953)
		else:
			StringField.__init__(self, 41953, data)

class NoUnderlyingStreamCalculationPeriodDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41954)
		else:
			IntField.__init__(self, 41954, data)

class UnderlyingStreamCalculationPeriodDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41955)
		else:
			StringField.__init__(self, 41955, data)

class UnderlyingStreamCalculationPeriodDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41956)
		else:
			IntField.__init__(self, 41956, data)

class UnderlyingStreamCalculationPeriodDatesXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41957)
		else:
			StringField.__init__(self, 41957, data)

class UnderlyingStreamCalculationPeriodDatesXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41958)
		else:
			StringField.__init__(self, 41958, data)

class UnderlyingStreamCalculationBalanceOfFirstPeriod(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 41959)
		else:
			BoolField.__init__(self, 41959, data)

class UnderlyingStreamCalculationCorrectionPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41960)
		else:
			IntField.__init__(self, 41960, data)

class UnderlyingStreamCalculationCorrectionUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41961)
		else:
			StringField.__init__(self, 41961, data)

class NoUnderlyingStreamCommoditySettlBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41962)
		else:
			IntField.__init__(self, 41962, data)

class UnderlyingStreamCommoditySettlBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41963)
		else:
			StringField.__init__(self, 41963, data)

class UnderlyingStreamCommodityBase(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41964)
		else:
			StringField.__init__(self, 41964, data)

class UnderlyingStreamCommodityType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41965)
		else:
			StringField.__init__(self, 41965, data)

class UnderlyingStreamCommoditySecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41966)
		else:
			StringField.__init__(self, 41966, data)

class UnderlyingStreamCommoditySecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41967)
		else:
			StringField.__init__(self, 41967, data)

class UnderlyingStreamCommodityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41968)
		else:
			StringField.__init__(self, 41968, data)

class EncodedUnderlyingStreamCommodityDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41969)
		else:
			IntField.__init__(self, 41969, data)

class EncodedUnderlyingStreamCommodityDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41970)
		else:
			StringField.__init__(self, 41970, data)

class UnderlyingStreamCommodityUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41971)
		else:
			StringField.__init__(self, 41971, data)

class UnderlyingStreamCommodityCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41972)
		else:
			StringField.__init__(self, 41972, data)

class UnderlyingStreamCommodityExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41973)
		else:
			StringField.__init__(self, 41973, data)

class UnderlyingStreamCommodityRateSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41974)
		else:
			IntField.__init__(self, 41974, data)

class UnderlyingStreamCommodityRateReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41975)
		else:
			StringField.__init__(self, 41975, data)

class UnderlyingStreamCommodityRateReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41976)
		else:
			StringField.__init__(self, 41976, data)

class UnderlyingStreamDataProvider(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41977)
		else:
			StringField.__init__(self, 41977, data)

class UnderlyingStreamCommodityPricingType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41978)
		else:
			StringField.__init__(self, 41978, data)

class UnderlyingStreamCommodityNearbySettlDayPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41979)
		else:
			IntField.__init__(self, 41979, data)

class UnderlyingStreamCommodityNearbySettlDayUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41980)
		else:
			StringField.__init__(self, 41980, data)

class UnderlyingStreamCommoditySettlDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41981)
		else:
			StringField.__init__(self, 41981, data)

class UnderlyingStreamCommoditySettlDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41982)
		else:
			IntField.__init__(self, 41982, data)

class UnderlyingStreamCommoditySettlDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41983)
		else:
			StringField.__init__(self, 41983, data)

class UnderlyingStreamCommoditySettlMonth(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41984)
		else:
			IntField.__init__(self, 41984, data)

class UnderlyingStreamCommoditySettlDateRollPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41985)
		else:
			IntField.__init__(self, 41985, data)

class UnderlyingStreamCommoditySettlDateRollUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41986)
		else:
			StringField.__init__(self, 41986, data)

class UnderlyingStreamCommoditySettlDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41987)
		else:
			IntField.__init__(self, 41987, data)

class UnderlyingStreamCommodityXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41988)
		else:
			StringField.__init__(self, 41988, data)

class UnderlyingStreamCommodityXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41989)
		else:
			StringField.__init__(self, 41989, data)

class NoUnderlyingStreamCommodityAltIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41990)
		else:
			IntField.__init__(self, 41990, data)

class UnderlyingStreamCommodityAltID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41991)
		else:
			StringField.__init__(self, 41991, data)

class UnderlyingStreamCommodityAltIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41992)
		else:
			StringField.__init__(self, 41992, data)

class NoUnderlyingStreamCommodityDataSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41993)
		else:
			IntField.__init__(self, 41993, data)

class UnderlyingStreamCommodityDataSourceID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41994)
		else:
			StringField.__init__(self, 41994, data)

class UnderlyingStreamCommodityDataSourceIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41995)
		else:
			IntField.__init__(self, 41995, data)

class NoUnderlyingStreamCommoditySettlDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41996)
		else:
			IntField.__init__(self, 41996, data)

class UnderlyingStreamCommoditySettlDay(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41997)
		else:
			IntField.__init__(self, 41997, data)

class UnderlyingStreamCommoditySettlTotalHours(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41998)
		else:
			IntField.__init__(self, 41998, data)

class NoUnderlyingStreamCommoditySettlTimes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41999)
		else:
			IntField.__init__(self, 41999, data)

class UnderlyingStreamCommoditySettlStart(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42000)
		else:
			StringField.__init__(self, 42000, data)

class UnderlyingStreamCommoditySettlEnd(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42001)
		else:
			StringField.__init__(self, 42001, data)

class UnderlyingStreamCommoditySettlTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41936)
		else:
			IntField.__init__(self, 41936, data)

class NoUnderlyingStreamCommoditySettlPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42002)
		else:
			IntField.__init__(self, 42002, data)

class UnderlyingStreamCommoditySettlCountry(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42003)
		else:
			StringField.__init__(self, 42003, data)

class UnderlyingStreamCommoditySettlTimeZone(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42004)
		else:
			StringField.__init__(self, 42004, data)

class UnderlyingStreamCommoditySettlFlowType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42005)
		else:
			IntField.__init__(self, 42005, data)

class UnderlyingStreamCommoditySettlPeriodNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42006)
		else:
			DoubleField.__init__(self, 42006, data)

class UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42007)
		else:
			StringField.__init__(self, 42007, data)

class UnderlyingStreamCommoditySettlPeriodFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42008)
		else:
			IntField.__init__(self, 42008, data)

class UnderlyingStreamCommoditySettlPeriodFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42009)
		else:
			StringField.__init__(self, 42009, data)

class UnderlyingStreamCommoditySettlPeriodPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42010)
		else:
			DoubleField.__init__(self, 42010, data)

class UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42011)
		else:
			StringField.__init__(self, 42011, data)

class UnderlyingStreamCommoditySettlPeriodPriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42012)
		else:
			StringField.__init__(self, 42012, data)

class UnderlyingStreamCommoditySettlHolidaysProcessingInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42013)
		else:
			IntField.__init__(self, 42013, data)

class UnderlyingStreamCommoditySettlPeriodXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42014)
		else:
			StringField.__init__(self, 42014, data)

class UnderlyingStreamCommoditySettlPeriodXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42015)
		else:
			StringField.__init__(self, 42015, data)

class UnderlyingStreamXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42016)
		else:
			StringField.__init__(self, 42016, data)

class UnderlyingStreamNotionalXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42018)
		else:
			StringField.__init__(self, 42018, data)

class UnderlyingStreamNotionalFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42019)
		else:
			IntField.__init__(self, 42019, data)

class UnderlyingStreamNotionalFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42020)
		else:
			StringField.__init__(self, 42020, data)

class UnderlyingStreamNotionalCommodityFrequency(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42021)
		else:
			IntField.__init__(self, 42021, data)

class UnderlyingStreamNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42022)
		else:
			StringField.__init__(self, 42022, data)

class UnderlyingStreamTotalNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42023)
		else:
			DoubleField.__init__(self, 42023, data)

class UnderlyingStreamTotalNotionalUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42024)
		else:
			StringField.__init__(self, 42024, data)

class AllocGrossTradeAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2300)
		else:
			DoubleField.__init__(self, 2300, data)

class RiskLimitReportStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2316)
		else:
			IntField.__init__(self, 2316, data)

class RiskLimitReportRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2317)
		else:
			IntField.__init__(self, 2317, data)

class RiskLimitCheckRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2318)
		else:
			StringField.__init__(self, 2318, data)

class RiskLimitCheckID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2319)
		else:
			StringField.__init__(self, 2319, data)

class RiskLimitCheckTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2320)
		else:
			IntField.__init__(self, 2320, data)

class RiskLimitCheckType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2321)
		else:
			IntField.__init__(self, 2321, data)

class RiskLimitCheckRequestRefID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2322)
		else:
			IntField.__init__(self, 2322, data)

class RiskLimitCheckRequestType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2323)
		else:
			IntField.__init__(self, 2323, data)

class RiskLimitCheckAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2324)
		else:
			DoubleField.__init__(self, 2324, data)

class RiskLimitCheckRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2325)
		else:
			IntField.__init__(self, 2325, data)

class RiskLimitCheckRequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2326)
		else:
			IntField.__init__(self, 2326, data)

class RiskLimitApprovedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2327)
		else:
			DoubleField.__init__(self, 2327, data)

class PartyActionRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2328)
		else:
			StringField.__init__(self, 2328, data)

class PartyActionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2329)
		else:
			IntField.__init__(self, 2329, data)

class ApplTestMessageIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2330)
		else:
			BoolField.__init__(self, 2330, data)

class PartyActionReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2331)
		else:
			StringField.__init__(self, 2331, data)

class PartyActionResponse(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2332)
		else:
			IntField.__init__(self, 2332, data)

class PartyActionRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2333)
		else:
			IntField.__init__(self, 2333, data)

class RefRiskLimitCheckID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2334)
		else:
			StringField.__init__(self, 2334, data)

class RefRiskLimitCheckIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2335)
		else:
			IntField.__init__(self, 2335, data)

class RiskLimitVelocityPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2336)
		else:
			IntField.__init__(self, 2336, data)

class RiskLimitVelocityUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2337)
		else:
			StringField.__init__(self, 2337, data)

class RequestingPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2338)
		else:
			IntField.__init__(self, 2338, data)

class RiskLimitCheckModelType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2339)
		else:
			IntField.__init__(self, 2339, data)

class RiskLimitCheckStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2343)
		else:
			IntField.__init__(self, 2343, data)

class SideRiskLimitCheckStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2344)
		else:
			IntField.__init__(self, 2344, data)

class NoEntitlementTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2345)
		else:
			IntField.__init__(self, 2345, data)

class LegMidPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2346)
		else:
			DoubleField.__init__(self, 2346, data)

class RegulatoryTransactionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2347)
		else:
			IntField.__init__(self, 2347, data)

class BatchID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 50000)
		else:
			StringField.__init__(self, 50000, data)

class BatchTotalMessages(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 50001)
		else:
			IntField.__init__(self, 50001, data)

class BatchProcessMode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 50002)
		else:
			IntField.__init__(self, 50002, data)

class CollateralPortfolioID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2350)
		else:
			StringField.__init__(self, 2350, data)

class DeliveryStreamDeliveryPointSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42192)
		else:
			IntField.__init__(self, 42192, data)

class DeliveryStreamDeliveryPointDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42193)
		else:
			StringField.__init__(self, 42193, data)

class TradingUnitPeriodMultiplier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2353)
		else:
			IntField.__init__(self, 2353, data)

class LegTradingUnitPeriodMultiplier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2354)
		else:
			IntField.__init__(self, 2354, data)

class LegDeliveryStreamDeliveryPointDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42195)
		else:
			StringField.__init__(self, 42195, data)

class LegDeliveryStreamDeliveryPointSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42194)
		else:
			IntField.__init__(self, 42194, data)

class LegTotalTradeQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2357)
		else:
			DoubleField.__init__(self, 2357, data)

class LegLastMultipliedQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2358)
		else:
			DoubleField.__init__(self, 2358, data)

class LegTotalGrossTradeAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2359)
		else:
			DoubleField.__init__(self, 2359, data)

class LegTotalTradeMultipliedQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2360)
		else:
			DoubleField.__init__(self, 2360, data)

class UnderlyingDeliveryStreamDeliveryPointDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42197)
		else:
			StringField.__init__(self, 42197, data)

class UnderlyingDeliveryStreamDeliveryPointSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42196)
		else:
			IntField.__init__(self, 42196, data)

class UnderlyingTradingUnitPeriodMultiplier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2363)
		else:
			IntField.__init__(self, 2363, data)

class PosReportAction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2364)
		else:
			IntField.__init__(self, 2364, data)

class SettlForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2365)
		else:
			DoubleField.__init__(self, 2365, data)

class SettlPriceFxRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2366)
		else:
			CharField.__init__(self, 2366, data)

class TotalTradeQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2367)
		else:
			DoubleField.__init__(self, 2367, data)

class LastMultipliedQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2368)
		else:
			DoubleField.__init__(self, 2368, data)

class TotalGrossTradeAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2369)
		else:
			DoubleField.__init__(self, 2369, data)

class TotalTradeMultipliedQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2370)
		else:
			DoubleField.__init__(self, 2370, data)

class EncodedTradeContinuationText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2371)
		else:
			StringField.__init__(self, 2371, data)

class EncodedTradeContinuationTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2372)
		else:
			IntField.__init__(self, 2372, data)

class IntraFirmTradeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2373)
		else:
			BoolField.__init__(self, 2373, data)

class TradeContinuationText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2374)
		else:
			StringField.__init__(self, 2374, data)

class TaxonomyType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2375)
		else:
			CharField.__init__(self, 2375, data)

class PartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2376)
		else:
			IntField.__init__(self, 2376, data)

class DerivativeInstrumentPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2377)
		else:
			IntField.__init__(self, 2377, data)

class InstrumentPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2378)
		else:
			IntField.__init__(self, 2378, data)

class LegInstrumentPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2379)
		else:
			IntField.__init__(self, 2379, data)

class LegProvisionPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2380)
		else:
			IntField.__init__(self, 2380, data)

class Nested2PartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2381)
		else:
			IntField.__init__(self, 2381, data)

class Nested3PartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2382)
		else:
			IntField.__init__(self, 2382, data)

class Nested4PartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2383)
		else:
			IntField.__init__(self, 2383, data)

class NestedPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2384)
		else:
			IntField.__init__(self, 2384, data)

class ProvisionPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2385)
		else:
			IntField.__init__(self, 2385, data)

class RequestedPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2386)
		else:
			IntField.__init__(self, 2386, data)

class RootPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2388)
		else:
			IntField.__init__(self, 2388, data)

class SettlPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2389)
		else:
			IntField.__init__(self, 2389, data)

class UnderlyingInstrumentPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2391)
		else:
			IntField.__init__(self, 2391, data)

class AllocRefRiskLimitCheckID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2392)
		else:
			StringField.__init__(self, 2392, data)

class AllocRefRiskLimitCheckIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2393)
		else:
			IntField.__init__(self, 2393, data)

class LimitUtilizationAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2394)
		else:
			DoubleField.__init__(self, 2394, data)

class LimitAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2395)
		else:
			DoubleField.__init__(self, 2395, data)

class LimitRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2396)
		else:
			IntField.__init__(self, 2396, data)

class RegulatoryTradeIDScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2397)
		else:
			IntField.__init__(self, 2397, data)

class SideRegulatoryTradeIDScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2398)
		else:
			IntField.__init__(self, 2398, data)

class AllocRegulatoryTradeIDScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2399)
		else:
			IntField.__init__(self, 2399, data)

class AllocRegulatoryLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2406)
		else:
			StringField.__init__(self, 2406, data)

class RegulatoryLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2411)
		else:
			StringField.__init__(self, 2411, data)

class SideRegulatoryLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2416)
		else:
			StringField.__init__(self, 2416, data)

class EffectiveBusinessDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2400)
		else:
			StringField.__init__(self, 2400, data)

class ListManualOrderIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2401)
		else:
			BoolField.__init__(self, 2401, data)

class EntitlementSubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2402)
		else:
			IntField.__init__(self, 2402, data)

class QuoteModelType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2403)
		else:
			IntField.__init__(self, 2403, data)

class ComplianceText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2404)
		else:
			StringField.__init__(self, 2404, data)

class EncodedComplianceTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2351)
		else:
			IntField.__init__(self, 2351, data)

class EncodedComplianceText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2352)
		else:
			StringField.__init__(self, 2352, data)

class ExecMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2405)
		else:
			IntField.__init__(self, 2405, data)

class PricePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2349)
		else:
			IntField.__init__(self, 2349, data)

class TradeContingency(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2387)
		else:
			IntField.__init__(self, 2387, data)

class ComplexEventSpotRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2407)
		else:
			DoubleField.__init__(self, 2407, data)

class ComplexEventForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2408)
		else:
			DoubleField.__init__(self, 2408, data)

class LegComplexEventSpotRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2409)
		else:
			DoubleField.__init__(self, 2409, data)

class LegComplexEventForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2410)
		else:
			DoubleField.__init__(self, 2410, data)

class RateSourceReferemcePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2412)
		else:
			StringField.__init__(self, 2412, data)

class RelatedToSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2413)
		else:
			StringField.__init__(self, 2413, data)

class RelatedToSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2414)
		else:
			StringField.__init__(self, 2414, data)

class RelatedToStreamXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2415)
		else:
			StringField.__init__(self, 2415, data)

class FirmTradeEventID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2418)
		else:
			StringField.__init__(self, 2418, data)

class UnderlyingComplexEventSpotRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2419)
		else:
			DoubleField.__init__(self, 2419, data)

class UnderlyingComplexEventForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2420)
		else:
			DoubleField.__init__(self, 2420, data)

class LegMarketDisruptionValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40223)
		else:
			StringField.__init__(self, 40223, data)

class LegMarketDisruptionFallbackValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40990)
		else:
			StringField.__init__(self, 40990, data)

class MarketDisruptionValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40991)
		else:
			StringField.__init__(self, 40991, data)

class MarketDisruptionFallbackValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 40992)
		else:
			StringField.__init__(self, 40992, data)

class PaymentSubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40993)
		else:
			IntField.__init__(self, 40993, data)

class PaymentLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41304)
		else:
			StringField.__init__(self, 41304, data)

class UnderlyingMarketDisruptionValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41338)
		else:
			StringField.__init__(self, 41338, data)

class UnderlyingMarketDisruptionFallbackValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41339)
		else:
			StringField.__init__(self, 41339, data)

class NoUnderlyingAdditionalTermBondRefs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41340)
		else:
			IntField.__init__(self, 41340, data)

class UnderlyingAdditionalTermBondSecurityID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41341)
		else:
			StringField.__init__(self, 41341, data)

class UnderlyingAdditionalTermBondSecurityIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41701)
		else:
			StringField.__init__(self, 41701, data)

class UnderlyingAdditionalTermBondDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41709)
		else:
			StringField.__init__(self, 41709, data)

class EncodedUnderlyingAdditionalTermBondDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 41710)
		else:
			IntField.__init__(self, 41710, data)

class EncodedUnderlyingAdditionalTermBondDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41711)
		else:
			StringField.__init__(self, 41711, data)

class UnderlyingAdditionalTermBondCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 41712)
		else:
			StringField.__init__(self, 41712, data)

class UnderlyingAdditionalTermBondIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42017)
		else:
			StringField.__init__(self, 42017, data)

class EncodedUnderlyingAdditionalTermBondIssuerLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42025)
		else:
			IntField.__init__(self, 42025, data)

class EncodedUnderlyingAdditionalTermBondIssuer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42026)
		else:
			StringField.__init__(self, 42026, data)

class UnderlyingAdditionalTermBondSeniority(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42027)
		else:
			StringField.__init__(self, 42027, data)

class UnderlyingAdditionalTermBondCouponType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42028)
		else:
			IntField.__init__(self, 42028, data)

class UnderlyingAdditionalTermBondCouponRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42029)
		else:
			DoubleField.__init__(self, 42029, data)

class UnderlyingAdditionalTermBondMaturityDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42030)
		else:
			StringField.__init__(self, 42030, data)

class UnderlyingAdditionalTermBondParValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42031)
		else:
			DoubleField.__init__(self, 42031, data)

class UnderlyingAdditionalTermBondCurrentTotalIssuedAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42032)
		else:
			DoubleField.__init__(self, 42032, data)

class UnderlyingAdditionalTermBondCouponFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42033)
		else:
			IntField.__init__(self, 42033, data)

class UnderlyingAdditionalTermBondCouponFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42034)
		else:
			StringField.__init__(self, 42034, data)

class UnderlyingAdditionalTermBondDayCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42035)
		else:
			IntField.__init__(self, 42035, data)

class NoUnderlyingAdditionalTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42036)
		else:
			IntField.__init__(self, 42036, data)

class UnderlyingAdditionalTermConditionPrecedentBondIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42037)
		else:
			BoolField.__init__(self, 42037, data)

class UnderlyingAdditionalTermDiscrepancyClauseIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42038)
		else:
			BoolField.__init__(self, 42038, data)

class NoUnderlyingCashSettlDealers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42039)
		else:
			IntField.__init__(self, 42039, data)

class UnderlyingCashSettlDealer(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42040)
		else:
			StringField.__init__(self, 42040, data)

class NoUnderlyingCashSettlTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42041)
		else:
			IntField.__init__(self, 42041, data)

class UnderlyingCashSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42042)
		else:
			StringField.__init__(self, 42042, data)

class UnderlyingCashSettlValuationFirstBusinessDayOffset(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42043)
		else:
			IntField.__init__(self, 42043, data)

class UnderlyingCashSettlValuationSubsequentBusinessDaysOffset(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42044)
		else:
			IntField.__init__(self, 42044, data)

class UnderlyingCashSettlNumOfValuationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42045)
		else:
			IntField.__init__(self, 42045, data)

class UnderlyingCashSettlValuationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42046)
		else:
			StringField.__init__(self, 42046, data)

class UnderlyingCashSettlBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42047)
		else:
			StringField.__init__(self, 42047, data)

class UnderlyingCashSettlQuoteMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42048)
		else:
			IntField.__init__(self, 42048, data)

class UnderlyingCashSettlQuoteAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42049)
		else:
			DoubleField.__init__(self, 42049, data)

class UnderlyingCashSettlQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42050)
		else:
			StringField.__init__(self, 42050, data)

class UnderlyingCashSettlMinimumQuoteAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42051)
		else:
			DoubleField.__init__(self, 42051, data)

class UnderlyingCashSettlMinimumQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42052)
		else:
			StringField.__init__(self, 42052, data)

class UnderlyingCashSettlBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42053)
		else:
			IntField.__init__(self, 42053, data)

class UnderlyingCashSettlAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42054)
		else:
			DoubleField.__init__(self, 42054, data)

class UnderlyingCashSettlRecoveryFactor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42055)
		else:
			DoubleField.__init__(self, 42055, data)

class UnderlyingCashSettlFixedTermIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42056)
		else:
			BoolField.__init__(self, 42056, data)

class UnderlyingCashSettlAccruedInterestIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42057)
		else:
			BoolField.__init__(self, 42057, data)

class UnderlyingCashSettlValuationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42058)
		else:
			IntField.__init__(self, 42058, data)

class UnderlyingCashSettlTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42059)
		else:
			StringField.__init__(self, 42059, data)

class NoUnderlyingPhysicalSettlTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42060)
		else:
			IntField.__init__(self, 42060, data)

class UnderlyingPhysicalSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42061)
		else:
			StringField.__init__(self, 42061, data)

class UnderlyingPhysicalSettlBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42062)
		else:
			IntField.__init__(self, 42062, data)

class UnderlyingPhysicalSettlMaximumBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42063)
		else:
			IntField.__init__(self, 42063, data)

class UnderlyingPhysicalSettlTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42064)
		else:
			StringField.__init__(self, 42064, data)

class NoUnderlyingPhysicalSettlDeliverableObligations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42065)
		else:
			IntField.__init__(self, 42065, data)

class UnderlyingPhysicalSettlDeliverableObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42066)
		else:
			StringField.__init__(self, 42066, data)

class UnderlyingPhysicalSettlDeliverableObligationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42067)
		else:
			StringField.__init__(self, 42067, data)

class NoUnderlyingProtectionTerms(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42068)
		else:
			IntField.__init__(self, 42068, data)

class UnderlyingProtectionTermNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42069)
		else:
			DoubleField.__init__(self, 42069, data)

class UnderlyingProtectionTermCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42070)
		else:
			StringField.__init__(self, 42070, data)

class UnderlyingProtectionTermSellerNotifies(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42071)
		else:
			BoolField.__init__(self, 42071, data)

class UnderlyingProtectionTermBuyerNotifies(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42072)
		else:
			BoolField.__init__(self, 42072, data)

class UnderlyingProtectionTermEventBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42073)
		else:
			StringField.__init__(self, 42073, data)

class UnderlyingProtectionTermStandardSources(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42074)
		else:
			BoolField.__init__(self, 42074, data)

class UnderlyingProtectionTermEventMinimumSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42075)
		else:
			IntField.__init__(self, 42075, data)

class UnderlyingProtectionTermXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42076)
		else:
			StringField.__init__(self, 42076, data)

class NoUnderlyingProtectionTermEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42077)
		else:
			IntField.__init__(self, 42077, data)

class UnderlyingProtectionTermEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42078)
		else:
			StringField.__init__(self, 42078, data)

class UnderlyingProtectionTermEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42079)
		else:
			StringField.__init__(self, 42079, data)

class UnderlyingProtectionTermEventCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42080)
		else:
			StringField.__init__(self, 42080, data)

class UnderlyingProtectionTermEventPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42081)
		else:
			IntField.__init__(self, 42081, data)

class UnderlyingProtectionTermEventUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42082)
		else:
			StringField.__init__(self, 42082, data)

class UnderlyingProtectionTermEventDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42083)
		else:
			IntField.__init__(self, 42083, data)

class UnderlyingProtectionTermEventRateSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42084)
		else:
			StringField.__init__(self, 42084, data)

class NoUnderlyingProtectionTermEventQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42085)
		else:
			IntField.__init__(self, 42085, data)

class UnderlyingProtectionTermEventQualifier(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42086)
		else:
			CharField.__init__(self, 42086, data)

class NoUnderlyingProtectionTermObligations(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42087)
		else:
			IntField.__init__(self, 42087, data)

class UnderlyingProtectionTermObligationType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42088)
		else:
			StringField.__init__(self, 42088, data)

class UnderlyingProtectionTermObligationValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42089)
		else:
			StringField.__init__(self, 42089, data)

class NoUnderlyingProtectionTermEventNewsSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42090)
		else:
			IntField.__init__(self, 42090, data)

class UnderlyingProtectionTermEventNewsSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42091)
		else:
			StringField.__init__(self, 42091, data)

class UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42092)
		else:
			IntField.__init__(self, 42092, data)

class UnderlyingProvisionCashSettlPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42093)
		else:
			IntField.__init__(self, 42093, data)

class UnderlyingProvisionCashSettlPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42094)
		else:
			IntField.__init__(self, 42094, data)

class UnderlyingProvisionCashSettlPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42095)
		else:
			StringField.__init__(self, 42095, data)

class UnderlyingProvisionCashSettlPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42096)
		else:
			IntField.__init__(self, 42096, data)

class UnderlyingProvisionCashSettlPaymentDateRangeFirst(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42097)
		else:
			StringField.__init__(self, 42097, data)

class UnderlyingProvisionCashSettlPaymentDateRangeLast(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42098)
		else:
			StringField.__init__(self, 42098, data)

class NoUnderlyingProvisionCashSettlPaymentDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42099)
		else:
			IntField.__init__(self, 42099, data)

class UnderlyingProvisionCashSettlPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42100)
		else:
			StringField.__init__(self, 42100, data)

class UnderlyingProvisionCashSettlPaymentDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42101)
		else:
			IntField.__init__(self, 42101, data)

class UnderlyingProvisionCashSettlQuoteSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42102)
		else:
			IntField.__init__(self, 42102, data)

class UnderlyingProvisionCashSettlQuoteReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42103)
		else:
			StringField.__init__(self, 42103, data)

class UnderlyingProvisionCashSettlValueTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42104)
		else:
			StringField.__init__(self, 42104, data)

class UnderlyingProvisionCashSettlValueTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42105)
		else:
			StringField.__init__(self, 42105, data)

class UnderlyingProvisionCashSettlValueDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42106)
		else:
			IntField.__init__(self, 42106, data)

class UnderlyingProvisionCashSettlValueDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42107)
		else:
			IntField.__init__(self, 42107, data)

class UnderlyingProvisionCashSettlValueDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42108)
		else:
			IntField.__init__(self, 42108, data)

class UnderlyingProvisionCashSettlValueDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42109)
		else:
			StringField.__init__(self, 42109, data)

class UnderlyingProvisionCashSettlValueDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42110)
		else:
			IntField.__init__(self, 42110, data)

class UnderlyingProvisionCashSettlValueDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42111)
		else:
			StringField.__init__(self, 42111, data)

class NoUnderlyingProvisionOptionExerciseFixedDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42112)
		else:
			IntField.__init__(self, 42112, data)

class UnderlyingProvisionOptionExerciseFixedDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42113)
		else:
			StringField.__init__(self, 42113, data)

class UnderlyingProvisionOptionExerciseFixedDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42114)
		else:
			IntField.__init__(self, 42114, data)

class UnderlyingProvisionOptionExerciseBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42115)
		else:
			IntField.__init__(self, 42115, data)

class UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42116)
		else:
			IntField.__init__(self, 42116, data)

class UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42117)
		else:
			StringField.__init__(self, 42117, data)

class UnderlyingProvisionOptionExerciseFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42118)
		else:
			IntField.__init__(self, 42118, data)

class UnderlyingProvisionOptionExerciseFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42119)
		else:
			StringField.__init__(self, 42119, data)

class UnderlyingProvisionOptionExerciseStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42120)
		else:
			StringField.__init__(self, 42120, data)

class UnderlyingProvisionOptionExerciseStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42121)
		else:
			IntField.__init__(self, 42121, data)

class UnderlyingProvisionOptionExerciseStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42122)
		else:
			IntField.__init__(self, 42122, data)

class UnderlyingProvisionOptionExerciseStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42123)
		else:
			StringField.__init__(self, 42123, data)

class UnderlyingProvisionOptionExerciseStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42124)
		else:
			IntField.__init__(self, 42124, data)

class UnderlyingProvisionOptionExerciseStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42125)
		else:
			StringField.__init__(self, 42125, data)

class UnderlyingProvisionOptionExercisePeriodSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42126)
		else:
			IntField.__init__(self, 42126, data)

class UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42127)
		else:
			StringField.__init__(self, 42127, data)

class UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42128)
		else:
			StringField.__init__(self, 42128, data)

class UnderlyingProvisionOptionExerciseEarliestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42129)
		else:
			StringField.__init__(self, 42129, data)

class UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42130)
		else:
			StringField.__init__(self, 42130, data)

class UnderlyingProvisionOptionExerciseLatestTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42131)
		else:
			StringField.__init__(self, 42131, data)

class UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42132)
		else:
			StringField.__init__(self, 42132, data)

class UnderlyingProvisionOptionExpirationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42133)
		else:
			StringField.__init__(self, 42133, data)

class UnderlyingProvisionOptionExpirationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42134)
		else:
			IntField.__init__(self, 42134, data)

class UnderlyingProvisionOptionExpirationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42135)
		else:
			IntField.__init__(self, 42135, data)

class UnderlyingProvisionOptionExpirationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42136)
		else:
			IntField.__init__(self, 42136, data)

class UnderlyingProvisionOptionExpirationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42137)
		else:
			StringField.__init__(self, 42137, data)

class UnderlyingProvisionOptionExpirationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42138)
		else:
			IntField.__init__(self, 42138, data)

class UnderlyingProvisionOptionExpirationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42139)
		else:
			StringField.__init__(self, 42139, data)

class UnderlyingProvisionOptionExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42140)
		else:
			StringField.__init__(self, 42140, data)

class UnderlyingProvisionOptionExpirationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42141)
		else:
			StringField.__init__(self, 42141, data)

class UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42142)
		else:
			StringField.__init__(self, 42142, data)

class UnderlyingProvisionOptionRelevantUnderlyingDateBizDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42143)
		else:
			IntField.__init__(self, 42143, data)

class UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42144)
		else:
			IntField.__init__(self, 42144, data)

class UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42145)
		else:
			IntField.__init__(self, 42145, data)

class UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42146)
		else:
			StringField.__init__(self, 42146, data)

class UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42147)
		else:
			IntField.__init__(self, 42147, data)

class UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42148)
		else:
			StringField.__init__(self, 42148, data)

class NoUnderlyingProvisions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42149)
		else:
			IntField.__init__(self, 42149, data)

class UnderlyingProvisionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42150)
		else:
			IntField.__init__(self, 42150, data)

class UnderlyingProvisionDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42151)
		else:
			StringField.__init__(self, 42151, data)

class UnderlyingProvisionDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42152)
		else:
			IntField.__init__(self, 42152, data)

class UnderlyingProvisionDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42153)
		else:
			StringField.__init__(self, 42153, data)

class UnderlyingProvisionDateTenorPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42154)
		else:
			IntField.__init__(self, 42154, data)

class UnderlyingProvisionDateTenorUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42155)
		else:
			StringField.__init__(self, 42155, data)

class UnderlyingProvisionCalculationAgent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42156)
		else:
			IntField.__init__(self, 42156, data)

class UnderlyingProvisionOptionSinglePartyBuyerSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42157)
		else:
			IntField.__init__(self, 42157, data)

class UnderlyingProvisionOptionSinglePartySellerSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42158)
		else:
			IntField.__init__(self, 42158, data)

class UnderlyingProvisionOptionExerciseStyle(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42159)
		else:
			IntField.__init__(self, 42159, data)

class UnderlyingProvisionOptionExerciseMultipleNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42160)
		else:
			DoubleField.__init__(self, 42160, data)

class UnderlyingProvisionOptionExerciseMinimumNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42161)
		else:
			DoubleField.__init__(self, 42161, data)

class UnderlyingProvisionOptionExerciseMaximumNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42162)
		else:
			DoubleField.__init__(self, 42162, data)

class UnderlyingProvisionOptionMinimumNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42163)
		else:
			IntField.__init__(self, 42163, data)

class UnderlyingProvisionOptionMaximumNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42164)
		else:
			IntField.__init__(self, 42164, data)

class UnderlyingProvisionOptionExerciseConfirmation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42165)
		else:
			BoolField.__init__(self, 42165, data)

class UnderlyingProvisionCashSettlMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42166)
		else:
			IntField.__init__(self, 42166, data)

class UnderlyingProvisionCashSettlCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42167)
		else:
			StringField.__init__(self, 42167, data)

class UnderlyingProvisionCashSettlCurrency2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42168)
		else:
			StringField.__init__(self, 42168, data)

class UnderlyingProvisionCashSettlQuoteType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42169)
		else:
			IntField.__init__(self, 42169, data)

class UnderlyingProvisionText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42170)
		else:
			StringField.__init__(self, 42170, data)

class EncodedUnderlyingProvisionTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42171)
		else:
			IntField.__init__(self, 42171, data)

class EncodedUnderlyingProvisionText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42172)
		else:
			StringField.__init__(self, 42172, data)

class NoUnderlyingProvisionPartyIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42173)
		else:
			IntField.__init__(self, 42173, data)

class UnderlyingProvisionPartyID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42174)
		else:
			StringField.__init__(self, 42174, data)

class UnderlyingProvisionPartyIDSource(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42175)
		else:
			CharField.__init__(self, 42175, data)

class UnderlyingProvisionPartyRole(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42176)
		else:
			IntField.__init__(self, 42176, data)

class UnderlyingProvisionPartyRoleQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 40918)
		else:
			IntField.__init__(self, 40918, data)

class NoUnderlyingProvisionPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42177)
		else:
			IntField.__init__(self, 42177, data)

class UnderlyingProvisionPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42178)
		else:
			StringField.__init__(self, 42178, data)

class UnderlyingProvisionPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42179)
		else:
			IntField.__init__(self, 42179, data)

class NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42180)
		else:
			IntField.__init__(self, 42180, data)

class UnderlyingProvisionCashSettlPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42181)
		else:
			StringField.__init__(self, 42181, data)

class NoUnderlyingProvisionCashSettlValueDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42182)
		else:
			IntField.__init__(self, 42182, data)

class UnderlyingProvisionCashSettlValueDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42183)
		else:
			StringField.__init__(self, 42183, data)

class NoUnderlyingProvisionOptionExerciseBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42184)
		else:
			IntField.__init__(self, 42184, data)

class UnderlyingProvisionOptionExerciseBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42185)
		else:
			StringField.__init__(self, 42185, data)

class NoUnderlyingProvisionOptionExpirationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42186)
		else:
			IntField.__init__(self, 42186, data)

class UnderlyingProvisionOptionExpirationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42187)
		else:
			StringField.__init__(self, 42187, data)

class NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42188)
		else:
			IntField.__init__(self, 42188, data)

class UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42189)
		else:
			StringField.__init__(self, 42189, data)

class NoUnderlyingProvisionDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42190)
		else:
			IntField.__init__(self, 42190, data)

class UnderlyingProvisionDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42191)
		else:
			StringField.__init__(self, 42191, data)

class FillRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2421)
		else:
			StringField.__init__(self, 2421, data)

class OrderRequestID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2422)
		else:
			IntField.__init__(self, 2422, data)

class MassOrderRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2423)
		else:
			StringField.__init__(self, 2423, data)

class MassOrderReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2424)
		else:
			StringField.__init__(self, 2424, data)

class MassOrderRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2425)
		else:
			IntField.__init__(self, 2425, data)

class MassOrderRequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2426)
		else:
			IntField.__init__(self, 2426, data)

class OrderResponseLevel(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2427)
		else:
			IntField.__init__(self, 2427, data)

class NoOrderEntries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2428)
		else:
			IntField.__init__(self, 2428, data)

class OrderEntryAction(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2429)
		else:
			CharField.__init__(self, 2429, data)

class OrderEntryID(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2430)
		else:
			IntField.__init__(self, 2430, data)

class ExecTypeReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2431)
		else:
			IntField.__init__(self, 2431, data)

class TotNoOrderEntries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2432)
		else:
			IntField.__init__(self, 2432, data)

class NoTargetPartySubIDs(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2433)
		else:
			IntField.__init__(self, 2433, data)

class TargetPartySubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2434)
		else:
			StringField.__init__(self, 2434, data)

class TargetPartySubIDType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2435)
		else:
			IntField.__init__(self, 2435, data)

class TransferInstructionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2436)
		else:
			StringField.__init__(self, 2436, data)

class TransferID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2437)
		else:
			StringField.__init__(self, 2437, data)

class TransferReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2438)
		else:
			StringField.__init__(self, 2438, data)

class TransferTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2439)
		else:
			IntField.__init__(self, 2439, data)

class TransferType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2440)
		else:
			IntField.__init__(self, 2440, data)

class TransferScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2441)
		else:
			IntField.__init__(self, 2441, data)

class TransferStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2442)
		else:
			IntField.__init__(self, 2442, data)

class TransferRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2443)
		else:
			IntField.__init__(self, 2443, data)

class TransferReportType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2444)
		else:
			IntField.__init__(self, 2444, data)

class AggressorTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2445)
		else:
			UtcTimeStampField.__init__(self, 2445, data)

class AggressorSide(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2446)
		else:
			CharField.__init__(self, 2446, data)

class FastMarketIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2447)
		else:
			BoolField.__init__(self, 2447, data)

class LinkageHandlingIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2448)
		else:
			BoolField.__init__(self, 2448, data)

class NumberOfBuyOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2449)
		else:
			IntField.__init__(self, 2449, data)

class NumberOfSellOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2450)
		else:
			IntField.__init__(self, 2450, data)

class SettlPriceDeterminationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2451)
		else:
			IntField.__init__(self, 2451, data)

class MDStatisticReqID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2452)
		else:
			StringField.__init__(self, 2452, data)

class MDStatisticRptID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2453)
		else:
			StringField.__init__(self, 2453, data)

class MDStatisticName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2454)
		else:
			StringField.__init__(self, 2454, data)

class MDStatisticDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2455)
		else:
			StringField.__init__(self, 2455, data)

class MDStatisticType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2456)
		else:
			IntField.__init__(self, 2456, data)

class MDStatisticScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2457)
		else:
			IntField.__init__(self, 2457, data)

class MDStatisticSubScope(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2458)
		else:
			IntField.__init__(self, 2458, data)

class MDStatisticScopeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2459)
		else:
			IntField.__init__(self, 2459, data)

class MDStatisticFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2460)
		else:
			IntField.__init__(self, 2460, data)

class MDStatisticFrequencyUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2461)
		else:
			IntField.__init__(self, 2461, data)

class MDStatisticDelayPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2462)
		else:
			IntField.__init__(self, 2462, data)

class MDStatisticDelayUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2463)
		else:
			IntField.__init__(self, 2463, data)

class MDStatisticIntervalType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2464)
		else:
			IntField.__init__(self, 2464, data)

class MDStatisticIntervalTypeUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2465)
		else:
			StringField.__init__(self, 2465, data)

class MDStatisticIntervalPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2466)
		else:
			IntField.__init__(self, 2466, data)

class MDStatisticIntervalUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2467)
		else:
			IntField.__init__(self, 2467, data)

class MDStatisticStartDate(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2468)
		else:
			UtcTimeStampField.__init__(self, 2468, data)

class MDStatisticEndDate(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2469)
		else:
			UtcTimeStampField.__init__(self, 2469, data)

class MDStatisticStartTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 2470)
		else:
			UtcTimeOnlyField.__init__(self, 2470, data)

class MDStatisticEndTime(UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeOnlyField.__init__(self, 2471)
		else:
			UtcTimeOnlyField.__init__(self, 2471, data)

class MDStatisticRatioType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2472)
		else:
			IntField.__init__(self, 2472, data)

class MDStatisticRequestResult(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2473)
		else:
			IntField.__init__(self, 2473, data)

class NoMDStatistics(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2474)
		else:
			IntField.__init__(self, 2474, data)

class MDStatisticID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2475)
		else:
			StringField.__init__(self, 2475, data)

class MDStatisticTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2476)
		else:
			UtcTimeStampField.__init__(self, 2476, data)

class MDStatisticStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2477)
		else:
			IntField.__init__(self, 2477, data)

class MDStatisticValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2478)
		else:
			DoubleField.__init__(self, 2478, data)

class MDStatisticValueType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2479)
		else:
			IntField.__init__(self, 2479, data)

class MDStatisticValueUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2480)
		else:
			IntField.__init__(self, 2480, data)

class EncodedMDStatisticDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2481)
		else:
			IntField.__init__(self, 2481, data)

class EncodedMDStatisticDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2482)
		else:
			StringField.__init__(self, 2482, data)

class AllocRiskLimitCheckStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2483)
		else:
			IntField.__init__(self, 2483, data)

class AssetGroup(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2210)
		else:
			IntField.__init__(self, 2210, data)

class LegAssetGroup(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2348)
		else:
			IntField.__init__(self, 2348, data)

class LegContractualDefinition(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42199)
		else:
			StringField.__init__(self, 42199, data)

class NoLegContractualDefinitions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42198)
		else:
			IntField.__init__(self, 42198, data)

class LegContractualMatrixDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42205)
		else:
			StringField.__init__(self, 42205, data)

class LegContractualMatrixSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42204)
		else:
			StringField.__init__(self, 42204, data)

class LegContractualMatrixTerm(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42206)
		else:
			StringField.__init__(self, 42206, data)

class NoLegContractualMatrices(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42203)
		else:
			IntField.__init__(self, 42203, data)

class EncodedLegDocumentationText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2493)
		else:
			StringField.__init__(self, 2493, data)

class EncodedLegDocumentationTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2494)
		else:
			IntField.__init__(self, 2494, data)

class LegAgreementCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2495)
		else:
			StringField.__init__(self, 2495, data)

class LegAgreementDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2496)
		else:
			StringField.__init__(self, 2496, data)

class LegAgreementDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2497)
		else:
			StringField.__init__(self, 2497, data)

class LegAgreementID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2498)
		else:
			StringField.__init__(self, 2498, data)

class LegAgreementVersion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2499)
		else:
			StringField.__init__(self, 2499, data)

class LegBrokerConfirmationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2500)
		else:
			StringField.__init__(self, 2500, data)

class LegCreditSupportAgreementDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2501)
		else:
			StringField.__init__(self, 2501, data)

class LegCreditSupportAgreementDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2502)
		else:
			StringField.__init__(self, 2502, data)

class LegCreditSupportAgreementID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2503)
		else:
			StringField.__init__(self, 2503, data)

class LegDeliveryType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2504)
		else:
			IntField.__init__(self, 2504, data)

class LegDocumentationText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2505)
		else:
			StringField.__init__(self, 2505, data)

class LegEndDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2506)
		else:
			StringField.__init__(self, 2506, data)

class LegGoverningLaw(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2507)
		else:
			StringField.__init__(self, 2507, data)

class LegMarginRatio(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2508)
		else:
			DoubleField.__init__(self, 2508, data)

class LegMasterConfirmationAnnexDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2509)
		else:
			StringField.__init__(self, 2509, data)

class LegMasterConfirmationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2510)
		else:
			StringField.__init__(self, 2510, data)

class LegMasterConfirmationDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2511)
		else:
			StringField.__init__(self, 2511, data)

class LegMasterConfirmationAnnexDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2512)
		else:
			StringField.__init__(self, 2512, data)

class LegStartDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2513)
		else:
			StringField.__init__(self, 2513, data)

class LegTerminationType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2514)
		else:
			IntField.__init__(self, 2514, data)

class LegFinancingTermSupplementDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42202)
		else:
			StringField.__init__(self, 42202, data)

class LegFinancingTermSupplementDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42201)
		else:
			StringField.__init__(self, 42201, data)

class NoLegFinancingTermSupplements(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42200)
		else:
			IntField.__init__(self, 42200, data)

class UnderlyingAssetGroup(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2491)
		else:
			IntField.__init__(self, 2491, data)

class FirmTransactionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2484)
		else:
			StringField.__init__(self, 2484, data)

class TransactionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2485)
		else:
			StringField.__init__(self, 2485, data)

class WireReference(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2486)
		else:
			StringField.__init__(self, 2486, data)

class CollRptRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2487)
		else:
			IntField.__init__(self, 2487, data)

class CollRptStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2488)
		else:
			IntField.__init__(self, 2488, data)

class PackageID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2489)
		else:
			StringField.__init__(self, 2489, data)

class TradeNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2490)
		else:
			IntField.__init__(self, 2490, data)

class AllocCalculatedCcyQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2515)
		else:
			DoubleField.__init__(self, 2515, data)

class CollateralRequestInstruction(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2516)
		else:
			StringField.__init__(self, 2516, data)

class CollateralRequestLinkID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2517)
		else:
			StringField.__init__(self, 2517, data)

class CollateralRequestNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2518)
		else:
			IntField.__init__(self, 2518, data)

class TotNumCollateralRequests(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2519)
		else:
			IntField.__init__(self, 2519, data)

class WarningText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2520)
		else:
			StringField.__init__(self, 2520, data)

class EncodedWarningText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2521)
		else:
			StringField.__init__(self, 2521, data)

class EncodedWarningTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2522)
		else:
			IntField.__init__(self, 2522, data)

class LegStreamCommodityDeliveryPricingRegion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42588)
		else:
			StringField.__init__(self, 42588, data)

class StreamCommodityDeliveryPricingRegion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42587)
		else:
			StringField.__init__(self, 42587, data)

class AffiliatedFirmsTradeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2525)
		else:
			BoolField.__init__(self, 2525, data)

class InternationalSwapIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2526)
		else:
			BoolField.__init__(self, 2526, data)

class MultiAssetSwapIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2527)
		else:
			BoolField.__init__(self, 2527, data)

class UnderlyingStreamCommodityDeliveryPricingRegion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42589)
		else:
			StringField.__init__(self, 42589, data)

class NoRelativeValues(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2529)
		else:
			IntField.__init__(self, 2529, data)

class RelativeValueType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2530)
		else:
			IntField.__init__(self, 2530, data)

class RelativeValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2531)
		else:
			DoubleField.__init__(self, 2531, data)

class RelativeValueSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2532)
		else:
			IntField.__init__(self, 2532, data)

class BidSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2533)
		else:
			DoubleField.__init__(self, 2533, data)

class OfferSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2534)
		else:
			DoubleField.__init__(self, 2534, data)

class ClearingSettlPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2528)
		else:
			DoubleField.__init__(self, 2528, data)

class MDReportEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2535)
		else:
			IntField.__init__(self, 2535, data)

class MDReportCount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2536)
		else:
			IntField.__init__(self, 2536, data)

class TotNoMarketSegmentReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2537)
		else:
			IntField.__init__(self, 2537, data)

class TotNoInstrumentReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2538)
		else:
			IntField.__init__(self, 2538, data)

class TotNoPartyDetailReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2539)
		else:
			IntField.__init__(self, 2539, data)

class TotNoEntitlementReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2540)
		else:
			IntField.__init__(self, 2540, data)

class TotNoRiskLimitReports(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2541)
		else:
			IntField.__init__(self, 2541, data)

class MarketSegmentStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2542)
		else:
			IntField.__init__(self, 2542, data)

class MarketSegmentType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2543)
		else:
			IntField.__init__(self, 2543, data)

class MarketSegmentSubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2544)
		else:
			IntField.__init__(self, 2544, data)

class NoRelatedMarketSegments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2545)
		else:
			IntField.__init__(self, 2545, data)

class RelatedMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2546)
		else:
			StringField.__init__(self, 2546, data)

class MarketSegmentRelationship(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2547)
		else:
			IntField.__init__(self, 2547, data)

class NoAuctionTypeRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2548)
		else:
			IntField.__init__(self, 2548, data)

class AuctionTypeProductComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2549)
		else:
			StringField.__init__(self, 2549, data)

class NoPriceRangeRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2550)
		else:
			IntField.__init__(self, 2550, data)

class StartPriceRange(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2551)
		else:
			DoubleField.__init__(self, 2551, data)

class EndPriceRange(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2552)
		else:
			DoubleField.__init__(self, 2552, data)

class PriceRangeValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2553)
		else:
			DoubleField.__init__(self, 2553, data)

class PriceRangePercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2554)
		else:
			DoubleField.__init__(self, 2554, data)

class PriceRangeProductComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2555)
		else:
			StringField.__init__(self, 2555, data)

class PriceRangeRuleID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2556)
		else:
			StringField.__init__(self, 2556, data)

class FastMarketPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2557)
		else:
			DoubleField.__init__(self, 2557, data)

class NoQuoteSizeRules(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2558)
		else:
			IntField.__init__(self, 2558, data)

class QuoteSideIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2559)
		else:
			BoolField.__init__(self, 2559, data)

class NoFlexProductEligibilities(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2560)
		else:
			IntField.__init__(self, 2560, data)

class FlexProductEligibilityComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2561)
		else:
			StringField.__init__(self, 2561, data)

class NumOfComplexInstruments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2562)
		else:
			IntField.__init__(self, 2562, data)

class MarketDepthTimeInterval(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2563)
		else:
			IntField.__init__(self, 2563, data)

class MarketDepthTimeIntervalUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2564)
		else:
			IntField.__init__(self, 2564, data)

class MDRecoveryTimeInterval(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2565)
		else:
			IntField.__init__(self, 2565, data)

class MDRecoveryTimeIntervalUnit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2566)
		else:
			IntField.__init__(self, 2566, data)

class PrimaryServiceLocationID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2567)
		else:
			StringField.__init__(self, 2567, data)

class SecondaryServiceLocationID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2568)
		else:
			StringField.__init__(self, 2568, data)

class MatchRuleProductComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2569)
		else:
			StringField.__init__(self, 2569, data)

class CustomerPriority(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2570)
		else:
			IntField.__init__(self, 2570, data)

class TickRuleProductComplex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2571)
		else:
			StringField.__init__(self, 2571, data)

class PreviousAdjustedOpenInterest(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2572)
		else:
			DoubleField.__init__(self, 2572, data)

class PreviousUnadjustedOpenInterest(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2573)
		else:
			DoubleField.__init__(self, 2573, data)

class LowExercisePriceOptionIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2574)
		else:
			BoolField.__init__(self, 2574, data)

class BlockTradeEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2575)
		else:
			BoolField.__init__(self, 2575, data)

class InstrumentPricePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2576)
		else:
			IntField.__init__(self, 2576, data)

class StrikePricePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2577)
		else:
			IntField.__init__(self, 2577, data)

class OrigStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2578)
		else:
			DoubleField.__init__(self, 2578, data)

class SettlSubMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2579)
		else:
			IntField.__init__(self, 2579, data)

class NoClearingPriceParameters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2580)
		else:
			IntField.__init__(self, 2580, data)

class BusinessDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2581)
		else:
			IntField.__init__(self, 2581, data)

class ClearingPriceOffset(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2582)
		else:
			DoubleField.__init__(self, 2582, data)

class VegaMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2583)
		else:
			DoubleField.__init__(self, 2583, data)

class AnnualTradingBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2584)
		else:
			IntField.__init__(self, 2584, data)

class TotalTradingBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2585)
		else:
			IntField.__init__(self, 2585, data)

class TradingBusinessDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2586)
		else:
			IntField.__init__(self, 2586, data)

class RealizedVariance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2587)
		else:
			DoubleField.__init__(self, 2587, data)

class StandardVariance(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2588)
		else:
			DoubleField.__init__(self, 2588, data)

class RelatedClosePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2589)
		else:
			DoubleField.__init__(self, 2589, data)

class OvernightInterestRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2590)
		else:
			DoubleField.__init__(self, 2590, data)

class AccumulatedReturnModifiedVariationMargin(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2591)
		else:
			DoubleField.__init__(self, 2591, data)

class CalculationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2592)
		else:
			IntField.__init__(self, 2592, data)

class NoMiscFeeSubTypes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2633)
		else:
			IntField.__init__(self, 2633, data)

class MiscFeeSubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2634)
		else:
			StringField.__init__(self, 2634, data)

class MiscFeeSubTypeAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2635)
		else:
			DoubleField.__init__(self, 2635, data)

class MiscFeeSubTypeDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2636)
		else:
			StringField.__init__(self, 2636, data)

class EncodedMiscFeeSubTypeDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2637)
		else:
			IntField.__init__(self, 2637, data)

class EncodedMiscFeeSubTypeDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2638)
		else:
			StringField.__init__(self, 2638, data)

class CollateralAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2632)
		else:
			IntField.__init__(self, 2632, data)

class PositionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2618)
		else:
			StringField.__init__(self, 2618, data)

class PaymentDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43087)
		else:
			StringField.__init__(self, 43087, data)

class NoCommissions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2639)
		else:
			IntField.__init__(self, 2639, data)

class CommissionAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2640)
		else:
			DoubleField.__init__(self, 2640, data)

class CommissionAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2641)
		else:
			IntField.__init__(self, 2641, data)

class CommissionBasis(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2642)
		else:
			CharField.__init__(self, 2642, data)

class CommissionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2643)
		else:
			StringField.__init__(self, 2643, data)

class CommissionUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2644)
		else:
			StringField.__init__(self, 2644, data)

class CommissionUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2645)
		else:
			StringField.__init__(self, 2645, data)

class CommissionRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2646)
		else:
			DoubleField.__init__(self, 2646, data)

class CommissionSharedIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2647)
		else:
			BoolField.__init__(self, 2647, data)

class CommissionAmountShared(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2648)
		else:
			DoubleField.__init__(self, 2648, data)

class CommissionLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2649)
		else:
			StringField.__init__(self, 2649, data)

class CommissionDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2650)
		else:
			StringField.__init__(self, 2650, data)

class EncodedCommissionDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2651)
		else:
			IntField.__init__(self, 2651, data)

class EncodedCommissionDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2652)
		else:
			StringField.__init__(self, 2652, data)

class NoAllocCommissions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2653)
		else:
			IntField.__init__(self, 2653, data)

class AllocCommissionAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2654)
		else:
			DoubleField.__init__(self, 2654, data)

class AllocCommissionAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2655)
		else:
			IntField.__init__(self, 2655, data)

class AllocCommissionBasis(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2656)
		else:
			CharField.__init__(self, 2656, data)

class AllocCommissionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2657)
		else:
			StringField.__init__(self, 2657, data)

class AllocCommissionUnitOfMeasure(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2658)
		else:
			StringField.__init__(self, 2658, data)

class AllocCommissionUnitOfMeasureCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2659)
		else:
			StringField.__init__(self, 2659, data)

class AllocCommissionRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2660)
		else:
			DoubleField.__init__(self, 2660, data)

class AllocCommissionSharedIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2661)
		else:
			BoolField.__init__(self, 2661, data)

class AllocCommissionAmountShared(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2662)
		else:
			DoubleField.__init__(self, 2662, data)

class AllocCommissionLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2663)
		else:
			StringField.__init__(self, 2663, data)

class AllocCommissionDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2664)
		else:
			StringField.__init__(self, 2664, data)

class EncodedAllocCommissionDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2665)
		else:
			IntField.__init__(self, 2665, data)

class EncodedAllocCommissionDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2666)
		else:
			StringField.__init__(self, 2666, data)

class DeltaCrossed(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2596)
		else:
			BoolField.__init__(self, 2596, data)

class CashSettlDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42207)
		else:
			StringField.__init__(self, 42207, data)

class CashSettlDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42208)
		else:
			IntField.__init__(self, 42208, data)

class CashSettlDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42209)
		else:
			IntField.__init__(self, 42209, data)

class CashSettlDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42210)
		else:
			IntField.__init__(self, 42210, data)

class CashSettlDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42211)
		else:
			StringField.__init__(self, 42211, data)

class CashSettlDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42212)
		else:
			IntField.__init__(self, 42212, data)

class CashSettlDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42213)
		else:
			StringField.__init__(self, 42213, data)

class NoCashSettlDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42214)
		else:
			IntField.__init__(self, 42214, data)

class CashSettlDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42215)
		else:
			StringField.__init__(self, 42215, data)

class CashSettlPriceSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42216)
		else:
			StringField.__init__(self, 42216, data)

class CashSettlPriceDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42217)
		else:
			IntField.__init__(self, 42217, data)

class ComplexEventFuturesPriceValuation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2597)
		else:
			BoolField.__init__(self, 2597, data)

class ComplexEventOptionsPriceValuation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2598)
		else:
			BoolField.__init__(self, 2598, data)

class ComplexEventPVFinalPriceElectionFallback(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2599)
		else:
			IntField.__init__(self, 2599, data)

class DividendFloatingRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42218)
		else:
			StringField.__init__(self, 42218, data)

class DividendFloatingRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42219)
		else:
			IntField.__init__(self, 42219, data)

class DividendFloatingRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42220)
		else:
			StringField.__init__(self, 42220, data)

class DividendFloatingRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42221)
		else:
			DoubleField.__init__(self, 42221, data)

class DividendFloatingRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42222)
		else:
			DoubleField.__init__(self, 42222, data)

class DividendFloatingRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42223)
		else:
			IntField.__init__(self, 42223, data)

class DividendFloatingRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42224)
		else:
			IntField.__init__(self, 42224, data)

class DividendCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42225)
		else:
			DoubleField.__init__(self, 42225, data)

class DividendCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42226)
		else:
			IntField.__init__(self, 42226, data)

class DividendCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42227)
		else:
			IntField.__init__(self, 42227, data)

class DividendFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42228)
		else:
			DoubleField.__init__(self, 42228, data)

class DividendFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42229)
		else:
			IntField.__init__(self, 42229, data)

class DividendFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42230)
		else:
			IntField.__init__(self, 42230, data)

class DividendInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42231)
		else:
			DoubleField.__init__(self, 42231, data)

class DividendFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42232)
		else:
			CharField.__init__(self, 42232, data)

class DividendFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42233)
		else:
			IntField.__init__(self, 42233, data)

class DividendAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42234)
		else:
			IntField.__init__(self, 42234, data)

class DividendNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42235)
		else:
			IntField.__init__(self, 42235, data)

class NoDividendAccrualPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42236)
		else:
			IntField.__init__(self, 42236, data)

class DividendAccrualPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42237)
		else:
			StringField.__init__(self, 42237, data)

class DividendAccrualPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42238)
		else:
			IntField.__init__(self, 42238, data)

class DividendAccrualPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42239)
		else:
			IntField.__init__(self, 42239, data)

class DividendAccrualPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42240)
		else:
			StringField.__init__(self, 42240, data)

class DividendAccrualPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42241)
		else:
			IntField.__init__(self, 42241, data)

class DividendAccrualPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42242)
		else:
			StringField.__init__(self, 42242, data)

class DividendAccrualPaymeentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42243)
		else:
			IntField.__init__(self, 42243, data)

class DividendAccrualPaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42244)
		else:
			StringField.__init__(self, 42244, data)

class DividendReinvestmentIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42245)
		else:
			BoolField.__init__(self, 42245, data)

class DividendEntitlementEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42246)
		else:
			IntField.__init__(self, 42246, data)

class DividendAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42247)
		else:
			IntField.__init__(self, 42247, data)

class DividendUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42248)
		else:
			StringField.__init__(self, 42248, data)

class ExtraordinaryDividendPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42249)
		else:
			IntField.__init__(self, 42249, data)

class ExtraordinaryDividendAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42250)
		else:
			IntField.__init__(self, 42250, data)

class ExtraordinaryDividendCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42251)
		else:
			StringField.__init__(self, 42251, data)

class ExtraordinaryDividendDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42252)
		else:
			StringField.__init__(self, 42252, data)

class DividendAccrualFixedRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42253)
		else:
			DoubleField.__init__(self, 42253, data)

class DividendCompoundingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42254)
		else:
			IntField.__init__(self, 42254, data)

class DividendNumOfIndexUnits(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42255)
		else:
			IntField.__init__(self, 42255, data)

class DividendCashPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42256)
		else:
			DoubleField.__init__(self, 42256, data)

class DividendCashEquivalentPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42257)
		else:
			DoubleField.__init__(self, 42257, data)

class NonCashDividendTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42258)
		else:
			IntField.__init__(self, 42258, data)

class DividendComposition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42259)
		else:
			IntField.__init__(self, 42259, data)

class SpecialDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42260)
		else:
			BoolField.__init__(self, 42260, data)

class MaterialDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42261)
		else:
			BoolField.__init__(self, 42261, data)

class OptionsExchangeDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42262)
		else:
			BoolField.__init__(self, 42262, data)

class AdditionalDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42263)
		else:
			BoolField.__init__(self, 42263, data)

class AllDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42264)
		else:
			BoolField.__init__(self, 42264, data)

class DividendFXTriggerDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42265)
		else:
			IntField.__init__(self, 42265, data)

class DividendFXTriggerDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42266)
		else:
			IntField.__init__(self, 42266, data)

class DividendFXTriggerDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42267)
		else:
			StringField.__init__(self, 42267, data)

class DividendFXTriggerDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42268)
		else:
			IntField.__init__(self, 42268, data)

class DividendFXTriggerDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42269)
		else:
			StringField.__init__(self, 42269, data)

class DividendFXTriggerDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42270)
		else:
			IntField.__init__(self, 42270, data)

class DividendFXTriggerDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42271)
		else:
			StringField.__init__(self, 42271, data)

class NoDividendFXTriggerDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42272)
		else:
			IntField.__init__(self, 42272, data)

class DividendFXTriggerDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42273)
		else:
			StringField.__init__(self, 42273, data)

class NoDividendPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42274)
		else:
			IntField.__init__(self, 42274, data)

class DividendPeriodSequence(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42275)
		else:
			IntField.__init__(self, 42275, data)

class DividendPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42276)
		else:
			StringField.__init__(self, 42276, data)

class DividendPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42277)
		else:
			StringField.__init__(self, 42277, data)

class DividendPeriodUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42278)
		else:
			StringField.__init__(self, 42278, data)

class DividendPeriodStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42279)
		else:
			DoubleField.__init__(self, 42279, data)

class DividendPeriodBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42280)
		else:
			IntField.__init__(self, 42280, data)

class DividendPeriodValuationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42281)
		else:
			StringField.__init__(self, 42281, data)

class DividendPeriodValuationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42282)
		else:
			IntField.__init__(self, 42282, data)

class DividendPeriodValuationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42283)
		else:
			IntField.__init__(self, 42283, data)

class DividendPeriodValuationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42284)
		else:
			StringField.__init__(self, 42284, data)

class DividendPeriodValuationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42285)
		else:
			IntField.__init__(self, 42285, data)

class DividendPeriodValuationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42286)
		else:
			StringField.__init__(self, 42286, data)

class DividendPeriodPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42287)
		else:
			StringField.__init__(self, 42287, data)

class DividendPeriodPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42288)
		else:
			IntField.__init__(self, 42288, data)

class DividendPeriodPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42289)
		else:
			IntField.__init__(self, 42289, data)

class DividendPeriodPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42290)
		else:
			StringField.__init__(self, 42290, data)

class DividendPeriodPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42291)
		else:
			IntField.__init__(self, 42291, data)

class DividendPeriodPaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42292)
		else:
			StringField.__init__(self, 42292, data)

class DividendPeriodXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42293)
		else:
			StringField.__init__(self, 42293, data)

class NoDividendPeriodBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42294)
		else:
			IntField.__init__(self, 42294, data)

class DividendPeriodBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42295)
		else:
			StringField.__init__(self, 42295, data)

class NoExtraordinaryEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42296)
		else:
			IntField.__init__(self, 42296, data)

class ExtraordinaryEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42297)
		else:
			StringField.__init__(self, 42297, data)

class ExtraordinaryEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42298)
		else:
			StringField.__init__(self, 42298, data)

class StrikeIndexCurvePoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2600)
		else:
			StringField.__init__(self, 2600, data)

class StrikeIndexQuote(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2601)
		else:
			IntField.__init__(self, 2601, data)

class ExtraordinaryEventAdjustmentMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2602)
		else:
			IntField.__init__(self, 2602, data)

class ExchangeLookAlike(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2603)
		else:
			BoolField.__init__(self, 2603, data)

class LegStrikeIndexCurvePoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2604)
		else:
			StringField.__init__(self, 2604, data)

class LegStrikeIndexQuote(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2605)
		else:
			IntField.__init__(self, 2605, data)

class LegExtraordinaryEventAdjustmentMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2606)
		else:
			IntField.__init__(self, 2606, data)

class LegExchangeLookAlike(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2607)
		else:
			BoolField.__init__(self, 2607, data)

class LegCashSettlDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42299)
		else:
			StringField.__init__(self, 42299, data)

class LegCashSettlDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42300)
		else:
			IntField.__init__(self, 42300, data)

class LegCashSettlDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42301)
		else:
			IntField.__init__(self, 42301, data)

class LegCashSettlDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42302)
		else:
			IntField.__init__(self, 42302, data)

class LegCashSettlDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42303)
		else:
			StringField.__init__(self, 42303, data)

class LegCashSettlDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42304)
		else:
			IntField.__init__(self, 42304, data)

class LegCashSettlDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42305)
		else:
			StringField.__init__(self, 42305, data)

class NoLegCashSettlDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42306)
		else:
			IntField.__init__(self, 42306, data)

class LegCashSettlDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42307)
		else:
			StringField.__init__(self, 42307, data)

class LegCashSettlPriceSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42308)
		else:
			StringField.__init__(self, 42308, data)

class LegCashSettlPriceDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42309)
		else:
			IntField.__init__(self, 42309, data)

class LegComplexEventFuturesPriceValuation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2608)
		else:
			BoolField.__init__(self, 2608, data)

class LegComplexEventOptionsPriceValuation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2609)
		else:
			BoolField.__init__(self, 2609, data)

class LegComplexEventPVFinalPriceElectionFallback(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2610)
		else:
			IntField.__init__(self, 2610, data)

class NoLegDividendAccrualPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42310)
		else:
			IntField.__init__(self, 42310, data)

class LegDividendAccrualPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42311)
		else:
			StringField.__init__(self, 42311, data)

class LegDividendFloatingRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42312)
		else:
			StringField.__init__(self, 42312, data)

class LegDividendFloatingRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42313)
		else:
			IntField.__init__(self, 42313, data)

class LegDividendFloatingRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42314)
		else:
			StringField.__init__(self, 42314, data)

class LegDividendFloatingRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42315)
		else:
			DoubleField.__init__(self, 42315, data)

class LegDividendFloatingRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42316)
		else:
			DoubleField.__init__(self, 42316, data)

class LegDividendFloatingRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42317)
		else:
			IntField.__init__(self, 42317, data)

class LegDividendFloatingRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42318)
		else:
			IntField.__init__(self, 42318, data)

class LegDividendCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42319)
		else:
			DoubleField.__init__(self, 42319, data)

class LegDividendCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42320)
		else:
			IntField.__init__(self, 42320, data)

class LegDividendCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42321)
		else:
			IntField.__init__(self, 42321, data)

class LegDividendFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42322)
		else:
			DoubleField.__init__(self, 42322, data)

class LegDividendFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42323)
		else:
			IntField.__init__(self, 42323, data)

class LegDividendFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42324)
		else:
			IntField.__init__(self, 42324, data)

class LegDividendInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42325)
		else:
			DoubleField.__init__(self, 42325, data)

class LegDividendFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42326)
		else:
			CharField.__init__(self, 42326, data)

class LegDividendFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42327)
		else:
			IntField.__init__(self, 42327, data)

class LegDividendAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42328)
		else:
			IntField.__init__(self, 42328, data)

class LegDividendNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42329)
		else:
			IntField.__init__(self, 42329, data)

class LegDividendAccrualPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42330)
		else:
			IntField.__init__(self, 42330, data)

class LegDividendAccrualPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42331)
		else:
			IntField.__init__(self, 42331, data)

class LegDividendAccrualPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42332)
		else:
			StringField.__init__(self, 42332, data)

class LegDividendAccrualPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42333)
		else:
			IntField.__init__(self, 42333, data)

class LegDividendAccrualPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42334)
		else:
			StringField.__init__(self, 42334, data)

class LegDividendAccrualPaymentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42335)
		else:
			IntField.__init__(self, 42335, data)

class LegDividendAccrualPaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42336)
		else:
			StringField.__init__(self, 42336, data)

class LegDividendReinvestmentIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42337)
		else:
			BoolField.__init__(self, 42337, data)

class LegDividendEntitlementEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42338)
		else:
			IntField.__init__(self, 42338, data)

class LegDividendAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42339)
		else:
			IntField.__init__(self, 42339, data)

class LegDividendUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42340)
		else:
			StringField.__init__(self, 42340, data)

class LegExtraordinaryDividendPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42341)
		else:
			IntField.__init__(self, 42341, data)

class LegExtraordinaryDividendAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42342)
		else:
			IntField.__init__(self, 42342, data)

class LegExtraordinaryDividendCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42343)
		else:
			StringField.__init__(self, 42343, data)

class LegExtraordinaryDividendDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42344)
		else:
			StringField.__init__(self, 42344, data)

class LegDividendAccrualFixedRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42345)
		else:
			DoubleField.__init__(self, 42345, data)

class LegDividendCompoundingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42346)
		else:
			IntField.__init__(self, 42346, data)

class LegDividendNumOfIndexUnits(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42347)
		else:
			IntField.__init__(self, 42347, data)

class LegDividendCashPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42348)
		else:
			DoubleField.__init__(self, 42348, data)

class LegDividendCashEquivalentPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42349)
		else:
			DoubleField.__init__(self, 42349, data)

class LegNonCashDividendTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42350)
		else:
			IntField.__init__(self, 42350, data)

class LegDividendComposition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42351)
		else:
			IntField.__init__(self, 42351, data)

class LegSpecialDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42352)
		else:
			BoolField.__init__(self, 42352, data)

class LegMaterialDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42353)
		else:
			BoolField.__init__(self, 42353, data)

class LegOptionsExchangeDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42354)
		else:
			BoolField.__init__(self, 42354, data)

class LegAdditionalDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42355)
		else:
			BoolField.__init__(self, 42355, data)

class LegAllDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42356)
		else:
			BoolField.__init__(self, 42356, data)

class LegDividendFXTriggerDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42357)
		else:
			IntField.__init__(self, 42357, data)

class LegDividendFXTriggerDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42358)
		else:
			IntField.__init__(self, 42358, data)

class LegDividendFXTriggerDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42359)
		else:
			StringField.__init__(self, 42359, data)

class LegDividendFXTriggerDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42360)
		else:
			IntField.__init__(self, 42360, data)

class LegDividendFXTriggerDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42361)
		else:
			StringField.__init__(self, 42361, data)

class LegDividendFXTriggerDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42362)
		else:
			IntField.__init__(self, 42362, data)

class LegDividendFXTriggerDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42363)
		else:
			StringField.__init__(self, 42363, data)

class NoLegDividendFXTriggerDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42364)
		else:
			IntField.__init__(self, 42364, data)

class LegDividendFXTriggerDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42365)
		else:
			StringField.__init__(self, 42365, data)

class NoLegDividendPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42366)
		else:
			IntField.__init__(self, 42366, data)

class LegDividendPeriodSequence(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42367)
		else:
			IntField.__init__(self, 42367, data)

class LegDividendPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42368)
		else:
			StringField.__init__(self, 42368, data)

class LegDividendPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42369)
		else:
			StringField.__init__(self, 42369, data)

class LegDividendPeriodUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42370)
		else:
			StringField.__init__(self, 42370, data)

class LegDividendPeriodStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42371)
		else:
			DoubleField.__init__(self, 42371, data)

class LegDividendPeriodBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42372)
		else:
			IntField.__init__(self, 42372, data)

class LegDividendPeriodValuationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42373)
		else:
			StringField.__init__(self, 42373, data)

class LegDividendPeriodValuationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42374)
		else:
			IntField.__init__(self, 42374, data)

class LegDividendPeriodValuationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42375)
		else:
			IntField.__init__(self, 42375, data)

class LegDividendPeriodValuationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42376)
		else:
			StringField.__init__(self, 42376, data)

class LegDividendPeriodValuationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42377)
		else:
			IntField.__init__(self, 42377, data)

class LegDividendPeriodValuationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42378)
		else:
			StringField.__init__(self, 42378, data)

class LegDividendPeriodPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42379)
		else:
			StringField.__init__(self, 42379, data)

class LegDividendPeriodPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42380)
		else:
			IntField.__init__(self, 42380, data)

class LegDividendPeriodPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42381)
		else:
			IntField.__init__(self, 42381, data)

class LegDividendPeriodPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42382)
		else:
			StringField.__init__(self, 42382, data)

class LegDividendPeriodPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42383)
		else:
			IntField.__init__(self, 42383, data)

class LegDividendPeriodPaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42384)
		else:
			StringField.__init__(self, 42384, data)

class LegDividendPeriodXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42385)
		else:
			StringField.__init__(self, 42385, data)

class NoLegDividendPeriodBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42386)
		else:
			IntField.__init__(self, 42386, data)

class LegDividendPeriodBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42387)
		else:
			StringField.__init__(self, 42387, data)

class NoLegExtraordinaryEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42388)
		else:
			IntField.__init__(self, 42388, data)

class LegExtraordinaryEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42389)
		else:
			StringField.__init__(self, 42389, data)

class LegExtraordinaryEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42390)
		else:
			StringField.__init__(self, 42390, data)

class LegSettlMethodElectingPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42391)
		else:
			IntField.__init__(self, 42391, data)

class LegMakeWholeDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42392)
		else:
			StringField.__init__(self, 42392, data)

class LegMakeWholeAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42393)
		else:
			DoubleField.__init__(self, 42393, data)

class LegMakeWholeBenchmarkCurveName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42394)
		else:
			StringField.__init__(self, 42394, data)

class LegMakeWholeBenchmarkCurvePoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42395)
		else:
			StringField.__init__(self, 42395, data)

class LegMakeWholeRecallSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42396)
		else:
			DoubleField.__init__(self, 42396, data)

class LegMakeWholeBenchmarkQuote(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42397)
		else:
			IntField.__init__(self, 42397, data)

class LegMakeWholeInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42398)
		else:
			IntField.__init__(self, 42398, data)

class LegPaymentStreamCashSettlIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42399)
		else:
			BoolField.__init__(self, 42399, data)

class LegPaymentStreamCompoundingXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42400)
		else:
			StringField.__init__(self, 42400, data)

class LegPaymentStreamCompoundingSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42401)
		else:
			DoubleField.__init__(self, 42401, data)

class LegPaymentStreamInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42402)
		else:
			IntField.__init__(self, 42402, data)

class LegPaymentStreamInterpolationPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42403)
		else:
			IntField.__init__(self, 42403, data)

class LegPaymentStreamCompoundingFixedRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42404)
		else:
			DoubleField.__init__(self, 42404, data)

class NoLegPaymentStreamCompoundingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42405)
		else:
			IntField.__init__(self, 42405, data)

class LegPaymentStreamCompoundingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42406)
		else:
			StringField.__init__(self, 42406, data)

class LegPaymentStreamCompoundingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42407)
		else:
			IntField.__init__(self, 42407, data)

class LegPaymentStreamCompoundingDatesBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42408)
		else:
			IntField.__init__(self, 42408, data)

class LegPaymentStreamCompoundingDatesRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42409)
		else:
			IntField.__init__(self, 42409, data)

class LegPaymentStreamCompoundingDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42410)
		else:
			IntField.__init__(self, 42410, data)

class LegPaymentStreamCompoundingDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42411)
		else:
			StringField.__init__(self, 42411, data)

class LegPaymentStreamCompoundingDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42412)
		else:
			IntField.__init__(self, 42412, data)

class LegPaymentStreamCompoundingPeriodSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42413)
		else:
			IntField.__init__(self, 42413, data)

class LegPaymentStreamCompoundingFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42414)
		else:
			IntField.__init__(self, 42414, data)

class LegPaymentStreamCompoundingFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42415)
		else:
			StringField.__init__(self, 42415, data)

class LegPaymentStreamCompoundingRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42416)
		else:
			StringField.__init__(self, 42416, data)

class LegPaymentStreamBoundsFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42417)
		else:
			StringField.__init__(self, 42417, data)

class LegPaymentStreamBoundsLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42418)
		else:
			StringField.__init__(self, 42418, data)

class NoLegPaymentStreamCompoundingDatesBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42419)
		else:
			IntField.__init__(self, 42419, data)

class LegPaymentStreamCompoundingDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42420)
		else:
			StringField.__init__(self, 42420, data)

class LegPaymentStreamCompoundingEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42421)
		else:
			StringField.__init__(self, 42421, data)

class LegPaymentStreamCompoundingEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42422)
		else:
			IntField.__init__(self, 42422, data)

class LegPaymentStreamCompoundingEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42423)
		else:
			IntField.__init__(self, 42423, data)

class LegPaymentStreamCompoundingEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42424)
		else:
			StringField.__init__(self, 42424, data)

class LegPaymentStreamCompoundingEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42425)
		else:
			IntField.__init__(self, 42425, data)

class LegPaymentStreamCompoundingEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42426)
		else:
			StringField.__init__(self, 42426, data)

class LegPaymentStreamCompoundingRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42427)
		else:
			StringField.__init__(self, 42427, data)

class LegPaymentStreamCompoundingRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42428)
		else:
			IntField.__init__(self, 42428, data)

class LegPaymentStreamCompoundingRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42429)
		else:
			StringField.__init__(self, 42429, data)

class LegPaymentStreamCompoundingRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42430)
		else:
			DoubleField.__init__(self, 42430, data)

class LegPaymentStreamCompoundingRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42431)
		else:
			DoubleField.__init__(self, 42431, data)

class LegPaymentStreamCompoundingRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42432)
		else:
			IntField.__init__(self, 42432, data)

class LegPaymentStreamCompoundingRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42433)
		else:
			IntField.__init__(self, 42433, data)

class LegPaymentStreamCompoundingCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42434)
		else:
			DoubleField.__init__(self, 42434, data)

class LegPaymentStreamCompoundingCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42435)
		else:
			IntField.__init__(self, 42435, data)

class LegPaymentStreamCompoundingCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42436)
		else:
			IntField.__init__(self, 42436, data)

class LegPaymentStreamCompoundingFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42437)
		else:
			DoubleField.__init__(self, 42437, data)

class LegPaymentStreamCompoundingFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42438)
		else:
			IntField.__init__(self, 42438, data)

class LegPaymentStreamCompoundingFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42439)
		else:
			IntField.__init__(self, 42439, data)

class LegPaymentStreamCompoundingInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42440)
		else:
			DoubleField.__init__(self, 42440, data)

class LegPaymentStreamCompoundingFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42441)
		else:
			CharField.__init__(self, 42441, data)

class LegPaymentStreamCompoundingFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42442)
		else:
			IntField.__init__(self, 42442, data)

class LegPaymentStreamCompoundingAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42443)
		else:
			IntField.__init__(self, 42443, data)

class LegPaymentStreamCompoundingNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42444)
		else:
			IntField.__init__(self, 42444, data)

class LegPaymentStreamCompoundingStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42445)
		else:
			StringField.__init__(self, 42445, data)

class LegPaymentStreamCompoundingStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42446)
		else:
			IntField.__init__(self, 42446, data)

class LegPaymentStreamCompoundingStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42447)
		else:
			IntField.__init__(self, 42447, data)

class LegPaymentStreamCompoundingStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42448)
		else:
			StringField.__init__(self, 42448, data)

class LegPaymentStreamCompoundingStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42449)
		else:
			IntField.__init__(self, 42449, data)

class LegPaymentStreamCompoundingStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42450)
		else:
			StringField.__init__(self, 42450, data)

class LegPaymentStreamFormulaImageLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42451)
		else:
			IntField.__init__(self, 42451, data)

class LegPaymentStreamFormulaImage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42452)
		else:
			StringField.__init__(self, 42452, data)

class LegPaymentStreamFinalPricePaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42453)
		else:
			StringField.__init__(self, 42453, data)

class LegPaymentStreamFinalPricePaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42454)
		else:
			IntField.__init__(self, 42454, data)

class LegPaymentStreamFinalPricePaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42455)
		else:
			IntField.__init__(self, 42455, data)

class LegPaymentStreamFinalPricePaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42456)
		else:
			StringField.__init__(self, 42456, data)

class LegPaymentStreamFinalPricePaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42457)
		else:
			IntField.__init__(self, 42457, data)

class LegPaymentStreamFinalPricePaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42458)
		else:
			StringField.__init__(self, 42458, data)

class NoLegPaymentStreamFixingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42459)
		else:
			IntField.__init__(self, 42459, data)

class LegPaymentStreamFixingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42460)
		else:
			StringField.__init__(self, 42460, data)

class LegPaymentStreamFixingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42461)
		else:
			IntField.__init__(self, 42461, data)

class LegPaymentStreamFirstObservationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42462)
		else:
			StringField.__init__(self, 42462, data)

class LegPaymentStreamFirstObservationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42463)
		else:
			IntField.__init__(self, 42463, data)

class LegPaymentStreamFirstObservationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42464)
		else:
			IntField.__init__(self, 42464, data)

class LegPaymentStreamFirstObservationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42465)
		else:
			StringField.__init__(self, 42465, data)

class LegPaymentStreamUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42466)
		else:
			StringField.__init__(self, 42466, data)

class LegReturnRateNotionalReset(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42467)
		else:
			BoolField.__init__(self, 42467, data)

class LegPaymentStreamLinkInitialLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42468)
		else:
			DoubleField.__init__(self, 42468, data)

class LegPaymentStreamLinkClosingLevelIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42469)
		else:
			BoolField.__init__(self, 42469, data)

class LegPaymentStreamLinkExpiringLevelIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42470)
		else:
			BoolField.__init__(self, 42470, data)

class LegPaymentStreamLinkEstimatedTradingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42471)
		else:
			IntField.__init__(self, 42471, data)

class LegPaymentStreamLinkStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42472)
		else:
			DoubleField.__init__(self, 42472, data)

class LegPaymentStreamLinkStrikePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42473)
		else:
			IntField.__init__(self, 42473, data)

class LegPaymentStreamLinkMaximumBoundary(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42474)
		else:
			DoubleField.__init__(self, 42474, data)

class LegPaymentStreamLinkMinimumBoundary(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42475)
		else:
			DoubleField.__init__(self, 42475, data)

class LegPaymentStreamLinkNumberOfDataSeries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42476)
		else:
			IntField.__init__(self, 42476, data)

class LegPaymentStreamVarianceUnadjustedCap(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42477)
		else:
			DoubleField.__init__(self, 42477, data)

class LegPaymentStreamRealizedVarianceMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42478)
		else:
			IntField.__init__(self, 42478, data)

class LegPaymentStreamDaysAdjustmentIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42479)
		else:
			BoolField.__init__(self, 42479, data)

class LegPaymentStreamNearestExchangeContractRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42480)
		else:
			StringField.__init__(self, 42480, data)

class LegPaymentStreamVegaNotionalAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42481)
		else:
			DoubleField.__init__(self, 42481, data)

class LegPaymentStreamFormulaCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42482)
		else:
			StringField.__init__(self, 42482, data)

class LegPaymentStreamFormulaCurrencyDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42483)
		else:
			StringField.__init__(self, 42483, data)

class LegPaymentStreamFormulaReferenceAmount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42484)
		else:
			IntField.__init__(self, 42484, data)

class NoLegPaymentStreamFormulas(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42485)
		else:
			IntField.__init__(self, 42485, data)

class LegPaymentStreamFormula(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42486)
		else:
			StringField.__init__(self, 42486, data)

class LegPaymentStreamFormulaDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42487)
		else:
			StringField.__init__(self, 42487, data)

class LegPaymentStubEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42488)
		else:
			StringField.__init__(self, 42488, data)

class LegPaymentStubEndDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42489)
		else:
			IntField.__init__(self, 42489, data)

class LegPaymentStubEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42490)
		else:
			IntField.__init__(self, 42490, data)

class LegPaymentStubEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42491)
		else:
			IntField.__init__(self, 42491, data)

class LegPaymentStubEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42492)
		else:
			StringField.__init__(self, 42492, data)

class LegPaymentStubEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42493)
		else:
			IntField.__init__(self, 42493, data)

class LegPaymentStubEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42494)
		else:
			StringField.__init__(self, 42494, data)

class NoLegPaymentStubEndDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42495)
		else:
			IntField.__init__(self, 42495, data)

class LegPaymentStubEndDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42496)
		else:
			StringField.__init__(self, 42496, data)

class LegPaymentStubStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42497)
		else:
			StringField.__init__(self, 42497, data)

class LegPaymentStubStartDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42498)
		else:
			IntField.__init__(self, 42498, data)

class LegPaymentStubStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42499)
		else:
			IntField.__init__(self, 42499, data)

class LegPaymentStubStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42500)
		else:
			IntField.__init__(self, 42500, data)

class LegPaymentStubStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42501)
		else:
			StringField.__init__(self, 42501, data)

class LegPaymentStubStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42502)
		else:
			IntField.__init__(self, 42502, data)

class LegPaymentStubStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42503)
		else:
			StringField.__init__(self, 42503, data)

class NoLegPaymentStubStartDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42504)
		else:
			IntField.__init__(self, 42504, data)

class LegPaymentStubStartDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42505)
		else:
			StringField.__init__(self, 42505, data)

class LegProvisionBreakFeeElection(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42506)
		else:
			IntField.__init__(self, 42506, data)

class LegProvisionBreakFeeRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42507)
		else:
			DoubleField.__init__(self, 42507, data)

class NoLegReturnRateDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42508)
		else:
			IntField.__init__(self, 42508, data)

class LegReturnRateDateMode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42509)
		else:
			IntField.__init__(self, 42509, data)

class LegReturnRateValuationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42510)
		else:
			IntField.__init__(self, 42510, data)

class LegReturnRateValuationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42511)
		else:
			IntField.__init__(self, 42511, data)

class LegReturnRateValuationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42512)
		else:
			StringField.__init__(self, 42512, data)

class LegReturnRateValuationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42513)
		else:
			IntField.__init__(self, 42513, data)

class LegReturnRateValuationStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42514)
		else:
			StringField.__init__(self, 42514, data)

class LegReturnRateValuationStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42515)
		else:
			IntField.__init__(self, 42515, data)

class LegReturnRateValuationStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42516)
		else:
			IntField.__init__(self, 42516, data)

class LegReturnRateValuationStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42517)
		else:
			StringField.__init__(self, 42517, data)

class LegReturnRateValuationStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42518)
		else:
			IntField.__init__(self, 42518, data)

class LegReturnRateValuationStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42519)
		else:
			StringField.__init__(self, 42519, data)

class LegReturnRateValuationEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42520)
		else:
			StringField.__init__(self, 42520, data)

class LegReturnRateValuationEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42521)
		else:
			IntField.__init__(self, 42521, data)

class LegReturnRateValuationEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42522)
		else:
			IntField.__init__(self, 42522, data)

class LegReturnRateValuationEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42523)
		else:
			StringField.__init__(self, 42523, data)

class LegReturnRateValuationEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42524)
		else:
			IntField.__init__(self, 42524, data)

class LegReturnRateValuationEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42525)
		else:
			StringField.__init__(self, 42525, data)

class LegReturnRateValuationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42526)
		else:
			IntField.__init__(self, 42526, data)

class LegReturnRateValuationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42527)
		else:
			StringField.__init__(self, 42527, data)

class LegReturnRateValuationFrequencyRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42528)
		else:
			StringField.__init__(self, 42528, data)

class LegReturnRateValuationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42529)
		else:
			IntField.__init__(self, 42529, data)

class NoLegReturnRateFXConversions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42530)
		else:
			IntField.__init__(self, 42530, data)

class LegReturnRateFXCurrencySymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42531)
		else:
			StringField.__init__(self, 42531, data)

class LegReturnRateFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42532)
		else:
			DoubleField.__init__(self, 42532, data)

class LegReturnRateFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42533)
		else:
			CharField.__init__(self, 42533, data)

class NoLegReturnRates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42534)
		else:
			IntField.__init__(self, 42534, data)

class LegReturnRatePriceSequence(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42535)
		else:
			IntField.__init__(self, 42535, data)

class LegReturnRateCommissionBasis(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42536)
		else:
			CharField.__init__(self, 42536, data)

class LegReturnRateCommissionAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42537)
		else:
			DoubleField.__init__(self, 42537, data)

class LegReturnRateCommissionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42538)
		else:
			StringField.__init__(self, 42538, data)

class LegReturnRateTotalCommissionPerTrade(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42539)
		else:
			DoubleField.__init__(self, 42539, data)

class LegReturnRateDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42540)
		else:
			StringField.__init__(self, 42540, data)

class LegReturnRateAmountRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42541)
		else:
			IntField.__init__(self, 42541, data)

class LegReturnRateQuoteMeasureType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42542)
		else:
			StringField.__init__(self, 42542, data)

class LegReturnRateQuoteUnits(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42543)
		else:
			StringField.__init__(self, 42543, data)

class LegReturnRateQuoteMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42544)
		else:
			IntField.__init__(self, 42544, data)

class LegReturnRateQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42545)
		else:
			StringField.__init__(self, 42545, data)

class LegReturnRateQuoteCurrencyType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42546)
		else:
			StringField.__init__(self, 42546, data)

class LegReturnRateQuoteTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42547)
		else:
			IntField.__init__(self, 42547, data)

class LegReturnRateQuoteTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42548)
		else:
			StringField.__init__(self, 42548, data)

class LegReturnRateQuoteDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42549)
		else:
			StringField.__init__(self, 42549, data)

class LegReturnRateQuoteExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42550)
		else:
			StringField.__init__(self, 42550, data)

class LegReturnRateQuoteBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42551)
		else:
			StringField.__init__(self, 42551, data)

class LegReturnRateQuoteExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42552)
		else:
			StringField.__init__(self, 42552, data)

class LegReturnRateQuotePricingModel(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42553)
		else:
			StringField.__init__(self, 42553, data)

class LegReturnRateCashFlowType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42554)
		else:
			StringField.__init__(self, 42554, data)

class LegReturnRateValuationTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42555)
		else:
			IntField.__init__(self, 42555, data)

class LegReturnRateValuationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42556)
		else:
			StringField.__init__(self, 42556, data)

class LegReturnRateValuationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42557)
		else:
			StringField.__init__(self, 42557, data)

class LegReturnRateValuationPriceOption(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42558)
		else:
			IntField.__init__(self, 42558, data)

class LegReturnRateFinalPriceFallback(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42559)
		else:
			IntField.__init__(self, 42559, data)

class NoLegReturnRateInformationSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42560)
		else:
			IntField.__init__(self, 42560, data)

class LegReturnRateInformationSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42561)
		else:
			IntField.__init__(self, 42561, data)

class LegReturnRateReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42562)
		else:
			StringField.__init__(self, 42562, data)

class LegReturnRateReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42563)
		else:
			StringField.__init__(self, 42563, data)

class NoLegReturnRatePrices(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42564)
		else:
			IntField.__init__(self, 42564, data)

class LegReturnRatePriceBasis(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42565)
		else:
			IntField.__init__(self, 42565, data)

class LegReturnRatePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42566)
		else:
			DoubleField.__init__(self, 42566, data)

class LegReturnRatePriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42567)
		else:
			StringField.__init__(self, 42567, data)

class LegReturnRatePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42568)
		else:
			IntField.__init__(self, 42568, data)

class NoLegReturnRateValuationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42569)
		else:
			IntField.__init__(self, 42569, data)

class LegReturnRateValuationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42570)
		else:
			StringField.__init__(self, 42570, data)

class NoLegReturnRateValuationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42571)
		else:
			IntField.__init__(self, 42571, data)

class LegReturnRateValuationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42572)
		else:
			StringField.__init__(self, 42572, data)

class LegReturnRateValuationDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42573)
		else:
			IntField.__init__(self, 42573, data)

class LegSettlMethodElectionDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42574)
		else:
			StringField.__init__(self, 42574, data)

class LegSettlMethodElectionDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42575)
		else:
			IntField.__init__(self, 42575, data)

class LegSettlMethodElectionDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42576)
		else:
			IntField.__init__(self, 42576, data)

class LegSettlMethodElectionDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42577)
		else:
			IntField.__init__(self, 42577, data)

class LegSettlMethodElectionDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42578)
		else:
			StringField.__init__(self, 42578, data)

class LegSettlMethodElectionDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42579)
		else:
			IntField.__init__(self, 42579, data)

class LegSettlMethodElectionDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42580)
		else:
			StringField.__init__(self, 42580, data)

class NoLegSettlMethodElectionDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42581)
		else:
			IntField.__init__(self, 42581, data)

class LegSettlMethodElectionDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42582)
		else:
			StringField.__init__(self, 42582, data)

class LegStreamVersion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42583)
		else:
			StringField.__init__(self, 42583, data)

class LegStreamVersionEffectiveDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42584)
		else:
			StringField.__init__(self, 42584, data)

class LegStreamNotionalDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42585)
		else:
			StringField.__init__(self, 42585, data)

class LegStreamNotionalAdjustments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42586)
		else:
			IntField.__init__(self, 42586, data)

class SettlMethodElectingPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42590)
		else:
			IntField.__init__(self, 42590, data)

class MakeWholeDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42591)
		else:
			StringField.__init__(self, 42591, data)

class MakeWholeAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42592)
		else:
			DoubleField.__init__(self, 42592, data)

class MakeWholeBenchmarkCurveName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42593)
		else:
			StringField.__init__(self, 42593, data)

class MakeWholeBenchmarkCurvePoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42594)
		else:
			StringField.__init__(self, 42594, data)

class MakeWholeRecallSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42595)
		else:
			DoubleField.__init__(self, 42595, data)

class MakeWholeBenchmarkQuote(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42596)
		else:
			IntField.__init__(self, 42596, data)

class MakeWholeInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42597)
		else:
			IntField.__init__(self, 42597, data)

class PaymentAmountRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42598)
		else:
			IntField.__init__(self, 42598, data)

class PaymentAmountDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42599)
		else:
			StringField.__init__(self, 42599, data)

class PaymentStreamCashSettlIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42600)
		else:
			BoolField.__init__(self, 42600, data)

class PaymentStreamCompoundingXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42601)
		else:
			StringField.__init__(self, 42601, data)

class PaymentStreamCompoundingSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42602)
		else:
			DoubleField.__init__(self, 42602, data)

class PaymentStreamInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42603)
		else:
			IntField.__init__(self, 42603, data)

class PaymentStreamInterpolationPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42604)
		else:
			IntField.__init__(self, 42604, data)

class PaymentStreamCompoundingFixedRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42605)
		else:
			DoubleField.__init__(self, 42605, data)

class NoPaymentStreamCompoundingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42606)
		else:
			IntField.__init__(self, 42606, data)

class PaymentStreamCompoundingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42607)
		else:
			StringField.__init__(self, 42607, data)

class PaymentStreamCompoundingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42608)
		else:
			IntField.__init__(self, 42608, data)

class PaymentStreamCompoundingDatesBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42609)
		else:
			IntField.__init__(self, 42609, data)

class PaymentStreamCompoundingDatesRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42610)
		else:
			IntField.__init__(self, 42610, data)

class PaymentStreamCompoundingDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42611)
		else:
			IntField.__init__(self, 42611, data)

class PaymentStreamCompoundingDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42612)
		else:
			StringField.__init__(self, 42612, data)

class PaymentStreamCompoundingDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42613)
		else:
			IntField.__init__(self, 42613, data)

class PaymentStreamCompoundingPeriodSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42614)
		else:
			IntField.__init__(self, 42614, data)

class PaymentStreamCompoundingFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42615)
		else:
			IntField.__init__(self, 42615, data)

class PaymentStreamCompoundingFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42616)
		else:
			StringField.__init__(self, 42616, data)

class PaymentStreamCompoundingRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42617)
		else:
			StringField.__init__(self, 42617, data)

class PaymentStreamBoundsFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42618)
		else:
			StringField.__init__(self, 42618, data)

class PaymentStreamBoundsLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42619)
		else:
			StringField.__init__(self, 42619, data)

class NoPaymentStreamCompoundingDatesBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42620)
		else:
			IntField.__init__(self, 42620, data)

class PaymentStreamCompoundingDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42621)
		else:
			StringField.__init__(self, 42621, data)

class PaymentStreamCompoundingEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42622)
		else:
			StringField.__init__(self, 42622, data)

class PaymentStreamCompoundingEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42623)
		else:
			IntField.__init__(self, 42623, data)

class PaymentStreamCompoundingEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42624)
		else:
			IntField.__init__(self, 42624, data)

class PaymentStreamCompoundingEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42625)
		else:
			StringField.__init__(self, 42625, data)

class PaymentStreamCompoundingEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42626)
		else:
			IntField.__init__(self, 42626, data)

class PaymentStreamCompoundingEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42627)
		else:
			StringField.__init__(self, 42627, data)

class PaymentStreamCompoundingRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42628)
		else:
			StringField.__init__(self, 42628, data)

class PaymentStreamCompoundingRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42629)
		else:
			IntField.__init__(self, 42629, data)

class PaymentStreamCompoundingRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42630)
		else:
			StringField.__init__(self, 42630, data)

class PaymentStreamCompoundingRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42631)
		else:
			DoubleField.__init__(self, 42631, data)

class PaymentStreamCompoundingRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42632)
		else:
			DoubleField.__init__(self, 42632, data)

class PaymentStreamCompoundingRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42633)
		else:
			IntField.__init__(self, 42633, data)

class PaymentStreamCompoundingRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42634)
		else:
			IntField.__init__(self, 42634, data)

class PaymentStreamCompoundingCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42635)
		else:
			DoubleField.__init__(self, 42635, data)

class PaymentStreamCompoundingCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42636)
		else:
			IntField.__init__(self, 42636, data)

class PaymentStreamCompoundingCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42637)
		else:
			IntField.__init__(self, 42637, data)

class PaymentStreamCompoundingFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42638)
		else:
			DoubleField.__init__(self, 42638, data)

class PaymentStreamCompoundingFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42639)
		else:
			IntField.__init__(self, 42639, data)

class PaymentStreamCompoundingFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42640)
		else:
			IntField.__init__(self, 42640, data)

class PaymentStreamCompoundingInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42641)
		else:
			DoubleField.__init__(self, 42641, data)

class PaymentStreamCompoundingFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42642)
		else:
			CharField.__init__(self, 42642, data)

class PaymentStreamCompoundingFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42643)
		else:
			IntField.__init__(self, 42643, data)

class PaymentStreamCompoundingAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42644)
		else:
			IntField.__init__(self, 42644, data)

class PaymentStreamCompoundingNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42645)
		else:
			IntField.__init__(self, 42645, data)

class PaymentStreamCompoundingStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42646)
		else:
			StringField.__init__(self, 42646, data)

class PaymentStreamCompoundingStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42647)
		else:
			IntField.__init__(self, 42647, data)

class PaymentStreamCompoundingStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42648)
		else:
			IntField.__init__(self, 42648, data)

class PaymentStreamCompoundingStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42649)
		else:
			StringField.__init__(self, 42649, data)

class PaymentStreamCompoundingStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42650)
		else:
			IntField.__init__(self, 42650, data)

class PaymentStreamCompoundingStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42651)
		else:
			StringField.__init__(self, 42651, data)

class PaymentStreamFormulaImageLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42652)
		else:
			IntField.__init__(self, 42652, data)

class PaymentStreamFormulaImage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42653)
		else:
			StringField.__init__(self, 42653, data)

class PaymentStreamFinalPricePaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42654)
		else:
			StringField.__init__(self, 42654, data)

class PaymentStreamFinalPricePaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42655)
		else:
			IntField.__init__(self, 42655, data)

class PaymentStreamFinalPricePaymentDateOffsetfPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42656)
		else:
			IntField.__init__(self, 42656, data)

class PaymentStreamFinalPricePaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42657)
		else:
			StringField.__init__(self, 42657, data)

class PaymentStreamFinalPricePaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42658)
		else:
			IntField.__init__(self, 42658, data)

class PaymentStreamFinalPricePaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42659)
		else:
			StringField.__init__(self, 42659, data)

class NoPaymentStreamFixingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42660)
		else:
			IntField.__init__(self, 42660, data)

class PaymentStreamFixingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42661)
		else:
			StringField.__init__(self, 42661, data)

class PaymentStreamFixingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42662)
		else:
			IntField.__init__(self, 42662, data)

class PaymentStreamFirstObservationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42663)
		else:
			StringField.__init__(self, 42663, data)

class PaymentStreamFirstObservationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42664)
		else:
			IntField.__init__(self, 42664, data)

class PaymentStreamFirstObservationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42665)
		else:
			IntField.__init__(self, 42665, data)

class PaymentStreamFirstObservationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42666)
		else:
			StringField.__init__(self, 42666, data)

class PaymentStreamUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42667)
		else:
			StringField.__init__(self, 42667, data)

class ReturnRateNotionalReset(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42668)
		else:
			BoolField.__init__(self, 42668, data)

class PaymentStreamLinkInitialLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42669)
		else:
			DoubleField.__init__(self, 42669, data)

class PaymentStreamLinkClosingLevelIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42670)
		else:
			BoolField.__init__(self, 42670, data)

class PaymentStreamLinkExpiringLevelIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42671)
		else:
			BoolField.__init__(self, 42671, data)

class PaymentStreamLinkEstimatedTradingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42672)
		else:
			IntField.__init__(self, 42672, data)

class PaymentStreamLinkStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42673)
		else:
			DoubleField.__init__(self, 42673, data)

class PaymentStreamLinkStrikePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42674)
		else:
			IntField.__init__(self, 42674, data)

class PaymentStreamLinkMaximumBoundary(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42675)
		else:
			DoubleField.__init__(self, 42675, data)

class PaymentStreamLinkMinimumBoundary(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42676)
		else:
			DoubleField.__init__(self, 42676, data)

class PaymentStreamLinkNumberOfDataSeries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42677)
		else:
			IntField.__init__(self, 42677, data)

class PaymentStreamVarianceUnadjustedCap(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42678)
		else:
			DoubleField.__init__(self, 42678, data)

class PaymentStreamRealizedVarianceMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42679)
		else:
			IntField.__init__(self, 42679, data)

class PaymentStreamDaysAdjustmentIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42680)
		else:
			BoolField.__init__(self, 42680, data)

class PaymentStreamNearestExchangeContractRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42681)
		else:
			StringField.__init__(self, 42681, data)

class PaymentStreamVegaNotionalAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42682)
		else:
			DoubleField.__init__(self, 42682, data)

class NoPaymentStreamFormulas(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42683)
		else:
			IntField.__init__(self, 42683, data)

class PaymentStreamFormula(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42684)
		else:
			StringField.__init__(self, 42684, data)

class PaymentStreamFormulaDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42685)
		else:
			StringField.__init__(self, 42685, data)

class PaymentStreamFormulaCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42686)
		else:
			StringField.__init__(self, 42686, data)

class PaymentStreamFormulaCurrencyDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42687)
		else:
			StringField.__init__(self, 42687, data)

class PaymentStreamFormulaReferenceAmount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42688)
		else:
			IntField.__init__(self, 42688, data)

class PaymentStubEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42689)
		else:
			StringField.__init__(self, 42689, data)

class PaymentStubEndDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42690)
		else:
			IntField.__init__(self, 42690, data)

class PaymentStubEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42691)
		else:
			IntField.__init__(self, 42691, data)

class PaymentStubEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42692)
		else:
			IntField.__init__(self, 42692, data)

class PaymentStubEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42693)
		else:
			StringField.__init__(self, 42693, data)

class PaymentStubEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42694)
		else:
			IntField.__init__(self, 42694, data)

class PaymentStubEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42695)
		else:
			StringField.__init__(self, 42695, data)

class NoPaymentStubEndDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42696)
		else:
			IntField.__init__(self, 42696, data)

class PaymentStubEndDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42697)
		else:
			StringField.__init__(self, 42697, data)

class PaymentStubStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42698)
		else:
			StringField.__init__(self, 42698, data)

class PaymentStubStartDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42699)
		else:
			IntField.__init__(self, 42699, data)

class PaymentStubStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42700)
		else:
			IntField.__init__(self, 42700, data)

class PaymentStubStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42701)
		else:
			IntField.__init__(self, 42701, data)

class PaymentStubStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42702)
		else:
			StringField.__init__(self, 42702, data)

class PaymentStubStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42703)
		else:
			IntField.__init__(self, 42703, data)

class PaymentStubStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42704)
		else:
			StringField.__init__(self, 42704, data)

class NoPaymentStubStartDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42705)
		else:
			IntField.__init__(self, 42705, data)

class PaymentStubStartDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42706)
		else:
			StringField.__init__(self, 42706, data)

class ProvisionBreakFeeElection(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42707)
		else:
			IntField.__init__(self, 42707, data)

class ProvisionBreakFeeRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42708)
		else:
			DoubleField.__init__(self, 42708, data)

class RelatedToDividendPeriodXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2417)
		else:
			StringField.__init__(self, 2417, data)

class NoReturnRateDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42709)
		else:
			IntField.__init__(self, 42709, data)

class ReturnRateDateMode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42710)
		else:
			IntField.__init__(self, 42710, data)

class ReturnRateValuationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42711)
		else:
			IntField.__init__(self, 42711, data)

class ReturnRateValuationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42712)
		else:
			IntField.__init__(self, 42712, data)

class ReturnRateValuationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42713)
		else:
			StringField.__init__(self, 42713, data)

class ReturnRateValuationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42714)
		else:
			IntField.__init__(self, 42714, data)

class ReturnRateValuationStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42715)
		else:
			StringField.__init__(self, 42715, data)

class ReturnRateValuationStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42716)
		else:
			IntField.__init__(self, 42716, data)

class ReturnRateValuationStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42717)
		else:
			IntField.__init__(self, 42717, data)

class ReturnRateValuationStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42718)
		else:
			StringField.__init__(self, 42718, data)

class ReturnRateValuationStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42719)
		else:
			IntField.__init__(self, 42719, data)

class ReturnRateValuationStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42720)
		else:
			StringField.__init__(self, 42720, data)

class ReturnRateValuationEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42721)
		else:
			StringField.__init__(self, 42721, data)

class ReturnRateValuationEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42722)
		else:
			IntField.__init__(self, 42722, data)

class ReturnRateValuationEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42723)
		else:
			IntField.__init__(self, 42723, data)

class ReturnRateValuationEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42724)
		else:
			StringField.__init__(self, 42724, data)

class ReturnRateValuationEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42725)
		else:
			IntField.__init__(self, 42725, data)

class ReturnRateValuationEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42726)
		else:
			StringField.__init__(self, 42726, data)

class ReturnRateValuationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42727)
		else:
			IntField.__init__(self, 42727, data)

class ReturnRateValuationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42728)
		else:
			StringField.__init__(self, 42728, data)

class ReturnRateValuationFrequencyRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42729)
		else:
			StringField.__init__(self, 42729, data)

class ReturnRateValuationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42730)
		else:
			IntField.__init__(self, 42730, data)

class NoReturnRateFXConversions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42731)
		else:
			IntField.__init__(self, 42731, data)

class ReturnRateFXCurrencySymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42732)
		else:
			StringField.__init__(self, 42732, data)

class ReturnRateFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42733)
		else:
			DoubleField.__init__(self, 42733, data)

class ReturnRateFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42734)
		else:
			CharField.__init__(self, 42734, data)

class NoReturnRates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42735)
		else:
			IntField.__init__(self, 42735, data)

class ReturnRatePriceSequence(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42736)
		else:
			IntField.__init__(self, 42736, data)

class ReturnRateCommissionBasis(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42737)
		else:
			CharField.__init__(self, 42737, data)

class ReturnRateCommissionAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42738)
		else:
			DoubleField.__init__(self, 42738, data)

class ReturnRateCommissionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42739)
		else:
			StringField.__init__(self, 42739, data)

class ReturnRateTotalCommissionPerTrade(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42740)
		else:
			DoubleField.__init__(self, 42740, data)

class ReturnRateDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42741)
		else:
			StringField.__init__(self, 42741, data)

class ReturnRateAmountRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42742)
		else:
			IntField.__init__(self, 42742, data)

class ReturnRateQuoteMeasureType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42743)
		else:
			StringField.__init__(self, 42743, data)

class ReturnRateQuoteUnits(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42744)
		else:
			StringField.__init__(self, 42744, data)

class ReturnRateQuoteMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42745)
		else:
			IntField.__init__(self, 42745, data)

class ReturnRateQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42746)
		else:
			StringField.__init__(self, 42746, data)

class ReturnRateQuoteCurrencyType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42747)
		else:
			StringField.__init__(self, 42747, data)

class ReturnRateQuoteTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42748)
		else:
			IntField.__init__(self, 42748, data)

class ReturnRateQuoteTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42749)
		else:
			StringField.__init__(self, 42749, data)

class ReturnRateQuoteDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42750)
		else:
			StringField.__init__(self, 42750, data)

class ReturnRateQuoteExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42751)
		else:
			StringField.__init__(self, 42751, data)

class ReturnRateQuoteBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42752)
		else:
			StringField.__init__(self, 42752, data)

class ReturnRateQuoteExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42753)
		else:
			StringField.__init__(self, 42753, data)

class ReturnRateQuotePricingModel(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42754)
		else:
			StringField.__init__(self, 42754, data)

class ReturnRateCashFlowType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42755)
		else:
			StringField.__init__(self, 42755, data)

class ReturnRateValuationTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42756)
		else:
			IntField.__init__(self, 42756, data)

class ReturnRateValuationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42757)
		else:
			StringField.__init__(self, 42757, data)

class ReturnRateValuationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42758)
		else:
			StringField.__init__(self, 42758, data)

class ReturnRateValuationPriceOption(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42759)
		else:
			IntField.__init__(self, 42759, data)

class ReturnRateFinalPriceFallback(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42760)
		else:
			IntField.__init__(self, 42760, data)

class NoReturnRateInformationSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42761)
		else:
			IntField.__init__(self, 42761, data)

class ReturnRateInformationSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42762)
		else:
			IntField.__init__(self, 42762, data)

class ReturnRateReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42763)
		else:
			StringField.__init__(self, 42763, data)

class ReturnRateReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42764)
		else:
			StringField.__init__(self, 42764, data)

class NoReturnRatePrices(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42765)
		else:
			IntField.__init__(self, 42765, data)

class ReturnRatePriceBasis(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42766)
		else:
			IntField.__init__(self, 42766, data)

class ReturnRatePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42767)
		else:
			DoubleField.__init__(self, 42767, data)

class ReturnRatePriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42768)
		else:
			StringField.__init__(self, 42768, data)

class ReturnRatePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42769)
		else:
			IntField.__init__(self, 42769, data)

class NoReturnRateValuationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42770)
		else:
			IntField.__init__(self, 42770, data)

class ReturnRateValuationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42771)
		else:
			StringField.__init__(self, 42771, data)

class NoReturnRateValuationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42772)
		else:
			IntField.__init__(self, 42772, data)

class ReturnRateValuationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42773)
		else:
			StringField.__init__(self, 42773, data)

class ReturnRateValuationDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42774)
		else:
			IntField.__init__(self, 42774, data)

class NoSettlMethodElectionDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42775)
		else:
			IntField.__init__(self, 42775, data)

class SettlMethodElectionDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42776)
		else:
			StringField.__init__(self, 42776, data)

class SettlMethodElectionDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42777)
		else:
			StringField.__init__(self, 42777, data)

class SettlMethodElectionDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42778)
		else:
			IntField.__init__(self, 42778, data)

class SettlMethodElectionDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42779)
		else:
			IntField.__init__(self, 42779, data)

class SettlMethodElectionDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42780)
		else:
			IntField.__init__(self, 42780, data)

class SettlMethodElectionDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42781)
		else:
			StringField.__init__(self, 42781, data)

class SettlMethodElectionDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42782)
		else:
			IntField.__init__(self, 42782, data)

class SettlMethodElectionDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42783)
		else:
			StringField.__init__(self, 42783, data)

class StreamVersion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42784)
		else:
			StringField.__init__(self, 42784, data)

class StreamVersionEffectiveDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42785)
		else:
			StringField.__init__(self, 42785, data)

class StreamNotionalDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42786)
		else:
			StringField.__init__(self, 42786, data)

class StreamNotionalAdjustments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42787)
		else:
			IntField.__init__(self, 42787, data)

class NoUnderlyingCashSettlDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42788)
		else:
			IntField.__init__(self, 42788, data)

class UnderlyingCashSettlDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42789)
		else:
			StringField.__init__(self, 42789, data)

class UnderlyingCashSettlDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42790)
		else:
			StringField.__init__(self, 42790, data)

class UnderlyingCashSettlDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42791)
		else:
			IntField.__init__(self, 42791, data)

class UnderlyingCashSettlDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42792)
		else:
			IntField.__init__(self, 42792, data)

class UnderlyingCashSettlDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42793)
		else:
			IntField.__init__(self, 42793, data)

class UnderlyingCashSettlDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42794)
		else:
			StringField.__init__(self, 42794, data)

class UnderlyingCashSettlDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42795)
		else:
			IntField.__init__(self, 42795, data)

class UnderlyingCashSettlDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42796)
		else:
			StringField.__init__(self, 42796, data)

class UnderlyingCashSettlPriceSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42797)
		else:
			StringField.__init__(self, 42797, data)

class UnderlyingCashSettlPriceDefault(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42798)
		else:
			IntField.__init__(self, 42798, data)

class UnderlyingComplexEventFuturesPriceValuation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2611)
		else:
			BoolField.__init__(self, 2611, data)

class UnderlyingComplexEventOptionsPriceValuation(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2612)
		else:
			BoolField.__init__(self, 2612, data)

class UnderlyingComplexEventPVFinalPriceElectionFallback(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2613)
		else:
			IntField.__init__(self, 2613, data)

class NoUnderlyingDividendAccrualPaymentDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42799)
		else:
			IntField.__init__(self, 42799, data)

class UnderlyingDividendAccrualPaymentDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42800)
		else:
			StringField.__init__(self, 42800, data)

class UnderlyingDividendFloatingRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42801)
		else:
			StringField.__init__(self, 42801, data)

class UnderlyingDividendFloatingRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42802)
		else:
			IntField.__init__(self, 42802, data)

class UnderlyingDividendFloatingRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42803)
		else:
			StringField.__init__(self, 42803, data)

class UnderlyingDividendFloatingRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42804)
		else:
			DoubleField.__init__(self, 42804, data)

class UnderlyingDividendFloatingRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42805)
		else:
			DoubleField.__init__(self, 42805, data)

class UnderlyingDividendFloatingRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42806)
		else:
			IntField.__init__(self, 42806, data)

class UnderlyingDividendFloatingRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42807)
		else:
			IntField.__init__(self, 42807, data)

class UnderlyingDividendCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42808)
		else:
			DoubleField.__init__(self, 42808, data)

class UnderlyingDividendCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42809)
		else:
			IntField.__init__(self, 42809, data)

class UnderlyingDividendCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42810)
		else:
			IntField.__init__(self, 42810, data)

class UnderlyingDividendFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42811)
		else:
			DoubleField.__init__(self, 42811, data)

class UnderlyingDividendFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42812)
		else:
			IntField.__init__(self, 42812, data)

class UnderlyingDividendFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42813)
		else:
			IntField.__init__(self, 42813, data)

class UnderlyingDividendInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42814)
		else:
			DoubleField.__init__(self, 42814, data)

class UnderlyingDividendFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42815)
		else:
			CharField.__init__(self, 42815, data)

class UnderlyingDividendFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42816)
		else:
			IntField.__init__(self, 42816, data)

class UnderlyingDividendAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42817)
		else:
			IntField.__init__(self, 42817, data)

class UnderlyingDividendNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42818)
		else:
			IntField.__init__(self, 42818, data)

class UnderlyingDividendAccrualPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42819)
		else:
			IntField.__init__(self, 42819, data)

class UnderlyingDividendAccrualPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42820)
		else:
			IntField.__init__(self, 42820, data)

class UnderlyingDividendAccrualPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42821)
		else:
			StringField.__init__(self, 42821, data)

class UnderlyingDividendAccrualPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42822)
		else:
			IntField.__init__(self, 42822, data)

class UnderlyingDividendAccrualPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42823)
		else:
			StringField.__init__(self, 42823, data)

class UnderlyingDividendAccrualPaymentDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42824)
		else:
			IntField.__init__(self, 42824, data)

class UnderlyingDividendAccrualPaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42825)
		else:
			StringField.__init__(self, 42825, data)

class UnderlyingDividendReinvestmentIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42826)
		else:
			BoolField.__init__(self, 42826, data)

class UnderlyingDividendEntitlementEvent(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42827)
		else:
			IntField.__init__(self, 42827, data)

class UnderlyingDividendAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42828)
		else:
			IntField.__init__(self, 42828, data)

class UnderlyingDividendUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42829)
		else:
			StringField.__init__(self, 42829, data)

class UnderlyingExtraordinaryDividendPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42830)
		else:
			IntField.__init__(self, 42830, data)

class UnderlyingExtraordinaryDividendAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42831)
		else:
			IntField.__init__(self, 42831, data)

class UnderlyingExtraordinaryDividendCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42832)
		else:
			StringField.__init__(self, 42832, data)

class UnderlyingExtraordinaryDividendDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42833)
		else:
			StringField.__init__(self, 42833, data)

class UnderlyingDividendAccrualFixedRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42834)
		else:
			DoubleField.__init__(self, 42834, data)

class UnderlyingDividendCompoundingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42835)
		else:
			IntField.__init__(self, 42835, data)

class UnderlyingDividendNumOfIndexUnits(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42836)
		else:
			IntField.__init__(self, 42836, data)

class UnderlyingDividendCashPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42837)
		else:
			DoubleField.__init__(self, 42837, data)

class UnderlyingDividendCashEquivalentPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42838)
		else:
			DoubleField.__init__(self, 42838, data)

class UnderlyingNonCashDividendTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42839)
		else:
			IntField.__init__(self, 42839, data)

class UnderlyingDividendComposition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42840)
		else:
			IntField.__init__(self, 42840, data)

class UnderlyingSpecialDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42841)
		else:
			BoolField.__init__(self, 42841, data)

class UnderlyingMaterialDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42842)
		else:
			BoolField.__init__(self, 42842, data)

class UnderlyingOptionsExchangeDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42843)
		else:
			BoolField.__init__(self, 42843, data)

class UnderlyingAdditionalDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42844)
		else:
			BoolField.__init__(self, 42844, data)

class UnderlyingAllDividendsIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42845)
		else:
			BoolField.__init__(self, 42845, data)

class UnderlyingDividendFXTriggerDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42846)
		else:
			IntField.__init__(self, 42846, data)

class UnderlyingDividendFXTriggerDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42847)
		else:
			IntField.__init__(self, 42847, data)

class UnderlyingDividendFXTriggerDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42848)
		else:
			StringField.__init__(self, 42848, data)

class UnderlyingDividendFXTriggerDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42849)
		else:
			IntField.__init__(self, 42849, data)

class UnderlyingDividendFXTriggerDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42850)
		else:
			StringField.__init__(self, 42850, data)

class UnderlyingDividendFXTriggerDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42851)
		else:
			IntField.__init__(self, 42851, data)

class UnderlyingDividendFXTriggerDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42852)
		else:
			StringField.__init__(self, 42852, data)

class NoUnderlyingDividendFXTriggerDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42853)
		else:
			IntField.__init__(self, 42853, data)

class UnderlyingDividendFXTriggerDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42854)
		else:
			StringField.__init__(self, 42854, data)

class NoUnderlyingDividendPayments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42855)
		else:
			IntField.__init__(self, 42855, data)

class UnderlyingDividendPaymentDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42856)
		else:
			StringField.__init__(self, 42856, data)

class UnderlyingDividendPaymentAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42857)
		else:
			DoubleField.__init__(self, 42857, data)

class UnderlyingDividendPaymentCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42858)
		else:
			StringField.__init__(self, 42858, data)

class UnderlyingDividendAccruedInterest(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42859)
		else:
			DoubleField.__init__(self, 42859, data)

class UnderlyingDividendPayoutRatio(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42860)
		else:
			DoubleField.__init__(self, 42860, data)

class UnderlyingDividendPayoutConditions(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42861)
		else:
			StringField.__init__(self, 42861, data)

class NoUnderlyingDividendPeriods(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42862)
		else:
			IntField.__init__(self, 42862, data)

class UnderlyingDividendPeriodSequence(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42863)
		else:
			IntField.__init__(self, 42863, data)

class UnderlyingDividendPeriodStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42864)
		else:
			StringField.__init__(self, 42864, data)

class UnderlyingDividendPeriodEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42865)
		else:
			StringField.__init__(self, 42865, data)

class UnderlyingDividendPeriodUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42866)
		else:
			StringField.__init__(self, 42866, data)

class UnderlyingDividendPeriodStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42867)
		else:
			DoubleField.__init__(self, 42867, data)

class UnderlyingDividendPeriodBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42868)
		else:
			IntField.__init__(self, 42868, data)

class UnderlyingDividendPeriodValuationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42869)
		else:
			StringField.__init__(self, 42869, data)

class UnderlyingDividendPeriodValuationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42870)
		else:
			IntField.__init__(self, 42870, data)

class UnderlyingDividendPeriodValuationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42871)
		else:
			IntField.__init__(self, 42871, data)

class UnderlyingDividendPeriodValuationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42872)
		else:
			StringField.__init__(self, 42872, data)

class UnderlyingDividendPeriodValuationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42873)
		else:
			IntField.__init__(self, 42873, data)

class UnderlyingDividendPeriodValuationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42874)
		else:
			StringField.__init__(self, 42874, data)

class UnderlyingDividendPeriodPaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42875)
		else:
			StringField.__init__(self, 42875, data)

class UnderlyingDividendPeriodPaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42876)
		else:
			IntField.__init__(self, 42876, data)

class UnderlyingDividendPeriodPaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42877)
		else:
			IntField.__init__(self, 42877, data)

class UnderlyingDividendPeriodPaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42878)
		else:
			StringField.__init__(self, 42878, data)

class UnderlyingDividendPeriodPaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42879)
		else:
			IntField.__init__(self, 42879, data)

class UnderlyingDividendPeriodPaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42880)
		else:
			StringField.__init__(self, 42880, data)

class UnderlyingDividendPeriodXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42881)
		else:
			StringField.__init__(self, 42881, data)

class NoUnderlyingDividendPeriodBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42882)
		else:
			IntField.__init__(self, 42882, data)

class UnderlyingDividendPeriodBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42883)
		else:
			StringField.__init__(self, 42883, data)

class NoUnderlyingExtraordinaryEvents(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42884)
		else:
			IntField.__init__(self, 42884, data)

class UnderlyingExtraordinaryEventType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42885)
		else:
			StringField.__init__(self, 42885, data)

class UnderlyingExtraordinaryEventValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42886)
		else:
			StringField.__init__(self, 42886, data)

class UnderlyingNotional(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2614)
		else:
			DoubleField.__init__(self, 2614, data)

class UnderlyingNotionalCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2615)
		else:
			StringField.__init__(self, 2615, data)

class UnderlyingNotionalDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2616)
		else:
			StringField.__init__(self, 2616, data)

class UnderlyingNotionalAdjustments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2617)
		else:
			IntField.__init__(self, 2617, data)

class UnderlyingNotionalXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2619)
		else:
			StringField.__init__(self, 2619, data)

class UnderlyingFutureID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2620)
		else:
			StringField.__init__(self, 2620, data)

class UnderlyingFutureIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2621)
		else:
			StringField.__init__(self, 2621, data)

class UnderlyingStrikeIndexCurvePoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2622)
		else:
			StringField.__init__(self, 2622, data)

class UnderlyingStrikeIndexQuote(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2623)
		else:
			IntField.__init__(self, 2623, data)

class UnderlyingExtraordinaryEventAdjustmentMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2624)
		else:
			IntField.__init__(self, 2624, data)

class UnderlyingExchangeLookAlike(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2625)
		else:
			BoolField.__init__(self, 2625, data)

class UnderlyingAverageVolumeLimitationPercentage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2626)
		else:
			DoubleField.__init__(self, 2626, data)

class UnderlyingAverageVolumeLimitationPeriodDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2627)
		else:
			IntField.__init__(self, 2627, data)

class UnderlyingDepositoryReceiptIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2628)
		else:
			BoolField.__init__(self, 2628, data)

class UnderlyingOpenUnits(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2629)
		else:
			DoubleField.__init__(self, 2629, data)

class UnderlyingBasketDivisor(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2630)
		else:
			DoubleField.__init__(self, 2630, data)

class UnderlyingInstrumentXID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2631)
		else:
			StringField.__init__(self, 2631, data)

class UnderlyingSettlMethodElectingPartySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42887)
		else:
			IntField.__init__(self, 42887, data)

class UnderlyingMakeWholeDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42888)
		else:
			StringField.__init__(self, 42888, data)

class UnderlyingMakeWholeAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42889)
		else:
			DoubleField.__init__(self, 42889, data)

class UnderlyingMakeWholeBenchmarkCurveName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42890)
		else:
			StringField.__init__(self, 42890, data)

class UnderlyingMakeWholeBenchmarkCurvePoint(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42891)
		else:
			StringField.__init__(self, 42891, data)

class UnderlyingMakeWholeRecallSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42892)
		else:
			DoubleField.__init__(self, 42892, data)

class UnderlyingMakeWholeBenchmarkQuote(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42893)
		else:
			IntField.__init__(self, 42893, data)

class UnderlyingMakeWholeInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42894)
		else:
			IntField.__init__(self, 42894, data)

class UnderlyingPaymentStreamCashSettlIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42895)
		else:
			BoolField.__init__(self, 42895, data)

class UnderlyingPaymentStreamCompoundingXIDRef(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42896)
		else:
			StringField.__init__(self, 42896, data)

class UnderlyingPaymentStreamCompoundingSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42897)
		else:
			DoubleField.__init__(self, 42897, data)

class UnderlyingPaymentStreamInterpolationMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42898)
		else:
			IntField.__init__(self, 42898, data)

class UnderlyingPaymentStreamInterpolationPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42899)
		else:
			IntField.__init__(self, 42899, data)

class UnderlyingPaymentStreamCompoundingFixedRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42900)
		else:
			DoubleField.__init__(self, 42900, data)

class NoUnderlyingPaymentStreamCompoundingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42901)
		else:
			IntField.__init__(self, 42901, data)

class UnderlyingPaymentStreamCompoundingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42902)
		else:
			StringField.__init__(self, 42902, data)

class UnderlyingPaymentStreamCompoundingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42903)
		else:
			IntField.__init__(self, 42903, data)

class UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42904)
		else:
			IntField.__init__(self, 42904, data)

class UnderlyingPaymentStreamCompoundingDatesRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42905)
		else:
			IntField.__init__(self, 42905, data)

class UnderlyingPaymentStreamCompoundingDatesOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42906)
		else:
			IntField.__init__(self, 42906, data)

class UnderlyingPaymentStreamCompoundingDatesOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42907)
		else:
			StringField.__init__(self, 42907, data)

class UnderlyingPaymentStreamCompoundingDatesOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42908)
		else:
			IntField.__init__(self, 42908, data)

class UnderlyingPaymentStreamCompoundingPeriodSkip(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42909)
		else:
			IntField.__init__(self, 42909, data)

class UnderlyingPaymentStreamCompoundingFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42910)
		else:
			IntField.__init__(self, 42910, data)

class UnderlyingPaymentStreamCompoundingFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42911)
		else:
			StringField.__init__(self, 42911, data)

class UnderlyingPaymentStreamCompoundingRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42912)
		else:
			StringField.__init__(self, 42912, data)

class UnderlyingPaymentStreamBoundsFirstDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42913)
		else:
			StringField.__init__(self, 42913, data)

class UnderlyingPaymentStreamBoundsLastDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42914)
		else:
			StringField.__init__(self, 42914, data)

class NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42915)
		else:
			IntField.__init__(self, 42915, data)

class UnderlyingPaymentStreamCompoundingDatesBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42916)
		else:
			StringField.__init__(self, 42916, data)

class UnderlyingPaymentStreamCompoundingEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42917)
		else:
			StringField.__init__(self, 42917, data)

class UnderlyingPaymentStreamCompoundingEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42918)
		else:
			IntField.__init__(self, 42918, data)

class UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42919)
		else:
			IntField.__init__(self, 42919, data)

class UnderlyingPaymentStreamCompoundingEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42920)
		else:
			StringField.__init__(self, 42920, data)

class UnderlyingPaymentStreamCompoundingEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42921)
		else:
			IntField.__init__(self, 42921, data)

class UnderlyingPaymentStreamCompoundingEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42922)
		else:
			StringField.__init__(self, 42922, data)

class UnderlyingPaymentStreamCompoundingRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42923)
		else:
			StringField.__init__(self, 42923, data)

class UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42924)
		else:
			IntField.__init__(self, 42924, data)

class UnderlyingPaymentStreamCompoundingRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42925)
		else:
			StringField.__init__(self, 42925, data)

class UnderlyingPaymentStreamCompoundingRateMultiplier(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42926)
		else:
			DoubleField.__init__(self, 42926, data)

class UnderlyingPaymentStreamCompoundingRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42927)
		else:
			DoubleField.__init__(self, 42927, data)

class UnderlyingPaymentStreamCompoundingRateSpreadPositionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42928)
		else:
			IntField.__init__(self, 42928, data)

class UnderlyingPaymentStreamCompoundingRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42929)
		else:
			IntField.__init__(self, 42929, data)

class UnderlyingPaymentStreamCompoundingCapRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42930)
		else:
			DoubleField.__init__(self, 42930, data)

class UnderlyingPaymentStreamCompoundingCapRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42931)
		else:
			IntField.__init__(self, 42931, data)

class UnderlyingPaymentStreamCompoundingCapRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42932)
		else:
			IntField.__init__(self, 42932, data)

class UnderlyingPaymentStreamCompoundingFloorRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42933)
		else:
			DoubleField.__init__(self, 42933, data)

class UnderlyingPaymentStreamCompoundingFloorRateBuySide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42934)
		else:
			IntField.__init__(self, 42934, data)

class UnderlyingPaymentStreamCompoundingFloorRateSellSide(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42935)
		else:
			IntField.__init__(self, 42935, data)

class UnderlyingPaymentStreamCompoundingInitialRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42936)
		else:
			DoubleField.__init__(self, 42936, data)

class UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 42937)
		else:
			CharField.__init__(self, 42937, data)

class UnderlyingPaymentStreamCompoundingFinalRatePrecision(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42938)
		else:
			IntField.__init__(self, 42938, data)

class UnderlyingPaymentStreamCompoundingAveragingMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42939)
		else:
			IntField.__init__(self, 42939, data)

class UnderlyingPaymentStreamCompoundingNegativeRateTreatment(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42940)
		else:
			IntField.__init__(self, 42940, data)

class UnderlyingPaymentStreamCompoundingStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42941)
		else:
			StringField.__init__(self, 42941, data)

class UnderlyingPaymentStreamCompoundingStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42942)
		else:
			IntField.__init__(self, 42942, data)

class UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42943)
		else:
			IntField.__init__(self, 42943, data)

class UnderlyingPaymentStreamCompoundingStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42944)
		else:
			StringField.__init__(self, 42944, data)

class UnderlyingPaymentStreamCompoundingStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42945)
		else:
			IntField.__init__(self, 42945, data)

class UnderlyingPaymentStreamCompoundingStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42946)
		else:
			StringField.__init__(self, 42946, data)

class UnderlyingPaymentStreamFormulaImageLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42947)
		else:
			IntField.__init__(self, 42947, data)

class UnderlyingPaymentStreamFormulaImage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42948)
		else:
			StringField.__init__(self, 42948, data)

class UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42949)
		else:
			StringField.__init__(self, 42949, data)

class UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42950)
		else:
			IntField.__init__(self, 42950, data)

class UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42951)
		else:
			IntField.__init__(self, 42951, data)

class UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42952)
		else:
			StringField.__init__(self, 42952, data)

class UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42953)
		else:
			IntField.__init__(self, 42953, data)

class UnderlyingPaymentStreamFinalPricePaymentDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42954)
		else:
			StringField.__init__(self, 42954, data)

class NoUnderlyingPaymentStreamFixingDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42955)
		else:
			IntField.__init__(self, 42955, data)

class UnderlyingPaymentStreamFixingDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42956)
		else:
			StringField.__init__(self, 42956, data)

class UnderlyingPaymentStreamFixingDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42957)
		else:
			IntField.__init__(self, 42957, data)

class UnderlyingPaymentStreamFirstObservationDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42958)
		else:
			StringField.__init__(self, 42958, data)

class UnderlyingPaymentStreamFirstObservationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42959)
		else:
			IntField.__init__(self, 42959, data)

class UnderlyingPaymentStreamFirstObservationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42960)
		else:
			IntField.__init__(self, 42960, data)

class UnderlyingPaymentStreamFirstObservationDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42961)
		else:
			StringField.__init__(self, 42961, data)

class UnderlyingPaymentStreamUnderlierRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42962)
		else:
			StringField.__init__(self, 42962, data)

class UnderlyingReturnRateNotionalReset(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42963)
		else:
			BoolField.__init__(self, 42963, data)

class UnderlyingPaymentStreamLinkInitialLevel(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42964)
		else:
			DoubleField.__init__(self, 42964, data)

class UnderlyingPaymentStreamLinkClosingLevelIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42965)
		else:
			BoolField.__init__(self, 42965, data)

class UnderlyingPaymentStreamLinkExpiringLevelIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42966)
		else:
			BoolField.__init__(self, 42966, data)

class UnderlyingPaymentStreamLinkEstimatedTradingDays(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42967)
		else:
			IntField.__init__(self, 42967, data)

class UnderlyingPaymentStreamLinkStrikePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42968)
		else:
			DoubleField.__init__(self, 42968, data)

class UnderlyingPaymentStreamLinkStrikePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42969)
		else:
			IntField.__init__(self, 42969, data)

class UnderlyingPaymentStreamLinkMaximumBoundary(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42970)
		else:
			DoubleField.__init__(self, 42970, data)

class UnderlyingPaymentStreamLinkMinimumBoundary(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42971)
		else:
			DoubleField.__init__(self, 42971, data)

class UnderlyingPaymentStreamLinkNumberOfDataSeries(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42972)
		else:
			IntField.__init__(self, 42972, data)

class UnderlyingPaymentStreamVarianceUnadjustedCap(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42973)
		else:
			DoubleField.__init__(self, 42973, data)

class UnderlyingPaymentStreamRealizedVarianceMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42974)
		else:
			IntField.__init__(self, 42974, data)

class UnderlyingPaymentStreamDaysAdjustmentIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 42975)
		else:
			BoolField.__init__(self, 42975, data)

class UnderlyingPaymentStreamNearestExchangeContractRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42976)
		else:
			StringField.__init__(self, 42976, data)

class UnderlyingPaymentStreamVegaNotionalAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 42977)
		else:
			DoubleField.__init__(self, 42977, data)

class UnderlyingPaymentStreamFormulaCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42978)
		else:
			StringField.__init__(self, 42978, data)

class UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42979)
		else:
			StringField.__init__(self, 42979, data)

class UnderlyingPaymentStreamFormulaReferenceAmount(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42980)
		else:
			IntField.__init__(self, 42980, data)

class NoUnderlyingPaymentStreamFormulas(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42981)
		else:
			IntField.__init__(self, 42981, data)

class UnderlyingPaymentStreamFormula(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42982)
		else:
			StringField.__init__(self, 42982, data)

class UnderlyingPaymentStreamFormulaDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42983)
		else:
			StringField.__init__(self, 42983, data)

class UnderlyingPaymentStubEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42984)
		else:
			StringField.__init__(self, 42984, data)

class UnderlyingPaymentStubEndDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42985)
		else:
			IntField.__init__(self, 42985, data)

class UnderlyingPaymentStubEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42986)
		else:
			IntField.__init__(self, 42986, data)

class UnderlyingPaymentStubEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42987)
		else:
			IntField.__init__(self, 42987, data)

class UnderlyingPaymentStubEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42988)
		else:
			StringField.__init__(self, 42988, data)

class UnderlyingPaymentStubEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42989)
		else:
			IntField.__init__(self, 42989, data)

class UnderlyingPaymentStubEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42990)
		else:
			StringField.__init__(self, 42990, data)

class NoUnderlyingPaymentStubEndDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42991)
		else:
			IntField.__init__(self, 42991, data)

class UnderlyingPaymentStubEndDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42992)
		else:
			StringField.__init__(self, 42992, data)

class UnderlyingPaymentStubStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42993)
		else:
			StringField.__init__(self, 42993, data)

class UnderlyingPaymentStubStartDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42994)
		else:
			IntField.__init__(self, 42994, data)

class UnderlyingPaymentStubStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42995)
		else:
			IntField.__init__(self, 42995, data)

class UnderlyingPaymentStubStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42996)
		else:
			IntField.__init__(self, 42996, data)

class UnderlyingPaymentStubStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42997)
		else:
			StringField.__init__(self, 42997, data)

class UnderlyingPaymentStubStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 42998)
		else:
			IntField.__init__(self, 42998, data)

class UnderlyingPaymentStubStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 42999)
		else:
			StringField.__init__(self, 42999, data)

class NoUnderlyingPaymentStubStartDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43000)
		else:
			IntField.__init__(self, 43000, data)

class UnderlyingPaymentStubStartDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43001)
		else:
			StringField.__init__(self, 43001, data)

class UnderlyingProvisionBreakFeeElection(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43002)
		else:
			IntField.__init__(self, 43002, data)

class UnderlyingProvisionBreakFeeRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43003)
		else:
			DoubleField.__init__(self, 43003, data)

class UnderlyingRateSpreadInitialValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43004)
		else:
			DoubleField.__init__(self, 43004, data)

class NoUnderlyingRateSpreadSteps(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43005)
		else:
			IntField.__init__(self, 43005, data)

class UnderlyingRateSpreadStepDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43006)
		else:
			StringField.__init__(self, 43006, data)

class UnderlyingRateSpreadStepValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43007)
		else:
			DoubleField.__init__(self, 43007, data)

class NoUnderlyingReturnRateDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43008)
		else:
			IntField.__init__(self, 43008, data)

class UnderlyingReturnRateDateMode(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43009)
		else:
			IntField.__init__(self, 43009, data)

class UnderlyingReturnRateValuationDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43010)
		else:
			IntField.__init__(self, 43010, data)

class UnderlyingReturnRateValuationDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43011)
		else:
			IntField.__init__(self, 43011, data)

class UnderlyingReturnRateValuationDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43012)
		else:
			StringField.__init__(self, 43012, data)

class UnderlyingReturnRateValuationDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43013)
		else:
			IntField.__init__(self, 43013, data)

class UnderlyingReturnRateValuationStartDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43014)
		else:
			StringField.__init__(self, 43014, data)

class UnderlyingReturnRateValuationStartDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43015)
		else:
			IntField.__init__(self, 43015, data)

class UnderlyingReturnRateValuationStartDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43016)
		else:
			IntField.__init__(self, 43016, data)

class UnderlyingReturnRateValuationStartDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43017)
		else:
			StringField.__init__(self, 43017, data)

class UnderlyingReturnRateValuationStartDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43018)
		else:
			IntField.__init__(self, 43018, data)

class UnderlyingReturnRateValuationStartDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43019)
		else:
			StringField.__init__(self, 43019, data)

class UnderlyingReturnRateValuationEndDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43020)
		else:
			StringField.__init__(self, 43020, data)

class UnderlyingReturnRateValuationEndDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43021)
		else:
			IntField.__init__(self, 43021, data)

class UnderlyingReturnRateValuationEndDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43022)
		else:
			IntField.__init__(self, 43022, data)

class UnderlyingReturnRateValuationEndDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43023)
		else:
			StringField.__init__(self, 43023, data)

class UnderlyingReturnRateValuationEndDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43024)
		else:
			IntField.__init__(self, 43024, data)

class UnderlyingReturnRateValuationEndDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43025)
		else:
			StringField.__init__(self, 43025, data)

class UnderlyingReturnRateValuationFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43026)
		else:
			IntField.__init__(self, 43026, data)

class UnderlyingReturnRateValuationFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43027)
		else:
			StringField.__init__(self, 43027, data)

class UnderlyingReturnRateValuationFrequencyRollConvention(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43028)
		else:
			StringField.__init__(self, 43028, data)

class UnderlyingReturnRateValuationDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43029)
		else:
			IntField.__init__(self, 43029, data)

class NoUnderlyingReturnRateFXConversions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43030)
		else:
			IntField.__init__(self, 43030, data)

class UnderlyingReturnRateFXCurrencySymbol(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43031)
		else:
			StringField.__init__(self, 43031, data)

class UnderlyingReturnRateFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43032)
		else:
			DoubleField.__init__(self, 43032, data)

class UnderlyingReturnRateFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 43033)
		else:
			CharField.__init__(self, 43033, data)

class NoUnderlyingReturnRates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43034)
		else:
			IntField.__init__(self, 43034, data)

class UnderlyingReturnRatePriceSequence(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43035)
		else:
			IntField.__init__(self, 43035, data)

class UnderlyingReturnRateCommissionBasis(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 43036)
		else:
			CharField.__init__(self, 43036, data)

class UnderlyingReturnRateCommissionAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43037)
		else:
			DoubleField.__init__(self, 43037, data)

class UnderlyingReturnRateCommissionCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43038)
		else:
			StringField.__init__(self, 43038, data)

class UnderlyingReturnRateTotalCommissionPerTrade(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43039)
		else:
			DoubleField.__init__(self, 43039, data)

class UnderlyingReturnRateDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43040)
		else:
			StringField.__init__(self, 43040, data)

class UnderlyingReturnRateAmountRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43041)
		else:
			IntField.__init__(self, 43041, data)

class UnderlyingReturnRateQuoteMeasureType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43042)
		else:
			StringField.__init__(self, 43042, data)

class UnderlyingReturnRateQuoteUnits(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43043)
		else:
			StringField.__init__(self, 43043, data)

class UnderlyingReturnRateQuoteMethod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43044)
		else:
			IntField.__init__(self, 43044, data)

class UnderlyingReturnRateQuoteCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43045)
		else:
			StringField.__init__(self, 43045, data)

class UnderlyingReturnRateQuoteCurrencyType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43046)
		else:
			StringField.__init__(self, 43046, data)

class UnderlyingReturnRateQuoteTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43047)
		else:
			IntField.__init__(self, 43047, data)

class UnderlyingReturnRateQuoteTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43048)
		else:
			StringField.__init__(self, 43048, data)

class UnderlyingReturnRateQuoteDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43049)
		else:
			StringField.__init__(self, 43049, data)

class UnderlyingReturnRateQuoteExpirationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43050)
		else:
			StringField.__init__(self, 43050, data)

class UnderlyingReturnRateQuoteBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43051)
		else:
			StringField.__init__(self, 43051, data)

class UnderlyingReturnRateQuoteExchange(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43052)
		else:
			StringField.__init__(self, 43052, data)

class UnderlyingReturnRateQuotePricingModel(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43053)
		else:
			StringField.__init__(self, 43053, data)

class UnderlyingReturnRateCashFlowType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43054)
		else:
			StringField.__init__(self, 43054, data)

class UnderlyingReturnRateValuationTimeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43055)
		else:
			IntField.__init__(self, 43055, data)

class UnderlyingReturnRateValuationTime(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43056)
		else:
			StringField.__init__(self, 43056, data)

class UnderlyingReturnRateValuationTimeBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43057)
		else:
			StringField.__init__(self, 43057, data)

class UnderlyingReturnRateValuationPriceOption(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43058)
		else:
			IntField.__init__(self, 43058, data)

class UnderlyingReturnRateFinalPriceFallback(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43059)
		else:
			IntField.__init__(self, 43059, data)

class NoUnderlyingReturnRateInformationSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43060)
		else:
			IntField.__init__(self, 43060, data)

class UnderlyingReturnRateInformationSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43061)
		else:
			IntField.__init__(self, 43061, data)

class UnderlyingReturnRateReferencePage(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43062)
		else:
			StringField.__init__(self, 43062, data)

class UnderlyingReturnRateReferencePageHeading(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43063)
		else:
			StringField.__init__(self, 43063, data)

class NoUnderlyingReturnRatePrices(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43064)
		else:
			IntField.__init__(self, 43064, data)

class UnderlyingReturnRatePriceBasis(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43065)
		else:
			IntField.__init__(self, 43065, data)

class UnderlyingReturnRatePrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43066)
		else:
			DoubleField.__init__(self, 43066, data)

class UnderlyingReturnRatePriceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43067)
		else:
			StringField.__init__(self, 43067, data)

class UnderlyingReturnRatePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43068)
		else:
			IntField.__init__(self, 43068, data)

class NoUnderlyingReturnRateValuationDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43069)
		else:
			IntField.__init__(self, 43069, data)

class UnderlyingReturnRateValuationDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43070)
		else:
			StringField.__init__(self, 43070, data)

class NoUnderlyingReturnRateValuationDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43071)
		else:
			IntField.__init__(self, 43071, data)

class UnderlyingReturnRateValuationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43072)
		else:
			StringField.__init__(self, 43072, data)

class UnderlyingReturnRateValuationDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43073)
		else:
			IntField.__init__(self, 43073, data)

class NoUnderlyingSettlMethodElectionDateBusinessCenters(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43074)
		else:
			IntField.__init__(self, 43074, data)

class UnderlyingSettlMethodElectionDateBusinessCenter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43075)
		else:
			StringField.__init__(self, 43075, data)

class UnderlyingSettlMethodElectionDateUnadjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43076)
		else:
			StringField.__init__(self, 43076, data)

class UnderlyingSettlMethodElectionDateBusinessDayConvention(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43077)
		else:
			IntField.__init__(self, 43077, data)

class UnderlyingSettlMethodElectionDateRelativeTo(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43078)
		else:
			IntField.__init__(self, 43078, data)

class UnderlyingSettlMethodElectionDateOffsetPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43079)
		else:
			IntField.__init__(self, 43079, data)

class UnderlyingSettlMethodElectionDateOffsetUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43080)
		else:
			StringField.__init__(self, 43080, data)

class UnderlyingSettlMethodElectionDateOffsetDayType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43081)
		else:
			IntField.__init__(self, 43081, data)

class UnderlyingSettlMethodElectionDateAdjusted(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43082)
		else:
			StringField.__init__(self, 43082, data)

class UnderlyingStreamVersion(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43083)
		else:
			StringField.__init__(self, 43083, data)

class UnderlyingStreamVersionEffectiveDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43084)
		else:
			StringField.__init__(self, 43084, data)

class UnderlyingStreamNotionalDeterminationMethod(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43085)
		else:
			StringField.__init__(self, 43085, data)

class UnderlyingStreamNotionalAdjustments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43086)
		else:
			IntField.__init__(self, 43086, data)

class RemunerationIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2356)
		else:
			IntField.__init__(self, 2356, data)

class CompressionGroupID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2361)
		else:
			StringField.__init__(self, 2361, data)

class SelfMatchPreventionID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2362)
		else:
			StringField.__init__(self, 2362, data)

class PartyRiskLimitStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2355)
		else:
			IntField.__init__(self, 2355, data)

class TradeConfirmationReferenceID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2390)
		else:
			StringField.__init__(self, 2390, data)

class AlgorithmicTradeIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2667)
		else:
			IntField.__init__(self, 2667, data)

class NoTrdRegPublications(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2668)
		else:
			IntField.__init__(self, 2668, data)

class TrdRegPublicationType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2669)
		else:
			IntField.__init__(self, 2669, data)

class TrdRegPublicationReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2670)
		else:
			IntField.__init__(self, 2670, data)

class LegDifferentialPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2492)
		else:
			DoubleField.__init__(self, 2492, data)

class CrossedIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2523)
		else:
			IntField.__init__(self, 2523, data)

class NoOrderAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2593)
		else:
			IntField.__init__(self, 2593, data)

class OrderAttributeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2594)
		else:
			IntField.__init__(self, 2594, data)

class OrderAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2595)
		else:
			StringField.__init__(self, 2595, data)

class TradeReportingIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2524)
		else:
			IntField.__init__(self, 2524, data)

class SideTradeReportingIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2671)
		else:
			IntField.__init__(self, 2671, data)

class CrossRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2672)
		else:
			StringField.__init__(self, 2672, data)

class FillMatchID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2673)
		else:
			StringField.__init__(self, 2673, data)

class FillMatchSubID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2674)
		else:
			StringField.__init__(self, 2674, data)

class MassActionReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2675)
		else:
			IntField.__init__(self, 2675, data)

class MaximumPriceDeviation(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2676)
		else:
			DoubleField.__init__(self, 2676, data)

class NotAffectedReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2677)
		else:
			IntField.__init__(self, 2677, data)

class TotalNotAffectedOrders(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2678)
		else:
			IntField.__init__(self, 2678, data)

class OrderOwnershipIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2679)
		else:
			IntField.__init__(self, 2679, data)

class LegAccount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2680)
		else:
			StringField.__init__(self, 2680, data)

class InTheMoneyCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2681)
		else:
			IntField.__init__(self, 2681, data)

class LegInTheMoneyCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2682)
		else:
			IntField.__init__(self, 2682, data)

class UnderlyingInTheMoneyCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2683)
		else:
			IntField.__init__(self, 2683, data)

class DerivativeInTheMoneyCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2684)
		else:
			IntField.__init__(self, 2684, data)

class ContraryInstructionEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2685)
		else:
			BoolField.__init__(self, 2685, data)

class LegContraryInstructionEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2686)
		else:
			BoolField.__init__(self, 2686, data)

class UnderlyingContraryInstructionEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2687)
		else:
			BoolField.__init__(self, 2687, data)

class DerivativeContraryInstructionEligibilityIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2688)
		else:
			BoolField.__init__(self, 2688, data)

class CollateralMarketPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2689)
		else:
			DoubleField.__init__(self, 2689, data)

class CollateralPercentOverage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2690)
		else:
			DoubleField.__init__(self, 2690, data)

class NoSideCollateralAmounts(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2691)
		else:
			IntField.__init__(self, 2691, data)

class SideCollateralAmountMarketID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2692)
		else:
			StringField.__init__(self, 2692, data)

class SideCollateralAmountMarketSegmentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2693)
		else:
			StringField.__init__(self, 2693, data)

class SideCollateralAmountType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2694)
		else:
			IntField.__init__(self, 2694, data)

class SideCollateralCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2695)
		else:
			StringField.__init__(self, 2695, data)

class SideCollateralFXRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2696)
		else:
			DoubleField.__init__(self, 2696, data)

class SideCollateralFXRateCalc(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2697)
		else:
			CharField.__init__(self, 2697, data)

class SideCollateralMarketPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2698)
		else:
			DoubleField.__init__(self, 2698, data)

class SideCollateralPercentOverage(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2699)
		else:
			DoubleField.__init__(self, 2699, data)

class SideCollateralPortfolioID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2700)
		else:
			StringField.__init__(self, 2700, data)

class SideCollateralType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2701)
		else:
			StringField.__init__(self, 2701, data)

class SideCurrentCollateralAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2702)
		else:
			DoubleField.__init__(self, 2702, data)

class SideHaircutIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2703)
		else:
			BoolField.__init__(self, 2703, data)

class ExDestinationType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2704)
		else:
			IntField.__init__(self, 2704, data)

class MarketCondition(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2705)
		else:
			IntField.__init__(self, 2705, data)

class NoQuoteAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2706)
		else:
			IntField.__init__(self, 2706, data)

class QuoteAttributeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2707)
		else:
			IntField.__init__(self, 2707, data)

class QuoteAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2708)
		else:
			StringField.__init__(self, 2708, data)

class NoPriceQualifiers(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2709)
		else:
			IntField.__init__(self, 2709, data)

class PriceQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2710)
		else:
			IntField.__init__(self, 2710, data)

class MDValueTier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2711)
		else:
			IntField.__init__(self, 2711, data)

class MiscFeeQualifier(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2712)
		else:
			IntField.__init__(self, 2712, data)

class MiscFeeDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2713)
		else:
			StringField.__init__(self, 2713, data)

class FinancialInstrumentFullName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2714)
		else:
			StringField.__init__(self, 2714, data)

class EncodedFinancialInstrumentFullNameLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2715)
		else:
			IntField.__init__(self, 2715, data)

class EncodedFinancialInstrumentFullName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2716)
		else:
			StringField.__init__(self, 2716, data)

class LegFinancialInstrumentFullName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2717)
		else:
			StringField.__init__(self, 2717, data)

class EncodedLegFinancialInstrumentFullNameLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2718)
		else:
			IntField.__init__(self, 2718, data)

class EncodedLegFinancialInstrumentFullName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2719)
		else:
			StringField.__init__(self, 2719, data)

class UnderlyingFinancialInstrumentFullName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2720)
		else:
			StringField.__init__(self, 2720, data)

class EncodedUnderlyingFinancialInstrumentFullNameLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2721)
		else:
			IntField.__init__(self, 2721, data)

class EncodedUnderlyingFinancialInstrumentFullName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2722)
		else:
			StringField.__init__(self, 2722, data)

class UnderlyingIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2723)
		else:
			StringField.__init__(self, 2723, data)

class UnderlyingIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2724)
		else:
			IntField.__init__(self, 2724, data)

class CommissionAmountSubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2725)
		else:
			IntField.__init__(self, 2725, data)

class AllocCommissionAmountSubType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2726)
		else:
			IntField.__init__(self, 2726, data)

class AllocLegRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2727)
		else:
			StringField.__init__(self, 2727, data)

class FloatingRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2728)
		else:
			IntField.__init__(self, 2728, data)

class FloatingRateIndexCurveSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2729)
		else:
			DoubleField.__init__(self, 2729, data)

class FloatingRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2730)
		else:
			StringField.__init__(self, 2730, data)

class FloatingRateIndexID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2731)
		else:
			StringField.__init__(self, 2731, data)

class FloatingRateIndexIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2732)
		else:
			StringField.__init__(self, 2732, data)

class IndexRollMonth(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2733)
		else:
			StringField.__init__(self, 2733, data)

class NoIndexRollMonths(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2734)
		else:
			IntField.__init__(self, 2734, data)

class AssetSubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2735)
		else:
			StringField.__init__(self, 2735, data)

class CommodityFinalPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2736)
		else:
			IntField.__init__(self, 2736, data)

class FinancialInstrumentShortName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2737)
		else:
			StringField.__init__(self, 2737, data)

class NextIndexRollDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2738)
		else:
			StringField.__init__(self, 2738, data)

class LegAssetSubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2739)
		else:
			StringField.__init__(self, 2739, data)

class LegFinancialInstrumentShortName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2740)
		else:
			StringField.__init__(self, 2740, data)

class LegPaymentStreamRateIndexID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43088)
		else:
			StringField.__init__(self, 43088, data)

class LegPaymentStreamRateIndexIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43089)
		else:
			StringField.__init__(self, 43089, data)

class LegSecondaryAssetSubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2743)
		else:
			StringField.__init__(self, 2743, data)

class PaymentStreamRateIndexID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43090)
		else:
			StringField.__init__(self, 43090, data)

class PaymentStreamRateIndexIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43091)
		else:
			StringField.__init__(self, 43091, data)

class NoReferenceDataDates(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2746)
		else:
			IntField.__init__(self, 2746, data)

class ReferenceDataDate(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2747)
		else:
			UtcTimeStampField.__init__(self, 2747, data)

class ReferenceDataDateType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2748)
		else:
			IntField.__init__(self, 2748, data)

class SecondaryAssetSubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2741)
		else:
			StringField.__init__(self, 2741, data)

class UnderlyingFinancialInstrumentShortName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2742)
		else:
			StringField.__init__(self, 2742, data)

class UnderlyingAssetSubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2744)
		else:
			StringField.__init__(self, 2744, data)

class UnderlyingPaymentStreamRateIndexID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43092)
		else:
			StringField.__init__(self, 43092, data)

class UnderlyingPaymentStreamRateIndexIDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43093)
		else:
			StringField.__init__(self, 43093, data)

class UnderlyingSecondaryAssetSubType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2745)
		else:
			StringField.__init__(self, 2745, data)

class DeliveryStreamRouteOrCharter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43094)
		else:
			StringField.__init__(self, 43094, data)

class LegDeliveryStreamRouteOrCharter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43095)
		else:
			StringField.__init__(self, 43095, data)

class UnderlyingDeliveryStreamRouteOrCharter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43096)
		else:
			StringField.__init__(self, 43096, data)

class ExecutionTimestamp(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2749)
		else:
			UtcTimeStampField.__init__(self, 2749, data)

class ReportingPx(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2750)
		else:
			DoubleField.__init__(self, 2750, data)

class ReportingQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2751)
		else:
			DoubleField.__init__(self, 2751, data)

class DeliveryRouteOrCharter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2752)
		else:
			StringField.__init__(self, 2752, data)

class ReturnTrigger(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2753)
		else:
			IntField.__init__(self, 2753, data)

class LegDeliveryRouteOrCharter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2754)
		else:
			StringField.__init__(self, 2754, data)

class LegReturnTrigger(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2755)
		else:
			IntField.__init__(self, 2755, data)

class UnderlyingDeliveryRouteOrCharter(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2756)
		else:
			StringField.__init__(self, 2756, data)

class UnderlyingReturnTrigger(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2757)
		else:
			IntField.__init__(self, 2757, data)

class AllocRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2758)
		else:
			StringField.__init__(self, 2758, data)

class GroupAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2759)
		else:
			DoubleField.__init__(self, 2759, data)

class GroupRemainingAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2760)
		else:
			DoubleField.__init__(self, 2760, data)

class AllocGroupAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2761)
		else:
			DoubleField.__init__(self, 2761, data)

class PriceMarkup(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2762)
		else:
			DoubleField.__init__(self, 2762, data)

class AveragePriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2763)
		else:
			IntField.__init__(self, 2763, data)

class AveragePriceStartTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2764)
		else:
			UtcTimeStampField.__init__(self, 2764, data)

class AveragePriceEndTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2765)
		else:
			UtcTimeStampField.__init__(self, 2765, data)

class OrderPercentOfTotalVolume(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2766)
		else:
			DoubleField.__init__(self, 2766, data)

class AllocGroupStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2767)
		else:
			IntField.__init__(self, 2767, data)

class AllocRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2768)
		else:
			IntField.__init__(self, 2768, data)

class AllocAvgPxIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2769)
		else:
			IntField.__init__(self, 2769, data)

class AllocAvgPxGroupID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2770)
		else:
			StringField.__init__(self, 2770, data)

class PreviousAllocGroupID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2771)
		else:
			StringField.__init__(self, 2771, data)

class NoMatchExceptions(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2772)
		else:
			IntField.__init__(self, 2772, data)

class MatchExceptionType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2773)
		else:
			IntField.__init__(self, 2773, data)

class MatchExceptionElementType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2774)
		else:
			IntField.__init__(self, 2774, data)

class MatchExceptionElementName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2775)
		else:
			StringField.__init__(self, 2775, data)

class MatchExceptionAllocValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2776)
		else:
			StringField.__init__(self, 2776, data)

class MatchExceptionConfirmValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2777)
		else:
			StringField.__init__(self, 2777, data)

class MatchExceptionToleranceValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2778)
		else:
			DoubleField.__init__(self, 2778, data)

class MatchExceptionToleranceValueType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2779)
		else:
			IntField.__init__(self, 2779, data)

class MatchExceptionText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2780)
		else:
			StringField.__init__(self, 2780, data)

class NoMatchingDataPoints(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2781)
		else:
			IntField.__init__(self, 2781, data)

class MatchingDataPointIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2782)
		else:
			IntField.__init__(self, 2782, data)

class MatchingDataPointValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2783)
		else:
			StringField.__init__(self, 2783, data)

class MatchingDataPointType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2784)
		else:
			IntField.__init__(self, 2784, data)

class MatchingDataPointName(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2785)
		else:
			StringField.__init__(self, 2785, data)

class EncodedMatchExceptionTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2797)
		else:
			IntField.__init__(self, 2797, data)

class EncodedMatchExceptionText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2798)
		else:
			StringField.__init__(self, 2798, data)

class TradeAggregationRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2786)
		else:
			StringField.__init__(self, 2786, data)

class TradeAggregationRequestRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2787)
		else:
			StringField.__init__(self, 2787, data)

class TradeAggregationTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2788)
		else:
			IntField.__init__(self, 2788, data)

class AggregatedQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2789)
		else:
			DoubleField.__init__(self, 2789, data)

class TradeAggregationRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2790)
		else:
			IntField.__init__(self, 2790, data)

class TradeAggregationRejectReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2791)
		else:
			IntField.__init__(self, 2791, data)

class TradeAggregationReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2792)
		else:
			StringField.__init__(self, 2792, data)

class AvgSpotRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2793)
		else:
			DoubleField.__init__(self, 2793, data)

class AvgForwardPoints(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2794)
		else:
			DoubleField.__init__(self, 2794, data)

class OffshoreIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2795)
		else:
			IntField.__init__(self, 2795, data)

class FXBenchmarkRateFix(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2796)
		else:
			StringField.__init__(self, 2796, data)

class PayReportID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2799)
		else:
			StringField.__init__(self, 2799, data)

class PayDisputeReason(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2800)
		else:
			IntField.__init__(self, 2800, data)

class EncodedReplaceText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2801)
		else:
			StringField.__init__(self, 2801, data)

class EncodedReplaceTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2802)
		else:
			IntField.__init__(self, 2802, data)

class PayReportRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2803)
		else:
			StringField.__init__(self, 2803, data)

class PayReportTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2804)
		else:
			IntField.__init__(self, 2804, data)

class ReplaceText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2805)
		else:
			StringField.__init__(self, 2805, data)

class PayReportStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2806)
		else:
			IntField.__init__(self, 2806, data)

class CancelText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2807)
		else:
			StringField.__init__(self, 2807, data)

class EncodedCancelText(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2808)
		else:
			StringField.__init__(self, 2808, data)

class EncodedCancelTextLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2809)
		else:
			IntField.__init__(self, 2809, data)

class PayRequestRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2810)
		else:
			StringField.__init__(self, 2810, data)

class PayRequestTransType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2811)
		else:
			IntField.__init__(self, 2811, data)

class PayRequestID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2812)
		else:
			StringField.__init__(self, 2812, data)

class PayRequestStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2813)
		else:
			IntField.__init__(self, 2813, data)

class EncodedPostTradePaymentDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2814)
		else:
			StringField.__init__(self, 2814, data)

class EncodedPostTradePaymentDescLen(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2815)
		else:
			IntField.__init__(self, 2815, data)

class PostTradePaymentAccount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2816)
		else:
			StringField.__init__(self, 2816, data)

class PostTradePaymentAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2817)
		else:
			DoubleField.__init__(self, 2817, data)

class PostTradePaymentCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2818)
		else:
			StringField.__init__(self, 2818, data)

class PostTradePaymentDebitOrCredit(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2819)
		else:
			IntField.__init__(self, 2819, data)

class PostTradePaymentDesc(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2820)
		else:
			StringField.__init__(self, 2820, data)

class PostTradePaymentID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2821)
		else:
			StringField.__init__(self, 2821, data)

class PostTradePaymentLinkID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2822)
		else:
			StringField.__init__(self, 2822, data)

class PostTradePaymentStatus(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2823)
		else:
			IntField.__init__(self, 2823, data)

class PostTradePaymentType(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2824)
		else:
			StringField.__init__(self, 2824, data)

class PostTradePaymentCalculationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2825)
		else:
			StringField.__init__(self, 2825, data)

class PostTradePaymentValueDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2826)
		else:
			StringField.__init__(self, 2826, data)

class PostTradePaymentFinalValueDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2827)
		else:
			StringField.__init__(self, 2827, data)

class CurrentDisplayPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2828)
		else:
			DoubleField.__init__(self, 2828, data)

class DuplicateClOrdIDIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2829)
		else:
			BoolField.__init__(self, 2829, data)

class EventInitiatorType(CharField):
	def __init__(self, data = None):
		if data == None:
			CharField.__init__(self, 2830)
		else:
			CharField.__init__(self, 2830, data)

class NBBOEntryType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2831)
		else:
			IntField.__init__(self, 2831, data)

class NBBOPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2832)
		else:
			DoubleField.__init__(self, 2832, data)

class NBBOQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2833)
		else:
			DoubleField.__init__(self, 2833, data)

class NBBOSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2834)
		else:
			IntField.__init__(self, 2834, data)

class OrderOriginationFirmID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2835)
		else:
			StringField.__init__(self, 2835, data)

class RelatedOrderTime(UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			UtcTimeStampField.__init__(self, 2836)
		else:
			UtcTimeStampField.__init__(self, 2836, data)

class SingleQuoteIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2837)
		else:
			BoolField.__init__(self, 2837, data)

class CurrentWorkingPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2838)
		else:
			DoubleField.__init__(self, 2838, data)

class TrdRegTimestampManualIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2839)
		else:
			BoolField.__init__(self, 2839, data)

class CollateralReinvestmentRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2840)
		else:
			DoubleField.__init__(self, 2840, data)

class UnderlyingRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2841)
		else:
			StringField.__init__(self, 2841, data)

class CollateralReinvestmentAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2842)
		else:
			DoubleField.__init__(self, 2842, data)

class CollateralReinvestmentCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2843)
		else:
			StringField.__init__(self, 2843, data)

class CollateralReinvestmentType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2844)
		else:
			IntField.__init__(self, 2844, data)

class NoCollateralReinvestments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2845)
		else:
			IntField.__init__(self, 2845, data)

class FundingSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2846)
		else:
			IntField.__init__(self, 2846, data)

class FundingSourceCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2847)
		else:
			StringField.__init__(self, 2847, data)

class FundingSourceMarketValue(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2848)
		else:
			DoubleField.__init__(self, 2848, data)

class NoFundingSources(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2849)
		else:
			IntField.__init__(self, 2849, data)

class LegPaymentStreamOtherDayCount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43108)
		else:
			StringField.__init__(self, 43108, data)

class MarginDirection(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2851)
		else:
			IntField.__init__(self, 2851, data)

class PaymentFixedRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43097)
		else:
			DoubleField.__init__(self, 43097, data)

class PaymentFloatingRateIndex(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43098)
		else:
			StringField.__init__(self, 43098, data)

class PaymentFloatingRateIndexCurvePeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43099)
		else:
			IntField.__init__(self, 43099, data)

class PaymentFloatingRateIndexCurveUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43100)
		else:
			StringField.__init__(self, 43100, data)

class PaymentFloatingRateSpread(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 43101)
		else:
			DoubleField.__init__(self, 43101, data)

class PaymentFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43102)
		else:
			IntField.__init__(self, 43102, data)

class PaymentFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43103)
		else:
			StringField.__init__(self, 43103, data)

class PaymentRateResetFrequencyPeriod(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43104)
		else:
			IntField.__init__(self, 43104, data)

class PaymentRateResetFrequencyUnit(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43105)
		else:
			StringField.__init__(self, 43105, data)

class PaymentStreamOtherDayCount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43106)
		else:
			StringField.__init__(self, 43106, data)

class SideCollateralReinvestmentRate(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2862)
		else:
			DoubleField.__init__(self, 2862, data)

class SideUnderlyingRefID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2863)
		else:
			StringField.__init__(self, 2863, data)

class NoSideCollateralReinvestments(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2864)
		else:
			IntField.__init__(self, 2864, data)

class SideCollateralReinvestmentAmount(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2865)
		else:
			DoubleField.__init__(self, 2865, data)

class SideCollateralReinvestmentCurrency(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2866)
		else:
			StringField.__init__(self, 2866, data)

class SideCollateralReinvestmentType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2867)
		else:
			IntField.__init__(self, 2867, data)

class CollateralizationValueDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2868)
		else:
			StringField.__init__(self, 2868, data)

class RegulatoryReportTypeBusinessDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2869)
		else:
			StringField.__init__(self, 2869, data)

class ClearingPortfolioID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2870)
		else:
			StringField.__init__(self, 2870, data)

class NoTransactionAttributes(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2871)
		else:
			IntField.__init__(self, 2871, data)

class TransactionAttributeType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2872)
		else:
			IntField.__init__(self, 2872, data)

class TransactionAttributeValue(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2873)
		else:
			StringField.__init__(self, 2873, data)

class UnderlyingID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2874)
		else:
			StringField.__init__(self, 2874, data)

class UnderlyingPaymentStreamOtherDayCount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43107)
		else:
			StringField.__init__(self, 43107, data)

class PosAmtPrice(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2876)
		else:
			DoubleField.__init__(self, 2876, data)

class PosAmtPriceType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2877)
		else:
			IntField.__init__(self, 2877, data)

class TerminationDate(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2878)
		else:
			StringField.__init__(self, 2878, data)

class CouponOtherDayCount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2879)
		else:
			StringField.__init__(self, 2879, data)

class LegCouponOtherDayCount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2880)
		else:
			StringField.__init__(self, 2880, data)

class UnderlyingCouponOtherDayCount(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2881)
		else:
			StringField.__init__(self, 2881, data)

class ContraOrderOrigination(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2882)
		else:
			IntField.__init__(self, 2882, data)

class RoutingArrangmentIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2883)
		else:
			IntField.__init__(self, 2883, data)

class ContraRoutingArrangmentIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2884)
		else:
			IntField.__init__(self, 2884, data)

class PaymentStreamFormulaLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43109)
		else:
			IntField.__init__(self, 43109, data)

class LegPaymentStreamFormulaLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43110)
		else:
			IntField.__init__(self, 43110, data)

class UnderlyingPaymentStreamFormulaLength(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43111)
		else:
			IntField.__init__(self, 43111, data)

class UnderlyingAccruedInterestAmt(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2885)
		else:
			DoubleField.__init__(self, 2885, data)

class UnderlyingNumDaysInterest(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2886)
		else:
			IntField.__init__(self, 2886, data)

class RelatedOrderID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2887)
		else:
			StringField.__init__(self, 2887, data)

class RelatedOrderIDSource(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2888)
		else:
			IntField.__init__(self, 2888, data)

class RelatedOrderQty(DoubleField):
	def __init__(self, data = None):
		if data == None:
			DoubleField.__init__(self, 2889)
		else:
			DoubleField.__init__(self, 2889, data)

class OrderRelationship(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2890)
		else:
			IntField.__init__(self, 2890, data)

class UPICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2891)
		else:
			StringField.__init__(self, 2891, data)

class DerivativeUPICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2892)
		else:
			StringField.__init__(self, 2892, data)

class LegUPICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2893)
		else:
			StringField.__init__(self, 2893, data)

class UnderlyingUPICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2894)
		else:
			StringField.__init__(self, 2894, data)

class InstrumentScopeUPICode(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2895)
		else:
			StringField.__init__(self, 2895, data)

class TertiaryTrdType(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2896)
		else:
			IntField.__init__(self, 2896, data)

class PaymentStreamRateIndex2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43112)
		else:
			StringField.__init__(self, 43112, data)

class PaymentStreamRateIndex2Source(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43113)
		else:
			IntField.__init__(self, 43113, data)

class PaymentStreamRateIndex2ID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43114)
		else:
			StringField.__init__(self, 43114, data)

class PaymentStreamRateIndex2IDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43115)
		else:
			StringField.__init__(self, 43115, data)

class LegPaymentStreamRateIndex2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43116)
		else:
			StringField.__init__(self, 43116, data)

class LegPaymentStreamRateIndex2Source(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43117)
		else:
			IntField.__init__(self, 43117, data)

class LegPaymentStreamRateIndex2ID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43118)
		else:
			StringField.__init__(self, 43118, data)

class LegPaymentStreamRateIndex2IDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43119)
		else:
			StringField.__init__(self, 43119, data)

class UnderlyingPaymentStreamRateIndex2(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43120)
		else:
			StringField.__init__(self, 43120, data)

class UnderlyingPaymentStreamRateIndex2Source(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 43121)
		else:
			IntField.__init__(self, 43121, data)

class UnderlyingPaymentStreamRateIndex2ID(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43122)
		else:
			StringField.__init__(self, 43122, data)

class UnderlyingPaymentStreamRateIndex2IDSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 43123)
		else:
			StringField.__init__(self, 43123, data)

class CurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2897)
		else:
			StringField.__init__(self, 2897, data)

class LegCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2898)
		else:
			StringField.__init__(self, 2898, data)

class SettlCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2899)
		else:
			StringField.__init__(self, 2899, data)

class LegSettlCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2900)
		else:
			StringField.__init__(self, 2900, data)

class SideCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2901)
		else:
			StringField.__init__(self, 2901, data)

class SideSettlCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2902)
		else:
			StringField.__init__(self, 2902, data)

class SettlementAmountCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2903)
		else:
			StringField.__init__(self, 2903, data)

class StrikeCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2904)
		else:
			StringField.__init__(self, 2904, data)

class UnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2905)
		else:
			StringField.__init__(self, 2905, data)

class PriceUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2906)
		else:
			StringField.__init__(self, 2906, data)

class PriceQuoteCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2907)
		else:
			StringField.__init__(self, 2907, data)

class LegStrikeCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2908)
		else:
			StringField.__init__(self, 2908, data)

class LegUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2909)
		else:
			StringField.__init__(self, 2909, data)

class LegPriceUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2910)
		else:
			StringField.__init__(self, 2910, data)

class LegPriceQuoteCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2911)
		else:
			StringField.__init__(self, 2911, data)

class DerivativeStrikeCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2912)
		else:
			StringField.__init__(self, 2912, data)

class DerivativeUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2913)
		else:
			StringField.__init__(self, 2913, data)

class DerivativePriceUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2914)
		else:
			StringField.__init__(self, 2914, data)

class DerivativePriceQuoteCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2915)
		else:
			StringField.__init__(self, 2915, data)

class UnderlyingCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2916)
		else:
			StringField.__init__(self, 2916, data)

class UnderlyingStrikeCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2917)
		else:
			StringField.__init__(self, 2917, data)

class UnderlyingUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2918)
		else:
			StringField.__init__(self, 2918, data)

class UnderlyingPriceUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2919)
		else:
			StringField.__init__(self, 2919, data)

class UnderlyingPriceQuoteCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2920)
		else:
			StringField.__init__(self, 2920, data)

class UnderlyingNotionalCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2921)
		else:
			StringField.__init__(self, 2921, data)

class CommCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2922)
		else:
			StringField.__init__(self, 2922, data)

class CommissionCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2923)
		else:
			StringField.__init__(self, 2923, data)

class CommissionUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2924)
		else:
			StringField.__init__(self, 2924, data)

class AllocCommissionCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2925)
		else:
			StringField.__init__(self, 2925, data)

class AllocCommissionUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2926)
		else:
			StringField.__init__(self, 2926, data)

class AllocSettlCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2927)
		else:
			StringField.__init__(self, 2927, data)

class LegAllocSettlCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2928)
		else:
			StringField.__init__(self, 2928, data)

class CollateralCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2929)
		else:
			StringField.__init__(self, 2929, data)

class SideCollateralCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2930)
		else:
			StringField.__init__(self, 2930, data)

class CollateralReinvestmentCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2931)
		else:
			StringField.__init__(self, 2931, data)

class SideCollateralReinvestmentCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2932)
		else:
			StringField.__init__(self, 2932, data)

class TradeAllocCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2933)
		else:
			StringField.__init__(self, 2933, data)

class TradingCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2934)
		else:
			StringField.__init__(self, 2934, data)

class LimitAmtCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2935)
		else:
			StringField.__init__(self, 2935, data)

class PosQtyUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2936)
		else:
			StringField.__init__(self, 2936, data)

class PositionCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2937)
		else:
			StringField.__init__(self, 2937, data)

class LegPosCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2938)
		else:
			StringField.__init__(self, 2938, data)

class RiskLimitCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2939)
		else:
			StringField.__init__(self, 2939, data)

class EntitlementAttribCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2940)
		else:
			StringField.__init__(self, 2940, data)

class ComplexOptPayoutCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2941)
		else:
			StringField.__init__(self, 2941, data)

class ComplexEventCurrencyOneCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2942)
		else:
			StringField.__init__(self, 2942, data)

class ComplexEventCurrencyTwoCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2943)
		else:
			StringField.__init__(self, 2943, data)

class LegComplexOptPayoutCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2944)
		else:
			StringField.__init__(self, 2944, data)

class LegComplexEventCurrencyOneCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2945)
		else:
			StringField.__init__(self, 2945, data)

class LegComplexEventCurrencyTwoCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2946)
		else:
			StringField.__init__(self, 2946, data)

class UnderlyingComplexOptPayoutCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2947)
		else:
			StringField.__init__(self, 2947, data)

class UnderlyingComplexEventCurrencyOneCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2948)
		else:
			StringField.__init__(self, 2948, data)

class UnderlyingComplexEventCurrencyTwoCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2949)
		else:
			StringField.__init__(self, 2949, data)

class BenchmarkCurveCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2950)
		else:
			StringField.__init__(self, 2950, data)

class LegBenchmarkCurveCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2951)
		else:
			StringField.__init__(self, 2951, data)

class AgreementCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2952)
		else:
			StringField.__init__(self, 2952, data)

class LegAgreementCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2953)
		else:
			StringField.__init__(self, 2953, data)

class FundingSourceCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2954)
		else:
			StringField.__init__(self, 2954, data)

class PayCollectCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2955)
		else:
			StringField.__init__(self, 2955, data)

class PostTradePaymentCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2956)
		else:
			StringField.__init__(self, 2956, data)

class SymbolPositionNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2957)
		else:
			IntField.__init__(self, 2957, data)

class LegSymbolPositionNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2958)
		else:
			IntField.__init__(self, 2958, data)

class UnderlyingSymbolPositionNumber(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2959)
		else:
			IntField.__init__(self, 2959, data)

class SettlPriceUnitOfMeasureCurrencyCodeSource(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2960)
		else:
			StringField.__init__(self, 2960, data)

class AnonymousTradeIndicator(BoolField):
	def __init__(self, data = None):
		if data == None:
			BoolField.__init__(self, 2961)
		else:
			BoolField.__init__(self, 2961, data)

class SecurityReferenceDataSupplement(StringField):
	def __init__(self, data = None):
		if data == None:
			StringField.__init__(self, 2962)
		else:
			StringField.__init__(self, 2962, data)

class MultiJurisdictionReportingIndicator(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2963)
		else:
			IntField.__init__(self, 2963, data)

class SelfMatchPreventionInstruction(IntField):
	def __init__(self, data = None):
		if data == None:
			IntField.__init__(self, 2964)
		else:
			IntField.__init__(self, 2964, data)

