[build-system]
requires = ["poetry-core (>=2.0.0)", "poetry-dynamic-versioning (>=1.5.2,<2.0.0)"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
requires-poetry = ">=2.0.0"
packages = [ { include="HcoopMeetbot", from="src" }, { include="hcoopmeetbotlogic", from="src" } ]
include = [
   { path='Changelog', format='sdist' },
   { path='NOTICE', format='sdist' },
   { path='LICENSE', format='sdist' },
   { path='CREDITS', format='sdist' },
   { path='README.md', format='sdist' },
   { path='docs', format='sdist' },
   { path='tests', format='sdist' },
]
exclude = [ "HcoopMeetbot/test.py" ] # annoyingly, bot tests must live in the source tree
classifiers = [
   "Operating System :: OS Independent",
   "Environment :: Console",
   "Intended Audience :: System Administrators",
   "Natural Language :: English",
   "Topic :: Utilities",
   "Topic :: Communications :: Chat :: Internet Relay Chat"
]

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version=">=1.5.2,<2.0.0", extras=["plugin"] }

# Published version is managed using Git tags
# We get either the tag (like "0.24.1") or a snapshot-type version (like "0.24.1+3.e8319c4")
[tool.poetry-dynamic-versioning]
enable = false
pattern = '^[vV](?P<base>\d+\.\d+\.\d+)'  # this extracts the version from our vX.Y.Z tag format
format-jinja = "{% if distance == 0 and not dirty %}{{ base }}{% else %}{{ base }}+{{ distance }}.{{ commit }}{% endif %}"

[project]
name = "hcoop-meetbot"
requires-python = ">=3.10,<4"
description = "Plugin for Limnoria to help run IRC meetings"
authors = [ { name="Kenneth J. Pronovici", email="pronovic@ieee.org" } ]
license = "Apache-2.0"
readme = "PyPI.md"
dynamic = [ "classifiers", ]
dependencies = [
   "limnoria (>=2023.09.24)",
   "attrs (>=24.2.0,<25.0.0)",
   "cattrs (>=24.1.2,<25.0.0)",
   "pytz (>=2023.3.post1)",
   "genshi (>=0.7.7,<0.8.0)",
   "click (>=8.1.7,<9.0.0)",
]
version = "0.6.15"

[project.urls]
homepage = "https://pypi.org/project/hcoop-meetbot/"
repository = "https://github.com/pronovic/hcoop-meetbot"

[project.optional-dependencies]
docs = [
   "importlib-metadata (>=8.5.0,<9.0.0)",
   "sphinx (>=8.1.3,<9.0.0)",
   "sphinx-autoapi (>=3.3.3,<4.0.0)",
]

[tool.poetry.plugins."limnoria.plugins"]
"HcoopMeetbot" = "HcoopMeetbot:plugin"

[tool.poetry.group.dev.dependencies]
pytest = ">=8.0.2,<9.0.0"
pytest-testdox = ">=3.1.0,<4.0.0"
coverage = ">=7.4.4,<8.0.0"
pylint = ">=3.0.1,<4.0.0"
pre-commit = ">=4.0.1,<5.0.0"
black = ">=24.2.0,<25.0.0"
mypy = ">=1.6.0,<2.0.0"
isort = ">=5.12.0,<6.0.0"
colorama = ">=0.4.6,<1.0.0"
types-pytz = ">=2023.3.1.1"

[tool.poetry.scripts]
meetbot = "hcoopmeetbotlogic.cli:meetbot"

[tool.black]
line-length = 132
target-version = [ 'py310', 'py311', 'py312', 'py313' ]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | __pycache__
  | \.tox
  | \.venv
  | \.poetry
  | build
  | dist
  | docs
  | notes
)/
'''

[tool.isort]
profile = "black"
line_length = 132
skip_glob = [ "docs", "notes", ".poetry" ]

[tool.coverage.paths]
source = [ "src" ]

[tool.coverage.run]
branch = true
source = [ "src" ]
omit = [ "src/HcoopMeetbot/test.py" ]

[tool.coverage.report]
show_missing = false
precision = 1

[tool.pytest.ini_options]
filterwarnings = [
    'error',  # turn all Python warnings into test failures, so they're hard to miss
    'ignore:.*Flags not at the start of the expression::genshi', # warning in Genshi code we do not control
    'ignore:.*_init__ missing 1 required positional argument::genshi', # warning in Genshi code we do not control
]

[tool.mypy]
# Settings are mostly equivalent to strict=true as of v1.14.1
pretty = true
show_absolute_path = true
show_column_numbers = true
show_error_codes = true
files = [ "src/HcoopMeetbot", "tests" ]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_no_return = true
warn_unused_configs = true
warn_unused_ignores = true

# It's hard to make tests compliant using unittest.mock
[[tool.mypy.overrides]]
module = "tests.*"
check_untyped_defs = false
allow_untyped_defs = true

# There is no type hinting for pytest
[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

# There is no type hinting for genshi
[[tool.mypy.overrides]]
module = "genshi.*"
ignore_missing_imports = true

# Limnoria is not typed, so it's hard to make anything that directly uses it compliant
[[tool.mypy.overrides]]
module = [ "HcoopMeetbot.plugin.*", "HcoopMeetbot.config.*", "HcoopMeetbot.test.*" ]
ignore_errors = true

# There is no type hinting for supybot
[[tool.mypy.overrides]]
module = [ "supybot", "supybot.*" ]
ignore_missing_imports = true
