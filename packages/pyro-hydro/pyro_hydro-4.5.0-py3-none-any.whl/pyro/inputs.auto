# automagically generated parameter file

[compressible]
use_flattening = 1    ; apply flattening at shocks (1)
z0 = 0.75    ; flattening z0 parameter
z1 = 0.85    ; flattening z1 parameter
delta = 0.33    ; flattening delta parameter
cvisc = 0.1    ; artificial viscosity coefficient
limiter = 2    ; limiter (0 = none, 1 = 2nd order, 2 = 4th order)
temporal_method = RK4    ; integration method (see mesh/integration.py)
grav = -2.0    ; gravitational acceleration (in y-direction)
riemann = CGF
small_dens = 0.0001    ; minimum allowed density

[convection]
dens_base = 1000.0
scale_height = 2.0
y_height = 2.0
thickness = 0.25
e_rate = 0.5
dens_cutoff = 0.001

[driver]
tmax = 25.0    ; maximum simulation time to evolve
max_steps = 10000    ; maximum number of steps to take
fix_dt = -1.0
init_tstep_factor = 0.01    ; first timestep = init_tstep_factor * CFL timestep
max_dt_change = 2.0    ; max amount the timestep can change between steps
verbose = 1.0    ; verbosity
cfl = 0.8

[eos]
gamma = 1.4    ; pres = rho ener (gamma - 1)

[io]
basename = convection_    ; basename for output files
dt_out = 0.5    ; simulation time between writing output files
n_out = 100000000    ; number of timesteps between writing output files
do_io = 1    ; do we output at all?
force_final_output = 0    ; regardless of do_io, do we output when the simulation ends?

[mesh]
grid_type = Cartesian2d    ; Geometry of the Grid ('Cartesian2d' or 'SphericalPolar')
xmin = 0.0    ; domain minimum x-coordinate
xmax = 4.0    ; domain maximum x-coordinate
ymin = 0.0    ; domain minimum y-coordinate
ymax = 12.0    ; domain maximum y-coordinate
xlboundary = periodic    ; minimum x BC ('reflect', 'outflow', or 'periodic')
xrboundary = periodic    ; maximum x BC ('reflect', 'outflow', or 'periodic')
ylboundary = reflect    ; minimum y BC ('reflect', 'outflow', or 'periodic')
yrboundary = ambient    ; maximum y BC ('reflect', 'outflow', or 'periodic')
nx = 64    ; number of zones in the x-direction
ny = 192    ; number of zones in the y-direction

[particles]
do_particles = 0    ; include particles? (1=yes, 0=no)
n_particles = 100    ; number of particles
particle_generator = random    ; how do we generate particles? (random, grid)

[sponge]
do_sponge = 1    ; do we include a sponge source term
sponge_rho_begin = 0.01    ; density below which to begin the sponge
sponge_rho_full = 0.001    ; density below which the sponge is fully enabled
sponge_timescale = 0.01    ; the timescale over which the sponge should act

[vis]
dovis = 0    ; runtime visualization? (1=yes, 0=no)
store_images = 0    ; store vis images to files (1=yes, 0=no)
