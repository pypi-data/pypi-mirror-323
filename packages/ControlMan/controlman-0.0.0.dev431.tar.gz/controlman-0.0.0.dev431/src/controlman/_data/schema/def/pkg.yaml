$id: https://controlman.repodynamics.com/schema/pkg
$schema: https://json-schema.org/draft/2020-12/schema
title: Package
description: |
  Configurations for a Python package.
  This corresponds to data for both the project's Python package and test suite.
  However, some fields (e.g., OS and Python version requirements)
  are only relevant for the package,
  and are automatically reused for the test suite,
  as they must be identical.
  
  :::{admonition} Usage
  :class: dropdown note
  Among others, these settings are used to automatically generate
  [PEP 621](https://peps.python.org/pep-0621/) compliant
  [`pyproject.toml`](https://packaging.python.org/en/latest/specifications/pyproject-toml)
  files for the package and test suite, which contain all metadata and specifications
  required for building, packaging, and distributing them.
  :::
type: object
additionalProperties: false
required: [ path, name, import_name, os, python, build ]
properties:
  path:
    description: |
      Local paths to package resources.
    type: object
    default: { }
    additionalProperties: false
    required: [ root, source, source_rel, import ]
    properties:
      root:
        description: |
          Path to package root directory relative to the repository root.
        $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
        default: pkg
      source_rel:
        description: Path to package source directory relative to the package root directory.
        $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
        default: src
      source:
        description: Path to package source directory relative to the repository root.
        $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
        default: ${{ .root }}$/${{ .source_rel }}$
      import:
        description: Path to package top-level import directory relative to the repository root.
        type: string
        default: ${{ .source }}$/${{ ..import_name }}$
  name:
    description: |
      Name of the Python distribution package.
      
      For consistency, it is strongly recommended to
      **choose a project name that is most similar to a valid package name**,
      and leave the package name to be automatically generated.
      For example, you can name your project `My Project`,
      and the package name will be `My-Project`.
      
      ::::{admonition} PyPA Naming Rules
      :class: dropdown attention
      
      According to [Python Packaging Authority (PyPA)](https://packaging.python.org/en/latest/specifications/name-normalization/),
      the package name must consist only of ASCII alphanumeric characters,
      hyphens, underscores, and periods.
      Additionally, it must start and end with an alphanumeric character.
      PyPA then normalizes the package name by lowercasing the non-normalized name,
      and replacing all runs of consecutive hyphens, underscores, and periods with a single hyphen.

      :::{code-block} python
      :class: dropdown
      :caption: Name Normalization Function

      import re

      def normalize_package_name(non_normalized_package_name: str) -> str:
          """Normalize a package name according to PyPA specifications."""
          normalized_package_name = re.sub(
             r'[._-]+', '-', non_normalized_package_name.lower()
          )
          return normalized_package_name
      :::

      This means that, for example, all following names are equivalent and can be used interchangeably
      (although they are displayed as-is on PyPI):
      - `my-project` (normalized form)
      - `my_project`
      - `my.project`
      - `My--Project`
      - `mY-._.-ProjEcT`
      ::::
    default_description: |
      By default, the project name is converted to a valid non-normalized package name
      according to PyPA rules. This is done by replacing all characters that are not
      ASCII alphanumeric, hyphens, underscores, or periods with a hyphen,
      and removing all leading and trailing hyphens.
    type: string
    pattern: ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9])$
    default: |
      #{{
        import re
        project_name = get("name")
        project_name_normalized = re.sub(r"[^a-zA-Z0-9._-]", "-", project_name)
        return re.sub(r"^[^a-zA-Z0-9]+|[^a-zA-Z0-9]+$", "", project_name_normalized)
      }}#
  import_name:
    description: |
      Name of the top-level Python import package.
      
      For consistency, it is strongly recommended to
      **choose a package name that is most similar to a valid import name**,
      and leave the import name to be automatically generated.
      For example, you can name your package `My-Package`,
      and the import name will be `my_package`.
    type: string
    pattern: ^[a-zA-Z_]|[a-zA-Z_][a-zA-Z0-9_]*$
    default_description: |
      By default, the distribution package [name](#cccdef-pkg-name)
      is converted to a valid Python identifier according to
      [Python rules](https://docs.python.org/3/reference/lexical_analysis.html#identifiers). 
      This is done by lowercasing the name,
      replacing all characters that are not ASCII alphanumeric or underscore with an underscore,
      and removing all leading digits.
    default: |
      #{{
        import re
        
        pkg_name = get(".name")
        import_name_raw = re.sub(r"[^a-zA-Z0-9]", "_", pkg_name.lower())
        return re.sub(r"^[0-9]+", "", import_name_raw)
      }}#
  description:
    title: Package Description
    description: |
      A single-line description or slogan of the package.
      
      :::{admonition} Usage
      :class: dropdown note

      The description is added to the package metadata (see the
      [`project.description`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#description)
      key of the `pyproject.toml` file) and is used by indexing services and package managers
      to provide a brief overview of the package.
      For example, it is displayed on the package's homepage on PyPI and TestPyPI.
      :::
    default: ${{ title }}$
    $ref: https://jsonschemata.repodynamics.com/string/oneline
  keywords:
    title: Keywords
    description: |
      Keywords categorizing the package.
      
      :::{admonition} Usage
      :class: dropdown note
      
      Keywords are added to the package metadata (see the
      [`project.keywords`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#keywords)
      key of the `pyproject.toml` file) and are used by indexing services and package managers
      to categorize the package and make it easier to find.
      For example, they are displayed on the package's homepage on PyPI and TestPyPI,
      and can be used to filter packages in search results.
      :::
    default: ${{ keywords }}$
    $ref: https://jsonschemata.repodynamics.com/array/unique-strings
  classifiers:
    summary: >-
      [Trove classifiers](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#classifiers)
      for the package.
    description: |
      Classifiers are categorized into the following groups:
      - Development Status
      - Environment
      - Framework
      - Intended Audience
      - License
      - Natural Language
      - Operating System
      - Programming Language
      - Topic
      - Typing
      
      For a full list of classifiers, see the [PyPI classifiers list](https://pypi.org/classifiers/)
      or the [`trove-classifiers`](https://github.com/pypa/trove-classifiers/blob/main/src/trove_classifiers/__init__.py)
      Python package from PyPA.
    type: array
    uniqueItems: true
    items:
      title: Trove classifier
      type: string
      pattern: '^.+( :: [^::]+)+$'
      default: [ 'Natural Language :: English' ]
      examples:
        - 'Intended Audience :: Science/Research'
        - 'Topic :: Scientific/Engineering :: Artificial Intelligence'
  urls:
    title: Project URLs
    description: |
      URLs of project resources according to
      [PyPA specifications](https://packaging.python.org/en/latest/specifications/pyproject-toml/#urls).
      For each entry, the key defines the resource name displayed on PyPI,
      and the value defines the URL.
      Some keys and URL patterns are recognized by PyPI
      and displayed with a custom icon.
      For more details, see [PyPI documentation](https://docs.pypi.org/project_metadata/#icons)
      and the corresponding [Warehouse source code](https://github.com/pypi/warehouse/blob/e69029dc1b23eb2436a940038b927e772238a7bf/warehouse/templates/packaging/detail.html#L20-L62).
    default:
      Homepage: ${{ web.url.home }}$
      Source: ${{ repo.url.home }}$
      Download: ${{ repo.url.releases.home }}$
      Issue-Tracker: ${{ repo.url.issues.home }}$
    type: object
    additionalProperties:
      title: URL
      description: URL of a project resource
      $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
  readme:
    title: README
    description: |
      Full description of the package.
      https://packaging.python.org/en/latest/specifications/pyproject-toml/#readme
    type: object
    additionalProperties: false
    oneOf:
      - required: [ file ]
      - required: [ text ]
    required: [ content-type ]
    properties:
      file:
        $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
        description: Filepath to the README file.
      text:
        $ref: https://jsonschemata.repodynamics.com/string/nonempty
        description: Content of the README file.
      content-type:
        type: string
        enum:
          - text/markdown
          - text/x-rst
          - text/plain
        default: text/markdown
      charset:
        $ref: https://jsonschemata.repodynamics.com/string/oneline
  authors:
    title: Authors
    description: |
      Core authors of the package.
      
      ordered by contribution (highest first).
      Authors are defined by their [team](#ccc-team)-member IDs.

      :::{admonition} Usage
      :class: dropdown note
      
      Authors are added to the package metadata (see the
      [`project.authors`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#authors-maintainers)
      key of the `pyproject.toml` file) and are used by indexing services and package managers
      to provide credit to the authors of the package.
      For example, they are displayed on the package's homepage on PyPI and TestPyPI.
      :::
    $ref: https://controlman.repodynamics.com/schema/entity-ids
    default: |
      #{{
        return [
          {"id": int_author["id"], "member": True}
          for int_author in team_members_with_role_types("Author", active_only=True)
        ] + [
          {"id": ext_author["id"], "member": False}
          for ext_author in changelog.current_public.contributors_with_role_types("Author", member=False)
        ]
      }}#
    examples:
      - ${{ citation.cff.authors }}$
      - [ owner, some_author_id ]
  maintainers:
    title: Maintainers
    description: |
      Core maintainers of the package, ordered by contribution (highest first).
      Maintainers are defined by their [team](#ccc-team)-member IDs.

      :::{admonition} Usage
      :class: dropdown note

      Maintainers are added to the package metadata (see the
      [`project.maintainers`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#authors-maintainers)
      key of the `pyproject.toml` file) and are used by indexing services and package managers
      to provide credit to the maintainers of the package.
      For example, they are displayed on the package's homepage on PyPI and TestPyPI.
      :::
    $ref: https://controlman.repodynamics.com/schema/entity-ids
    default_description: All maintainers defined in `$.maintainers`.
    default: |
      #{{
          return [
            member["id"] for member in team_members_with_role_types(
              ["ContactPerson", "ProjectManager", "DataManager", "ProjectLeader", "Supervisor"],
              active_only=True,
            )
          ]
      }}#
    examples:
      - ${{ citation.cff.authors }}$
      - [ owner, some_author_id ]
  license:
    type: string
    default: ${{ license.expression }}$
  typed:
    description: Whether the package is typed
    type: boolean
    default: true
  os:
    title: OS
    description: Operating systems for the project
    examples:
      - linux:
          runner: ubuntu-latest
        macos:
        windows:
    type: object
    minProperties: 1
    additionalProperties:
      type: object
      additionalProperties: false
      required: [ name, runner ]
      properties:
        name:
          description: Display name of the OS.
          $ref: https://jsonschemata.repodynamics.com/string/oneline
        runner:
          description: GitHub Actions runner for the OS.
          type: string
          examples:
            - ubuntu-latest
            - ubuntu-24.04
            - ubuntu-22.04
            - ubuntu-20.04
            - macos-latest
            - macos-15
            - macos-14
            - macos-13
            - macos-12
            - windows-latest
            - windows-2022
            - windows-2019
        builds:
          description: |
            List of [cibuildwheel build identifiers](https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip)
            to build.
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
            examples:
              - cp313-macosx_x86_64
              - cp312-win_arm64
              - cp312-manylinux_i686
  python:
    title: Python configurations for the package.
    description: |
      This is only required for the package, and is automatically reused for the test suite.
    type: object
    default: { }
    required: [ version ]
    properties:
      version:
        title: Python version requirements.
        description: |
          You only need to provide `spec`, which is the version specifier.
          All other fields are automatically generated by retrieving all
          release Python versions from the Python repository through GitHub API,
          and filtering them based on the provided version specifier.
        type: object
        default: { }
        required: [ spec ]
        additionalProperties: false
        properties:
          spec:
            title: Python version specifier.
            description: |
              This corresponds to the [`requires-python`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#requires-python)
              field in the `pyproject.toml` file, and must be a valid
              [version specifier](https://packaging.python.org/en/latest/specifications/version-specifiers/#id5),
              describing the Python version requirements for the project.
              It is only required for the package, and is automatically reused for the test suite.
              
              :::{admonition} Best Practices
              :class: dropdown tip
              
              It is [highly recommended](https://github.com/pypa/packaging.python.org/pull/1274)
              to only define a lower bound for the Python version,
              and to [avoid upper-capping](https://discuss.python.org/t/requires-python-upper-limits/12663/76?page=2).
              We recommend following the
              [NumPy Enhancement Proposal (NEP) 29](https://numpy.org/neps/nep-0029-deprecation_policy.html)
              and always supporting three previous minor versions.
              :::
            type: string
            default: '>=3.10'
            examples:
              - '>=3.9'
              - '>=3.10'
          micros:
            title: Currently supported micro versions.
            description: |
              This is an automatically generated array
              containing all currently supported version of Python
              in the format `major.minor.micro`.
            type: array
            uniqueItems: true
            items:
              title: Micro version string.
              type: string
              pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
          minors:
            title: Currently supported minor versions.
            description: |
              This is an automatically generated array
              containing all currently supported version of Python
              in the format `major.minor`.
            type: array
            uniqueItems: true
            items:
              title: Minor version string.
              type: string
              pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)$
      pure:
        type: boolean
        default: |
          #{{ return not any("builds" in os for os in get("..os").values()) }}#
      implementation:
        type: string
        enum:
          - cpython
          - pypy
          - ironpython
          - jython
          - micropython
          - stackless
        default: cpython
  entry:
    type: object
    default: { }
    properties:
      python:
        title: Python API
        description: Python API entry points for the project
        default:
          main:
            name: ${{ ....import_name }}$
            description: Main Python API entry of the package.
            ref: '${{ ....import_name }}$:__init__'
        $ref: https://controlman.repodynamics.com/schema/pkg-entry
      cli:
        description: Scripts for the project
        $ref: https://controlman.repodynamics.com/schema/pkg-entry
      gui:
        description: GUI Scripts for the project
        $ref: https://controlman.repodynamics.com/schema/pkg-entry
      api:
        examples:
          - - group_1:
                description: ""
                entry_points:
                  entry_point_1:
                    ref: "my_package:main"
                    description: ""
                  entry_point_2:
                    ref: "my_package:main"
                    description: ""
        type: object
        additionalProperties:
          type: object
          additionalProperties: false
          required: [ name, description, entry ]
          properties:
            name:
              title: Group name
              type: string
            description:
              type: string
            entry:
              $ref: https://controlman.repodynamics.com/schema/pkg-entry
  dependency:
    type: object
    properties:
      build:
        description: Build dependencies.
        type: object
        additionalProperties:
          $ref: https://controlman.repodynamics.com/schema/dep-direct
      core:
        title: Package core dependencies.
        type: object
        additionalProperties:
          $ref: https://controlman.repodynamics.com/schema/dep-direct
      optional:
        title: Optional Dependencies
        description: Optional dependencies for the project
        type: object
        additionalProperties:
          type: object
          additionalProperties: false
          properties:
            name:
              type: string
            description:
              type: string
            package:
              type: object
              additionalProperties:
                $ref: https://controlman.repodynamics.com/schema/dep-direct
      env:
        $ref: https://controlman.repodynamics.com/schema/env-file
        default:
          conda:
            name: ${{ ....import_name }}$
            path: ${{ ....path.root }}$/environment.yaml
          pip:
            path: ${{ ....path.root }}$/requirements.txt
  source_file:
    description: |
      Configurations for Python source files.
    type: object
    additionalProperties:
      title: File Configurations
      description: |
        Configurations for a set of Python source files defined by a glob pattern.
      type: object
      additionalProperties: false
      required: [ glob ]
      anyOf:
        - required: [ docstring ]
        - required: [ header_comments ]
      properties:
        glob:
          description: |
            Glob pattern to match source files.
            The pattern is relative to the [import package directory](#cccdef-pkg-path-import).
          $ref: https://jsonschemata.repodynamics.com/string/oneline
        docstring:
          description: |
            Docstring configurations for the source files.
          type: object
          additionalProperties: false
          required: [ mode, content ]
          properties:
            content:
              description: |
                Content of the docstring.
              type: string
            mode:
              description: |
                Mode of the docstring.
              type: string
              enum: [ append, prepend, replace ]
              default: append
            max_line_length:
              description: |
                Maximum line length of the docstring.
              type: integer
              minimum: 0
        header_comments:
          description: |
              Header comments for the source files.
          type: object
          additionalProperties: false
          required: [ mode, content ]
          properties:
            mode:
              description: |
                Mode of the header comments.
              type: string
              enum: [ append, prepend, replace ]
              default: append
            content:
              description: |
                  Content of the header comments.
              type: string
            max_line_length:
              description: |
                Maximum line length of the comments.
              type: integer
              minimum: 0
            line_continuation_indent:
              description: |
                Indentation of line continuation.
              type: integer
              minimum: 0
              default: 0
            empty_lines:
              description: |
                Number of empty lines between comments.
              type: integer
              minimum: 0
              default: 1
  manifest:
    title: MANIFEST.in configurations.
    description: |
      The `MANIFEST.in` file is used to [control files and directories](https://setuptools.pypa.io/en/latest/userguide/miscellaneous.html#controlling-files-in-the-distribution)
      when creating a source distribution of the package.
      It is used by the `sdist` command of `setuptools` to determine which files
      to include in the source distribution.
    type: array
    examples:
      - - graft ${{ dir.pkg.import }}$
        - global-exclude *.py[cod] __pycache__ *.so
    uniqueItems: true
    items:
      type: string
  build:
    title: Build system definitions.
    description: |
      References:
      - [Python Packaging User Guide](https://packaging.python.org) by the Python Packaging Authority (PyPA)
      - [Setuptools User Guide](https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html)   
      - [Pip User Guide](https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/)
    type: object
    properties:
      backend:
        description: Build backend
        type: string
        examples:
          - setuptools.build_meta
      tool:
        title: Build system definitions
        description: |
          Configurations for the build backend, e.g.,
          [Setuptools]([SetupTools](https://setuptools.pypa.io/).
        type: object
        additionalProperties:
          type: object
        properties:
          setuptools:
            title: Setuptools configurations
            type: object
            properties:
              include-package-data:
                title: Include package data
                type: boolean
              packages:
                title: Package definitions
                type: object
                properties:
                  find:
                    title: Find packages
                    type: object
                    properties:
                      where:
                        title: Where to find packages
                        type: array
                        items:
                          type: string
                      namespaces:
                        title: Include namespaces
                        type: boolean
              cmdclass:
                title: Command classes
                type: object
          versioningit:
            title: Versioningit
            type: object
            properties:
              vcs:
                type: object
                default: { }
                properties:
                  method:
                    type: string
                    enum: [ git, hg, svn ]
                    default: git
                  match:
                    type: array
                    default: [ '${{ tag.version.prefix }}$[0-9]*.[0-9]*.[0-9]*']
                    items:
                      type: string
                  default-tag:
                    type: string
                    default: ${{ tag.version.prefix }}$0.0.0
              tag2version:
                type: object
                default: { }
                properties:
                  rmprefix:
                    type: string
                    default: ${{ tag.version.prefix }}$
              format:
                type: object
                default: {}
                properties:
                  distance:
                    type: string
                    default: '{base_version}+{distance}.{committer_date:%Y.%m.%d}.{rev}'
                  dirty:
                    type: string
                    default: '{base_version}+0.{committer_date:%Y.%m.%d}.{rev}.dirty'
                  distance-dirty:
                    type: string
                    default: '{base_version}+{distance}.{committer_date:%Y.%m.%d}.{rev}.dirty'
              onbuild:
                type: object
                default: { }
                properties:
                  method:
                    type: string
                    enum: [ replace-version ]
                    default: replace-version
                  regex:
                    type: string
                    default: '^__version_details__: dict\[str, str\] = (?P<version>.*)'
                  require-match:
                    type: boolean
                    default: true
                  source-file:
                    type: string
                    default: '${{ .....path.source_rel }}$/${{ .....import_name }}$/__init__.py'
                  build-file:
                    type: string
                    default: '${{ .....import_name }}$/__init__.py'
                  replacement:
                    type: string
                    default: |
                      {{
                          "version": "{version}",
                          "build_date": "{build_date:%Y.%m.%d}",
                          "committer_date": "{committer_date:%Y.%m.%d}",
                          "author_date": "{author_date:%Y.%m.%d}",
                          "branch": "{branch}",
                          "distance": "{distance}",
                          "commit_hash": "{revision}",
                      }}
  pypi:
    title: URLs of the project's PyPI package.
    type: object
    default: { }
    properties:
      publishable:
        type: boolean
        default: |
          #{{
            return all("pip" in dep for dep in get("..dependency.core").values())
          }}#
      url:
        title: URLs of the package on PyPI.
        type: object
        default: { }
        properties:
          home:
            title: Homepage URL of the PyPI package.
            default: https://pypi.org/project/${{ ...name }}$
            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
  conda:
    title: Conda Recipe
    description: |
      Conda recipe settings.
      See [Conda-Build documentation](# https://conda.io/projects/conda-build/en/stable/resources/define-metadata.html).
      
      Conda packages are built with [conda-build](https://docs.conda.io/projects/conda-build/),
      using instructions that are mostly defined in a single YAML file named
      [meta.yaml](https://conda.io/projects/conda-build/en/stable/resources/define-metadata.html).
      The YAML file can be created [from scratch](https://docs.conda.io/projects/conda-build/en/stable/user-guide/tutorials/build-pkgs.html)
      , or with help of other utilities, such as [conda skeleton](https://docs.conda.io/projects/conda-build/en/stable/user-guide/tutorials/build-pkgs-skeleton.html)
      . After build, the package distribution can be
      [uploaded](https://docs.anaconda.com/free/anacondaorg/user-guide/tasks/work-with-packages/#uploading-packages)
      on an Anaconda channel. While this may be done on a [personal channel](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/create-custom-channels.html)
      , this complicates the installation process for users as they now have to specify the channel as well.
      A more convenient alternative is to publish the package on the [conda-forge](https://conda-forge.org/) channel.
      This requires following the [instructions](https://conda-forge.org/docs/maintainer/adding_pkgs.html).
    type: object
    properties:
      publishable:
        type: boolean
        default: |
          #{{
            return all("conda" in dep for dep in get("..dependency.core").values())
          }}#
      recipe:
        title: Conda Recipe
        description: |
          Configurations for a conda recipe.
        type: object
        additionalProperties: false
        required: [ meta ]
        properties:
          path:
            type: object
            properties:
              global:
                $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
              local:
                $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
          meta:
            description: |
              Build recipe metadata file [`meta.yaml`](https://docs.conda.io/projects/conda-build/en/stable/resources/define-metadata.html).
            allOf:
              - $ref: https://controlman.repodynamics.com/schema/conda-meta-object
              - properties:
                  values:
                    additionalProperties: false
                    properties:
                      build:
                        description: |
                          Following keys are set automatically and must not be set:
                          - number
                          - entry_points
                        allOf:
                          - $ref: https://controlman.repodynamics.com/schema/conda-meta-object
                          - properties:
                              values:
                                additionalProperties: false
                                properties:
                                  condition:
                                    description: |
                                      Condition for build.
                                      This is equivalent to the selector
                                      for `skip`, i.e., it is used to generate
                                      `skip: True  # [condition]`.
                                    $ref: https://jsonschemata.repodynamics.com/string/oneline
                                    examples:
                                      - py<35
                                      - not win
                                      - not win or py<35
                                  script:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-value
                                  string:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-value
                                  force_use_keys:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  force_ignore_keys:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  osx_is_app:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-bool
                                  python_site_packages_path:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-value
                                  track_features:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  preserve_egg_dir:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-value
                                  skip_compile_pyc:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  no_link:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  rpaths:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  always_include_files:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  binary_relocation:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-bool
                                  detect_binary_files_with_prefix:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-bool
                                  binary_has_prefix_files:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  has_prefix_files:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  ignore_prefix_files:
                                    oneOf:
                                      - $ref: https://controlman.repodynamics.com/schema/conda-meta-bool
                                      - $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  include_recipe:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-bool
                                  script_env:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  run_exports:
                                    allOf:
                                      - $ref: https://controlman.repodynamics.com/schema/conda-meta-object
                                      - properties:
                                          values:
                                            additionalProperties: false
                                            properties:
                                              strong:
                                                $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                              weak:
                                                $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  ignore_run_exports:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  ignore_run_exports_from:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  pin_depends:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-value
                                  overlinking_ignore_patterns:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  missing_dso_whitelist:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  runpath_whitelist:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                      requirements:
                        allOf:
                          - $ref: https://controlman.repodynamics.com/schema/conda-meta-object
                          - properties:
                              values:
                                additionalProperties: false
                                properties:
                                  build:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  host:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  run:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  run_constrained:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                      test:
                        allOf:
                          - $ref: https://controlman.repodynamics.com/schema/conda-meta-object
                          - properties:
                              values:
                                additionalProperties: false
                                properties:
                                  files:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  source_files:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  requires:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  commands:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  imports:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                                  downstreams:
                                    $ref: https://controlman.repodynamics.com/schema/conda-meta-array
                      about:
                        type: object
                        description: |
                          Note that `description` is automatically added.
                        required: [ license ]
                        additionalProperties: false
                        properties:
                          home:
                            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
                          license:
                            $ref: https://jsonschemata.repodynamics.com/string/oneline
                          license_file:
                            oneOf:
                              - $ref: https://jsonschemata.repodynamics.com/array/unique-strings
                              - $ref: https://jsonschemata.repodynamics.com/string/oneline
                          license_family:
                            $ref: https://jsonschemata.repodynamics.com/string/oneline
                          license_url:
                            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
                          summary:
                            $ref: https://jsonschemata.repodynamics.com/string/oneline
                          dev_url:
                            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
                          doc_url:
                            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
                          doc_source_url:
                            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
                          prelink_message:
                            oneOf:
                              - $ref: https://jsonschemata.repodynamics.com/array/unique-strings
                              - $ref: https://jsonschemata.repodynamics.com/string/oneline
                      app:
                        type: object
                        additionalProperties: false
                        properties:
                          entry:
                            $ref: https://jsonschemata.repodynamics.com/string/oneline
                          icon:
                            $ref: https://jsonschemata.repodynamics.com/string/oneline
                          summary:
                            $ref: https://jsonschemata.repodynamics.com/string/oneline
                          own_environment:
                            type: string
                            enum: [ True, False ]
                      extra:
                        type: object
                        properties:
                          recipe-maintainers:
                            $ref: https://jsonschemata.repodynamics.com/array/unique-strings
      url:
        title: URLs of the package on Conda.
        type: object
        default: { }
        properties:
          home:
            title: Homepage URL of the Conda package.
            default: |
              #{{
                pkg_name = get("...name")
                if get("workflow.publish.conda-forge"):
                  channel = "conda-forge"
                else:
                  anaconda = get("workflow.publish.anaconda")
                  channel = anaconda["index"]["channel"]
                return f"https://anaconda.org/{channel}/{pkg_name}".lower()
              }}#
            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
