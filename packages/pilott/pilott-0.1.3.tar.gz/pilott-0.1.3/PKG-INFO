Metadata-Version: 2.3
Name: pilott
Version: 0.1.3
Summary: A powerful Python framework for building scalable multi-agent systems with built-in orchestration, LLM integration, and intelligent task processing. Features dynamic scaling, fault tolerance, and advanced load balancing.
Author: Anuj Gupta
Author-email: anuj0456@gmail.com
Requires-Python: >=3.9
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: litellm (>=1.59.8,<2.0.0)
Requires-Dist: psutil (>=6.1.1,<7.0.0)
Requires-Dist: pydantic (>=2.7.1,<3.0.0)
Requires-Dist: pydantic-settings (>=2.2.1,<3.0.0)
Requires-Dist: pypdf2 (>=3.0.1,<4.0.0)
Requires-Dist: websockets (>=14.1,<15.0)
Project-URL: Homepage, https://pilottai.com
Description-Content-Type: text/markdown

# PilottAI Framework

<div align="center">
  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/anuj0456/pilottai/main/interface/assets/logo.png">
    <source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/anuj0456/pilottai/main/interface/assets/logo.png">
    <img alt="PilottAI Framework Logo" src="https://raw.githubusercontent.com/anuj0456/pilottai/main/interface/assets/logo.png" width="400">
  </picture>
  <h3>Build Intelligent Multi-Agent Systems with Python</h3>
  <p><em>Scale your AI applications with orchestrated autonomous agents</em></p>
</div>

<div align="center">
  
[![PyPI version](https://badge.fury.io/py/pilott.svg)](https://badge.fury.io/py/pilott)
[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Documentation Status](https://readthedocs.org/projects/pilottai/badge/?version=latest)](https://pilottai.readthedocs.io)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

</div>

## Overview

PilottAI is a Python framework for building autonomous multi-agent systems with advanced orchestration capabilities. It provides enterprise-ready features for building scalable AI applications.

### Key Features

- ü§ñ **Hierarchical Agent System**
  - Manager and worker agent hierarchies
  - Intelligent task routing
  - Context-aware processing

- üöÄ **Production Ready**
  - Asynchronous processing
  - Dynamic scaling
  - Load balancing
  - Fault tolerance
  - Comprehensive logging

- üß† **Advanced Memory**
  - Semantic storage
  - Task history tracking
  - Context preservation
  - Knowledge retrieval

- üîå **Integrations**
  - Multiple LLM providers (OpenAI, Anthropic, Google)
  - Document processing
  - WebSocket support
  - Custom tool integration

## Installation

```bash
pip install pilott
```

## Quick Start

```python
from pilott import Serve
from pilott.core import AgentConfig, AgentRole, LLMConfig

# Configure LLM
llm_config = LLMConfig(
    model_name="gpt-4",
    provider="openai",
    api_key="your-api-key"
)

# Setup agent configuration
config = AgentConfig(
    role="processor",
    role_type=AgentRole.WORKER,
    goal="Process documents efficiently",
    description="Document processing worker",
    max_queue_size=100
)

async def main():
    # Initialize system
    pilott = Serve(name="DocumentProcessor")
    
    try:
        # Start system
        await pilott.start()
        
        # Add agent
        agent = await pilott.add_agent(
            agent_type="processor",
            config=config,
            llm_config=llm_config
        )
        
        # Process document
        result = await pilott.execute_task({
            "type": "process_document",
            "file_path": "document.pdf"
        })
        
        print(f"Processing result: {result}")
        
    finally:
        await pilott.stop()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
```

## Documentation

Visit our [documentation](https://pilottai.readthedocs.io) for:
- Detailed guides
- API reference
- Examples
- Best practices

## Example Use Cases

- üìÑ **Document Processing**
  ```python
  # Process PDF documents
  result = await pilott.execute_task({
      "type": "process_pdf",
      "file_path": "document.pdf"
  })
  ```

- ü§ñ **AI Agents**
  ```python
  # Create specialized agents
  researcher = await pilott.add_agent(
      agent_type="researcher",
      config=researcher_config
  )
  ```

- üîÑ **Task Orchestration**
  ```python
  # Orchestrate complex workflows
  task_result = await manager_agent.execute_task({
      "type": "complex_workflow",
      "steps": ["extract", "analyze", "summarize"]
  })
  ```

## Advanced Features

### Memory Management
```python
# Store and retrieve context
await agent.enhanced_memory.store_semantic(
    text="Important information",
    metadata={"type": "research"}
)
```

### Load Balancing
```python
# Configure load balancing
config = LoadBalancerConfig(
    check_interval=30,
    overload_threshold=0.8
)
```

### Fault Tolerance
```python
# Configure fault tolerance
config = FaultToleranceConfig(
    recovery_attempts=3,
    heartbeat_timeout=60
)
```

## Project Structure

```
pilott/
‚îú‚îÄ‚îÄ core/            # Core framework components
‚îú‚îÄ‚îÄ agents/          # Agent implementations
‚îú‚îÄ‚îÄ memory/          # Memory management
‚îú‚îÄ‚îÄ orchestration/   # System orchestration
‚îú‚îÄ‚îÄ tools/           # Tool integrations
‚îî‚îÄ‚îÄ utils/           # Utility functions
```

## Contributing

We welcome contributions! See our [Contributing Guide](CONTRIBUTING.md) for details on:
- Development setup
- Coding standards
- Pull request process

## Support

- üìö [Documentation](https://pilottai.readthedocs.io)
- üí¨ [Discord](https://discord.gg/pilottai)
- üìù [GitHub Issues](https://github.com/pilottai/pilott/issues)
- üìß [Email Support](mailto:support@pilottai.com)

## License

PilottAI is MIT licensed. See [LICENSE](LICENSE) for details.

---

<div align="center">
  <sub>Built with ‚ù§Ô∏è by the PilottAI Team</sub>
</div>
