import random
from typing import List


class Overflow:
    """
    Fuzzer that uses random characters and lengths for fuzzing.
    """
    def __init__(self):
        """
        Initializes fuzzer.
        """
        self.mutations = [
            b"",
            b"!@#$%%^#$%#$@#$%$$@#$%^^**(()",
            b"%00",
            b"%00/",
            b"%01%02%03%04%0a%0d%0aADSF",
            b"%01%02%03@%04%0a%0d%0aADSF",
            b"%\xfe\xf0%\x00\xff",
            b"%n",
            b"%s",
            b"%u0000",
            b"/%00",
            b"/.",
            b"/.../",
            b"/.:/",
            b"/\\",
            b"<>",
            b"\"%n\"",
            b"\"%s\"",
            b"\\\\*",
            b"\\\\?\\",
            b"\r\n",
            b"\r",
            b"\n",
            b"C",
            b"1",
            b"<",
            b">",
            b"'",
            b'"',
            b"/",
            b"\\",
            b"?",
            b"=",
            b"a=",
            b"&",
            b".",
            b",",
            b"(",
            b")",
            b"]",
            b"[",
            b"%",
            b"*",
            b"-",
            b"+",
            b"{",
            b"}",
            b"\x14",
            b"\x00",
            b"\xFE",
            b"\xff",
        ]
        self.lengths = [
            1, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 32768, 0xFFFF,
            99999, 100000, 500000, 1000000
        ]

    def fuzz(self, request: List[bytes]) -> List[bytes]:
        """
        Fuzzes the list of request parameters and returns the fuzzed list.

        Args:
            request (List[bytes]) - List of request parameters.

        Returns:
            List[bytes] - Returns the list of fuzzed request parameters.
        """
        overflow = self._get_overflow()

        idx = random.randint(0, len(request) - 1)

        return [*request[:idx], request[idx] + overflow, *request[idx + 1:]]

    def _get_overflow(self) -> bytes:
        """
        Retrieves the generated bytes by selecting random characters and random length.

        Returns:
            bytes: The generated bytes.
        """
        mutation = random.choice(self.mutations)
        length = random.choice(self.lengths)
        return mutation * length
