[tool.poetry]
name = "envvault"
version = "0.1.6"
description = "A tool to manage encrypted environment variables."
authors = ["jin <jin.xiaoming@ekohe.com>"]
readme = "README.md"
license = "MIT"

[tool.poetry.dependencies]
python = ">3.9.1,<4.0"
cryptography = "^44.0.0"
python-dotenv = "^1.0.1"
pydantic-settings = "^2.7.1"
click = "^8.1.8"
lru-cache = "^0.2.3"
pydantic = "^2.10.5"

[tool.poetry.group.dev.dependencies]
ruff = "^0.9.2"
pytest = "^7.4.0"
# For lint tool Ruff, rules update here: https://docs.astral.sh/ruff/rules/
taskipy = "^1.14.1"

[tool.ruff]
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    # "D",   # pydocstyle
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
# docstring-code-format = false
exclude = ["*.pyi"]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.taskipy.tasks]
lint = "ruff check; ruff format"
lint_fix = "ruff check --fix .; ruff format ."

[tool.poetry.scripts]
envvault = "envvault.cli:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
