[project]
name = "tikara"
dynamic = ["version"]
description = "The metadata and text content extractor for almost every file type."
readme = "README.md"
authors = [{ name = "Nick Baughman", email = "baughmann1@gmail.com" }]
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Jupyter",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Java",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: General",
    "Topic :: Text Processing",
    "Topic :: Utilities",
]
keywords = [
    "apache-tika",
    "content-detection",
    "content-extraction",
    "content-indexing",
    "content-intelligence",
    "content-management",
    "content-parsing",
    "content-processing",
    "content-type",
    "data-extraction",
    "data-parsing",
    "data-processing",
    "document-ai",
    "document-analysis",
    "document-automation",
    "document-classification",
    "document-converter",
    "document-extraction",
    "document-indexing",
    "document-intelligence",
    "document-management",
    "document-metadata",
    "document-ocr",
    "document-parsing",
    "document-processing",
    "document-reader",
    "document-text",
    "document-understanding",
    "docx",
    "excel",
    "file-analysis",
    "file-conversion",
    "file-format",
    "file-identification",
    "file-parsing",
    "file-processing",
    "file-reader",
    "file-type",
    "format-detection",
    "format-identification",
    "image-extraction",
    "information-extraction",
    "language-detection",
    "metadata",
    "mime-type",
    "ocr",
    "office-documents",
    "pdf-parsing",
    "pdf",
    "powerpoint",
    "structured-data",
    "text-analytics",
    "text-extraction",
    "text-extraction",
    "text-extraction",
    "text-mining",
    "text-parsing",
    "text-processing",
    "text-recognition",
    "text-recognition",
    "tika",
    "unstructured-data",
    "word-documents",
]
license = "Apache-2.0"
license-files = ["LICEN[CS]E*"]
dependencies = ["jpype1>=1.5.1"]

[project.urls]
Homepage = "https://github.com/baughmann/tikara"
Issues = "https://github.com/baughmann/tikara/issues"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = ["src/**"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "no-guess-dev"

[tool.hatch.build.targets.wheel]
packages = ["src/tikara"]

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["test"]
markers = [
    "benchmark: mark a test as a benchmark",
    "isolated: mark a test as needing conftest.py to be excluded",
]

[dependency-groups]
dev = [
    "genbadge[all]>=1.1.1",
    "ipykernel>=6.29.5",
    "memory-profiler>=0.61.0",
    "myst-parser>=4.0.0",
    "pytest>=8.3.4",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.0.0",
    "pytest-html>=4.1.1",
    "ruff>=0.9.2",
    "safety>=3.2.9",
    "sphinx>=8.1.3",
    "sphinx-autodoc-defaultargs>=0.1.2",
    "sphinx-autodoc-typehints>=3.0.1",
    "sphinx-copybutton>=0.5.2",
    "sphinx-git>=11.0.0",
    "sphinx-sitemap>=2.6.0",
    "sphinxawesome-theme>=5.3.2",
    "sphinxemoji>=0.3.1",
    "stubgenj>=0.2.12",
    "testcontainers>=4.9.1",
    "twine>=6.1.0",
]

[tool.ruff]
line-length = 120
show-fixes = true
src = ["src", "tests"]
exclude = ["*.ipynb", "stubs", "examples", "docs"]


[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "F",     # pyflakes
    "W",     # pycodestyle warnings 
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "FBT",   # flake8-boolean-trap
    "C4",    # flake8-comprehensions
    "T20",   # flake8-print
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "ERA",   # eradicate
    "ICN",   # flake8-import-conventions
    "PT",    # flake8-pytest-style
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "INP",   # flake8-no-pep420
    "RSE",   # flake8-raise
    "EM",    # flake8-errmsg
    "T10",   # flake8-debugger
    "BLE",   # flake8-blind-except
    "S",     # flake8-bandit
    "ISC",   # flake8-implicit-str-concat
    "C90",   # mccabe
    "ANN",   # typing-annotations
    "PLW",   # pylint warnings
    "PLR",   # pylint refactor
    "PLE",   # pylint errors
    "RUF",   # ruff-specific rules
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "TRY",   # tryceratops
    "NPY",   # numpy-specific rules
    "AIR",   # airflow
    "PERF",  # perflint
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
]
ignore = [
    "ISC001", # Implicit string concatenation
]


[tool.ruff.lint.per-file-ignores]
"test/*" = ["ANN", "S", "PLR0913"]
