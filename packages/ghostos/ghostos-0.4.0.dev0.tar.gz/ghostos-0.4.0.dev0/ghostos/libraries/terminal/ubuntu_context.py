import pytz
from datetime import datetime
from typing import Optional
from ghostos.libraries.terminal.abcd import Terminal, TerminalContext


# generated by deepseek-reasoner
# with a little modification.
class UbuntuContext(TerminalContext):
    """Ubuntu-specific terminal context implementation"""

    def __init__(self, terminal: Terminal):
        self._terminal = terminal
        self._cached_os_info: Optional[str] = None
        self._cached_hostname: Optional[str] = None
        self._cached_whoami: Optional[str] = None
        self._cached_system_architecture: Optional[str] = None

    def pwd(self) -> str:
        """Get current working directory with symlink resolution"""
        result = self._terminal.exec("pwd -P", timeout=1.0)
        return result.stdout.strip() if result.exit_code == 0 else "/unknown"

    def os_type(self) -> str:
        """Get detailed Ubuntu version information"""
        if not self._cached_os_info:
            result = self._terminal.exec(
                "lsb_release -ds | awk -F '\"' '{print $2}'",
                timeout=1.5
            )
            self._cached_os_info = (
                result.stdout.strip()
                if result.exit_code == 0
                else "Ubuntu Linux (unknown version)"
            )
        return self._cached_os_info

    def whoami(self) -> str:
        if not self._cached_whoami:
            self._cached_whoami = self._whoami()
        return self._cached_whoami

    def _whoami(self) -> str:
        """Get user context with privilege detection"""
        user_result = self._terminal.exec("whoami", timeout=1.0)
        host_result = self._terminal.exec("hostname -s", timeout=1.0)

        user = user_result.stdout.strip() or "unknown"
        host = self._get_cached_hostname(host_result)

        # Privilege detection
        id_result = self._terminal.exec("id -u", timeout=1.0)
        privilege = "root" if id_result.stdout.strip() == "0" else "user"

        return f"{user}@{host} [{privilege}]"

    def system_architecture(self) -> str:
        if not self._cached_system_architecture:
            self._cached_system_architecture = self._system_architecture()
        return self._cached_system_architecture

    def _system_architecture(self) -> str:
        """Get hardware architecture with additional details"""
        arch_result = self._terminal.exec("uname -m", timeout=1.0)
        cpu_result = self._terminal.exec(
            "lscpu | grep 'Model name' | cut -d ':' -f2 | sed 's/^ //'",
            timeout=2.0
        )

        arch = arch_result.stdout.strip() or "unknown"
        cpu = cpu_result.stdout.strip().replace('\n', ', ') if cpu_result.exit_code == 0 else ""

        return f"{arch} ({cpu})" if cpu else arch

    def time_context(self) -> datetime:
        """Get precise time with timezone awareness"""
        # Get timezone info
        tz_result = self._terminal.exec(
            "timedatectl show --property=Timezone --value",
            timeout=1.0
        )
        tz_name = tz_result.stdout.strip() if tz_result.exit_code == 0 else "UTC"

        # Get current time
        time_result = self._terminal.exec(
            "date --iso-8601=seconds",
            timeout=1.0
        )

        try:
            # Try to parse from precise command
            return datetime.fromisoformat(time_result.stdout.strip())
        except ValueError:
            # Fallback to system time
            return datetime.now(pytz.timezone(tz_name) if tz_name else pytz.utc)

    def _get_cached_hostname(self, result: Terminal.CommandResult) -> str:
        """Cache hostname for subsequent calls"""
        if not self._cached_hostname:
            self._cached_hostname = (
                result.stdout.strip()[:20]
                if result.exit_code == 0
                else "unknown-host"
            )
        return self._cached_hostname

    def generate_prompt(self) -> str:
        """Ubuntu-optimized context prompt"""
        base_prompt = super().generate_prompt()

        # Add Ubuntu-specific info
        kernel_result = self._terminal.exec(
            "uname -r",
            timeout=1.0
        )
        kernel = kernel_result.stdout.strip() if kernel_result.exit_code == 0 else ""

        return (
            f"{base_prompt}\n"
            f"Kernel: {kernel}\n"
            "Environment: Ubuntu Terminal"
        )
