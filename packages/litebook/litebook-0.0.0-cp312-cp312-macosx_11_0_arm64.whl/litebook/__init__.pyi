from typing import List, Optional

class OrderType:
    Buy: "OrderType"
    Sell: "OrderType"

    def __eq__(self, other: object) -> bool: ...

class OrderStatus:
    Open: "OrderStatus"
    Filled: "OrderStatus"
    Canceled: "OrderStatus"

    def __eq__(self, other: object) -> bool: ...

class Fill:
    def __init__(
        self, quantity: float, price: float, buy_id: str, sell_id: str, timestamp: int
    ) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def quantity(self) -> float: ...
    @property
    def price(self) -> float: ...
    @property
    def buy_id(self) -> str: ...
    @property
    def sell_id(self) -> str: ...
    @property
    def timestamp(self) -> int: ...

class Order:
    def __init__(
        self, side: OrderType, price_in_ticks: int, quantity: float
    ) -> "Order": ...
    def __repr__(self) -> str: ...
    def can_match(self, other: "Order") -> bool: ...
    def fill(self, incoming: "Order", tick_size: float) -> Optional[Fill]: ...
    def is_open(self) -> bool: ...
    @property
    def id(self) -> str: ...
    @property
    def side(self) -> OrderType: ...
    @property
    def price_in_ticks(self) -> int: ...
    @property
    def quantity(self) -> float: ...
    @property
    def status(self) -> OrderStatus: ...
    @property
    def timestamp(self) -> int: ...

class OrderBook:
    def __init__(self, *, tick_size: float = 0.01) -> None: ...
    def create_order(self, side: OrderType, price: float, quantity: float) -> Order: ...
    def add(self, order: Order) -> List[Fill]: ...
    def cancel(self, order_id: str) -> bool: ...
    def get_order(self, order_id: str) -> Optional[Order]: ...
    @property
    def buy_orders(self) -> List[Order]: ...
    @property
    def sell_orders(self) -> List[Order]: ...
    @property
    def tick_size(self) -> float: ...
    def spread(self) -> Optional[float]: ...
    def __repr__(self) -> str: ...

def litebook() -> None: ...
