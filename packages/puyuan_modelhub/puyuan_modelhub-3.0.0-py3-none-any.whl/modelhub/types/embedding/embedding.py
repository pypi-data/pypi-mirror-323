from typing import Dict, List, Literal

from .._base import BaseModel, BaseOutput
from ..pricing import Currency


class Cost(BaseModel):
    currency: Currency
    multiplier: int = 1000000
    prompt_tokens: int
    """The number of tokens used by the prompt."""

    prompt_cost: float
    """The cost of the prompt tokens."""

    total_tokens: int
    """The total number of tokens used by the request."""
    total_cost: float
    """The total cost of the request."""


NO_COST = Cost(currency=Currency.USD, prompt_tokens=0, prompt_cost=0, total_tokens=0, total_cost=0)


class EmbeddingResponse(BaseOutput):
    created: float
    """The timestamp of when the request was created."""

    embed_time: float
    """The time taken to generate the embedding."""

    embedding: list[list[float]] | None = None
    """The list of embeddings generated by the model."""

    weights: List[Dict[int, float]] | None = None
    """Sparse embeddings, if requested."""

    model: str
    """The name of the model used to generate the embedding."""

    object: Literal["embedding"] = "embedding"
    """The object type, which is always "list"."""

    cost: Cost | None = None
    """The usage information for the request."""

    original_response: dict | None = None


class EmbeddingDimensionResponse(BaseOutput):
    typical_dimension: int
    min_dimension: int | None = None
    max_dimension: int | None = None
    variable: bool = False
