"use strict";(self.webpackChunkjpsl_tools_menu=self.webpackChunkjpsl_tools_menu||[]).push([[509],{509:(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var n=o(589),l=o(960),a=o(228);const i={id:"JPSL_Tools_Menu:plugin",description:"JLab compatible convenience menu for common activities in Jupyter Physical Science Lab.",autoStart:!0,requires:[n.IMainMenu,a.INotebookTracker,a.INotebookTools],activate:async(e,t,o,n)=>{const{commands:a}=e,i="hidebeforeprint:JPSL_Tools_Menu:main-menu",s="Hide before print",d="Hide before print.";a.addCommand(i,{label:s,caption:d,execute:()=>{if(o.currentWidget)if(o.currentWidget.content.widgets){let e=0;for(const t of o.currentWidget.content.widgets){let o=t.model.getMetadata("JPSL");o&&(o.hide_on_print&&(t.node.setAttribute("style","display:none;"),t.hide(),e+=1),o.collapse_code_on_print&&(t.inputHidden=!0,e+=1))}0==e&&window.alert("No hide before print cells found.")}else window.alert("No notebook cells found.");else window.alert("You do not appear to have a notebook in front or selected. Try again.");console.log("Hide before print has been called.")}});const c="undohidebeforeprint:JPSL_Tools_Menu:main-menu",r="Undo hide before print",p="Undo hide before print.";a.addCommand(c,{label:r,caption:p,execute:()=>{if(o.currentWidget)if(o.currentWidget.content.widgets){let e=0;for(const t of o.currentWidget.content.widgets){let o=t.model.getMetadata("JPSL");o&&(o.hide_on_print&&(t.node.removeAttribute("style"),t.show(),e+=1),o.collapse_code_on_print&&(t.inputHidden=!1,e+=1))}0==e&&window.alert("No hide before print cells found.")}else window.alert("No notebook cells found.");else window.alert("You do not appear to have a notebook in front or selected. Try again.");console.log("Undo hide before print has been called.")}});const m="initJupyterPiDAQ:JPSL_Tools_Menu:main-menu",u="Insert JupyterPiDAQ initialization code",b="Insert JupyterPiDAQ initialization code.";a.addCommand(m,{label:u,caption:b,execute:()=>{if(n.selectedCells){const e=n.selectedCells[0].editor;e&&e.replaceSelection&&e.replaceSelection("from jupyterpidaq.DAQinstance import *")}else window.alert("Please select a cell in a notebook.");console.log("Insert JupyterPiDAQ init code called.")}});const I="initalgwsymp:JPSL_Tools_Menu:main-menu",_="Insert Algebra with Sympy initialization code",w="Insert Algebra with Sympy initialization code.";a.addCommand(I,{label:_,caption:w,execute:()=>{if(n.selectedCells){const e=n.selectedCells[0].editor;e&&e.replaceSelection&&e.replaceSelection("from algebra_with_sympy import *")}else window.alert("Please select a cell in a notebook.");console.log("Insert Algebra with Sympy init code called.")}});const g="initpandasGUI:JPSL_Tools_Menu:main-menu",P="Insert PandasGUI initialization code",f="Insert PandasGUI initialization code.";a.addCommand(g,{label:P,caption:f,execute:()=>{if(n.selectedCells){const e=n.selectedCells[0].editor;e&&e.replaceSelection&&e.replaceSelection("from pandas_GUI import *")}else window.alert("Please select a cell in a notebook.");console.log("Insert PandasGUI init code called.")}});const S="CSVtoPandas:JPSL_Tools_Menu:main-menu",h="Insert load data from CSV code",y="Insert load data from CSV code skeleton.";a.addCommand(S,{label:h,caption:y,execute:()=>{let e="import pandas as pd # does nothing if previously imported.\n";if(e+="# Make the appropriate replacements in the following skeleton statement.\n",e+="REPLACE_WITH_NAME_FOR_DATAFRAME = pd.read_csv('REPLACE_WITH_FILENAME_OR_PATH')",n.selectedCells){const e=n.selectedCells[0].editor;e&&e.replaceSelection&&e.replaceSelection("import pandas as pd # does nothing if previously imported.\n# Make the appropriate replacements in the following skeleton statement.\nREPLACE_WITH_NAME_FOR_DATAFRAME = pd.read_csv('REPLACE_WITH_FILENAME_OR_PATH')")}else window.alert("Please select a cell in a notebook.");console.log("Insert CSV to Pandas code called.")}});const C="newcolGUI:JPSL_Tools_Menu:main-menu",A="Insert New Calculated Column GUI",M="Insert PandasGUI new column code.";a.addCommand(C,{label:A,caption:M,execute:()=>{if(n.selectedCells){const e=n.selectedCells[0].editor;e&&e.replaceSelection&&e.replaceSelection("new_pandas_column_GUI()")}else window.alert("Please select a cell in a notebook.");console.log("Insert PandasGUI new column code called.")}});const T="plotGUI:JPSL_Tools_Menu:main-menu",U="Insert New Plot GUI",J="Insert PandasGUI new plot code.";a.addCommand(T,{label:U,caption:J,execute:()=>{if(n.selectedCells){const e=n.selectedCells[0].editor;e&&e.replaceSelection&&e.replaceSelection("plot_pandas_GUI()")}else window.alert("Please select a cell in a notebook.");console.log("Insert PandasGUI new plot code called.")}});const L="fitGUI:JPSL_Tools_Menu:main-menu",k="Insert New Fit GUI",G="Insert PandasGUI new fit code.";a.addCommand(L,{label:k,caption:G,execute:()=>{if(n.selectedCells){const e=n.selectedCells[0].editor;e&&e.replaceSelection&&e.replaceSelection("fit_pandas_GUI()")}else window.alert("Please select a cell in a notebook.");console.log("Insert PandasGUI new fit code called.")}});const v=new l.MenuSvg({commands:a});v.title.label="Algebra with Sympy",v.addItem({command:I,args:{label:_,caption:w}}),v.addItem({command:"help:open",args:{text:"Algebra with Sympy Docs",url:"https://gutow.github.io/Algebra_with_Sympy/",newBrowserTab:"true"}});const E=new l.MenuSvg({commands:a});E.title.label="JupyterPiDAQ",E.addItem({command:m,args:{label:u,caption:b}}),E.addItem({command:"help:open",args:{text:"JupyterPiDAQ Docs",url:"https://jupyterphysscilab.github.io/JupyterPiDAQ/",newBrowserTab:"true"}});const x=new l.MenuSvg({commands:a});x.title.label="Pandas GUI",x.addItem({command:g,args:{label:P,caption:f}}),x.addItem({command:S,args:{label:h,caption:y}}),x.addItem({command:C,args:{label:A,caption:M}}),x.addItem({command:T,args:{label:U,caption:J}}),x.addItem({command:L,args:{label:k,caption:G}}),x.addItem({command:"help:open",args:{text:"PandasGUI Docs",url:"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI/",newBrowserTab:"true"}});const D=new l.MenuSvg({commands:a});D.title.label="JPSL Tools",D.addClass("jp-JPSL-tool-menu"),D.addItem({command:i,args:{label:s,caption:d}}),D.addItem({command:c,args:{label:r,caption:p}}),D.addItem({type:"submenu",submenu:v,args:{label:v.title.label}}),D.addItem({type:"submenu",submenu:E,args:{label:E.title.label}}),D.addItem({type:"submenu",submenu:x,args:{label:x.title.label}}),t.addMenu(D),console.log("JupyterLab extension JPSL_Tools_Menu is activated!")}}}}]);