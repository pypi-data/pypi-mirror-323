Metadata-Version: 2.4
Name: JPSL_Tools_Menu
Version: 0.2.1rc0
Dynamic: Keywords
Summary: JLab compatible convenience menu for common activities in Jupyter Physical Science Lab.
Project-URL: Homepage, https://github.com/JupyterPhysSciLab/JPSL_Tools_Menu
Project-URL: Bug Tracker, https://github.com/JupyterPhysSciLab/JPSL_Tools_Menu/issues
Project-URL: Repository, https://github.com/JupyterPhysSciLab/JPSL_Tools_Menu.git
Author-email: Jonathan Gutow <gutow@uwosh.edu>
License: BSD 3-Clause License
        
        Copyright (c) 2024, Jonathan Gutow
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived from
           this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
License-File: LICENSE
Classifier: Framework :: Jupyter
Classifier: Framework :: Jupyter :: JupyterLab
Classifier: Framework :: Jupyter :: JupyterLab :: 4
Classifier: Framework :: Jupyter :: JupyterLab :: Extensions
Classifier: Framework :: Jupyter :: JupyterLab :: Extensions :: Prebuilt
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Requires-Dist: algebra-with-sympy
Requires-Dist: jupyter-pandas-gui>=0.9.0
Requires-Dist: jupyterlab<5,>=4.0.0
Requires-Dist: jupyterpidaq>=0.8.1
Description-Content-Type: text/markdown

# JPSL_Tools_Menu
<!-- Not yet functional
[![Github Actions Status](https://github.com/JupyterPhysSciLab/JPSL_Tools_Menu/workflows/Build/badge.svg)](https://github.com/JupyterPhysSciLab/JPSL_Tools_Menu/actions/workflows/build.yml)
-->
JLab compatible convenience menu for common activities in Jupyter Physical Science Lab.

Current menu items:
* "__Hide before print__" hides cells selected for hiding using 
  [jupyter-instructortools
  ](https://github.com/JupyterPhysSciLab/jupyter-instructortools).
* "__Undo hide before print__" reveals the hidden cells.
* "__Algebra with Sympy__" submenu:
  * "__Insert Algebra with Sympy initialization code__" inserts in place of 
    the current selection the properly formed import statement to initialize 
    the Algebra_with_Sympy package.
  * "__Algebra with Sympy Docs__" opens a new browser window showing the 
    documentation.
* "__JupyterPiDaQ__" submenu:
  * "__Insert JupyterPiDAQ initialization code__" inserts in place of the 
    current selection the properly formed import statement to initialize the 
    JupyterPiDAQ live data acquisition package.
  * "__JupyterPiDAQ Docs__" opens the documentation in a new browser window.
* "__Pandas GUI__" submenu:
  * "__Insert PandasGUI initialization code__" inserts in place of the 
    current selection the properly formed import statement to initialize the 
    PandasGUI package of graphical tools to help generate code to manipulate 
    and display data stored in [Pandas](https://pandas.pydata.org/) DataFrames.
  * "__Insert load data from CSV code__" replaces the current selection with 
    the skeleton code for loading data from a CSV file into a Pandas DataFrame.
  * "__Insert New Calculated Column GUI__" replaces the current selection 
    with a 
    function call that opens the graphical user interface to assist in 
    generating code to create a new calculated column in a Pandas DataFrame.
  * "__Insert New Plot GUI__" replaces the current selection with a function 
    call that opens the graphical user interface to generate code for making 
    a [Plotly](https://plotly.com/python/) plot from data in a Pandas DataFrame.
  * "__Insert New Fit GUI__" replaces the current selection with a function 
    call 
    that opens the graphical user interface to generate code for fitting 
    data using the [lmfit](https://lmfit.github.io/lmfit-py/) package and 
    plotting the results using Plotly.
  * "__PandasGUI Docs__" opens the documentation in a new browser window.

## Requirements

- JupyterLab >= 4.0.0
- algebra_with_sympy >= 1.0.0
- jupyterpidaq >= 0.8.1
- jupyter-pandas-gui >= 0.9.0

## Install

To install the extension, execute:

```bash
pip install JPSL_Tools_Menu
```

## Uninstall

To remove the extension, execute:

```bash
pip uninstall JPSL_Tools_Menu
```

## Contributing

### Development install

Note: You will need NodeJS to build the extension package.

The `jlpm` command is JupyterLab's pinned version of
[yarn](https://yarnpkg.com/) that is installed with JupyterLab. You may use
`yarn` or `npm` in lieu of `jlpm` below.

```bash
# Clone the repo to your local environment
# Change directory to the JPSL_Tools_Menu directory
# Install package in development mode
pip install -e "."
# Link your development version of the extension with JupyterLab
jupyter labextension develop . --overwrite
# Rebuild extension Typescript source after making changes
jlpm build
```
Because the naming conventions in npm and python environments do not match, 
when testing locally the javascript part of the package may not load 
properly. To ensure that it does, you need to navigate to the proper data 
directory in your development environment (probably a Hatch env) and make 
sure there is a symlink called `jpsl-tools-menu` pointing to the location of 
the development extension. The normal build protocols will have created a 
symlink called `JPSL_Tools_Menu`, mimicking the Python name.
```commandline
# Find out what your paths are
jupyter --paths
```
The reply will look something like:
```
config:
    ~/.local/share/hatch/env/virtual/jpsl-tools-menu/E5dpYnsy/jpsl-tools-menu
    /etc/jupyter
    ~/.jupyter
    /usr/local/etc/jupyter
    /etc/jupyter
data:
    ~/.local/share/hatch/env/virtual/jpsl-tools-menu/E5dpYnsy/jpsl-tools-menu
    /share/jupyter
    ~/.local/share/jupyter
    /usr/local/share/jupyter
    /usr/share/jupyter
runtime:
    ~/.local/share/jupyter/runtime
```
Navigate to the equivalent of the first path in the `data` section above. 
This should contain the directory `labextensions`. Inside that you should 
find the problematic symbolic link. Make a link to that with the proper name.
```commandline
ln -s JPSL_Tools_Menu jpsl-tools-menu
```

You can watch the source directory and run JupyterLab at the same time in different terminals to watch for changes in the extension's source and automatically rebuild the extension.

```bash
#  Optional: Watch the source directory in one terminal, automatically 
rebuilding 
when needed
jlpm watch
# Run JupyterLab in another terminal
jupyter lab
```

With the watch command running, every saved change will immediately be built locally and available in your running JupyterLab. Refresh JupyterLab to load the change in your browser (you may need to wait several seconds for the extension to be rebuilt).

By default, the `jlpm build` command generates the source maps for this extension to make it easier to debug using the browser dev tools. To also generate source maps for the JupyterLab core extensions, you can run the following command:

```bash
jupyter lab build --minimize=False
```

### Development uninstall

```bash
pip uninstall JPSL_Tools_Menu
```

In development mode, you will also need to remove the symlink created by `jupyter labextension develop`
command. To find its location, you can run `jupyter labextension list` to figure out where the `labextensions`
folder is located. Then you can remove the symlink named `JPSL_Tools_Menu` within that folder.

### Testing the extension (not complete yet)

#### Frontend tests

This extension is using [Jest](https://jestjs.io/) for JavaScript code testing.

To execute them, execute:

```sh
jlpm
jlpm test
```

#### Integration tests

This extension uses [Playwright](https://playwright.dev/docs/intro) for the integration tests (aka user level tests).
More precisely, the JupyterLab helper [Galata](https://github.com/jupyterlab/jupyterlab/tree/master/galata) is used to handle testing the extension in JupyterLab.

More information are provided within the [ui-tests](./ui-tests/README.md) README.

### Packaging the extension

See [RELEASE](RELEASE.md)
