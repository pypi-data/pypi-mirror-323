from typing import ClassVar, overload

class ExpectationType:
    __members__: ClassVar[dict] = ...  # read-only
    THEORETICAL: ClassVar[ExpectationType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        """__init__(self: vqcircuit.ExpectationType, value: int) -> None"""
    def __eq__(self, other: object) -> bool:
        """__eq__(self: object, other: object) -> bool"""
    def __hash__(self) -> int:
        """__hash__(self: object) -> int"""
    def __index__(self) -> int:
        """__index__(self: vqcircuit.ExpectationType) -> int"""
    def __int__(self) -> int:
        """__int__(self: vqcircuit.ExpectationType) -> int"""
    def __ne__(self, other: object) -> bool:
        """__ne__(self: object, other: object) -> bool"""
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Parameter:
    def __init__(self, *args, **kwargs) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""

class VQCResult:
    def __init__(self) -> None:
        """__init__(self: vqcircuit.VQCResult) -> None


        @brief Default constructor for the VQCircuitResult class.
        @details This constructor initializes a new instance of the VQCircuitResult class. The VQCircuitResult class is used to store and manage a collection of QCircuit objects generated by a VQCircuit.
            
        """
    def at(self, *args, **kwargs):
        """at(self: vqcircuit.VQCResult, idxs: list[int]) -> QPanda3::QCircuit


        @brief Accesses a QCircuit object at a specified index.
        @details This method retrieves a reference to the QCircuit object at the specified index, which is determined by the provided vector of qubit indices. The vector should contain the indices of the qubits that correspond to the desired QCircuit.
        @param idxs the specified index
        @return a reference to the QCircuit object at the specified index
            
        """
    def expval_at(self, idxs: list[int]) -> float:
        """expval_at(self: vqcircuit.VQCResult, idxs: list[int]) -> float


        @brief Calculates the expectation value of a QCircuit object at a specified index.
        @param idxs the specified index
        @return the expectation value of a QCircuit object at a specified index.
            
        """
    def expval_hamiltonian(self, hamiltonian, exp_type: ExpectationType = ...) -> list[float]:
        """expval_hamiltonian(*args, **kwargs)
        Overloaded function.

        1. expval_hamiltonian(self: vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, exp_type: vqcircuit.ExpectationType = <ExpectationType.THEORETICAL: 0>) -> list[float]


        @brief Computes the expectation values of a Hamiltonian for all QCircuit objects in the batch.
        @details This function calculates the expectation value of a given Hamiltonian for each QCircuit in the batch represented by the VQCircuitResult. The expectation value can be computed using either theoretical or sampled methods, depending on the specified \\\\`type\\\\` parameter. 
        @param hamiltonian the a Hamiltonian object
        @param exp_type Not it only support ExpectationType.THEORETICAL
        @return the expectation values of a Hamiltonian for all QCircuit objects in the batch.
            

        2. expval_hamiltonian(self: vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], exp_type: vqcircuit.ExpectationType = <ExpectationType.THEORETICAL: 0>) -> float


        @brief Computes the expectation value of a Hamiltonian for a specific QCircuit object identified by multi-dimensional indexs.
        @details This function calculates the expectation value of a given Hamiltonian for a specific QCircuit object in a collection, identified by the multi-dimensional index \\\\`idx_s\\\\`. The expectation value can be computed using either a theoretical or sampled method,depending on the specified \\\\`type\\\\` parameter.
        @param hamiltonian the a Hamiltonian object
        @param idx_s multi-dimensional indexs.
        @param exp_type Not it only support ExpectationType.THEORETICAL
            
        """
    def expval_pauli_operator(self, pauli_operator, exp_type: ExpectationType = ...) -> list[float]:
        """expval_pauli_operator(*args, **kwargs)
        Overloaded function.

        1. expval_pauli_operator(self: vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, exp_type: vqcircuit.ExpectationType = <ExpectationType.THEORETICAL: 0>) -> list[float]


        @brief Computes the expectation value of a Pauli operator for all QCircuit objects in the batch.
        @details This function calculates the expectation value of a given Pauli operator for each QCircuit in the batch represented by the VQCircuitResult. The expectation value can be computed using either theoretical or sampled methods, depending on the specified \\\\`type\\\\` parameter. 
        @param pauli_operator the a Pauli operator object
        @param exp_type Not it only support ExpectationType.THEORETICAL
        @return the expectation values of a Pauli operator for all QCircuit objects in the batch.
            

        2. expval_pauli_operator(self: vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], exp_type: vqcircuit.ExpectationType = <ExpectationType.THEORETICAL: 0>) -> float


        @brief Computes the expectation value of a Pauli operator for a specific QCircuit object identified by multi-dimensional indexs.
        @details This function calculates the expectation value of a given Pauli operator for a specific QCircuit object in a collection, identified by the multi-dimensional index \\\\`idx_s\\\\`. The expectation value can be computed using either a theoretical or sampled method,depending on the specified \\\\`type\\\\` parameter.
        @param pauli_operator the a Pauli operator object
        @param idx_s multi-dimensional indexs.
        @param exp_type Not it only support ExpectationType.THEORETICAL
            
        """

class VQCircuit:
    def __init__(self) -> None:
        """__init__(self: vqcircuit.VQCircuit) -> None


        @brief Constructs a new instance of the VariationalQuantumCircuit class.

        @details This constructor initializes a new empty instance of the VariationalQuantumCircuit class, ready for further configuration and use.
            
        """
    @overload
    def Param(self, idxs: list[int], emement_label: str) -> list[int]:
        """Param(*args, **kwargs)
        Overloaded function.

        1. Param(self: vqcircuit.VQCircuit, idxs: list[int], emement_label: str) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            

        2. Param(self: vqcircuit.VQCircuit, idxs: list[int]) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @return th position in the multi-dimensional array
            

        3. Param(self: vqcircuit.VQCircuit, emement_label: str) -> list[int]


        @brief Retrieves the multidimensional array index for a variable parameter with a specified label.
        @details This method takes a label string for a variable parameter and returns the corresponding multidimensional array index.
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            
        """
    @overload
    def Param(self, idxs: list[int]) -> list[int]:
        """Param(*args, **kwargs)
        Overloaded function.

        1. Param(self: vqcircuit.VQCircuit, idxs: list[int], emement_label: str) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            

        2. Param(self: vqcircuit.VQCircuit, idxs: list[int]) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @return th position in the multi-dimensional array
            

        3. Param(self: vqcircuit.VQCircuit, emement_label: str) -> list[int]


        @brief Retrieves the multidimensional array index for a variable parameter with a specified label.
        @details This method takes a label string for a variable parameter and returns the corresponding multidimensional array index.
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            
        """
    @overload
    def Param(self, emement_label: str) -> list[int]:
        """Param(*args, **kwargs)
        Overloaded function.

        1. Param(self: vqcircuit.VQCircuit, idxs: list[int], emement_label: str) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            

        2. Param(self: vqcircuit.VQCircuit, idxs: list[int]) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @return th position in the multi-dimensional array
            

        3. Param(self: vqcircuit.VQCircuit, emement_label: str) -> list[int]


        @brief Retrieves the multidimensional array index for a variable parameter with a specified label.
        @details This method takes a label string for a variable parameter and returns the corresponding multidimensional array index.
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            
        """
    def disable_layer(self) -> None:
        """disable_layer(self: vqcircuit.VQCircuit) -> None


        @brief Disables the layer mechanism for the variational quantum circuit.
        @details This method deactivates the layer mechanism, resulting in a variational quantum circuit (VQCircuit) that has the same structure as the ansatz,with parameters updated based on the input parameters.
            
        """
    def display_ansatz(self) -> None:
        """display_ansatz(self: vqcircuit.VQCircuit) -> None


        @brief Displays the structure of the ansatz (variational quantum circuit).
        @details This method prints or otherwise displays the structure and components of the variational quantum circuit (ansatz) to the user.
            
        """
    def enable_layer(self) -> None:
        """enable_layer(self: vqcircuit.VQCircuit) -> None


        @brief Enables the layer mechanism for the variational quantum circuit.
        @details This method activates a mechanism where the variational quantum circuit (VQCircuit) is composed of a series of sub-circuits,each with the same n-layer structure as the ansatz but potentially different parameters.
            
        """
    def get_Param_dims(self) -> list[int]:
        """get_Param_dims(self: vqcircuit.VQCircuit) -> list[int]


        @brief Retrieves the dimension information of the `Param` object.
        @return returns a vector of size_t values representing the dimension sizes associated with the `Param` object.
            
        """
    def set_Param(self, dim_size_s: list[int], dim_label_s: list[str]) -> None:
        """set_Param(*args, **kwargs)
        Overloaded function.

        1. set_Param(self: vqcircuit.VQCircuit, dim_size_s: list[int], dim_label_s: list[str]) -> None


        @brief Sets the dimension sizes and labels for the `Param` object.
        @details This method allows the user to specify both the dimension sizes and corresponding labels for the `Param` object.
        @param dim_size_s a vector with dim's sizes
        @param dim_label_s a vector with dim's labels
            

        2. set_Param(self: vqcircuit.VQCircuit, dim_size_s: list[int]) -> None


        @brief Sets the dimension sizes for the `Param` object.
        @details This method allows the user to specify the dimension sizes for the `Param` object using a vector of size_t values.
        @param dim_size_s a vector with dim's sizes
            
        """
    def __call__(self, *args, **kwargs):
        """__call__(self: vqcircuit.VQCircuit, params: numpy.ndarray[numpy.float64]) -> QPanda3::VQCircuitResult


        @brief Applies parameter values to the variational quantum circuit and evaluates it.
        @details This method applies the provided parameter values (`data`) to the variational quantum circuit, considering the specified dimension sizes (`dim_size_s`). operator (`<<`). The variational quantum gate to be inserted is specified as the parameter `vqgate`.It then evaluates the circuit and returns the result as a `VQCircuitResult` object.
        @param params a numpy.ndarray object with all params to generate QCircuit objects
            
        """
    @overload
    def __lshift__(self, qgate) -> VQCircuit:
        """__lshift__(*args, **kwargs)
        Overloaded function.

        1. __lshift__(self: vqcircuit.VQCircuit, qgate: QPanda3::QGate) -> vqcircuit.VQCircuit


        @brief Inserts a quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of quantum gates into the variational quantum circuit using the stream insertion operator (`<<`). The quantum 
        @param qgate the quantum gate will be inserted to the variational quantum circuit,the qgate is with fixed params or without pparams gate to be inserted is specified as the parameter `qgate`.
            

        2. __lshift__(self: vqcircuit.VQCircuit, qcircuit: QPanda3::QCircuit) -> vqcircuit.VQCircuit


        @brief Inserts a quantum circuit into the variational quantum circuit.
        @details This operator overload allows for the insertion of a complete quantum circuit into the variational quantum circuit using the stream insertion operator (`<<`). The quantum circuit to be inserted is specified as the parameter `qcircuit`
        @param qcircuit the quantum qcircuit will be inserted to the variational quantum circuit,its gates are with fixed params or without params gate to be inserted.
            

        3. __lshift__(self: vqcircuit.VQCircuit, vqgate: tuple[QPanda3::VariationalQuantumGate, list[Union[float, list[int]]]]) -> vqcircuit.VQCircuit


        @brief Inserts a variational quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of a variational quantum gate into the variational quantum circuit using the stream insertion operator (`<<`). The variational quantum gate to be inserted is specified as the parameter `vqgate`.
        @param vqgate a variational quantum gate object
            
        """
    @overload
    def __lshift__(self, qcircuit) -> VQCircuit:
        """__lshift__(*args, **kwargs)
        Overloaded function.

        1. __lshift__(self: vqcircuit.VQCircuit, qgate: QPanda3::QGate) -> vqcircuit.VQCircuit


        @brief Inserts a quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of quantum gates into the variational quantum circuit using the stream insertion operator (`<<`). The quantum 
        @param qgate the quantum gate will be inserted to the variational quantum circuit,the qgate is with fixed params or without pparams gate to be inserted is specified as the parameter `qgate`.
            

        2. __lshift__(self: vqcircuit.VQCircuit, qcircuit: QPanda3::QCircuit) -> vqcircuit.VQCircuit


        @brief Inserts a quantum circuit into the variational quantum circuit.
        @details This operator overload allows for the insertion of a complete quantum circuit into the variational quantum circuit using the stream insertion operator (`<<`). The quantum circuit to be inserted is specified as the parameter `qcircuit`
        @param qcircuit the quantum qcircuit will be inserted to the variational quantum circuit,its gates are with fixed params or without params gate to be inserted.
            

        3. __lshift__(self: vqcircuit.VQCircuit, vqgate: tuple[QPanda3::VariationalQuantumGate, list[Union[float, list[int]]]]) -> vqcircuit.VQCircuit


        @brief Inserts a variational quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of a variational quantum gate into the variational quantum circuit using the stream insertion operator (`<<`). The variational quantum gate to be inserted is specified as the parameter `vqgate`.
        @param vqgate a variational quantum gate object
            
        """
    @overload
    def __lshift__(self, vqgate) -> VQCircuit:
        """__lshift__(*args, **kwargs)
        Overloaded function.

        1. __lshift__(self: vqcircuit.VQCircuit, qgate: QPanda3::QGate) -> vqcircuit.VQCircuit


        @brief Inserts a quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of quantum gates into the variational quantum circuit using the stream insertion operator (`<<`). The quantum 
        @param qgate the quantum gate will be inserted to the variational quantum circuit,the qgate is with fixed params or without pparams gate to be inserted is specified as the parameter `qgate`.
            

        2. __lshift__(self: vqcircuit.VQCircuit, qcircuit: QPanda3::QCircuit) -> vqcircuit.VQCircuit


        @brief Inserts a quantum circuit into the variational quantum circuit.
        @details This operator overload allows for the insertion of a complete quantum circuit into the variational quantum circuit using the stream insertion operator (`<<`). The quantum circuit to be inserted is specified as the parameter `qcircuit`
        @param qcircuit the quantum qcircuit will be inserted to the variational quantum circuit,its gates are with fixed params or without params gate to be inserted.
            

        3. __lshift__(self: vqcircuit.VQCircuit, vqgate: tuple[QPanda3::VariationalQuantumGate, list[Union[float, list[int]]]]) -> vqcircuit.VQCircuit


        @brief Inserts a variational quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of a variational quantum gate into the variational quantum circuit using the stream insertion operator (`<<`). The variational quantum gate to be inserted is specified as the parameter `vqgate`.
        @param vqgate a variational quantum gate object
            
        """
