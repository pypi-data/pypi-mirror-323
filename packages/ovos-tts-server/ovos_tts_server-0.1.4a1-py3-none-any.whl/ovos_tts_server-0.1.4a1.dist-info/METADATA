Metadata-Version: 2.1
Name: ovos-tts-server
Version: 0.1.4a1
Summary: simple FastAPI server to host TTS plugins as a service
Home-page: https://github.com/OpenVoiceOS/ovos-tts-server
Author: JarbasAi
Author-email: jarbasai@mailfence.com
License: Apache-2.0
Keywords: plugin TTS OVOS OpenVoiceOS
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Text Processing :: Linguistic
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.0
Classifier: Programming Language :: Python :: 3.1
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: ovos-plugin-manager<1.0.0,>=0.0.25
Requires-Dist: fastapi~=0.115
Requires-Dist: uvicorn~=0.34
Requires-Dist: gradio~=5.12
Requires-Dist: ovos-utils<1.0.0,>=0.0.38

# OpenVoiceOS TTS Server

Turn any OVOS TTS plugin into a micro service!


## Install

`pip install ovos-tts-server`

## Companion plugin

Use in your voice assistant with OpenVoiceOS [companion plugin](https://github.com/OpenVoiceOS/ovos-tts-server-plugin)

## Configuration

the plugin is configured just like if it was running in the assistant, under mycroft.conf

eg
```
 "tts": {
    "module": "ovos-tts-plugin-piper",
    "ovos-tts-plugin-piper": {
      "model": "alan-low"
    }
  }
```

## Usage

```bash
ovos-tts-server --help
usage: ovos-tts-server [-h] [--engine ENGINE] [--port PORT] [--host HOST] [--cache]

options:
  -h, --help       show this help message and exit
  --engine ENGINE  tts plugin to be used
  --port PORT      port number
  --host HOST      host
  --cache          save every synth to disk
```

eg, to use the [GladosTTS plugin](https://github.com/NeonGeckoCom/neon-tts-plugin-glados) `ovos-tts-server --engine neon-tts-plugin-glados --cache`

then do a get request `http://192.168.1.112:9666/synthesize/hello`


## Docker

you can create easily crete a docker file to serve any plugin

```dockerfile
FROM python:3.7

RUN pip3 install ovos-utils==0.0.15
RUN pip3 install ovos-plugin-manager==0.0.4
RUN pip3 install ovos-tts-server==0.0.1

RUN pip3 install {PLUGIN_HERE}

ENTRYPOINT ovos-tts-server --engine {PLUGIN_HERE} --cache
```

build it
```bash
docker build . -t my_ovos_tts_plugin
```

run it
```bash
docker run -p 8080:9666 my_ovos_tts_plugin
```

use it `http://localhost:8080/synthesize/hello`

Each plugin can provide its own Dockerfile in its repository using ovos-tts-server
