import os
from importlib.resources import files
from get_bbl_estimates_function import get_bbl_estimates
from generate_bbl_estimates_function import _generate_bbl_estimates
from generate_bbl_variances_function import _generate_bbl_variances
from estimates_by_geography_function import _estimates_by_geography
from reorder_columns_function import _reorder_columns

def generate_new_estimates(acs_year, demo_dict, geo, census_api_key, total_pop_code=None, total_house_code=None, boundary_year=None):
        
    """
    Generates demographic estimates, margins of error (MOEs), and coefficients of variation (CVs) for a specified NYC geography.

    Parameters:
    ----------
        acs_year : int
            The 5-Year ACS end-year to fetch data for (e.g., 2022 for the 2018-2022 ACS).
        demo_dict : dict
            Dict keys should be the ACS variable codes for desired demographic groups. Dict values should specify whether the
            variable is 'person' or 'household' level. Example: {'DP05_0001E': 'person', 'DP02_0059E': 'household'}. See Notes.
        geo : str
            The geographic level for estimates. Options currently include 'councildist', 'communitydist', 'schooldist',
            'policeprct'.
        census_api_key : str
            User's Census API key.
        total_pop_code : str, optional
            Variable code for total population in ACS survey of interest. Required for person-level estimates. See Notes.
        total_house_code : str, optional
            Variable code for total households in ACS survey of interest. Required for household-level estimates. See Notes.
        boundary_year : int, optional
            Boundary year for geography, required if `geo` is 'councildist' (valid values: 2013, 2023).

    Returns:
    --------
        pd.DataFrame: A cleaned DataFrame with demographic estimates, MOEs, and CVs for the specified geography and year.

    Notes:
    ------
        - To explore available variable codes, as well as find the values needed for `total_pop_code` and/ or `total_house_code`,
        use `pull_census_api_codes()` or visit https://api.census.gov/data/<acs_year>/acs/acs5/profile/variables.html.
        - Variable codes ending in 'E' are number estimates. Those ending in 'M' are number MOEs. Adding 'P' before 'E' or 'M'
        means the values are percents. Codes ending in 'V' are coefficients of variation.
        -  Generates estimates using the 5-Year American Community Survey, Primary Land Use Tax Lot Output, and
        geographic boundary files
        - Data for geographies available within existing census hierarchy are taken from the ACS. All other data are estimates
        generated by the NYC Council Data Team's methodology. Contact datainfo@council.nyc.gov with questions.
        
    """    
    
    # validating inputs
    
    # setting path
    data_path = files("councilcount").joinpath("data") # setting path

    # locate available CSV files
    file_names = os.listdir(data_path)
    
    # record available geos
    geo_file_names = [f for f in file_names if "boundaries" in f]
    geo_names = list(set([f.split('-')[0] for f in geo_file_names]))
    geo_names.remove('nyc')
    geo_names.append('city')

    # record available years
    available_years = sorted(set(int(f.split('_')[-1][:4]) for f in file_names if f.split('_')[-1][:4].isdigit()))

    # ensuring correct geo input
    if geo not in geo_names:
        raise ValueError(f"The geography '{geo}' could not be found. Available options are:\n" + ", ".join(geo_names))
    # ensuring correct acs_year input
    if acs_year not in available_years:
        raise ValueError(f"The ACS year {acs_year} could not be found. Available options are:\n" + ", ".join(map(str, available_years)))
    # ensuring appropriate denominators provided
    if 'person' in demo_dict.values() and total_pop_code is None:
        raise ValueError("Must include total_pop_code for person-level estimates.")
    if 'household' in demo_dict.values() and total_house_code is None:
        raise ValueError("Must include total_house_code for household-level estimates.")
    # include boundary_year when needed    
    if (geo == 'councildist'):
        if not boundary_year:
            raise ValueError("Must provide an input for boundary_year when geo = councildist. Options include 2013 and 2023.")
        if boundary_year not in [2013, 2023]:
            raise ValueError("Input for boundary_year not recognized. Options include 2013 and 2023")

    # generating blank BBL-level population estimates df
    blank_pop_est_df = get_bbl_estimates(acs_year)
    
    # adding columns for BBL-level demographic estimates
    pop_est_df = _generate_bbl_estimates(acs_year, demo_dict, blank_pop_est_df, census_api_key, total_pop_code, total_house_code)

    # creating census tract-level variances in order to calculate MOE at the geo-level below
    variance_df = _generate_bbl_variances(acs_year, demo_dict, pop_est_df, census_api_key, total_pop_code, total_house_code)
    
    # creating geo-level estimates, MOEs, and CVs
    raw_geo_df = _estimates_by_geography(acs_year, demo_dict, geo, pop_est_df, variance_df, total_pop_code, total_house_code, boundary_year)
    
    # cleaning
    cleaned_geo_df = _reorder_columns(raw_geo_df)
    
    return cleaned_geo_df 