{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Swiftshadow","text":"<p>Swiftshadow is a Python package designed to manage and rotate free IP proxies. It provides a simple and efficient way to fetch, cache, and validate proxies from multiple sources. The package supports filtering by country and protocol, automatic proxy rotation, and caching to improve performance.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Proxy Fetching: Fetch proxies from multiple providers.</li> <li>Filtering: Filter proxies by country and protocol (HTTP/HTTPS).</li> <li>Caching: Cache proxies to reduce frequent fetching.</li> <li>Validation: Validate proxies to ensure they are working.</li> <li>Automatic Rotation: Automatically rotate proxies for load balancing.</li> <li>Logging: Built-in logging for debugging and monitoring.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>Install <code>swiftshadow</code> using pip:</p> <pre><code>pip install swiftshadow\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Here\u2019s a quick example to get started:</p> <pre><code>from swiftshadow import QuickProxy\nfrom swiftshadow.classes import ProxyInterface\n\n# Get a proxy quickly\nproxy = QuickProxy(countries=[\"US\"], protocol=\"http\")\nprint(proxy.as_string())\n\n# Use ProxyInterface for more control\nproxy_manager = ProxyInterface(countries=[\"US\"], protocol=\"http\", autoRotate=True)\nprint(proxy_manager.get().as_string())\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Explore the full documentation to learn more about <code>swiftshadow</code>:</p> <ul> <li>API Reference: Detailed documentation for all classes and functions.</li> <li>Examples: Practical examples to help you get started.</li> </ul>"},{"location":"#why-swiftshadow","title":"Why Swiftshadow?","text":"<ul> <li>Lightweight: Minimal dependencies and easy to integrate.</li> <li>Extensible: Add custom providers and extend functionality.</li> <li>Reliable: Built-in validation ensures only working proxies are used.</li> <li>Open Source: Free to use and modify under the MIT License.</li> </ul>"},{"location":"providers/","title":"Providers","text":"<p>Swiftshadow is a service that provides a range of proxies to users who require online privacy and security. These proxies are sourced from free proxy lists.</p> <p>I want to take a moment to express gratitude to the providers mentioned below for generously supplying us with free proxy lists.</p> <ol> <li> <p>Monosans    GitHub: monosans/proxy-list</p> </li> <li> <p>TheSpeedX    GitHub: TheSpeedX/PROXY-List</p> </li> <li> <p>GoodProxy    GitHub: yuceltoluyag/GoodProxy</p> </li> <li> <p>MuRongPIG    GitHub: MuRongPIG/Proxy-Master</p> </li> <li> <p>KangProxy    GitHub: officialputuid/KangProxy</p> </li> <li> <p>Mmpx12    GitHub: mmpx12/proxy-list</p> </li> <li> <p>Anonym0usWork1221    GitHub: Anonym0usWork1221/Free-Proxies</p> </li> <li> <p>ProxySpace    GitHub: proxyspace/proxyspace</p> </li> <li> <p>ProxyScrape</p> </li> <li> <p>OpenProxyList</p> </li> </ol>"},{"location":"API%20Reference/Classes/proxyInterface/","title":"ProxyInterface Class","text":""},{"location":"API%20Reference/Classes/proxyInterface/#swiftshadow.classes.ProxyInterface","title":"<code>swiftshadow.classes.ProxyInterface</code>","text":"<p>Manages proxy acquisition, caching, and rotation from various providers.</p> <p>This class handles proxy retrieval either through fresh fetching from registered providers or via cached data. It supports protocol filtering, country filtering, cache management, and automatic/manual proxy rotation.</p> <p>Attributes:</p> Name Type Description <code>countries</code> <code>list[str]</code> <p>List of ISO country codes to filter proxies by (e.g., [\"US\", \"CA\"]).</p> <code>protocol</code> <code>Literal['https', 'http']</code> <p>Proxy protocol to use. Defaults to 'http'.</p> <code>maxproxies</code> <code>int</code> <p>Maximum number of proxies to collect from providers. Defaults to 10.</p> <code>autorotate</code> <code>bool</code> <p>Whether to automatically rotate proxy on each get() call. Defaults to False.</p> <code>cachePeriod</code> <code>int</code> <p>Number of minutes before cache is considered expired. Defaults to 10.</p> <code>cacheFolderPath</code> <code>Path</code> <p>Filesystem path for cache storage. Uses system cache dir by default.</p> <code>proxies</code> <code>list[Proxy]</code> <p>List of available proxy objects.</p> <code>current</code> <code>Proxy | None</code> <p>Currently active proxy. None if no proxies available.</p> <code>cacheExpiry</code> <code>datetime | None</code> <p>Timestamp when cache expires. None if no cache exists.</p> Example <pre><code>proxy_manager = ProxyInterface(\n    countries=[\"US\"],\n    protocol=\"http\",\n    autoRotate=True\n)\nprint(proxy_manager.get())\n</code></pre> <p>Raises:</p> Type Description <code>UnsupportedProxyProtocol</code> <p>If invalid protocol is specified during initialization.</p> <code>ValueError</code> <p>If no proxies match filters during update().</p> Source code in <code>swiftshadow/classes.py</code> <pre><code>class ProxyInterface:\n    \"\"\"Manages proxy acquisition, caching, and rotation from various providers.\n\n    This class handles proxy retrieval either through fresh fetching from registered providers\n    or via cached data. It supports protocol filtering, country filtering, cache management,\n    and automatic/manual proxy rotation.\n\n    Attributes:\n        countries (list[str]): List of ISO country codes to filter proxies by (e.g., [\"US\", \"CA\"]).\n        protocol (Literal['https', 'http']): Proxy protocol to use. Defaults to 'http'.\n        maxproxies (int): Maximum number of proxies to collect from providers. Defaults to 10.\n        autorotate (bool): Whether to automatically rotate proxy on each get() call. Defaults to False.\n        cachePeriod (int): Number of minutes before cache is considered expired. Defaults to 10.\n        cacheFolderPath (Path): Filesystem path for cache storage. Uses system cache dir by default.\n        proxies (list[Proxy]): List of available proxy objects.\n        current (Proxy | None): Currently active proxy. None if no proxies available.\n        cacheExpiry (datetime | None): Timestamp when cache expires. None if no cache exists.\n\n    Example:\n        ```python\n        proxy_manager = ProxyInterface(\n            countries=[\"US\"],\n            protocol=\"http\",\n            autoRotate=True\n        )\n        print(proxy_manager.get())\n        ```\n\n    Raises:\n        UnsupportedProxyProtocol: If invalid protocol is specified during initialization.\n        ValueError: If no proxies match filters during update().\n    \"\"\"\n\n    def __init__(\n        self,\n        countries: list[str] = [],\n        protocol: Literal[\"https\", \"http\"] = \"http\",\n        maxProxies: int = 10,\n        autoRotate: bool = False,\n        cachePeriod: int = 10,\n        cacheFolderPath: Path | None = None,\n        debug: bool = False,\n        logToFile: bool = False,\n    ):\n        \"\"\"Initializes ProxyInterface with specified configuration.\n\n        Args:\n            countries: List of ISO country codes to filter proxies. Empty list = no filtering.\n            protocol: Proxy protocol to retrieve. Choose between 'http' or 'https'.\n            maxProxies: Maximum proxies to collect from all providers combined.\n            autoRotate: Enable automatic proxy rotation on every get() call.\n            cachePeriod: Cache validity duration in minutes.\n            cacheFolderPath: Custom path for cache storage. Uses system cache dir if None.\n            debug: Enable debug logging level when True.\n            logToFile: Write logs to swiftshadow.log in cache folder when True.\n        \"\"\"\n\n        self.countries: list[str] = [i.upper() for i in countries]\n\n        if protocol not in [\"https\", \"http\"]:\n            raise UnsupportedProxyProtocol(\n                f\"Protocol {protocol} is not supported by swiftshadow, please choose between HTTP or HTTPS\"\n            )\n        self.protocol: Literal[\"https\", \"http\"] = protocol\n\n        self.maxproxies: int = maxProxies\n        self.autorotate: bool = autoRotate\n        self.cachePeriod: int = cachePeriod\n\n        if debug:\n            logger.setLevel(DEBUG)\n\n        if not cacheFolderPath:\n            cacheFolderPath = Path(user_cache_dir(appname=\"swiftshadow\"))\n            cacheFolderPath.mkdir(parents=True, exist_ok=True)\n            logger.debug(f\"System Cache folder set at {cacheFolderPath}\")\n        self.cacheFolderPath: Path = cacheFolderPath\n\n        if logToFile:\n            logFileHandler = FileHandler(\n                self.cacheFolderPath.joinpath(\"swiftshadow.log\")\n            )\n            logFileHandler.setFormatter(logFormat)\n            logger.addHandler(logFileHandler)\n        self.proxies: list[Proxy] = []\n        self.current: Proxy | None = None\n        self.cacheExpiry: datetime | None = None\n\n        self.update()\n\n    def update(self):\n        \"\"\"\n        Updates proxy list from providers or cache.\n\n        First attempts to load valid proxies from cache. If cache is expired/missing,\n        fetches fresh proxies from registered providers that match country and protocol filters.\n        Updates cache file with new proxies if fetched from providers.\n\n        Raises:\n            ValueError: If no proxies found after provider scraping.\n        \"\"\"\n        try:\n            with open(\n                self.cacheFolderPath.joinpath(\"swiftshadow.pickle\"), \"rb\"\n            ) as cacheFile:\n                cache: CacheData = load(cacheFile)\n\n                if not checkExpiry(cache.expiryIn):\n                    self.proxies = cache.proxies\n                    logger.info(\"Loaded proxies from cache.\")\n                    logger.debug(\n                        f\"Cache with {len(cache.proxies)} proxies, expire in {cache.expiryIn}\"\n                    )\n                    self.current = self.proxies[0]\n                    self.cacheExpiry = cache.expiryIn\n                    return\n                else:\n                    logger.info(\"Cache Expired\")\n        except FileNotFoundError:\n            logger.info(\"No cache found, will be created after update.\")\n\n        for provider in Providers:\n            if self.protocol not in provider.protocols:\n                continue\n            if (len(self.countries) != 0) and (not provider.countryFilter):\n                continue\n            providerProxies: list[Proxy] = run(\n                provider.providerFunction(self.countries, self.protocol)\n            )\n            logger.debug(\n                f\"{len(providerProxies)} proxies from {provider.providerFunction.__name__}\"\n            )\n            self.proxies.extend(providerProxies)\n\n            if len(self.proxies) &gt;= self.maxproxies:\n                break\n\n        if len(self.proxies) == 0:\n            raise ValueError(\"No proxies where found for the current filter settings.\")\n\n        with open(\n            self.cacheFolderPath.joinpath(\"swiftshadow.pickle\"), \"wb+\"\n        ) as cacheFile:\n            cacheExpiry = getExpiry(self.cachePeriod)\n            self.cacheExpiry = cacheExpiry\n            cache = CacheData(cacheExpiry, self.proxies)\n            dump(cache, cacheFile)\n        self.current = self.proxies[0]\n\n    def rotate(self, validate_cache: bool = False):\n        \"\"\"\n        Rotates to a random proxy from available proxies.\n\n        Args:\n            validate_cache: Force cache validation before rotation when True.\n\n        Note:\n            Only required for manual rotation when autoRotate=False. Automatic rotation\n            occurs during get() calls when autoRotate=True.\n\n        Raises:\n            ValueError: If validate_cache=True but no cache exists.\n        \"\"\"\n        if self.cacheExpiry and not validate_cache:\n            if checkExpiry(self.cacheExpiry):\n                self.update()\n        else:\n            raise ValueError(\"No cache availabel but validate_cache is true.\")\n        self.current = choice(self.proxies)\n\n    def get(self) -&gt; Proxy:\n        \"\"\"\n        Retrieves current active proxy.\n\n        Returns:\n            Proxy: Current proxy object with connection details.\n\n        Note:\n            Performs automatic rotation if autorotate=True before returning proxy.\n\n        Raises:\n            ValueError: If no proxies are available (current is None).\n        \"\"\"\n\n        if self.autorotate:\n            self.rotate()\n        if self.current:\n            return self.current\n        else:\n            raise ValueError(\"No proxy available in current, current is None\")\n</code></pre>"},{"location":"API%20Reference/Classes/proxyInterface/#swiftshadow.classes.ProxyInterface.__init__","title":"<code>__init__(countries=[], protocol='http', maxProxies=10, autoRotate=False, cachePeriod=10, cacheFolderPath=None, debug=False, logToFile=False)</code>","text":"<p>Initializes ProxyInterface with specified configuration.</p> <p>Parameters:</p> Name Type Description Default <code>countries</code> <code>list[str]</code> <p>List of ISO country codes to filter proxies. Empty list = no filtering.</p> <code>[]</code> <code>protocol</code> <code>Literal['https', 'http']</code> <p>Proxy protocol to retrieve. Choose between 'http' or 'https'.</p> <code>'http'</code> <code>maxProxies</code> <code>int</code> <p>Maximum proxies to collect from all providers combined.</p> <code>10</code> <code>autoRotate</code> <code>bool</code> <p>Enable automatic proxy rotation on every get() call.</p> <code>False</code> <code>cachePeriod</code> <code>int</code> <p>Cache validity duration in minutes.</p> <code>10</code> <code>cacheFolderPath</code> <code>Path | None</code> <p>Custom path for cache storage. Uses system cache dir if None.</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Enable debug logging level when True.</p> <code>False</code> <code>logToFile</code> <code>bool</code> <p>Write logs to swiftshadow.log in cache folder when True.</p> <code>False</code> Source code in <code>swiftshadow/classes.py</code> <pre><code>def __init__(\n    self,\n    countries: list[str] = [],\n    protocol: Literal[\"https\", \"http\"] = \"http\",\n    maxProxies: int = 10,\n    autoRotate: bool = False,\n    cachePeriod: int = 10,\n    cacheFolderPath: Path | None = None,\n    debug: bool = False,\n    logToFile: bool = False,\n):\n    \"\"\"Initializes ProxyInterface with specified configuration.\n\n    Args:\n        countries: List of ISO country codes to filter proxies. Empty list = no filtering.\n        protocol: Proxy protocol to retrieve. Choose between 'http' or 'https'.\n        maxProxies: Maximum proxies to collect from all providers combined.\n        autoRotate: Enable automatic proxy rotation on every get() call.\n        cachePeriod: Cache validity duration in minutes.\n        cacheFolderPath: Custom path for cache storage. Uses system cache dir if None.\n        debug: Enable debug logging level when True.\n        logToFile: Write logs to swiftshadow.log in cache folder when True.\n    \"\"\"\n\n    self.countries: list[str] = [i.upper() for i in countries]\n\n    if protocol not in [\"https\", \"http\"]:\n        raise UnsupportedProxyProtocol(\n            f\"Protocol {protocol} is not supported by swiftshadow, please choose between HTTP or HTTPS\"\n        )\n    self.protocol: Literal[\"https\", \"http\"] = protocol\n\n    self.maxproxies: int = maxProxies\n    self.autorotate: bool = autoRotate\n    self.cachePeriod: int = cachePeriod\n\n    if debug:\n        logger.setLevel(DEBUG)\n\n    if not cacheFolderPath:\n        cacheFolderPath = Path(user_cache_dir(appname=\"swiftshadow\"))\n        cacheFolderPath.mkdir(parents=True, exist_ok=True)\n        logger.debug(f\"System Cache folder set at {cacheFolderPath}\")\n    self.cacheFolderPath: Path = cacheFolderPath\n\n    if logToFile:\n        logFileHandler = FileHandler(\n            self.cacheFolderPath.joinpath(\"swiftshadow.log\")\n        )\n        logFileHandler.setFormatter(logFormat)\n        logger.addHandler(logFileHandler)\n    self.proxies: list[Proxy] = []\n    self.current: Proxy | None = None\n    self.cacheExpiry: datetime | None = None\n\n    self.update()\n</code></pre>"},{"location":"API%20Reference/Classes/proxyInterface/#swiftshadow.classes.ProxyInterface.get","title":"<code>get()</code>","text":"<p>Retrieves current active proxy.</p> <p>Returns:</p> Name Type Description <code>Proxy</code> <code>Proxy</code> <p>Current proxy object with connection details.</p> Note <p>Performs automatic rotation if autorotate=True before returning proxy.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no proxies are available (current is None).</p> Source code in <code>swiftshadow/classes.py</code> <pre><code>def get(self) -&gt; Proxy:\n    \"\"\"\n    Retrieves current active proxy.\n\n    Returns:\n        Proxy: Current proxy object with connection details.\n\n    Note:\n        Performs automatic rotation if autorotate=True before returning proxy.\n\n    Raises:\n        ValueError: If no proxies are available (current is None).\n    \"\"\"\n\n    if self.autorotate:\n        self.rotate()\n    if self.current:\n        return self.current\n    else:\n        raise ValueError(\"No proxy available in current, current is None\")\n</code></pre>"},{"location":"API%20Reference/Classes/proxyInterface/#swiftshadow.classes.ProxyInterface.rotate","title":"<code>rotate(validate_cache=False)</code>","text":"<p>Rotates to a random proxy from available proxies.</p> <p>Parameters:</p> Name Type Description Default <code>validate_cache</code> <code>bool</code> <p>Force cache validation before rotation when True.</p> <code>False</code> Note <p>Only required for manual rotation when autoRotate=False. Automatic rotation occurs during get() calls when autoRotate=True.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If validate_cache=True but no cache exists.</p> Source code in <code>swiftshadow/classes.py</code> <pre><code>def rotate(self, validate_cache: bool = False):\n    \"\"\"\n    Rotates to a random proxy from available proxies.\n\n    Args:\n        validate_cache: Force cache validation before rotation when True.\n\n    Note:\n        Only required for manual rotation when autoRotate=False. Automatic rotation\n        occurs during get() calls when autoRotate=True.\n\n    Raises:\n        ValueError: If validate_cache=True but no cache exists.\n    \"\"\"\n    if self.cacheExpiry and not validate_cache:\n        if checkExpiry(self.cacheExpiry):\n            self.update()\n    else:\n        raise ValueError(\"No cache availabel but validate_cache is true.\")\n    self.current = choice(self.proxies)\n</code></pre>"},{"location":"API%20Reference/Classes/proxyInterface/#swiftshadow.classes.ProxyInterface.update","title":"<code>update()</code>","text":"<p>Updates proxy list from providers or cache.</p> <p>First attempts to load valid proxies from cache. If cache is expired/missing, fetches fresh proxies from registered providers that match country and protocol filters. Updates cache file with new proxies if fetched from providers.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no proxies found after provider scraping.</p> Source code in <code>swiftshadow/classes.py</code> <pre><code>def update(self):\n    \"\"\"\n    Updates proxy list from providers or cache.\n\n    First attempts to load valid proxies from cache. If cache is expired/missing,\n    fetches fresh proxies from registered providers that match country and protocol filters.\n    Updates cache file with new proxies if fetched from providers.\n\n    Raises:\n        ValueError: If no proxies found after provider scraping.\n    \"\"\"\n    try:\n        with open(\n            self.cacheFolderPath.joinpath(\"swiftshadow.pickle\"), \"rb\"\n        ) as cacheFile:\n            cache: CacheData = load(cacheFile)\n\n            if not checkExpiry(cache.expiryIn):\n                self.proxies = cache.proxies\n                logger.info(\"Loaded proxies from cache.\")\n                logger.debug(\n                    f\"Cache with {len(cache.proxies)} proxies, expire in {cache.expiryIn}\"\n                )\n                self.current = self.proxies[0]\n                self.cacheExpiry = cache.expiryIn\n                return\n            else:\n                logger.info(\"Cache Expired\")\n    except FileNotFoundError:\n        logger.info(\"No cache found, will be created after update.\")\n\n    for provider in Providers:\n        if self.protocol not in provider.protocols:\n            continue\n        if (len(self.countries) != 0) and (not provider.countryFilter):\n            continue\n        providerProxies: list[Proxy] = run(\n            provider.providerFunction(self.countries, self.protocol)\n        )\n        logger.debug(\n            f\"{len(providerProxies)} proxies from {provider.providerFunction.__name__}\"\n        )\n        self.proxies.extend(providerProxies)\n\n        if len(self.proxies) &gt;= self.maxproxies:\n            break\n\n    if len(self.proxies) == 0:\n        raise ValueError(\"No proxies where found for the current filter settings.\")\n\n    with open(\n        self.cacheFolderPath.joinpath(\"swiftshadow.pickle\"), \"wb+\"\n    ) as cacheFile:\n        cacheExpiry = getExpiry(self.cachePeriod)\n        self.cacheExpiry = cacheExpiry\n        cache = CacheData(cacheExpiry, self.proxies)\n        dump(cache, cacheFile)\n    self.current = self.proxies[0]\n</code></pre>"},{"location":"API%20Reference/Classes/quickProxy/","title":"QuickProxy Class","text":""},{"location":"API%20Reference/Classes/quickProxy/#swiftshadow.QuickProxy","title":"<code>swiftshadow.QuickProxy(countries=[], protocol='http')</code>","text":"<p>This function is a faster alternative to <code>ProxyInterface</code> class. No caching is done.</p> <p>Parameters:</p> Name Type Description Default <code>countries</code> <code>list[str]</code> <p>ISO 3166-2 Two letter country codes to filter proxies.</p> <code>[]</code> <code>protocol</code> <code>Literal['http', 'https']</code> <p>HTTP/HTTPS protocol to filter proxies.</p> <code>'http'</code> <p>Returns:</p> Name Type Description <code>proxyObject</code> <code>Proxy</code> <p>A working proxy object if found or else None.</p> Source code in <code>swiftshadow/__init__.py</code> <pre><code>def QuickProxy(\n    countries: list[str] = [], protocol: Literal[\"http\", \"https\"] = \"http\"\n) -&gt; Proxy | None:\n    \"\"\"\n    This function is a faster alternative to `ProxyInterface` class.\n    No caching is done.\n\n    Args:\n        countries: ISO 3166-2 Two letter country codes to filter proxies.\n        protocol: HTTP/HTTPS protocol to filter proxies.\n\n    Returns:\n        proxyObject (Proxy): A working proxy object if found or else None.\n    \"\"\"\n    for provider in Providers:\n        if protocol not in provider.protocols:\n            continue\n        if (len(countries) != 0) and (not provider.countryFilter):\n            continue\n        try:\n            return run(provider.providerFunction(countries, protocol))[0]\n        except Exception:\n            continue\n    return None\n</code></pre>"},{"location":"API%20Reference/Models/cache-data/","title":"CacheData Model","text":""},{"location":"API%20Reference/Models/cache-data/#swiftshadow.models.CacheData","title":"<code>swiftshadow.models.CacheData</code>  <code>dataclass</code>","text":"<p>Class repersenting data structure if the cache in cache file.</p> <p>Attributes:</p> Name Type Description <code>expiryIn</code> <code>datetime</code> <p>Expiry date object.</p> <code>proxies</code> <code>list[Proxy]</code> <p>Proxies to head.</p> Source code in <code>swiftshadow/models.py</code> <pre><code>@dataclass\nclass CacheData:\n    \"\"\"\n    Class repersenting data structure if the cache in cache file.\n\n    Attributes:\n        expiryIn: Expiry date object.\n        proxies: Proxies to head.\n    \"\"\"\n\n    expiryIn: datetime\n    proxies: list[Proxy]\n</code></pre>"},{"location":"API%20Reference/Models/provider/","title":"Provider Model","text":""},{"location":"API%20Reference/Models/provider/#swiftshadow.models.Provider","title":"<code>swiftshadow.models.Provider</code>  <code>dataclass</code>","text":"<p>Class repersenting a Provider.</p> <p>Attributes:</p> Name Type Description <code>providerFunction</code> <code>Callable[[list[str], Literal['http', 'https']], Coroutine[Any, Any, list[Proxy]]]</code> <p>Callable function for this provider.</p> <code>countryFilter</code> <code>bool</code> <p>Whether the provider supports country based filters.</p> <code>protocols</code> <code>list[Literal['http', 'https']]</code> <p>Protocols supported by the provider.</p> Source code in <code>swiftshadow/models.py</code> <pre><code>@dataclass\nclass Provider:\n    \"\"\"\n    Class repersenting a Provider.\n\n    Attributes:\n        providerFunction: Callable function for this provider.\n        countryFilter: Whether the provider supports country based filters.\n        protocols: Protocols supported by the provider.\n    \"\"\"\n\n    providerFunction: Callable[\n        [list[str], Literal[\"http\", \"https\"]], Coroutine[Any, Any, list[Proxy]]\n    ]\n    countryFilter: bool\n    protocols: list[Literal[\"http\", \"https\"]]\n</code></pre>"},{"location":"API%20Reference/Models/proxy/","title":"Proxy Model","text":""},{"location":"API%20Reference/Models/proxy/#swiftshadow.models.Proxy","title":"<code>swiftshadow.models.Proxy</code>  <code>dataclass</code>","text":"<p>Class representing a Proxy object.</p> <p>Attributes:</p> Name Type Description <code>ip</code> <code>str</code> <p>IP Address of the proxy.</p> <code>port</code> <code>int</code> <p>Port associated with the proxy.</p> <code>protocol</code> <code>Literal['http', 'https']</code> <p>Protocol type of the proxy.</p> Source code in <code>swiftshadow/models.py</code> <pre><code>@dataclass\nclass Proxy:\n    \"\"\"\n    Class representing a Proxy object.\n\n    Attributes:\n        ip: IP Address of the proxy.\n        port: Port associated with the proxy.\n        protocol: Protocol type of the proxy.\n\n    \"\"\"\n\n    ip: str\n    protocol: Literal[\"http\", \"https\"]\n    port: int\n\n    def as_requests_dict(self) -&gt; dict[Literal[\"http\", \"https\"], str]:\n        \"\"\"\n        Return proxy in requests commpatible dict format.\n\n        Returns:\n            dict: Dict representation of Proxy class.\n        \"\"\"\n        return {self.protocol: f\"{self.ip}:{self.port}\"}\n\n    def as_string(self) -&gt; str:\n        \"\"\"\n        Return proxy in a string of format\n        &lt;protocol&gt;://&lt;ip&gt;:&lt;port&gt;\n\n        Returns:\n            string: Proxy in string format.\n        \"\"\"\n        return f\"{self.protocol}://{self.ip}:{self.port}\"\n</code></pre>"},{"location":"API%20Reference/Models/proxy/#swiftshadow.models.Proxy.as_requests_dict","title":"<code>as_requests_dict()</code>","text":"<p>Return proxy in requests commpatible dict format.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[Literal['http', 'https'], str]</code> <p>Dict representation of Proxy class.</p> Source code in <code>swiftshadow/models.py</code> <pre><code>def as_requests_dict(self) -&gt; dict[Literal[\"http\", \"https\"], str]:\n    \"\"\"\n    Return proxy in requests commpatible dict format.\n\n    Returns:\n        dict: Dict representation of Proxy class.\n    \"\"\"\n    return {self.protocol: f\"{self.ip}:{self.port}\"}\n</code></pre>"},{"location":"API%20Reference/Models/proxy/#swiftshadow.models.Proxy.as_string","title":"<code>as_string()</code>","text":"<p>Return proxy in a string of format ://: <p>Returns:</p> Name Type Description <code>string</code> <code>str</code> <p>Proxy in string format.</p> Source code in <code>swiftshadow/models.py</code> <pre><code>def as_string(self) -&gt; str:\n    \"\"\"\n    Return proxy in a string of format\n    &lt;protocol&gt;://&lt;ip&gt;:&lt;port&gt;\n\n    Returns:\n        string: Proxy in string format.\n    \"\"\"\n    return f\"{self.protocol}://{self.ip}:{self.port}\"\n</code></pre>"},{"location":"Getting%20Started/Using-Proxy-Class/","title":"Basic Usage","text":"<p>To get a random <code>HTTP</code> proxy from any country: <pre><code>from swiftshadow.classes import ProxyInterface\nswift = ProxyInterface()\n\nprint(swift.get().as_string())\n</code></pre></p> <p>Note</p> <p>When the <code>ProxyInterface</code> class instance is created for the first time, the <code>update()</code> method is called. This method fetches proxies from providers and caches them. This process may take around 10 seconds. The cache will refresh after the <code>cachePeriod</code> expires.</p> <p>The <code>get()</code> method returns a <code>Proxy</code> object. You can convert it to a string using <code>as_string()</code> or to a dictionary using <code>as_requests_dict()</code>. See the References for more details.</p> <p>This is the most basic usage of <code>swiftshadow</code>, but there\u2019s more to explore.</p> <p>Note</p> <p>From now on, all examples will exclude the import statement for simplicity.</p>"},{"location":"Getting%20Started/Using-Proxy-Class/#filtering-proxies","title":"Filtering Proxies","text":"<p>You can filter proxies based on their country of origin or protocol (HTTP/HTTPS).</p>"},{"location":"Getting%20Started/Using-Proxy-Class/#country-filter","title":"Country Filter","text":"<p>To filter proxies by country, pass a list of two-letter country codes when initializing the <code>ProxyInterface</code> class.</p> <ul> <li>For a list of countries and their two-letter codes, visit this Wikipedia page.</li> </ul> Country Filtered<pre><code>swift = ProxyInterface(countries=['US', 'IN'])\n</code></pre>"},{"location":"Getting%20Started/Using-Proxy-Class/#protocol-filter","title":"Protocol Filter","text":"<p>By default, all proxies are <code>HTTP</code>. For SSL-enabled <code>HTTPS</code> proxies, set the <code>protocol</code> parameter to <code>\"https\"</code>.</p> HTTPS Filter<pre><code>swift = ProxyInterface(protocol='https')\n</code></pre> <p>Warning</p> <p><code>swiftshadow</code> does not validate country codes or protocols. If you provide invalid country codes or protocols, no proxies will be available.</p>"},{"location":"Getting%20Started/Using-Proxy-Class/#proxy-rotation","title":"Proxy Rotation","text":""},{"location":"Getting%20Started/Using-Proxy-Class/#manual-rotation","title":"Manual Rotation","text":"<p>You can manually rotate proxies using the <code>rotate()</code> method. This selects a random proxy from the available list.</p> <pre><code>from swiftshadow.classes import ProxyInterface\nswift = ProxyInterface()\n\nprint(swift.get().as_string())\nswift.rotate()\nprint(swift.get().as_string())\n</code></pre>"},{"location":"Getting%20Started/Using-Proxy-Class/#auto-rotation","title":"Auto Rotation","text":"<p>To enable automatic proxy rotation, set the <code>autoRotate</code> parameter to <code>True</code> when initializing the <code>ProxyInterface</code> object. When enabled, the proxy will rotate every time the <code>get()</code> method is called.</p> <pre><code>from swiftshadow.classes import ProxyInterface\nswift = ProxyInterface(autoRotate=True)\n\nprint(swift.get().as_string())\nprint(swift.get().as_string())\n</code></pre>"},{"location":"Getting%20Started/Using-Proxy-Class/#caching","title":"Caching","text":"<p>Proxies are cached to improve performance. The cache expires after the <code>cachePeriod</code> (default: 10 minutes). You can force a cache update by calling the <code>update()</code> method.</p> <pre><code>swift = ProxyInterface()\nswift.update()  # Force update the proxy list\n</code></pre> <p>Visit References for more information on methods and classes.</p>"},{"location":"Getting%20Started/Using-QuickProxy/","title":"QuickProxy","text":"<p>For faster use cases where caching is not required, the <code>swiftshadow.QuickProxy</code> function is the best choice. Unlike the <code>ProxyInterface</code> class, <code>QuickProxy</code> does not cache proxies, making it lightweight and ideal for one-off or quick operations.</p> <p>You can use filters just like in the <code>ProxyInterface</code> class. This includes filtering by country and protocol.</p>"},{"location":"Getting%20Started/Using-QuickProxy/#swiftshadow.QuickProxy","title":"<code>swiftshadow.QuickProxy(countries=[], protocol='http')</code>","text":"<p>This function is a faster alternative to <code>ProxyInterface</code> class. No caching is done.</p> <p>Parameters:</p> Name Type Description Default <code>countries</code> <code>list[str]</code> <p>ISO 3166-2 Two letter country codes to filter proxies.</p> <code>[]</code> <code>protocol</code> <code>Literal['http', 'https']</code> <p>HTTP/HTTPS protocol to filter proxies.</p> <code>'http'</code> <p>Returns:</p> Name Type Description <code>proxyObject</code> <code>Proxy</code> <p>A working proxy object if found or else None.</p> Source code in <code>swiftshadow/__init__.py</code> <pre><code>def QuickProxy(\n    countries: list[str] = [], protocol: Literal[\"http\", \"https\"] = \"http\"\n) -&gt; Proxy | None:\n    \"\"\"\n    This function is a faster alternative to `ProxyInterface` class.\n    No caching is done.\n\n    Args:\n        countries: ISO 3166-2 Two letter country codes to filter proxies.\n        protocol: HTTP/HTTPS protocol to filter proxies.\n\n    Returns:\n        proxyObject (Proxy): A working proxy object if found or else None.\n    \"\"\"\n    for provider in Providers:\n        if protocol not in provider.protocols:\n            continue\n        if (len(countries) != 0) and (not provider.countryFilter):\n            continue\n        try:\n            return run(provider.providerFunction(countries, protocol))[0]\n        except Exception:\n            continue\n    return None\n</code></pre>"},{"location":"Getting%20Started/Using-QuickProxy/#parameters","title":"Parameters","text":"<ul> <li><code>countries</code> (list[str]): A list of two-letter country codes to filter proxies by country. Defaults to an empty list (no filtering).</li> <li><code>protocol</code> (Literal[\"http\", \"https\"]): The protocol to filter proxies by. Defaults to <code>\"http\"</code>.</li> </ul>"},{"location":"Getting%20Started/Using-QuickProxy/#returns","title":"Returns","text":"<ul> <li><code>Proxy</code> | <code>None</code>: A <code>Proxy</code> object if a valid proxy is found, otherwise <code>None</code>.</li> </ul>"},{"location":"Getting%20Started/Using-QuickProxy/#example","title":"Example","text":"<pre><code>from swiftshadow import QuickProxy\n\n# Get a random HTTP proxy\nproxy = QuickProxy()\nprint(proxy.as_string())\n\n# Get an HTTPS proxy from the US or India\nproxy = QuickProxy(countries=[\"US\", \"IN\"], protocol=\"https\")\nprint(proxy.as_string())\n</code></pre> <p>Note</p> <p>Since <code>QuickProxy</code> does not cache proxies, it may take slightly longer to fetch a proxy compared to <code>ProxyInterface</code> when used repeatedly. However, it is faster for single-use scenarios.</p> <p>Warning</p> <p>If no proxies match the provided filters, <code>QuickProxy</code> will return <code>None</code>. Always check the return value before using it.</p> <p>For more advanced use cases, such as caching and automatic rotation, consider using the <code>ProxyInterface</code> class. </p>"},{"location":"Getting%20Started/examples/","title":"Examples","text":"<p>This page provides practical examples to help you get started with <code>swiftshadow</code>. It covers all major features, including filtering, caching, rotation, and integration with popular libraries.</p>"},{"location":"Getting%20Started/examples/#basic-usage","title":"Basic Usage","text":""},{"location":"Getting%20Started/examples/#fetching-a-proxy","title":"Fetching a Proxy","text":"<p>To fetch a random proxy: <pre><code>from swiftshadow import QuickProxy\n\nproxy = QuickProxy()\nprint(proxy.as_string())  # Output: http://&lt;ip&gt;:&lt;port&gt;\n</code></pre></p>"},{"location":"Getting%20Started/examples/#filtering-proxies","title":"Filtering Proxies","text":""},{"location":"Getting%20Started/examples/#country-filter","title":"Country Filter","text":"<p>Filter proxies by country using two-letter ISO codes: <pre><code>from swiftshadow.classes import ProxyInterface\n\n# Fetch proxies from the US and India\nswift = ProxyInterface(countries=[\"US\", \"IN\"])\nprint(swift.get().as_string())\n</code></pre></p>"},{"location":"Getting%20Started/examples/#protocol-filter","title":"Protocol Filter","text":"<p>Filter proxies by protocol (<code>http</code> or <code>https</code>): <pre><code>from swiftshadow.classes import ProxyInterface\n\n# Fetch HTTPS proxies\nswift = ProxyInterface(protocol=\"https\")\nprint(swift.get().as_string())\n</code></pre></p>"},{"location":"Getting%20Started/examples/#proxy-rotation","title":"Proxy Rotation","text":""},{"location":"Getting%20Started/examples/#manual-rotation","title":"Manual Rotation","text":"<p>Manually rotate proxies using the <code>rotate()</code> method: <pre><code>from swiftshadow.classes import ProxyInterface\n\nswift = ProxyInterface()\n\n# Get the first proxy\nprint(swift.get().as_string())\n\n# Rotate to a new proxy\nswift.rotate()\nprint(swift.get().as_string())\n</code></pre></p>"},{"location":"Getting%20Started/examples/#automatic-rotation","title":"Automatic Rotation","text":"<p>Enable automatic rotation by setting <code>autoRotate=True</code>: <pre><code>from swiftshadow.classes import ProxyInterface\n\nswift = ProxyInterface(autoRotate=True)\n\n# Each call to get() will return a new proxy\nprint(swift.get().as_string())\nprint(swift.get().as_string())\n</code></pre></p>"},{"location":"Getting%20Started/examples/#caching","title":"Caching","text":""},{"location":"Getting%20Started/examples/#custom-cache-folder","title":"Custom Cache Folder","text":"<p>Specify a custom cache folder (useful for AWS Lambda): <pre><code>from swiftshadow.classes import ProxyInterface\n\n# Use the /tmp directory for caching\nswift = ProxyInterface(cacheFolderPath=\"/tmp\")\nprint(swift.get().as_string())\n</code></pre></p>"},{"location":"Getting%20Started/examples/#disabling-caching","title":"Disabling Caching","text":"<p>For one-off use cases, use <code>QuickProxy</code>: <pre><code>from swiftshadow import QuickProxy\n\nproxy = QuickProxy()\nprint(proxy.as_string())\n</code></pre></p>"},{"location":"Getting%20Started/examples/#integration-with-libraries","title":"Integration with Libraries","text":""},{"location":"Getting%20Started/examples/#using-with-requests","title":"Using with <code>requests</code>","text":"<p>Route requests through a proxy using the <code>requests</code> library: <pre><code>from swiftshadow import QuickProxy\nfrom requests import get\n\nproxy = QuickProxy()\nresp = get('https://checkip.amazonaws.com', proxies=proxy.as_requests_dict())\nprint(resp.text)  # Output: Proxy's IP address\n</code></pre></p>"},{"location":"Getting%20Started/examples/#using-with-httpx","title":"Using with <code>httpx</code>","text":"<p>Route requests through a proxy using the <code>httpx</code> library: <pre><code>from swiftshadow import QuickProxy\nimport httpx\n\nproxy = QuickProxy()\nwith httpx.Client(proxies={\"http://\": proxy.as_string(), \"https://\": proxy.as_string()}) as client:\n    resp = client.get('https://checkip.amazonaws.com')\n    print(resp.text)  # Output: Proxy's IP address\n</code></pre></p>"},{"location":"Getting%20Started/examples/#advanced-usage","title":"Advanced Usage","text":""},{"location":"Getting%20Started/examples/#combining-filters","title":"Combining Filters","text":"<p>Combine country and protocol filters for precise proxy selection: <pre><code>from swiftshadow.classes import ProxyInterface\n\n# Fetch HTTPS proxies from the US and India\nswift = ProxyInterface(countries=[\"US\", \"IN\"], protocol=\"https\")\nprint(swift.get().as_string())\n</code></pre></p>"},{"location":"Getting%20Started/examples/#force-cache-update","title":"Force Cache Update","text":"<p>Force an update of the proxy cache: <pre><code>from swiftshadow.classes import ProxyInterface\n\nswift = ProxyInterface()\nswift.update()  # Force update the proxy list\nprint(swift.get().as_string())\n</code></pre></p> <p>For more details on classes and methods, visit the References page.</p>"},{"location":"Use%20Swiftshadow%20with/AWS-Lambda/","title":"AWS Lambda","text":"<p>Using <code>swiftshadow</code> with AWS Lambda normally raises an error because the cache mechanism won't work properly due to the read-only file permissions in the Lambda environment. To fix this, you can pass the <code>cacheFolderPath</code> parameter and set it to <code>\"/tmp\"</code> when creating a <code>ProxyInterface</code> instance.</p> <pre><code>from swiftshadow.classes import ProxyInterface\n\nswift = ProxyInterface(cacheFolderPath=\"/tmp\")\n</code></pre> <p>The <code>/tmp</code> directory in AWS Lambda is writable, allowing the cache to function correctly.</p>"},{"location":"Use%20Swiftshadow%20with/AWS-Lambda/#disabling-caching","title":"Disabling Caching","text":"<p>If you don\u2019t want the caching behavior at all, consider using the <code>QuickProxy</code> function instead. It does not cache proxies, making it ideal for serverless environments like AWS Lambda.</p> <pre><code>from swiftshadow import QuickProxy\n\nproxy = QuickProxy()\nprint(proxy.as_string())\n</code></pre> <p>For more details on the <code>ProxyInterface</code> class or the <code>QuickProxy</code> function, visit the References page.</p>"},{"location":"Use%20Swiftshadow%20with/https/","title":"HTTPX Library","text":"<p><code>swiftshadow</code> works seamlessly with the modern and asynchronous <code>httpx</code> library, making it easy to route your HTTP/HTTPS requests through a proxy. Whether you're building synchronous or asynchronous applications, <code>swiftshadow</code> has you covered.</p>"},{"location":"Use%20Swiftshadow%20with/https/#example-usage","title":"Example Usage","text":"<p>Here\u2019s how you can use a proxy fetched by <code>QuickProxy</code> with the <code>httpx</code> library:</p>"},{"location":"Use%20Swiftshadow%20with/https/#synchronous-example","title":"Synchronous Example","text":"<pre><code>from swiftshadow import QuickProxy\nimport httpx\n\n# Fetch a proxy\nproxy = QuickProxy()\n\n# Use the proxy with httpx\nwith httpx.Client(proxies={\"http://\": proxy.as_string(), \"https://\": proxy.as_string()}) as client:\n    resp = client.get('https://checkip.amazonaws.com')\n    print(resp.text)\n</code></pre>"},{"location":"Use%20Swiftshadow%20with/https/#asynchronous-example","title":"Asynchronous Example","text":"<pre><code>from swiftshadow import QuickProxy\nimport httpx\nimport asyncio\n\nasync def fetch_with_proxy():\n    # Fetch a proxy\n    proxy = QuickProxy()\n\n    # Use the proxy with httpx\n    async with httpx.AsyncClient(proxies={\"http://\": proxy.as_string(), \"https://\": proxy.as_string()}) as client:\n        resp = await client.get('https://checkip.amazonaws.com')\n        print(resp.text)\n\n# Run the async function\nasyncio.run(fetch_with_proxy())\n</code></pre>"},{"location":"Use%20Swiftshadow%20with/https/#explanation","title":"Explanation","text":"<ul> <li><code>QuickProxy</code> fetches a proxy object.</li> <li>The <code>as_string()</code> method converts the proxy into a format compatible with <code>httpx</code>.</li> <li>For synchronous requests, use <code>httpx.Client</code>.</li> <li>For asynchronous requests, use <code>httpx.AsyncClient</code>.</li> <li>The <code>proxies</code> parameter is used to route requests through the proxy.</li> </ul> <p>Note</p> <p>If the proxy is working correctly, the output should be an <code>IPv4</code> address that is not your own.</p> <p>For more advanced use cases, such as caching and automatic rotation, consider using the <code>ProxyInterface</code> class. For additional details, visit the References page.</p>"},{"location":"Use%20Swiftshadow%20with/requests/","title":"Requests Library","text":"<p><code>swiftshadow</code> integrates seamlessly with the popular <code>requests</code> library, allowing you to easily route your HTTP/HTTPS requests through a proxy.</p>"},{"location":"Use%20Swiftshadow%20with/requests/#example-usage","title":"Example Usage","text":"<p>Here\u2019s how you can use a proxy fetched by <code>QuickProxy</code> with the <code>requests</code> library:</p> <pre><code>from swiftshadow import QuickProxy\nfrom requests import get\n\n# Fetch a proxy\nproxy = QuickProxy()\n\n# Use the proxy with requests\nresp = get('https://checkip.amazonaws.com', proxies=proxy.as_requests_dict())\nprint(resp.text)\n</code></pre>"},{"location":"Use%20Swiftshadow%20with/requests/#explanation","title":"Explanation","text":"<ul> <li><code>QuickProxy</code> fetches a proxy object.</li> <li>The <code>as_requests_dict()</code> method converts the proxy into a format compatible with the <code>requests</code> library.</li> <li>The <code>proxies</code> parameter in <code>requests.get()</code> is used to route the request through the proxy.</li> </ul> <p>Note</p> <p>If the proxy is working correctly, the output should be an <code>IPv4</code> address that is not your own.</p> <p>For more advanced use cases, such as caching and automatic rotation, consider using the <code>ProxyInterface</code> class. For additional details, visit the References page.</p>"}]}