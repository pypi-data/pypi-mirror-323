[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "nmrlineshapeanalyser"
version = "0.1.15"
description = "ss-NMR peak deconvolution and lineshape analysis"
readme = "README.md"
requires-python = ">=3.10, <3.13"
license = "MIT"

authors = [
    { name = "Abdulkadir Olatunbosun Biffo", email = "biffokadir13@gmail.com" }
]

keywords = ["ss-NMR", "peak deconvolution", "lineshape analysis"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: OS Independent"
]


dependencies = [
    "nmrglue", 
    "numpy>=1.26.0",        
    "scipy",    
    "matplotlib>=3.9.0",   
    "pandas>=2.2.0"       
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "black>=22.0",
    "isort>=5.0",
    "mypy>=0.981", 
    "codecov-cli>=0.4.1",
    "ruff>=0.0.285"
]
docs = [
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-jupyter",
    "mkdocs-material[imaging]",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-autorefs",
    "mknotebooks",
    "pymdown-extensions",
    "pillow>=10.0.0",
    "cairosvg>=2.7.1"
]

[tool.black]
line-length = 88
target-version = ["py38"]

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
ignore_missing_imports = true
strict = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
disable_error_code = "annotation-unchecked"

[tool.hatch]
version = "0.1.15"
envs = {dev = ["pytest", "black", "isort", "mypy"]}

[tool.hatch.build.targets.wheel]
packages = ["src/nmrlineshapeanalyser"]

[tool.setuptools.package-data]
nmrlineshapeanalyser = ["py.typed"]

[tool.pyright]
include = ["nmrlineshapeanalyser"]     # Only check files in the nmrlineshapeanalyser directory
exclude = ["**/__pycache__"] # Skip all __pycache__ directories

[project.urls]
Homepage = "https://github.com/BiffoQ/nmrlineshapeanalyser"
Documentation = "https://biffoq.github.io/nmrlineshapeanalyser/"
Repository = "https://github.com/BiffoQ/nmrlineshapeanalyser.git"
changelog = "https://github.com/BiffoQ/nmrlineshapeanalyser/blob/main/CHANGELOG.md"

[tool.ruff]
lint.select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
lint.extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "B028",   # No explicit stacklevel
  "EM101",  # Exception must not use a string literal
  "EM102",  # Exception must not use an f-string literal
  "G004",   # f-string in Logging statement
  "RUF015", # Prefer next(iter())
  "RET505", # Unnecessary `elif` after `return`
]
lint.typing-modules = ["mypackage._compat.typing"]
lint.unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
lint.flake8-unused-arguments.ignore-variadic-names = true
lint.pydocstyle.convention = "numpy"
lint.isort.required-imports = ["from __future__ import annotations"]
lint.isort.known-first-party = ["nmrlineshapeanalyser"]
src = ["src"]
exclude = []
extend-exclude = ["test"]

[tool.docformatter]
pre-summary-newline = true
black = true

