from typing import (
    AbstractSet,
    Any,
    Protocol,
    TypeVar,
    runtime_checkable,
)
from collections.abc import (
    ItemsView as _ItemsView,
    ValuesView as _ValuesView,
    KeysView as _KeysView,
)

_T_co = TypeVar("_T_co", covariant=True)
_KT_co = TypeVar("_KT_co", covariant=True)
_VT_co = TypeVar("_VT_co", covariant=True)
_KT = TypeVar("_KT")
_VT = TypeVar("_VT")

@runtime_checkable
class SupportsIter(Protocol[_T_co]):
    def __iter__(self) -> _T_co: ...

    def __init__(self,*args, **kwargs) -> None: ...

class SupportsKeysAndGetItem(Protocol[_KT_co, _VT_co]):
    def keys(self: "SupportsKeysAndGetItem[_KT, _VT]", /) -> AbstractSet[_KT]: ...
    def __getitem__(self: "SupportsKeysAndGetItem[_KT, _VT]", key: _KT, /) -> _VT: ...
    def update(self: "SupportsKeysAndGetItem[_KT, _VT]", other: dict[_KT, _VT], /) -> None: ...
    def get(self: "SupportsKeysAndGetItem[_KT, _VT]", key: _KT, default: _VT, /) -> _VT: ...



class SupportsKeysItems(Protocol[_KT_co, _VT_co]):
    def keys(self: "SupportsKeysItems[_KT, _VT]", /) -> AbstractSet[_KT]: ...
    def __getitem__(self: "SupportsKeysItems[_KT, _VT]", key: _KT, /) -> _VT: ...
    def update(self: "SupportsKeysItems[_KT, _VT]", other: dict[_KT, _VT], /) -> None: ...
    def get(self: "SupportsKeysItems[_KT, _VT]", key: _KT, default: _VT, /) -> _VT: ...
    def items(self)->_ItemsView[str,_VT_co]:...
    def values(self)->_ValuesView[_VT_co]:...
    def __iter__(self)->_KeysView[str]:...
    def __contains__(self, x: Any, /) -> bool: ...
    def __next__(self) -> str: ...
    def __len__(self) -> int: ...