name: Python CI/CD Workflow

on:
  push:             # Run on every push
    branches:
      - main        # Only on the main branch
  pull_request:     # (Optional) Run on PRs targeting main
    branches:
      - main
  workflow_dispatch: # Always allow manual triggering

jobs:
  test-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      TWINE_USERNAME: "__token__"
      TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Clean build artifacts
        run: |
          rm -rf dist/ .cache/ .eggs/ build/
          find . -type d -name '__pycache__' -exec rm -rf {} +
      
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=src" >> $GITHUB_ENV
        

      - name: Install Hatch and Dependencies
        run: pip install --upgrade hatch twine

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Display installed package versions
        run: pip show pip hatch twine

      - name: Install the setlogging package
        run: |
          pip install --upgrade pip hatchling
          pip install -e .

      - name: Run pytest
        run: pytest -v --cov=src/setlogging tests/ --ignore=tests/manual_test.py
        working-directory: ${{github.workspace}}

      - name: Set up Node.js for Semantic-Release
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install semantic-release dependencies
        run: |
          npm install --save-dev semantic-release @semantic-release/changelog @semantic-release/github

      - name: Semantic-Release Dry Run
        run: npx semantic-release --dry-run --no-ci

      - name: Run Semantic-Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} 
        run: npx semantic-release

      - name: Build Python package
        run: hatch build

      - name: Check built distributions
        run: ls dist/

      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main'
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*