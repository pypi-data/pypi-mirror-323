Metadata-Version: 2.4
Name: jeap_pipeline
Version: 0.1.0
Summary: A collection of Python modules and libraries for CI/CD pipelines in the jEAP context.
Project-URL: Homepage, https://github.com/jeap-admin-ch/jeap-python-pipeline-lib
Project-URL: Issues, https://github.com/jeap-admin-ch/jeap-python-pipeline-lib
Author-email: Laris Jacobs <laris.jacobs@bit.admin.ch>
License-Expression: MIT
License-File: LICENSE
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# jeap-python-pipeline-lib
Das Git-Repository jeap-python-pipeline-lib ist strukturiert, um mehrere Python-Module und -Bibliotheken zu enthalten, die als Library auf PyPI bereitgestellt werden und für CI/CD-Pipelines im jEAP-Kontext verwendet werden können.

## Local Development

### Build

The full documentation can be found here: https://packaging.python.org/en/latest/tutorials/packaging-projects/

Install the build tool via pip. Make sure you have the latest version of PyPA’s build installed:
```bash
pip install build
```
To create the package run this command from the same directory where pyproject.toml is located:
```bash
python -m build
```
This command should generate two files in the dist directory. The tar.gz file is a source distribution whereas the .whl file is a built distribution.

### Upload

First install twine via pip:
```bash
python3 -m pip install --upgrade twine
```

Once installed, run Twine to upload all the archives under dist:
```bash
python3 -m twine upload --repository testpypi dist/*
```
Use testpypi to upload the package to test instance of PyPI. To upload to the real PyPI repository, use pypi instead of testpypi.
You will be prompted for an API token. Use the token value, including the pypi- prefix.

### Package installation

You can use pip to install your package and verify that it works. Create a virtual environment and install your package from TestPyPI:
```bash
python3 -m pip install -i https://test.pypi.org/simple/ jeap-pipeline==0.1.0
```

## Versioning
The version can be set in the pyproject.toml file. The version number has to comply with the PEP 440 standard.
On every push a CI pipeline is triggered, which builds and uploads the artifact to the (test)-pypi repository. 
 - On the main branch, the version number remains unchanged. 
 - On other branches, a valid development release suffix (.dev<timestamp>) is added. 

