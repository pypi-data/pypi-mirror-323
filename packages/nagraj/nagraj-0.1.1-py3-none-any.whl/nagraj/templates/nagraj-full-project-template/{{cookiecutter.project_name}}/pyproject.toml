[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "{{ cookiecutter.project_slug }}" }]

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"
fastapi = "^0.115.6"
sqlmodel = "^0.0.22"
asyncpg = "^0.30.0"
loguru = "^0.7.3"
pydantic-settings = "^2.7.1"
alembic = "^1.14.1"
argon2-cffi = "^23.1.0"
uvicorn = {extras = ["standard"], version = "^0.34.0"}
python-multipart = "^0.0.20"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
pydantic = {extras = ["email"], version = "^2.10.5"}

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.25.2"
ruff = "^0.9.2"

[tool.ruff]
target-version = "py312"
exclude = ["**/migrations/versions/**"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["{{ cookiecutter.project_slug }}"]
python_files = ["test_*.py"]
addopts = "-v --cov={{ cookiecutter.project_slug }} --cov-report=term-missing"
markers = [
    "no_collect: mark a class to be ignored during test collection"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"