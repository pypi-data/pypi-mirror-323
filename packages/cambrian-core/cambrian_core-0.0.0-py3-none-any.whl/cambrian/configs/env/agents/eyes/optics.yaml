defaults:
  - eye
  - /MjCambrianOpticsEyeConfig
  - aperture: circular

instance:
  _target_: cambrian.eyes.MjCambrianOpticsEye
  _partial_: true

# Set the sensorsize to be fixed
sensorsize: [8e-3, 8e-3] # 8mm x 8mm

# Calculate the focal length based on the fov and sensors
focal:
  - ${eval:'${..sensorsize.0} / (2 * math.tan(math.radians(${..fov.0}) / 2))'}
  - ${eval:'${..sensorsize.1} / (2 * math.tan(math.radians(${..fov.1}) / 2))'}

# Set fixed for now
pupil_resolution: [101, 101]

noise_std: 0
wavelengths: [610e-9, 530e-9, 470e-9]

# Initialize the height map with 0.5 and refractive_index of 1. This is equivalent to
# no height map.
f_stop: 2.0
refractive_index: 1.5
height_map: ${eval:'[0.5] * ${.pupil_resolution.0}'}
scale_intensity: False

# Pre-compute the psf at specific depths. This will speed up the simulation speed at the
# cost of accuracy of the psf at any given depth
depths:
  - ${eval:'sum([${..focal.0}, ${..focal.1}]) / 2 * 5'}
  - ${eval:'sum([${..focal.0}, ${..focal.1}]) / 2 * 10'}
  - ${eval:'sum([${..focal.0}, ${..focal.1}]) / 2 * 100'}
  - ${eval:'sum([${..focal.0}, ${..focal.1}]) / 2 * 1000'}
  - ${eval:'sum([${..focal.0}, ${..focal.1}]) / 2 * 10000'}

renderer:
  render_modes: [rgb_array, depth_array]

  # Update the renderer to use a padded resolution. Right now, it's set
  # to be larger than the pupil plane, but probably not required. This is the
  # "scene" resolution.
  width: ${eval:'${..pupil_resolution.0} * 2 + 1'}
  height: ${eval:'${..pupil_resolution.1} * 2 + 1'}