name: Build and Publish Package

on:
  workflow_dispatch:
    inputs:
      registry:
        description: 'Package registry'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi
  push:
    branches:
      - 'release/v*'
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true && 
       startsWith(github.head_ref, 'release/v'))
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install build and twine for package management
          pip install build twine
          # Install any additional dependencies your package needs for testing
          pip install -e ".[test]"

      - name: Build package
        run: python -m build

      # New testing step added here
      - name: Run tests
        run: |
          python runtests.py -v
        # If tests fail, this step will exit with non-zero status and stop the workflow

      - name: Set registry URL
        id: registry
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.registry }}" = "testpypi" ]; then
              echo "url=testpypi" >> $GITHUB_OUTPUT
              echo "token=${{ secrets.TEST_PYPI_API_TOKEN }}" >> $GITHUB_OUTPUT
            else
              echo "url=pypi" >> $GITHUB_OUTPUT
              echo "token=${{ secrets.PYPI_API_TOKEN }}" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "url=pypi" >> $GITHUB_OUTPUT
            echo "token=${{ secrets.PYPI_API_TOKEN }}" >> $GITHUB_OUTPUT
          else
            echo "url=testpypi" >> $GITHUB_OUTPUT
            echo "token=${{ secrets.TEST_PYPI_API_TOKEN }}" >> $GITHUB_OUTPUT
          fi

      - name: Publish package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ steps.registry.outputs.token }}
          REGISTRY_URL: ${{ steps.registry.outputs.url }}
        run: |
          if [ "$REGISTRY_URL" = "testpypi" ]; then
            twine upload --verbose --repository testpypi dist/*
          else
            twine upload dist/*
          fi