.. _ACED:

================================================================================
ACED
================================================================================
Type for AC-based economic dispatch.

Common Parameters: c2, c1, c0, pmax, pmin, pd, ptdf, rate_a, qd

Common Vars: pg, aBus, vBus, qg

Common Constraints: pb, lub, llb

Available routines:
ACOPF_

.. _ACOPF:

--------------------------------------------------------------------------------
ACOPF
--------------------------------------------------------------------------------
Standard AC optimal power flow.

Notes
-----
1. ACOPF is solved with PYPOWER ``runopf`` function.
2. ACOPF formulation in AMS style is NOT DONE YET,
   but this does not affect the results
   because the data are passed to PYPOWER for solving.

Objective
----------------------------------

+------+--------------------------------------------------------------+
| Unit |                          Expression                          |
+======+==============================================================+
|      | :math:`min. \sum(c_{2}   p_{g}^{2} + c_{1}   p_{g} + c_{0})` |
+------+--------------------------------------------------------------+

Constraints
----------------------------------

+------+---------------+---------------------------------------+
| Name |  Description  |              Expression               |
+======+===============+=======================================+
|  pb  | power balance | :math:`\sum(p_{d}) - \sum(p_{g}) = 0` |
+------+---------------+---------------------------------------+

Vars
----------------------------------

+-------+-----------------+-----------------------+--------+-------------+------------+
| Name  |     Symbol      |      Description      |  Unit  |   Source    | Properties |
+=======+=================+=======================+========+=============+============+
|  pg   | :math:`p_{g}`   | Gen active power      | *p.u.* | StaticGen.p |            |
+-------+-----------------+-----------------------+--------+-------------+------------+
|  aBus | :math:`a_{Bus}` | bus voltage angle     | *rad*  | Bus.a       |            |
+-------+-----------------+-----------------------+--------+-------------+------------+
|  plf  | :math:`p_{lf}`  | Line flow             | *p.u.* | Line        |            |
+-------+-----------------+-----------------------+--------+-------------+------------+
|  vBus | :math:`v_{Bus}` | Bus voltage magnitude | *p.u.* | Bus.v       |            |
+-------+-----------------+-----------------------+--------+-------------+------------+
|  qg   | :math:`q_{g}`   | Gen reactive power    | *p.u.* | StaticGen.q |            |
+-------+-----------------+-----------------------+--------+-------------+------------+

Parameters
----------------------------------

+------+----------------+---------------------------------------+--------------+---------------+
| Name |     Symbol     |              Description              |     Unit     |    Source     |
+======+================+=======================================+==============+===============+
|  ug  | :math:`u_{g}`  | Gen connection status                 |              | StaticGen.u   |
+------+----------------+---------------------------------------+--------------+---------------+
|  x   | :math:`x`      | line reactance                        | *p.u.*       | Line.x        |
+------+----------------+---------------------------------------+--------------+---------------+
|  tap | :math:`t_{ap}` | transformer branch tap ratio          | *float*      | Line.tap      |
+------+----------------+---------------------------------------+--------------+---------------+
|  phi | :math:`\phi`   | transformer branch phase shift in rad | *radian*     | Line.phi      |
+------+----------------+---------------------------------------+--------------+---------------+
|  pd  | :math:`p_{d}`  | active deman                          | *p.u.*       | StaticLoad.p0 |
+------+----------------+---------------------------------------+--------------+---------------+
|  c2  | :math:`c_{2}`  | Gen cost coefficient 2                | *$/(p.u.^2)* | GCost.c2      |
+------+----------------+---------------------------------------+--------------+---------------+
|  c1  | :math:`c_{1}`  | Gen cost coefficient 1                | *$/(p.u.)*   | GCost.c1      |
+------+----------------+---------------------------------------+--------------+---------------+
|  c0  | :math:`c_{0}`  | Gen cost coefficient 0                | *$*          | GCost.c0      |
+------+----------------+---------------------------------------+--------------+---------------+
|  qd  | :math:`q_{d}`  | reactive demand                       | *p.u.*       | StaticLoad.q0 |
+------+----------------+---------------------------------------+--------------+---------------+


