# Generated by cloudcoil-model-codegen v0.3.0
# DO NOT EDIT

from __future__ import annotations

from typing import (
    Annotated,
    Callable,
    List,
    Literal,
    Optional,
    Type,
    overload,
)

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)
from cloudcoil.resources import Resource, ResourceList


class ApplyConfiguration(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ApplyConfiguration"]:
            return ApplyConfiguration

        def build(self) -> "ApplyConfiguration":
            return ApplyConfiguration(**self._attrs)

        def expression(self, value: Optional[str], /) -> Self:
            """
            expression will be evaluated by CEL to create an apply configuration. ref: https://github.com/google/cel-spec

            Apply configurations are declared in CEL using object initialization. For example, this CEL expression returns an apply configuration to set a single field:

                Object{
                  spec: Object.spec{
                    serviceAccountName: "example"
                  }
                }

            Apply configurations may not modify atomic structs, maps or arrays due to the risk of accidental deletion of values not included in the apply configuration.

            CEL expressions have access to the object types needed to create apply configurations:

            - 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')

            CEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:

            - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
              For example, a variable named 'foo' can be accessed as 'variables.foo'.
            - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
              See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
              request resource.

            The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.

            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required.
            """
            return self._set("expression", value)

    class BuilderContext(BuilderContextBase["ApplyConfiguration.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ApplyConfiguration.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ApplyConfiguration."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ApplyConfiguration", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ApplyConfiguration.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: Optional[str] = None
    """
    expression will be evaluated by CEL to create an apply configuration. ref: https://github.com/google/cel-spec

    Apply configurations are declared in CEL using object initialization. For example, this CEL expression returns an apply configuration to set a single field:

        Object{
          spec: Object.spec{
            serviceAccountName: "example"
          }
        }

    Apply configurations may not modify atomic structs, maps or arrays due to the risk of accidental deletion of values not included in the apply configuration.

    CEL expressions have access to the object types needed to create apply configurations:

    - 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')

    CEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:

    - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
      For example, a variable named 'foo' can be accessed as 'variables.foo'.
    - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
      See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
      request resource.

    The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.

    Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required.
    """


class JSONPatch(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["JSONPatch"]:
            return JSONPatch

        def build(self) -> "JSONPatch":
            return JSONPatch(**self._attrs)

        def expression(self, value: Optional[str], /) -> Self:
            """
            expression will be evaluated by CEL to create a [JSON patch](https://jsonpatch.com/). ref: https://github.com/google/cel-spec

            expression must return an array of JSONPatch values.

            For example, this CEL expression returns a JSON patch to conditionally modify a value:

                  [
                    JSONPatch{op: "test", path: "/spec/example", value: "Red"},
                    JSONPatch{op: "replace", path: "/spec/example", value: "Green"}
                  ]

            To define an object for the patch value, use Object types. For example:

                  [
                    JSONPatch{
                      op: "add",
                      path: "/spec/selector",
                      value: Object.spec.selector{matchLabels: {"environment": "test"}}
                    }
                  ]

            To use strings containing '/' and '~' as JSONPatch path keys, use "jsonpatch.escapeKey". For example:

                  [
                    JSONPatch{
                      op: "add",
                      path: "/metadata/labels/" + jsonpatch.escapeKey("example.com/environment"),
                      value: "test"
                    },
                  ]

            CEL expressions have access to the types needed to create JSON patches and objects:

            - 'JSONPatch' - CEL type of JSON Patch operations. JSONPatch has the fields 'op', 'from', 'path' and 'value'.
              See [JSON patch](https://jsonpatch.com/) for more details. The 'value' field may be set to any of: string,
              integer, array, map or object.  If set, the 'path' and 'from' fields must be set to a
              [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901/) string, where the 'jsonpatch.escapeKey()' CEL
              function may be used to escape path keys containing '/' and '~'.
            - 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')

            CEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:

            - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
              For example, a variable named 'foo' can be accessed as 'variables.foo'.
            - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
              See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
              request resource.

            CEL expressions have access to [Kubernetes CEL function libraries](https://kubernetes.io/docs/reference/using-api/cel/#cel-options-language-features-and-libraries) as well as:

            - 'jsonpatch.escapeKey' - Performs JSONPatch key escaping. '~' and  '/' are escaped as '~0' and `~1' respectively).

            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required.
            """
            return self._set("expression", value)

    class BuilderContext(BuilderContextBase["JSONPatch.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = JSONPatch.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for JSONPatch."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["JSONPatch", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use JSONPatch.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: Optional[str] = None
    """
    expression will be evaluated by CEL to create a [JSON patch](https://jsonpatch.com/). ref: https://github.com/google/cel-spec

    expression must return an array of JSONPatch values.

    For example, this CEL expression returns a JSON patch to conditionally modify a value:

          [
            JSONPatch{op: "test", path: "/spec/example", value: "Red"},
            JSONPatch{op: "replace", path: "/spec/example", value: "Green"}
          ]

    To define an object for the patch value, use Object types. For example:

          [
            JSONPatch{
              op: "add",
              path: "/spec/selector",
              value: Object.spec.selector{matchLabels: {"environment": "test"}}
            }
          ]

    To use strings containing '/' and '~' as JSONPatch path keys, use "jsonpatch.escapeKey". For example:

          [
            JSONPatch{
              op: "add",
              path: "/metadata/labels/" + jsonpatch.escapeKey("example.com/environment"),
              value: "test"
            },
          ]

    CEL expressions have access to the types needed to create JSON patches and objects:

    - 'JSONPatch' - CEL type of JSON Patch operations. JSONPatch has the fields 'op', 'from', 'path' and 'value'.
      See [JSON patch](https://jsonpatch.com/) for more details. The 'value' field may be set to any of: string,
      integer, array, map or object.  If set, the 'path' and 'from' fields must be set to a
      [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901/) string, where the 'jsonpatch.escapeKey()' CEL
      function may be used to escape path keys containing '/' and '~'.
    - 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')

    CEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:

    - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
      For example, a variable named 'foo' can be accessed as 'variables.foo'.
    - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
      See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
      request resource.

    CEL expressions have access to [Kubernetes CEL function libraries](https://kubernetes.io/docs/reference/using-api/cel/#cel-options-language-features-and-libraries) as well as:

    - 'jsonpatch.escapeKey' - Performs JSONPatch key escaping. '~' and  '/' are escaped as '~0' and `~1' respectively).

    Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required.
    """


class MatchCondition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchCondition"]:
            return MatchCondition

        def build(self) -> "MatchCondition":
            return MatchCondition(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

            'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
              See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
              request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

            Required.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

            Required.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["MatchCondition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchCondition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchCondition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchCondition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchCondition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

    'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
      See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
      request resource.
    Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

    Required.
    """
    name: str
    """
    Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

    Required.
    """


class Mutation(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Mutation"]:
            return Mutation

        def build(self) -> "Mutation":
            return Mutation(**self._attrs)

        @overload
        def apply_configuration(
            self, value_or_callback: Optional[ApplyConfiguration], /
        ) -> "Mutation.Builder": ...

        @overload
        def apply_configuration(
            self,
            value_or_callback: Callable[
                [ApplyConfiguration.Builder],
                ApplyConfiguration.Builder | ApplyConfiguration,
            ],
            /,
        ) -> "Mutation.Builder": ...

        @overload
        def apply_configuration(
            self, value_or_callback: Never = ...
        ) -> "ApplyConfiguration.BuilderContext": ...

        def apply_configuration(self, value_or_callback=None, /):
            """
            applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.
            """
            if self._in_context and value_or_callback is None:
                context = ApplyConfiguration.BuilderContext()
                context._parent_builder = self
                context._field_name = "apply_configuration"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApplyConfiguration.builder())
                if isinstance(output, ApplyConfiguration.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("apply_configuration", value)

        @overload
        def json_patch(self, value_or_callback: Optional[JSONPatch], /) -> "Mutation.Builder": ...

        @overload
        def json_patch(
            self,
            value_or_callback: Callable[[JSONPatch.Builder], JSONPatch.Builder | JSONPatch],
            /,
        ) -> "Mutation.Builder": ...

        @overload
        def json_patch(self, value_or_callback: Never = ...) -> "JSONPatch.BuilderContext": ...

        def json_patch(self, value_or_callback=None, /):
            """
            jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.
            """
            if self._in_context and value_or_callback is None:
                context = JSONPatch.BuilderContext()
                context._parent_builder = self
                context._field_name = "json_patch"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(JSONPatch.builder())
                if isinstance(output, JSONPatch.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("json_patch", value)

        def patch_type(self, value: str, /) -> Self:
            """
            patchType indicates the patch strategy used. Allowed values are "ApplyConfiguration" and "JSONPatch". Required.
            """
            return self._set("patch_type", value)

    class BuilderContext(BuilderContextBase["Mutation.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Mutation.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Mutation."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Mutation", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Mutation.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    apply_configuration: Annotated[
        Optional[ApplyConfiguration], Field(alias="applyConfiguration")
    ] = None
    """
    applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.
    """
    json_patch: Annotated[Optional[JSONPatch], Field(alias="jsonPatch")] = None
    """
    jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.
    """
    patch_type: Annotated[str, Field(alias="patchType")]
    """
    patchType indicates the patch strategy used. Allowed values are "ApplyConfiguration" and "JSONPatch". Required.
    """


class NamedRuleWithOperations(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["NamedRuleWithOperations"]:
            return NamedRuleWithOperations

        def build(self) -> "NamedRuleWithOperations":
            return NamedRuleWithOperations(**self._attrs)

        def api_groups(self, value: Optional[List[str]], /) -> Self:
            """
            APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
            """
            return self._set("api_groups", value)

        def api_versions(self, value: Optional[List[str]], /) -> Self:
            """
            APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
            """
            return self._set("api_versions", value)

        def operations(self, value: Optional[List[str]], /) -> Self:
            """
            Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
            """
            return self._set("operations", value)

        def resource_names(self, value: Optional[List[str]], /) -> Self:
            """
            ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
            """
            return self._set("resource_names", value)

        def resources(self, value: Optional[List[str]], /) -> Self:
            """
            Resources is a list of resources this rule applies to.

            For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.

            If wildcard is present, the validation rule will ensure resources do not overlap with each other.

            Depending on the enclosing object, subresources might not be allowed. Required.
            """
            return self._set("resources", value)

        def scope(self, value: Optional[str], /) -> Self:
            """
            scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
            """
            return self._set("scope", value)

    class BuilderContext(BuilderContextBase["NamedRuleWithOperations.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = NamedRuleWithOperations.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for NamedRuleWithOperations."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["NamedRuleWithOperations", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use NamedRuleWithOperations.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_groups: Annotated[Optional[List[str]], Field(alias="apiGroups")] = None
    """
    APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
    """
    api_versions: Annotated[Optional[List[str]], Field(alias="apiVersions")] = None
    """
    APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
    """
    operations: Optional[List[str]] = None
    """
    Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
    """
    resource_names: Annotated[Optional[List[str]], Field(alias="resourceNames")] = None
    """
    ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    """
    resources: Optional[List[str]] = None
    """
    Resources is a list of resources this rule applies to.

    For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.

    If wildcard is present, the validation rule will ensure resources do not overlap with each other.

    Depending on the enclosing object, subresources might not be allowed. Required.
    """
    scope: Optional[str] = None
    """
    scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
    """


class ParamKind(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ParamKind"]:
            return ParamKind

        def build(self) -> "ParamKind":
            return ParamKind(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion is the API group version the resources belong to. In format of "group/version". Required.
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind is the API kind the resources belong to. Required.
            """
            return self._set("kind", value)

    class BuilderContext(BuilderContextBase["ParamKind.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ParamKind.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ParamKind."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ParamKind", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ParamKind.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion is the API group version the resources belong to. In format of "group/version". Required.
    """
    kind: Optional[str] = None
    """
    Kind is the API kind the resources belong to. Required.
    """


class Variable(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Variable"]:
            return Variable

        def build(self) -> "Variable":
            return Variable(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is "foo", the variable will be available as `variables.foo`
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["Variable.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Variable.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Variable."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Variable", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Variable.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.
    """
    name: str
    """
    Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is "foo", the variable will be available as `variables.foo`
    """


class MatchResources(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchResources"]:
            return MatchResources

        def build(self) -> "MatchResources":
            return MatchResources(**self._attrs)

        @overload
        def exclude_resource_rules(
            self, value_or_callback: List[NamedRuleWithOperations], /
        ) -> "MatchResources.Builder": ...

        @overload
        def exclude_resource_rules(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[NamedRuleWithOperations, NamedRuleWithOperations.Builder]],
                GenericListBuilder[NamedRuleWithOperations, NamedRuleWithOperations.Builder]
                | List[NamedRuleWithOperations],
            ],
            /,
        ) -> "MatchResources.Builder": ...

        @overload
        def exclude_resource_rules(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[NamedRuleWithOperations.Builder]: ...

        def exclude_resource_rules(self, value_or_callback=None, /):
            """
            ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[NamedRuleWithOperations.Builder]()
                context._parent_builder = self
                context._field_name = "exclude_resource_rules"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(NamedRuleWithOperations.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("exclude_resource_rules", value)

        def match_policy(self, value: Optional[str], /) -> Self:
            """
            matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".

            - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.

            - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.

            Defaults to "Equivalent"
            """
            return self._set("match_policy", value)

        @overload
        def namespace_selector(
            self, value_or_callback: Optional[apimachinery.LabelSelector], /
        ) -> "MatchResources.Builder": ...

        @overload
        def namespace_selector(
            self,
            value_or_callback: Callable[
                [apimachinery.LabelSelector.Builder],
                apimachinery.LabelSelector.Builder | apimachinery.LabelSelector,
            ],
            /,
        ) -> "MatchResources.Builder": ...

        @overload
        def namespace_selector(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.LabelSelector.BuilderContext": ...

        def namespace_selector(self, value_or_callback=None, /):
            """
            NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.

            For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
              "matchExpressions": [
                {
                  "key": "runlevel",
                  "operator": "NotIn",
                  "values": [
                    "0",
                    "1"
                  ]
                }
              ]
            }

            If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
              "matchExpressions": [
                {
                  "key": "environment",
                  "operator": "In",
                  "values": [
                    "prod",
                    "staging"
                  ]
                }
              ]
            }

            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.

            Default to the empty LabelSelector, which matches everything.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.LabelSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "namespace_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.LabelSelector.builder())
                if isinstance(output, apimachinery.LabelSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("namespace_selector", value)

        @overload
        def object_selector(
            self, value_or_callback: Optional[apimachinery.LabelSelector], /
        ) -> "MatchResources.Builder": ...

        @overload
        def object_selector(
            self,
            value_or_callback: Callable[
                [apimachinery.LabelSelector.Builder],
                apimachinery.LabelSelector.Builder | apimachinery.LabelSelector,
            ],
            /,
        ) -> "MatchResources.Builder": ...

        @overload
        def object_selector(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.LabelSelector.BuilderContext": ...

        def object_selector(self, value_or_callback=None, /):
            """
            ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.LabelSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "object_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.LabelSelector.builder())
                if isinstance(output, apimachinery.LabelSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("object_selector", value)

        @overload
        def resource_rules(
            self, value_or_callback: List[NamedRuleWithOperations], /
        ) -> "MatchResources.Builder": ...

        @overload
        def resource_rules(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[NamedRuleWithOperations, NamedRuleWithOperations.Builder]],
                GenericListBuilder[NamedRuleWithOperations, NamedRuleWithOperations.Builder]
                | List[NamedRuleWithOperations],
            ],
            /,
        ) -> "MatchResources.Builder": ...

        @overload
        def resource_rules(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[NamedRuleWithOperations.Builder]: ...

        def resource_rules(self, value_or_callback=None, /):
            """
            ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[NamedRuleWithOperations.Builder]()
                context._parent_builder = self
                context._field_name = "resource_rules"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(NamedRuleWithOperations.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("resource_rules", value)

    class BuilderContext(BuilderContextBase["MatchResources.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchResources.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchResources."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchResources", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchResources.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    exclude_resource_rules: Annotated[
        Optional[List[NamedRuleWithOperations]], Field(alias="excludeResourceRules")
    ] = None
    """
    ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
    """
    match_policy: Annotated[Optional[str], Field(alias="matchPolicy")] = None
    """
    matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".

    - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.

    - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.

    Defaults to "Equivalent"
    """
    namespace_selector: Annotated[
        Optional[apimachinery.LabelSelector], Field(alias="namespaceSelector")
    ] = None
    """
    NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.

    For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
      "matchExpressions": [
        {
          "key": "runlevel",
          "operator": "NotIn",
          "values": [
            "0",
            "1"
          ]
        }
      ]
    }

    If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
      "matchExpressions": [
        {
          "key": "environment",
          "operator": "In",
          "values": [
            "prod",
            "staging"
          ]
        }
      ]
    }

    See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.

    Default to the empty LabelSelector, which matches everything.
    """
    object_selector: Annotated[
        Optional[apimachinery.LabelSelector], Field(alias="objectSelector")
    ] = None
    """
    ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
    """
    resource_rules: Annotated[
        Optional[List[NamedRuleWithOperations]], Field(alias="resourceRules")
    ] = None
    """
    ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
    """


class MutatingAdmissionPolicySpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MutatingAdmissionPolicySpec"]:
            return MutatingAdmissionPolicySpec

        def build(self) -> "MutatingAdmissionPolicySpec":
            return MutatingAdmissionPolicySpec(**self._attrs)

        def failure_policy(self, value: Optional[str], /) -> Self:
            """
            failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.

            A policy is invalid if paramKind refers to a non-existent Kind. A binding is invalid if paramRef.name refers to a non-existent resource.

            failurePolicy does not define how validations that evaluate to false are handled.

            Allowed values are Ignore or Fail. Defaults to Fail.
            """
            return self._set("failure_policy", value)

        @overload
        def match_conditions(
            self, value_or_callback: List[MatchCondition], /
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def match_conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[MatchCondition, MatchCondition.Builder]],
                GenericListBuilder[MatchCondition, MatchCondition.Builder] | List[MatchCondition],
            ],
            /,
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def match_conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[MatchCondition.Builder]: ...

        def match_conditions(self, value_or_callback=None, /):
            """
            matchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the matchConstraints. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.

            If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.

            The exact matching logic is (in order):
              1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
              2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
              3. If any matchCondition evaluates to an error (but none are FALSE):
                 - If failurePolicy=Fail, reject the request
                 - If failurePolicy=Ignore, the policy is skipped
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[MatchCondition.Builder]()
                context._parent_builder = self
                context._field_name = "match_conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchCondition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_conditions", value)

        @overload
        def match_constraints(
            self, value_or_callback: Optional[MatchResources], /
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def match_constraints(
            self,
            value_or_callback: Callable[
                [MatchResources.Builder], MatchResources.Builder | MatchResources
            ],
            /,
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def match_constraints(
            self, value_or_callback: Never = ...
        ) -> "MatchResources.BuilderContext": ...

        def match_constraints(self, value_or_callback=None, /):
            """
            matchConstraints specifies what resources this policy is designed to validate. The MutatingAdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API MutatingAdmissionPolicy cannot match MutatingAdmissionPolicy and MutatingAdmissionPolicyBinding. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT. Required.
            """
            if self._in_context and value_or_callback is None:
                context = MatchResources.BuilderContext()
                context._parent_builder = self
                context._field_name = "match_constraints"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchResources.builder())
                if isinstance(output, MatchResources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_constraints", value)

        @overload
        def mutations(
            self, value_or_callback: List[Mutation], /
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def mutations(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Mutation, Mutation.Builder]],
                GenericListBuilder[Mutation, Mutation.Builder] | List[Mutation],
            ],
            /,
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def mutations(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Mutation.Builder]: ...

        def mutations(self, value_or_callback=None, /):
            """
            mutations contain operations to perform on matching objects. mutations may not be empty; a minimum of one mutation is required. mutations are evaluated in order, and are reinvoked according to the reinvocationPolicy. The mutations of a policy are invoked for each binding of this policy and reinvocation of mutations occurs on a per binding basis.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Mutation.Builder]()
                context._parent_builder = self
                context._field_name = "mutations"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Mutation.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("mutations", value)

        @overload
        def param_kind(
            self, value_or_callback: Optional[ParamKind], /
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def param_kind(
            self,
            value_or_callback: Callable[[ParamKind.Builder], ParamKind.Builder | ParamKind],
            /,
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def param_kind(self, value_or_callback: Never = ...) -> "ParamKind.BuilderContext": ...

        def param_kind(self, value_or_callback=None, /):
            """
            paramKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If paramKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in MutatingAdmissionPolicyBinding, the params variable will be null.
            """
            if self._in_context and value_or_callback is None:
                context = ParamKind.BuilderContext()
                context._parent_builder = self
                context._field_name = "param_kind"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ParamKind.builder())
                if isinstance(output, ParamKind.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("param_kind", value)

        def reinvocation_policy(self, value: Optional[str], /) -> Self:
            """
            reinvocationPolicy indicates whether mutations may be called multiple times per MutatingAdmissionPolicyBinding as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".

            Never: These mutations will not be called more than once per binding in a single admission evaluation.

            IfNeeded: These mutations may be invoked more than once per binding for a single admission request and there is no guarantee of order with respect to other admission plugins, admission webhooks, bindings of this policy and admission policies.  Mutations are only reinvoked when mutations change the object after this mutation is invoked. Required.
            """
            return self._set("reinvocation_policy", value)

        @overload
        def variables(
            self, value_or_callback: List[Variable], /
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def variables(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Variable, Variable.Builder]],
                GenericListBuilder[Variable, Variable.Builder] | List[Variable],
            ],
            /,
        ) -> "MutatingAdmissionPolicySpec.Builder": ...

        @overload
        def variables(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Variable.Builder]: ...

        def variables(self, value_or_callback=None, /):
            """
            variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except matchConditions because matchConditions are evaluated before the rest of the policy.

            The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, variables must be sorted by the order of first appearance and acyclic.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Variable.Builder]()
                context._parent_builder = self
                context._field_name = "variables"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("variables", value)

    class BuilderContext(BuilderContextBase["MutatingAdmissionPolicySpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MutatingAdmissionPolicySpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MutatingAdmissionPolicySpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MutatingAdmissionPolicySpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MutatingAdmissionPolicySpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    failure_policy: Annotated[Optional[str], Field(alias="failurePolicy")] = None
    """
    failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.

    A policy is invalid if paramKind refers to a non-existent Kind. A binding is invalid if paramRef.name refers to a non-existent resource.

    failurePolicy does not define how validations that evaluate to false are handled.

    Allowed values are Ignore or Fail. Defaults to Fail.
    """
    match_conditions: Annotated[Optional[List[MatchCondition]], Field(alias="matchConditions")] = (
        None
    )
    """
    matchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the matchConstraints. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.

    If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.

    The exact matching logic is (in order):
      1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
      2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
      3. If any matchCondition evaluates to an error (but none are FALSE):
         - If failurePolicy=Fail, reject the request
         - If failurePolicy=Ignore, the policy is skipped
    """
    match_constraints: Annotated[Optional[MatchResources], Field(alias="matchConstraints")] = None
    """
    matchConstraints specifies what resources this policy is designed to validate. The MutatingAdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API MutatingAdmissionPolicy cannot match MutatingAdmissionPolicy and MutatingAdmissionPolicyBinding. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT. Required.
    """
    mutations: Optional[List[Mutation]] = None
    """
    mutations contain operations to perform on matching objects. mutations may not be empty; a minimum of one mutation is required. mutations are evaluated in order, and are reinvoked according to the reinvocationPolicy. The mutations of a policy are invoked for each binding of this policy and reinvocation of mutations occurs on a per binding basis.
    """
    param_kind: Annotated[Optional[ParamKind], Field(alias="paramKind")] = None
    """
    paramKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If paramKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in MutatingAdmissionPolicyBinding, the params variable will be null.
    """
    reinvocation_policy: Annotated[Optional[str], Field(alias="reinvocationPolicy")] = None
    """
    reinvocationPolicy indicates whether mutations may be called multiple times per MutatingAdmissionPolicyBinding as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".

    Never: These mutations will not be called more than once per binding in a single admission evaluation.

    IfNeeded: These mutations may be invoked more than once per binding for a single admission request and there is no guarantee of order with respect to other admission plugins, admission webhooks, bindings of this policy and admission policies.  Mutations are only reinvoked when mutations change the object after this mutation is invoked. Required.
    """
    variables: Optional[List[Variable]] = None
    """
    variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except matchConditions because matchConditions are evaluated before the rest of the policy.

    The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, variables must be sorted by the order of first appearance and acyclic.
    """


class ParamRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ParamRef"]:
            return ParamRef

        def build(self) -> "ParamRef":
            return ParamRef(**self._attrs)

        def name(self, value: Optional[str], /) -> Self:
            """
            `name` is the name of the resource being referenced.

            `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.

            A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.

            - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.

            - If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.
            """
            return self._set("namespace", value)

        def parameter_not_found_action(self, value: Optional[str], /) -> Self:
            """
            `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.

            Allowed values are `Allow` or `Deny` Default to `Deny`
            """
            return self._set("parameter_not_found_action", value)

        @overload
        def selector(
            self, value_or_callback: Optional[apimachinery.LabelSelector], /
        ) -> "ParamRef.Builder": ...

        @overload
        def selector(
            self,
            value_or_callback: Callable[
                [apimachinery.LabelSelector.Builder],
                apimachinery.LabelSelector.Builder | apimachinery.LabelSelector,
            ],
            /,
        ) -> "ParamRef.Builder": ...

        @overload
        def selector(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.LabelSelector.BuilderContext": ...

        def selector(self, value_or_callback=None, /):
            """
            selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.

            If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.

            One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.LabelSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.LabelSelector.builder())
                if isinstance(output, apimachinery.LabelSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("selector", value)

    class BuilderContext(BuilderContextBase["ParamRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ParamRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ParamRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ParamRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ParamRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Optional[str] = None
    """
    `name` is the name of the resource being referenced.

    `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.
    """
    namespace: Optional[str] = None
    """
    namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.

    A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.

    - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.

    - If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.
    """
    parameter_not_found_action: Annotated[Optional[str], Field(alias="parameterNotFoundAction")] = (
        None
    )
    """
    `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.

    Allowed values are `Allow` or `Deny` Default to `Deny`
    """
    selector: Optional[apimachinery.LabelSelector] = None
    """
    selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.

    If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.

    One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.
    """


class MutatingAdmissionPolicy(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MutatingAdmissionPolicy"]:
            return MutatingAdmissionPolicy

        def build(self) -> "MutatingAdmissionPolicy":
            return MutatingAdmissionPolicy(**self._attrs)

        def api_version(
            self, value: Optional[Literal["admissionregistration.k8s.io/v1alpha1"]], /
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["MutatingAdmissionPolicy"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "MutatingAdmissionPolicy.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "MutatingAdmissionPolicy.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            """
            Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(
            self, value_or_callback: Optional[MutatingAdmissionPolicySpec], /
        ) -> "MutatingAdmissionPolicy.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [MutatingAdmissionPolicySpec.Builder],
                MutatingAdmissionPolicySpec.Builder | MutatingAdmissionPolicySpec,
            ],
            /,
        ) -> "MutatingAdmissionPolicy.Builder": ...

        @overload
        def spec(
            self, value_or_callback: Never = ...
        ) -> "MutatingAdmissionPolicySpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            """
            Specification of the desired behavior of the MutatingAdmissionPolicy.
            """
            if self._in_context and value_or_callback is None:
                context = MutatingAdmissionPolicySpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MutatingAdmissionPolicySpec.builder())
                if isinstance(output, MutatingAdmissionPolicySpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

    class BuilderContext(BuilderContextBase["MutatingAdmissionPolicy.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MutatingAdmissionPolicy.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MutatingAdmissionPolicy."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MutatingAdmissionPolicy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MutatingAdmissionPolicy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["admissionregistration.k8s.io/v1alpha1"]],
        Field(alias="apiVersion"),
    ] = "admissionregistration.k8s.io/v1alpha1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["MutatingAdmissionPolicy"]] = "MutatingAdmissionPolicy"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    """
    Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    """
    spec: Optional[MutatingAdmissionPolicySpec] = None
    """
    Specification of the desired behavior of the MutatingAdmissionPolicy.
    """


class MutatingAdmissionPolicyBindingSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MutatingAdmissionPolicyBindingSpec"]:
            return MutatingAdmissionPolicyBindingSpec

        def build(self) -> "MutatingAdmissionPolicyBindingSpec":
            return MutatingAdmissionPolicyBindingSpec(**self._attrs)

        @overload
        def match_resources(
            self, value_or_callback: Optional[MatchResources], /
        ) -> "MutatingAdmissionPolicyBindingSpec.Builder": ...

        @overload
        def match_resources(
            self,
            value_or_callback: Callable[
                [MatchResources.Builder], MatchResources.Builder | MatchResources
            ],
            /,
        ) -> "MutatingAdmissionPolicyBindingSpec.Builder": ...

        @overload
        def match_resources(
            self, value_or_callback: Never = ...
        ) -> "MatchResources.BuilderContext": ...

        def match_resources(self, value_or_callback=None, /):
            """
            matchResources limits what resources match this binding and may be mutated by it. Note that if matchResources matches a resource, the resource must also match a policy's matchConstraints and matchConditions before the resource may be mutated. When matchResources is unset, it does not constrain resource matching, and only the policy's matchConstraints and matchConditions must match for the resource to be mutated. Additionally, matchResources.resourceRules are optional and do not constraint matching when unset. Note that this is differs from MutatingAdmissionPolicy matchConstraints, where resourceRules are required. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT.
            """
            if self._in_context and value_or_callback is None:
                context = MatchResources.BuilderContext()
                context._parent_builder = self
                context._field_name = "match_resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchResources.builder())
                if isinstance(output, MatchResources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_resources", value)

        @overload
        def param_ref(
            self, value_or_callback: Optional[ParamRef], /
        ) -> "MutatingAdmissionPolicyBindingSpec.Builder": ...

        @overload
        def param_ref(
            self,
            value_or_callback: Callable[[ParamRef.Builder], ParamRef.Builder | ParamRef],
            /,
        ) -> "MutatingAdmissionPolicyBindingSpec.Builder": ...

        @overload
        def param_ref(self, value_or_callback: Never = ...) -> "ParamRef.BuilderContext": ...

        def param_ref(self, value_or_callback=None, /):
            """
            paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in spec.ParamKind of the bound MutatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the MutatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.
            """
            if self._in_context and value_or_callback is None:
                context = ParamRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "param_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ParamRef.builder())
                if isinstance(output, ParamRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("param_ref", value)

        def policy_name(self, value: Optional[str], /) -> Self:
            """
            policyName references a MutatingAdmissionPolicy name which the MutatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
            """
            return self._set("policy_name", value)

    class BuilderContext(BuilderContextBase["MutatingAdmissionPolicyBindingSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MutatingAdmissionPolicyBindingSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MutatingAdmissionPolicyBindingSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MutatingAdmissionPolicyBindingSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MutatingAdmissionPolicyBindingSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_resources: Annotated[Optional[MatchResources], Field(alias="matchResources")] = None
    """
    matchResources limits what resources match this binding and may be mutated by it. Note that if matchResources matches a resource, the resource must also match a policy's matchConstraints and matchConditions before the resource may be mutated. When matchResources is unset, it does not constrain resource matching, and only the policy's matchConstraints and matchConditions must match for the resource to be mutated. Additionally, matchResources.resourceRules are optional and do not constraint matching when unset. Note that this is differs from MutatingAdmissionPolicy matchConstraints, where resourceRules are required. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT.
    """
    param_ref: Annotated[Optional[ParamRef], Field(alias="paramRef")] = None
    """
    paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in spec.ParamKind of the bound MutatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the MutatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.
    """
    policy_name: Annotated[Optional[str], Field(alias="policyName")] = None
    """
    policyName references a MutatingAdmissionPolicy name which the MutatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
    """


MutatingAdmissionPolicyList = ResourceList["MutatingAdmissionPolicy"]


class MutatingAdmissionPolicyBinding(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MutatingAdmissionPolicyBinding"]:
            return MutatingAdmissionPolicyBinding

        def build(self) -> "MutatingAdmissionPolicyBinding":
            return MutatingAdmissionPolicyBinding(**self._attrs)

        def api_version(
            self, value: Optional[Literal["admissionregistration.k8s.io/v1alpha1"]], /
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["MutatingAdmissionPolicyBinding"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "MutatingAdmissionPolicyBinding.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "MutatingAdmissionPolicyBinding.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            """
            Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(
            self, value_or_callback: Optional[MutatingAdmissionPolicyBindingSpec], /
        ) -> "MutatingAdmissionPolicyBinding.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [MutatingAdmissionPolicyBindingSpec.Builder],
                MutatingAdmissionPolicyBindingSpec.Builder | MutatingAdmissionPolicyBindingSpec,
            ],
            /,
        ) -> "MutatingAdmissionPolicyBinding.Builder": ...

        @overload
        def spec(
            self, value_or_callback: Never = ...
        ) -> "MutatingAdmissionPolicyBindingSpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            """
            Specification of the desired behavior of the MutatingAdmissionPolicyBinding.
            """
            if self._in_context and value_or_callback is None:
                context = MutatingAdmissionPolicyBindingSpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MutatingAdmissionPolicyBindingSpec.builder())
                if isinstance(output, MutatingAdmissionPolicyBindingSpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

    class BuilderContext(BuilderContextBase["MutatingAdmissionPolicyBinding.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MutatingAdmissionPolicyBinding.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MutatingAdmissionPolicyBinding."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MutatingAdmissionPolicyBinding", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MutatingAdmissionPolicyBinding.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["admissionregistration.k8s.io/v1alpha1"]],
        Field(alias="apiVersion"),
    ] = "admissionregistration.k8s.io/v1alpha1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["MutatingAdmissionPolicyBinding"]] = "MutatingAdmissionPolicyBinding"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    """
    Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    """
    spec: Optional[MutatingAdmissionPolicyBindingSpec] = None
    """
    Specification of the desired behavior of the MutatingAdmissionPolicyBinding.
    """


MutatingAdmissionPolicyBindingList = ResourceList["MutatingAdmissionPolicyBinding"]
