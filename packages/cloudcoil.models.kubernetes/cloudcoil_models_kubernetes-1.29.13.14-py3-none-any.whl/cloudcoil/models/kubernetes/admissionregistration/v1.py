# Generated by cloudcoil-model-codegen v0.3.0
# DO NOT EDIT

from __future__ import annotations

from typing import (
    Annotated,
    Callable,
    List,
    Literal,
    Optional,
    Type,
    overload,
)

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)
from cloudcoil.resources import Resource, ResourceList


class MatchCondition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchCondition"]:
            return MatchCondition

        def build(self) -> "MatchCondition":
            return MatchCondition(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

            'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
              See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
              request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

            Required.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

            Required.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["MatchCondition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchCondition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchCondition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchCondition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchCondition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

    'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
      See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
      request resource.
    Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

    Required.
    """
    name: str
    """
    Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

    Required.
    """


class RuleWithOperations(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["RuleWithOperations"]:
            return RuleWithOperations

        def build(self) -> "RuleWithOperations":
            return RuleWithOperations(**self._attrs)

        def api_groups(self, value: Optional[List[str]], /) -> Self:
            """
            APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
            """
            return self._set("api_groups", value)

        def api_versions(self, value: Optional[List[str]], /) -> Self:
            """
            APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
            """
            return self._set("api_versions", value)

        def operations(self, value: Optional[List[str]], /) -> Self:
            """
            Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
            """
            return self._set("operations", value)

        def resources(self, value: Optional[List[str]], /) -> Self:
            """
            Resources is a list of resources this rule applies to.

            For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.

            If wildcard is present, the validation rule will ensure resources do not overlap with each other.

            Depending on the enclosing object, subresources might not be allowed. Required.
            """
            return self._set("resources", value)

        def scope(self, value: Optional[str], /) -> Self:
            """
            scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
            """
            return self._set("scope", value)

    class BuilderContext(BuilderContextBase["RuleWithOperations.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = RuleWithOperations.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for RuleWithOperations."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["RuleWithOperations", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use RuleWithOperations.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_groups: Annotated[Optional[List[str]], Field(alias="apiGroups")] = None
    """
    APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
    """
    api_versions: Annotated[Optional[List[str]], Field(alias="apiVersions")] = None
    """
    APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
    """
    operations: Optional[List[str]] = None
    """
    Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
    """
    resources: Optional[List[str]] = None
    """
    Resources is a list of resources this rule applies to.

    For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.

    If wildcard is present, the validation rule will ensure resources do not overlap with each other.

    Depending on the enclosing object, subresources might not be allowed. Required.
    """
    scope: Optional[str] = None
    """
    scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
    """


class ServiceReference(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ServiceReference"]:
            return ServiceReference

        def build(self) -> "ServiceReference":
            return ServiceReference(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            `name` is the name of the service. Required
            """
            return self._set("name", value)

        def namespace(self, value: str, /) -> Self:
            """
            `namespace` is the namespace of the service. Required
            """
            return self._set("namespace", value)

        def path(self, value: Optional[str], /) -> Self:
            """
            `path` is an optional URL path which will be sent in any request to this service.
            """
            return self._set("path", value)

        def port(self, value: Optional[int], /) -> Self:
            """
            If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
            """
            return self._set("port", value)

    class BuilderContext(BuilderContextBase["ServiceReference.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ServiceReference.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ServiceReference."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ServiceReference", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ServiceReference.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    `name` is the name of the service. Required
    """
    namespace: str
    """
    `namespace` is the namespace of the service. Required
    """
    path: Optional[str] = None
    """
    `path` is an optional URL path which will be sent in any request to this service.
    """
    port: Optional[int] = None
    """
    If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
    """


class WebhookClientConfig(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["WebhookClientConfig"]:
            return WebhookClientConfig

        def build(self) -> "WebhookClientConfig":
            return WebhookClientConfig(**self._attrs)

        def ca_bundle(self, value: Optional[str], /) -> Self:
            """
            `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
            """
            return self._set("ca_bundle", value)

        @overload
        def service(
            self, value_or_callback: Optional[ServiceReference], /
        ) -> "WebhookClientConfig.Builder": ...

        @overload
        def service(
            self,
            value_or_callback: Callable[
                [ServiceReference.Builder], ServiceReference.Builder | ServiceReference
            ],
            /,
        ) -> "WebhookClientConfig.Builder": ...

        @overload
        def service(self, value_or_callback: Never = ...) -> "ServiceReference.BuilderContext": ...

        def service(self, value_or_callback=None, /):
            """
            `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.

            If the webhook is running within the cluster, then you should use `service`.
            """
            if self._in_context and value_or_callback is None:
                context = ServiceReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "service"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ServiceReference.builder())
                if isinstance(output, ServiceReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("service", value)

        def url(self, value: Optional[str], /) -> Self:
            """
            `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.

            The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.

            Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.

            The scheme must be "https"; the URL must begin with "https://".

            A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.

            Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
            """
            return self._set("url", value)

    class BuilderContext(BuilderContextBase["WebhookClientConfig.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = WebhookClientConfig.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for WebhookClientConfig."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["WebhookClientConfig", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use WebhookClientConfig.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ca_bundle: Annotated[Optional[str], Field(alias="caBundle")] = None
    """
    `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
    """
    service: Optional[ServiceReference] = None
    """
    `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.

    If the webhook is running within the cluster, then you should use `service`.
    """
    url: Optional[str] = None
    """
    `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.

    The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.

    Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.

    The scheme must be "https"; the URL must begin with "https://".

    A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.

    Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
    """


class MutatingWebhook(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MutatingWebhook"]:
            return MutatingWebhook

        def build(self) -> "MutatingWebhook":
            return MutatingWebhook(**self._attrs)

        def admission_review_versions(self, value: List[str], /) -> Self:
            """
            AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
            """
            return self._set("admission_review_versions", value)

        @overload
        def client_config(
            self, value_or_callback: WebhookClientConfig, /
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def client_config(
            self,
            value_or_callback: Callable[
                [WebhookClientConfig.Builder],
                WebhookClientConfig.Builder | WebhookClientConfig,
            ],
            /,
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def client_config(
            self, value_or_callback: Never = ...
        ) -> "WebhookClientConfig.BuilderContext": ...

        def client_config(self, value_or_callback=None, /):
            """
            ClientConfig defines how to communicate with the hook. Required
            """
            if self._in_context and value_or_callback is None:
                context = WebhookClientConfig.BuilderContext()
                context._parent_builder = self
                context._field_name = "client_config"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(WebhookClientConfig.builder())
                if isinstance(output, WebhookClientConfig.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("client_config", value)

        def failure_policy(self, value: Optional[str], /) -> Self:
            """
            FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
            """
            return self._set("failure_policy", value)

        @overload
        def match_conditions(
            self, value_or_callback: List[MatchCondition], /
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def match_conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[MatchCondition, MatchCondition.Builder]],
                GenericListBuilder[MatchCondition, MatchCondition.Builder] | List[MatchCondition],
            ],
            /,
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def match_conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[MatchCondition.Builder]: ...

        def match_conditions(self, value_or_callback=None, /):
            """
            MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.

            The exact matching logic is (in order):
              1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
              2. If ALL matchConditions evaluate to TRUE, the webhook is called.
              3. If any matchCondition evaluates to an error (but none are FALSE):
                 - If failurePolicy=Fail, reject the request
                 - If failurePolicy=Ignore, the error is ignored and the webhook is skipped

            This is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[MatchCondition.Builder]()
                context._parent_builder = self
                context._field_name = "match_conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchCondition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_conditions", value)

        def match_policy(self, value: Optional[str], /) -> Self:
            """
            matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".

            - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.

            - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.

            Defaults to "Equivalent"
            """
            return self._set("match_policy", value)

        def name(self, value: str, /) -> Self:
            """
            The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
            """
            return self._set("name", value)

        @overload
        def namespace_selector(
            self, value_or_callback: Optional[apimachinery.LabelSelector], /
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def namespace_selector(
            self,
            value_or_callback: Callable[
                [apimachinery.LabelSelector.Builder],
                apimachinery.LabelSelector.Builder | apimachinery.LabelSelector,
            ],
            /,
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def namespace_selector(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.LabelSelector.BuilderContext": ...

        def namespace_selector(self, value_or_callback=None, /):
            """
            NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.

            For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
              "matchExpressions": [
                {
                  "key": "runlevel",
                  "operator": "NotIn",
                  "values": [
                    "0",
                    "1"
                  ]
                }
              ]
            }

            If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
              "matchExpressions": [
                {
                  "key": "environment",
                  "operator": "In",
                  "values": [
                    "prod",
                    "staging"
                  ]
                }
              ]
            }

            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.

            Default to the empty LabelSelector, which matches everything.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.LabelSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "namespace_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.LabelSelector.builder())
                if isinstance(output, apimachinery.LabelSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("namespace_selector", value)

        @overload
        def object_selector(
            self, value_or_callback: Optional[apimachinery.LabelSelector], /
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def object_selector(
            self,
            value_or_callback: Callable[
                [apimachinery.LabelSelector.Builder],
                apimachinery.LabelSelector.Builder | apimachinery.LabelSelector,
            ],
            /,
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def object_selector(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.LabelSelector.BuilderContext": ...

        def object_selector(self, value_or_callback=None, /):
            """
            ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.LabelSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "object_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.LabelSelector.builder())
                if isinstance(output, apimachinery.LabelSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("object_selector", value)

        def reinvocation_policy(self, value: Optional[str], /) -> Self:
            """
            reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".

            Never: the webhook will not be called more than once in a single admission evaluation.

            IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.

            Defaults to "Never".
            """
            return self._set("reinvocation_policy", value)

        @overload
        def rules(
            self, value_or_callback: List[RuleWithOperations], /
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def rules(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[RuleWithOperations, RuleWithOperations.Builder]],
                GenericListBuilder[RuleWithOperations, RuleWithOperations.Builder]
                | List[RuleWithOperations],
            ],
            /,
        ) -> "MutatingWebhook.Builder": ...

        @overload
        def rules(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[RuleWithOperations.Builder]: ...

        def rules(self, value_or_callback=None, /):
            """
            Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[RuleWithOperations.Builder]()
                context._parent_builder = self
                context._field_name = "rules"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(RuleWithOperations.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("rules", value)

        def side_effects(self, value: str, /) -> Self:
            """
            SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
            """
            return self._set("side_effects", value)

        def timeout_seconds(self, value: Optional[int], /) -> Self:
            """
            TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
            """
            return self._set("timeout_seconds", value)

    class BuilderContext(BuilderContextBase["MutatingWebhook.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MutatingWebhook.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MutatingWebhook."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MutatingWebhook", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MutatingWebhook.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    admission_review_versions: Annotated[List[str], Field(alias="admissionReviewVersions")]
    """
    AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
    """
    client_config: Annotated[WebhookClientConfig, Field(alias="clientConfig")]
    """
    ClientConfig defines how to communicate with the hook. Required
    """
    failure_policy: Annotated[Optional[str], Field(alias="failurePolicy")] = None
    """
    FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
    """
    match_conditions: Annotated[Optional[List[MatchCondition]], Field(alias="matchConditions")] = (
        None
    )
    """
    MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.

    The exact matching logic is (in order):
      1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
      2. If ALL matchConditions evaluate to TRUE, the webhook is called.
      3. If any matchCondition evaluates to an error (but none are FALSE):
         - If failurePolicy=Fail, reject the request
         - If failurePolicy=Ignore, the error is ignored and the webhook is skipped

    This is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.
    """
    match_policy: Annotated[Optional[str], Field(alias="matchPolicy")] = None
    """
    matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".

    - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.

    - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.

    Defaults to "Equivalent"
    """
    name: str
    """
    The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
    """
    namespace_selector: Annotated[
        Optional[apimachinery.LabelSelector], Field(alias="namespaceSelector")
    ] = None
    """
    NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.

    For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
      "matchExpressions": [
        {
          "key": "runlevel",
          "operator": "NotIn",
          "values": [
            "0",
            "1"
          ]
        }
      ]
    }

    If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
      "matchExpressions": [
        {
          "key": "environment",
          "operator": "In",
          "values": [
            "prod",
            "staging"
          ]
        }
      ]
    }

    See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.

    Default to the empty LabelSelector, which matches everything.
    """
    object_selector: Annotated[
        Optional[apimachinery.LabelSelector], Field(alias="objectSelector")
    ] = None
    """
    ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
    """
    reinvocation_policy: Annotated[Optional[str], Field(alias="reinvocationPolicy")] = None
    """
    reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".

    Never: the webhook will not be called more than once in a single admission evaluation.

    IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.

    Defaults to "Never".
    """
    rules: Optional[List[RuleWithOperations]] = None
    """
    Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
    """
    side_effects: Annotated[str, Field(alias="sideEffects")]
    """
    SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
    """
    timeout_seconds: Annotated[Optional[int], Field(alias="timeoutSeconds")] = None
    """
    TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
    """


class MutatingWebhookConfiguration(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MutatingWebhookConfiguration"]:
            return MutatingWebhookConfiguration

        def build(self) -> "MutatingWebhookConfiguration":
            return MutatingWebhookConfiguration(**self._attrs)

        def api_version(
            self, value: Optional[Literal["admissionregistration.k8s.io/v1"]], /
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["MutatingWebhookConfiguration"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "MutatingWebhookConfiguration.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "MutatingWebhookConfiguration.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            """
            Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def webhooks(
            self, value_or_callback: List[MutatingWebhook], /
        ) -> "MutatingWebhookConfiguration.Builder": ...

        @overload
        def webhooks(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[MutatingWebhook, MutatingWebhook.Builder]],
                GenericListBuilder[MutatingWebhook, MutatingWebhook.Builder]
                | List[MutatingWebhook],
            ],
            /,
        ) -> "MutatingWebhookConfiguration.Builder": ...

        @overload
        def webhooks(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[MutatingWebhook.Builder]: ...

        def webhooks(self, value_or_callback=None, /):
            """
            Webhooks is a list of webhooks and the affected resources and operations.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[MutatingWebhook.Builder]()
                context._parent_builder = self
                context._field_name = "webhooks"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MutatingWebhook.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("webhooks", value)

    class BuilderContext(BuilderContextBase["MutatingWebhookConfiguration.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MutatingWebhookConfiguration.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MutatingWebhookConfiguration."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MutatingWebhookConfiguration", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MutatingWebhookConfiguration.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["admissionregistration.k8s.io/v1"]], Field(alias="apiVersion")
    ] = "admissionregistration.k8s.io/v1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["MutatingWebhookConfiguration"]] = "MutatingWebhookConfiguration"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    """
    Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    """
    webhooks: Optional[List[MutatingWebhook]] = None
    """
    Webhooks is a list of webhooks and the affected resources and operations.
    """


MutatingWebhookConfigurationList = ResourceList["MutatingWebhookConfiguration"]


class ValidatingWebhook(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidatingWebhook"]:
            return ValidatingWebhook

        def build(self) -> "ValidatingWebhook":
            return ValidatingWebhook(**self._attrs)

        def admission_review_versions(self, value: List[str], /) -> Self:
            """
            AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
            """
            return self._set("admission_review_versions", value)

        @overload
        def client_config(
            self, value_or_callback: WebhookClientConfig, /
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def client_config(
            self,
            value_or_callback: Callable[
                [WebhookClientConfig.Builder],
                WebhookClientConfig.Builder | WebhookClientConfig,
            ],
            /,
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def client_config(
            self, value_or_callback: Never = ...
        ) -> "WebhookClientConfig.BuilderContext": ...

        def client_config(self, value_or_callback=None, /):
            """
            ClientConfig defines how to communicate with the hook. Required
            """
            if self._in_context and value_or_callback is None:
                context = WebhookClientConfig.BuilderContext()
                context._parent_builder = self
                context._field_name = "client_config"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(WebhookClientConfig.builder())
                if isinstance(output, WebhookClientConfig.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("client_config", value)

        def failure_policy(self, value: Optional[str], /) -> Self:
            """
            FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
            """
            return self._set("failure_policy", value)

        @overload
        def match_conditions(
            self, value_or_callback: List[MatchCondition], /
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def match_conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[MatchCondition, MatchCondition.Builder]],
                GenericListBuilder[MatchCondition, MatchCondition.Builder] | List[MatchCondition],
            ],
            /,
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def match_conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[MatchCondition.Builder]: ...

        def match_conditions(self, value_or_callback=None, /):
            """
            MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.

            The exact matching logic is (in order):
              1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
              2. If ALL matchConditions evaluate to TRUE, the webhook is called.
              3. If any matchCondition evaluates to an error (but none are FALSE):
                 - If failurePolicy=Fail, reject the request
                 - If failurePolicy=Ignore, the error is ignored and the webhook is skipped

            This is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[MatchCondition.Builder]()
                context._parent_builder = self
                context._field_name = "match_conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchCondition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_conditions", value)

        def match_policy(self, value: Optional[str], /) -> Self:
            """
            matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".

            - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.

            - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.

            Defaults to "Equivalent"
            """
            return self._set("match_policy", value)

        def name(self, value: str, /) -> Self:
            """
            The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
            """
            return self._set("name", value)

        @overload
        def namespace_selector(
            self, value_or_callback: Optional[apimachinery.LabelSelector], /
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def namespace_selector(
            self,
            value_or_callback: Callable[
                [apimachinery.LabelSelector.Builder],
                apimachinery.LabelSelector.Builder | apimachinery.LabelSelector,
            ],
            /,
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def namespace_selector(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.LabelSelector.BuilderContext": ...

        def namespace_selector(self, value_or_callback=None, /):
            """
            NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.

            For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
              "matchExpressions": [
                {
                  "key": "runlevel",
                  "operator": "NotIn",
                  "values": [
                    "0",
                    "1"
                  ]
                }
              ]
            }

            If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
              "matchExpressions": [
                {
                  "key": "environment",
                  "operator": "In",
                  "values": [
                    "prod",
                    "staging"
                  ]
                }
              ]
            }

            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.

            Default to the empty LabelSelector, which matches everything.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.LabelSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "namespace_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.LabelSelector.builder())
                if isinstance(output, apimachinery.LabelSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("namespace_selector", value)

        @overload
        def object_selector(
            self, value_or_callback: Optional[apimachinery.LabelSelector], /
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def object_selector(
            self,
            value_or_callback: Callable[
                [apimachinery.LabelSelector.Builder],
                apimachinery.LabelSelector.Builder | apimachinery.LabelSelector,
            ],
            /,
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def object_selector(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.LabelSelector.BuilderContext": ...

        def object_selector(self, value_or_callback=None, /):
            """
            ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.LabelSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "object_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.LabelSelector.builder())
                if isinstance(output, apimachinery.LabelSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("object_selector", value)

        @overload
        def rules(
            self, value_or_callback: List[RuleWithOperations], /
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def rules(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[RuleWithOperations, RuleWithOperations.Builder]],
                GenericListBuilder[RuleWithOperations, RuleWithOperations.Builder]
                | List[RuleWithOperations],
            ],
            /,
        ) -> "ValidatingWebhook.Builder": ...

        @overload
        def rules(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[RuleWithOperations.Builder]: ...

        def rules(self, value_or_callback=None, /):
            """
            Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[RuleWithOperations.Builder]()
                context._parent_builder = self
                context._field_name = "rules"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(RuleWithOperations.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("rules", value)

        def side_effects(self, value: str, /) -> Self:
            """
            SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
            """
            return self._set("side_effects", value)

        def timeout_seconds(self, value: Optional[int], /) -> Self:
            """
            TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
            """
            return self._set("timeout_seconds", value)

    class BuilderContext(BuilderContextBase["ValidatingWebhook.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidatingWebhook.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidatingWebhook."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidatingWebhook", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidatingWebhook.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    admission_review_versions: Annotated[List[str], Field(alias="admissionReviewVersions")]
    """
    AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
    """
    client_config: Annotated[WebhookClientConfig, Field(alias="clientConfig")]
    """
    ClientConfig defines how to communicate with the hook. Required
    """
    failure_policy: Annotated[Optional[str], Field(alias="failurePolicy")] = None
    """
    FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
    """
    match_conditions: Annotated[Optional[List[MatchCondition]], Field(alias="matchConditions")] = (
        None
    )
    """
    MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.

    The exact matching logic is (in order):
      1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
      2. If ALL matchConditions evaluate to TRUE, the webhook is called.
      3. If any matchCondition evaluates to an error (but none are FALSE):
         - If failurePolicy=Fail, reject the request
         - If failurePolicy=Ignore, the error is ignored and the webhook is skipped

    This is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.
    """
    match_policy: Annotated[Optional[str], Field(alias="matchPolicy")] = None
    """
    matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".

    - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.

    - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.

    Defaults to "Equivalent"
    """
    name: str
    """
    The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
    """
    namespace_selector: Annotated[
        Optional[apimachinery.LabelSelector], Field(alias="namespaceSelector")
    ] = None
    """
    NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.

    For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
      "matchExpressions": [
        {
          "key": "runlevel",
          "operator": "NotIn",
          "values": [
            "0",
            "1"
          ]
        }
      ]
    }

    If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
      "matchExpressions": [
        {
          "key": "environment",
          "operator": "In",
          "values": [
            "prod",
            "staging"
          ]
        }
      ]
    }

    See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.

    Default to the empty LabelSelector, which matches everything.
    """
    object_selector: Annotated[
        Optional[apimachinery.LabelSelector], Field(alias="objectSelector")
    ] = None
    """
    ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
    """
    rules: Optional[List[RuleWithOperations]] = None
    """
    Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
    """
    side_effects: Annotated[str, Field(alias="sideEffects")]
    """
    SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
    """
    timeout_seconds: Annotated[Optional[int], Field(alias="timeoutSeconds")] = None
    """
    TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
    """


class ValidatingWebhookConfiguration(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidatingWebhookConfiguration"]:
            return ValidatingWebhookConfiguration

        def build(self) -> "ValidatingWebhookConfiguration":
            return ValidatingWebhookConfiguration(**self._attrs)

        def api_version(
            self, value: Optional[Literal["admissionregistration.k8s.io/v1"]], /
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ValidatingWebhookConfiguration"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "ValidatingWebhookConfiguration.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "ValidatingWebhookConfiguration.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            """
            Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            """
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def webhooks(
            self, value_or_callback: List[ValidatingWebhook], /
        ) -> "ValidatingWebhookConfiguration.Builder": ...

        @overload
        def webhooks(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ValidatingWebhook, ValidatingWebhook.Builder]],
                GenericListBuilder[ValidatingWebhook, ValidatingWebhook.Builder]
                | List[ValidatingWebhook],
            ],
            /,
        ) -> "ValidatingWebhookConfiguration.Builder": ...

        @overload
        def webhooks(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ValidatingWebhook.Builder]: ...

        def webhooks(self, value_or_callback=None, /):
            """
            Webhooks is a list of webhooks and the affected resources and operations.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ValidatingWebhook.Builder]()
                context._parent_builder = self
                context._field_name = "webhooks"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidatingWebhook.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("webhooks", value)

    class BuilderContext(BuilderContextBase["ValidatingWebhookConfiguration.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidatingWebhookConfiguration.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidatingWebhookConfiguration."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidatingWebhookConfiguration", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidatingWebhookConfiguration.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["admissionregistration.k8s.io/v1"]], Field(alias="apiVersion")
    ] = "admissionregistration.k8s.io/v1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["ValidatingWebhookConfiguration"]] = "ValidatingWebhookConfiguration"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    """
    Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    """
    webhooks: Optional[List[ValidatingWebhook]] = None
    """
    Webhooks is a list of webhooks and the affected resources and operations.
    """


ValidatingWebhookConfigurationList = ResourceList["ValidatingWebhookConfiguration"]
